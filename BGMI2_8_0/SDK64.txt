Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10]
	FString StreamingLevelsPrefix;//[Offset: 0x98, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xa8, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xb0, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xb8, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xc0, Size: 0x8]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0xc8, Size: 0xb8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x188, Size: 0x8]
	Object*[] SyncPreLoadSet;//[Offset: 0x190, Size: 0x10]
	NavigationSystem* NavigationSystem;//[Offset: 0x1c8, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x1d0, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x1d8, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x1e0, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x1e8, Size: 0x8]
	Level*[] Levels;//[Offset: 0x1f0, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x200, Size: 0x10]
	Level* CurrentLevel;//[Offset: 0x218, Size: 0x8]
	GameInstance* OwningGameInstance;//[Offset: 0x220, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x228, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x238, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x240, Size: 0x8]
	WorldComposition* WorldComposition;//[Offset: 0x998, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9ea, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: Level.Object
	World* OwningWorld;//[Offset: 0xc0, Size: 0x8]
	Model* Model;//[Offset: 0xc8, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xd0, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xe0, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe8, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xec, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf8, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0x100, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x108, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x118, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x11c, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x120, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x130, Size: 0x10]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	Guid LevelBuildDataId;//[Offset: 0x324, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x338, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x340, Size: 0xc]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34c, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34c, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34c, Size: 0x1]
	int HighDeviceMemoryTotalSize;//[Offset: 0x3b8, Size: 0x4]
	int LowDeviceMemoryTotalSize;//[Offset: 0x3bc, Size: 0x4]
	WorldSettings* WorldSettings;//[Offset: 0x400, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x410, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: Model.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x788, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x2d8, Size: 0x4]
	float MinDrawDistance;//[Offset: 0x2dc, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x2e0, Size: 0x4]
	float MaxDrawDistanceOffset;//[Offset: 0x2e4, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x2e8, Size: 0x4]
	bool UseScopeDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1]
	byte DepthPriorityGroup;//[Offset: 0x2ed, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2ee, Size: 0x1]
	enum LightmapType;//[Offset: 0x2ef, Size: 0x1]
	bool bForceInjectToHierarchicalSurfel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 0x1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f0, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f0, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f0, Size: 0x1]
	bool bAsyncGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f1, Size: 0x1]
	bool bGenerateOverlapEventsByBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f1, Size: 0x1]
	bool bGenerateOverlapEventsByRoot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f1, Size: 0x1]
	bool bGenerateOverlapEventsByBoundsDoubleCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f1, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f1, Size: 0x1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f1, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f1, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f1, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f2, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f2, Size: 0x1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f2, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f2, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f2, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f2, Size: 0x1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f2, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f2, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f3, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f3, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f3, Size: 0x1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f3, Size: 0x1]
	bool bIdeaOutlineUseNormalInVertexColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f3, Size: 0x1]
	bool bIdeaOutlineNew;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f3, Size: 0x1]
	bool bIdeaOutlineOcclusionHighlight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f3, Size: 0x1]
	bool bIdeaOverrideOutlineAndOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f3, Size: 0x1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 0x1]
	LinearColor IdeaOutlineColor;//[Offset: 0x2f8, Size: 0x10]
	LinearColor IdeaOutlineOcclusionColor;//[Offset: 0x308, Size: 0x10]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1]
	float IdeaOutlineThickness;//[Offset: 0x31c, Size: 0x4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	enum DrawDyeingMode;//[Offset: 0x321, Size: 0x1]
	LinearColor VisibleDyeingColor;//[Offset: 0x324, Size: 0x10]
	LinearColor OccludedDyeingColor;//[Offset: 0x334, Size: 0x10]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1]
	bool bEnableTransparentZWrite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x344, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x344, Size: 0x1]
	bool bOnlyAsOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x344, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x344, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x344, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x344, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x345, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x345, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x345, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x345, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x345, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x345, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x345, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x345, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x346, Size: 0x1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x346, Size: 0x1]
	bool bNearCascade;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x346, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x346, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x346, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x346, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x346, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x346, Size: 0x1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x347, Size: 0x1]
	bool bReceiveLandscapeShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x347, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x347, Size: 0x1]
	bool bRestorePhysicsState;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x347, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x347, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x347, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x347, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x347, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x349, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x34b, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x34c, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x34d, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x350, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x354, Size: 0x4]
	int TranslucencySortGroupPriority;//[Offset: 0x358, Size: 0x4]
	int VisibilityId;//[Offset: 0x35c, Size: 0x4]
	byte PrimitiveShadingStrategy;//[Offset: 0x364, Size: 0x1]
	byte ShadingRate;//[Offset: 0x365, Size: 0x1]
	float FOVAdaptiveShadingFactor;//[Offset: 0x368, Size: 0x4]
	bool bUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36c, Size: 0x1]
	bool bAffectAO;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x36c, Size: 0x1]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x374, Size: 0x4]
	float BoundsScale;//[Offset: 0x37c, Size: 0x4]
	float OCBoundsScale;//[Offset: 0x380, Size: 0x4]
	int OCBoundsExtent;//[Offset: 0x384, Size: 0x4]
	float LastSubmitTime;//[Offset: 0x388, Size: 0x4]
	float LastRenderTime;//[Offset: 0x38c, Size: 0x4]
	float LastRenderTimeOnScreen;//[Offset: 0x390, Size: 0x4]
	float ShadowLastRenderTime;//[Offset: 0x394, Size: 0x4]
	bool bFreezeMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398, Size: 0x1]
	Actor*[] MoveIgnoreActors;//[Offset: 0x3a0, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x3b0, Size: 0x10]
	MaterialInterface*[] LODDefault;//[Offset: 0x3d0, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x448, Size: 0x180]
	delegate OnComponentHit;//[Offset: 0x5c8, Size: 0x10]
	delegate OnComponentBeginOverlap;//[Offset: 0x5d8, Size: 0x10]
	delegate OnComponentEndOverlap;//[Offset: 0x5e8, Size: 0x10]
	delegate OnComponentWake;//[Offset: 0x5f8, Size: 0x10]
	delegate OnComponentSleep;//[Offset: 0x608, Size: 0x10]
	delegate OnBeginCursorOver;//[Offset: 0x628, Size: 0x10]
	delegate OnEndCursorOver;//[Offset: 0x638, Size: 0x10]
	delegate OnClicked;//[Offset: 0x648, Size: 0x10]
	delegate OnReleased;//[Offset: 0x658, Size: 0x10]
	delegate OnInputTouchBegin;//[Offset: 0x668, Size: 0x10]
	delegate OnInputTouchEnd;//[Offset: 0x678, Size: 0x10]
	delegate OnInputTouchEnter;//[Offset: 0x688, Size: 0x10]
	delegate OnInputTouchLeave;//[Offset: 0x698, Size: 0x10]
	<int,MaterialInterface*> LowLevelLODMaterial;//[Offset: 0x6c0, Size: 0x50]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x710, Size: 0x8]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x718, Size: 0x58]
	bool WasRecentlyRendered(float Tolerance);// 0x8e142e4
	void WakeRigidBody(FName BoneName);// 0x8e14260
	void WakeAllRigidBodies();// 0x8e14244
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x8e141b0
	void SetVisibleDyeingColor(out const LinearColor InColor);// 0x8e14128
	void SetUnderWater(bool bNewUnderWater);// 0x8e140a4
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x8e14028
	void SetTranslucentSortGroupPriority(int NewTranslucentSortGroupPriority);// 0x8e13fac
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x8e13f28
	void SetSimulatePhysics(bool bSimulate);// 0x8e13e9c
	void SetRenderInMono(bool bValue);// 0x8e13e18
	void SetRenderInMainPass(bool bValue);// 0x8e13d94
	void SetRenderCustomDepth(bool bValue);// 0x8e13d10
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x8e13c8c
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x8e13c08
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x8e13b04
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x8e139f4
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x8e138e4
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x8e137e0
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x8e136dc
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x8e135c4
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x8e134ac
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x8e13428
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x8e133a4
	void SetOccludedDyeingColor(out const LinearColor InColor);// 0x8e1331c
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x8e13290
	void SetMaterialByNameAsyncCallBack(FName MaterialSlotName, MaterialInterface* AssetPtr);// 0x8e1310c
	void SetMaterialByNameAsync(FName MaterialSlotName, FString MaterialPath);// 0x8e12f98
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x8e12edc
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x8e12e1c
	void SetMassScale(FName BoneName, float InMassScale);// 0x8e12d5c
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x8e12c58
	void SetMaskFilter(int InMaskFilter);// 0x8e12bdc
	void SetLODDefault(int LODIndex, MaterialInterface* LODMat);// 0x8e12b24
	void SetLockedAxis(byte LockedAxis);// 0x8e12aa0
	void SetLinearDamping(float InDamping);// 0x8e12a1c
	void SetIdeaOverrideOutlineAndOcclusion(bool bOutlineAndOcclusion);// 0x8e12998
	void SetIdeaOutlineUseNormalInVertexColor(bool bNewUseNormalInVertexColor);// 0x8e12914
	void SetIdeaOutlineOcclusionHighlight(bool bOcclusionHighlight);// 0x8e12890
	void SetIdeaOutlineOcclusionColor(out const LinearColor InOcclusionColor);// 0x8e12808
	void SetIdeaOutlineNew(bool bNew);// 0x8e12784
	void SetEnableGravity(bool bGravityEnabled);// 0x8e126f8
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x8e12674
	void SetDrawDyeingMode(enum InDrawDyeingMode);// 0x8e125f8
	void SetDrawDyeing(bool bNewDrawOutline);// 0x8e12574
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x8e124f8
	void SetCustomDepthStencilValue(int Value);// 0x8e1247c
	void SetCullDistance(float NewCullDistance);// 0x8e12400
	void SetConstraintMode(byte ConstraintMode);// 0x8e1237c
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x8e122bc
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x8e12238
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x8e121b4
	void SetCollisionObjectType(byte Channel);// 0x8e12130
	void SetCollisionEnabled(byte NewType);// 0x8e120ac
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x8e11ff4
	void SetCastShadow(bool NewCastShadow);// 0x8e11f68
	void SetCastPhotonShadow(bool bNewCastPhotonShadow);// 0x8e11ee4
	void SetBoundsScale(float NewBoundsScale);// 0x8e11e68
	void SetAngularDamping(float InDamping);// 0x8e11de4
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x8e11d1c
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x8e11c3c
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x8e11b38
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x8e11a58
	void SetAllMassScale(float InMassScale);// 0x8e119d4
	void SetAffectAO(bool bNewAffectAO);// 0x8e11950
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x8e1187c
	void PutRigidBodyToSleep(FName BoneName);// 0x8e11800
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x8e11738
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x8e11664
	void K2_SetMoveIgnoreMask(int InIgnoreMask);// 0x8e115ec
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x8e11308
	bool K2_IsQueryCollisionEnabled();// 0x8e112c0
	bool K2_IsPhysicsCollisionEnabled();// 0x8e11278
	bool K2_IsCollisionEnabled();// 0x8e11234
	int K2_GetMoveIgnoreMask();// 0x8e11218
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x8e11188
	bool IsOverlappingActor(const Actor* Other);// 0x8e110f8
	bool IsGravityEnabled();// 0x8e110b8
	bool IsAnyRigidBodyAwake();// 0x8e11078
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x8e10fb8
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x8e10ef8
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x8e10eb0
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x8e10de4
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x8e10d54
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x8e10cc4
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x8e10c20
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x8e10b7c
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x8e10ac4
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x8e109c0
	int GetNumMaterials();// 0x8e10984
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x8e108a4
	MaterialInterface* GetMaterialAsync(int ElementIndex, delegate MaterialCallback);// 0x8e107b4
	MaterialInterface* GetMaterial(int ElementIndex);// 0x8e10720
	float GetMassScale(FName BoneName);// 0x8e1068c
	float GetMass();// 0x8e10650
	int GetMaskFilter();// 0x8e10634
	Vector GetLocalCenterOfMass(FName BoneName);// 0x8e105a4
	float GetLinearDamping();// 0x8e10568
	Vector GetInertiaTensor(FName BoneName);// 0x8e104d0
	byte GetCollisionResponseToChannel(byte Channel);// 0x8e1043c
	FName GetCollisionProfileName();// 0x8e10408
	byte GetCollisionObjectType();// 0x8e103cc
	byte GetCollisionEnabled();// 0x8e10390
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x8e10264
	Vector GetCenterOfMass(FName BoneName);// 0x8e101d4
	float GetAngularDamping();// 0x8e10198
	void ForceRecoverMaterial(int ElementIndex);// 0x8e10114
	void ForceClearMaterial(int ElementIndex);// 0x8e10090
	MaterialInstanceDynamic* CreateDynamicMaterialInstanceAsync(int ElementIndex, delegate MaterialInstCallback, MaterialInterface* SourceMaterial);// 0x8e0ff64
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x8e0fe94
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterialAsync(int ElementIndex, MaterialInterface* Parent, delegate MaterialInstCallback);// 0x8e0fd68
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x8e0fc98
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicAsync(int ElementIndex, delegate MaterialInstCallback);// 0x8e0fba8
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x8e0fb14
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x8e0fa70
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x8e0f9cc
	void ClearMoveIgnoreComponents();// 0x8e0f9a0
	void ClearMoveIgnoreActors();// 0x8e0f98c
	bool CanCharacterStepUp(Pawn* Pawn);// 0x8e0f8f4
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x8e0f7f8
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x8e0f6e8
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x8e0f5ec
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x8e0f474
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x8e0f2fc
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x8e0f200
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x8e0f0fc
	void AddForceAtLocationLocal(Vector force, Vector Location, FName BoneName);// 0x8e0f000
	void AddForceAtLocation(Vector force, Vector Location, FName BoneName);// 0x8e0ef04
	void AddForce(Vector force, FName BoneName, bool bAccelChange);// 0x8e0ee00
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x8e0ecfc
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x8e0ebe4
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x8e0eae0
<----------Generated by SSpawner v1.0.4---------->


Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0x118, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0x120, Size: 0x8]
	FName AttachSocketName;//[Offset: 0x128, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0x130, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0x140, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x17c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x188, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x194, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x200, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 0x1]
	int AntiCheatRandValue0;//[Offset: 0x210, Size: 0x4]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 0x1]
	int AntiCheatRandValue1;//[Offset: 0x218, Size: 0x4]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 0x1]
	int AntiCheatRandValue2;//[Offset: 0x220, Size: 0x4]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 0x1]
	int AntiCheatRandValue3;//[Offset: 0x228, Size: 0x4]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 0x1]
	int AntiCheatRandValue4;//[Offset: 0x230, Size: 0x4]
	int AntiCheatRandValue5;//[Offset: 0x238, Size: 0x4]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	byte Mobility;//[Offset: 0x23d, Size: 0x1]
	int AntiCheatRandValue6;//[Offset: 0x240, Size: 0x4]
	byte DetailMode;//[Offset: 0x244, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x290, Size: 0x10]
	void ToggleVisibility(bool bPropagateToChildren);// 0x8e2f054
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x8e2ef8c
	void SetWorldScale3D(Vector NewScale);// 0x8e2ef10
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x8e2ee38
	void SetSkipUpdateChildTransforms(bool EnableSkipUpdateChildTransforms);// 0x8e2edb8
	void SetRelativeScale3D(Vector NewScale3D);// 0x8e2ed34
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x8e2ec60
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x8e2eb4c
	void ResetRelativeTransform();// 0x8e2eb38
	void OnRep_Visibility(bool OldValue);// 0x8e2eab4
	void OnRep_Transform();// 0x8e2eaa0
	void OnRep_AttachSocketName();// 0x8e2ea8c
	void OnRep_AttachParent();// 0x8e2ea78
	void OnRep_AttachChildren();// 0x8e2ea64
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2e884
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2e6d8
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2e4f0
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2e344
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2e164
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2dfb8
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2ddd0
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2dc24
	Transform K2_GetComponentToWorld();// 0x8e2dbd0
	Vector K2_GetComponentScale();// 0x8e2db98
	Rotator K2_GetComponentRotation();// 0x8e2db60
	Vector K2_GetComponentLocation();// 0x8e2db28
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x8e2d9f0
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x8e2d830
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x8e2d6e8
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2d508
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2d35c
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2d1b0
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2d004
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2ce58
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2cc78
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2cacc
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8e2c920
	bool IsVisible();// 0x8e2c8e0
	bool IsSimulatingPhysics(FName BoneName);// 0x8e2c848
	bool IsAnySimulatingPhysics();// 0x8e2c808
	Vector GetUpVector();// 0x8e2c7d0
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x8e2c6e8
	Rotator GetSocketRotation(FName InSocketName);// 0x8e2c650
	Quat GetSocketQuaternion(FName InSocketName);// 0x8e2c5b4
	Vector GetSocketLocation(FName InSocketName);// 0x8e2c51c
	Vector GetRightVector();// 0x8e2c4e4
	Transform GetRelativeTransform();// 0x8e2c490
	PhysicsVolume* GetPhysicsVolume();// 0x8e2c45c
	void GetParentComponents(out SceneComponent*[] Parents);// 0x8e2c3a4
	int GetNumChildrenComponents();// 0x8e2c370
	Vector GetForwardVector();// 0x8e2c338
	Vector GetComponentVelocity();// 0x8e2c2f8
	Transform GetComponentTransformViewTranslatedBP();// 0x8e2c2d4
	Transform GetComponentLocal(out const Transform LocalTransform);// 0x8e2c208
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x8e2c100
	SceneComponent* GetChildComponent(int ChildIndex);// 0x8e2c074
	FName GetAttachSocketName();// 0x8e2c058
	SceneComponent* GetAttachParent();// 0x8e2c03c
	FName[] GetAllSocketNames();// 0x8e2bf98
	bool DoesSocketExist(FName InSocketName);// 0x8e2bf00
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x8e2be28
<----------Generated by SSpawner v1.0.4---------->


Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x58]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	FName[] ComponentTags;//[Offset: 0x90, Size: 0x10]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bFastCreation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa1, Size: 0x1]
	bool bCallPreReplication;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa1, Size: 0x1]
	float NetUpdateFrequency;//[Offset: 0xa4, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0xb0, Size: 0x10]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc2, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc4, Size: 0x1]
	bool bIsClientOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc4, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc4, Size: 0x1]
	enum CreationMethod;//[Offset: 0xc6, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0xc8, Size: 0x10]
	delegate OnComponentActivated;//[Offset: 0xe0, Size: 0x10]
	delegate OnComponentDeactivated;//[Offset: 0xf0, Size: 0x10]
	void ToggleActive();// 0x8c6a444
	void SetTickGroup(byte NewTickGroup);// 0x8c6a3c8
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x8c6a344
	void SetIsReplicated(bool ShouldReplicate);// 0x8c6a2c0
	void SetComponentTickInterval(float TickInterval);// 0x8c6a244
	void SetComponentTickEnabled(bool bEnabled);// 0x8c6a1b8
	void SetAutoActivate(bool bNewAutoActivate);// 0x8c6a12c
	void SetActive(bool bNewActive, bool bReset);// 0x8c6a054
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x8c69fd0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x8c69f4c
	void ReceiveTick(float DeltaSeconds);// 0x70644c4
	void ReceiveEndPlay(byte EndPlayReason);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void OnRep_Replicates();// 0x8c69f38
	void OnRep_IsActive();// 0x8c69f24
	void K2_DestroyComponent(Object* Object);// 0x8c69ea8
	bool IsComponentTickEnabled();// 0x8c69e70
	bool IsBeingDestroyed();// 0x8c69e50
	bool IsActive();// 0x8c69e10
	Actor* GetOwner();// 0x8c69df4
	float GetComponentTickInterval();// 0x8c69dc0
	void ForceNetUpdate();// 0x8c69da4
	void Deactivate();// 0x8c69d88
	bool ComponentHasTag(FName Tag);// 0x8c69cf8
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x8c69c74
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x8c69bf0
	void Activate(bool bReset);// 0x8c69b64
<----------Generated by SSpawner v1.0.4---------->


Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x430, Size: 0x4]
	int Priority;//[Offset: 0x434, Size: 0x4]
	float FluidFriction;//[Offset: 0x438, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x43c, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: Volume.Brush.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x3f4, Size: 0x1]
	Color BrushColor;//[Offset: 0x3f8, Size: 0x4]
	int PolyFlags;//[Offset: 0x3fc, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x400, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x400, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x400, Size: 0x1]
	Model* Brush;//[Offset: 0x408, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x410, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x420, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x58]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	float CustomTimeDilation;//[Offset: 0x84, Size: 0x4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x88, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x88, Size: 0x1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x88, Size: 0x1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x88, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8a, Size: 0x1]
	byte RemoteRole;//[Offset: 0x8b, Size: 0x1]
	Actor* Owner;//[Offset: 0x90, Size: 0x8]
	byte WorldParallelismID;//[Offset: 0x98, Size: 0x1]
	FName NetDriverName;//[Offset: 0xa8, Size: 0x8]
	RepMovement ReplicatedMovement;//[Offset: 0xb0, Size: 0x50]
	float InitialLifeSpan;//[Offset: 0x100, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0x108, Size: 0x48]
	byte Role;//[Offset: 0x150, Size: 0x1]
	byte NetDormancy;//[Offset: 0x151, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0x152, Size: 0x1]
	int InputPriority;//[Offset: 0x154, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x158, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x160, Size: 0x4]
	int NetTag;//[Offset: 0x164, Size: 0x4]
	float NetConsiderFrequency;//[Offset: 0x16c, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x170, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x174, Size: 0x4]
	byte ActorReplicateFreqLODGroupID;//[Offset: 0x178, Size: 0x1]
	bool bLowRepFreqOptimizedNAK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x179, Size: 0x1]
	float NetPriority;//[Offset: 0x17c, Size: 0x4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x184, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x184, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x184, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x184, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x184, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x184, Size: 0x1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x184, Size: 0x1]
	bool bNetDormancyForReplay;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x184, Size: 0x1]
	bool bSkipComparePropertiesForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x185, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x185, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x185, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x185, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x185, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x186, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x186, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x187, Size: 0x1]
	Pawn* Instigator;//[Offset: 0x198, Size: 0x8]
	Actor*[] Children;//[Offset: 0x1a0, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x1b0, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x1b8, Size: 0x10]
	FName[] Layers;//[Offset: 0x1d0, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x1e0, Size: 0x8]
	FName[] Tags;//[Offset: 0x1e8, Size: 0x10]
	uint64 HiddenEditorViews;//[Offset: 0x1f8, Size: 0x8]
	delegate OnTakeAnyDamage;//[Offset: 0x200, Size: 0x10]
	delegate OnTakePointDamage;//[Offset: 0x210, Size: 0x10]
	delegate OnActorBeginOverlap;//[Offset: 0x220, Size: 0x10]
	delegate OnActorEndOverlap;//[Offset: 0x230, Size: 0x10]
	delegate OnBeginCursorOver;//[Offset: 0x240, Size: 0x10]
	delegate OnEndCursorOver;//[Offset: 0x250, Size: 0x10]
	delegate OnClicked;//[Offset: 0x260, Size: 0x10]
	delegate OnReleased;//[Offset: 0x270, Size: 0x10]
	delegate OnInputTouchBegin;//[Offset: 0x280, Size: 0x10]
	delegate OnInputTouchEnd;//[Offset: 0x290, Size: 0x10]
	delegate OnInputTouchEnter;//[Offset: 0x2a0, Size: 0x10]
	delegate OnInputTouchLeave;//[Offset: 0x2b0, Size: 0x10]
	delegate OnActorHit;//[Offset: 0x2c0, Size: 0x10]
	delegate OnDestroyed;//[Offset: 0x2d0, Size: 0x10]
	delegate OnEndPlay;//[Offset: 0x2e0, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x390, Size: 0x10]
	ActorComponent*[] InstanceComponents;//[Offset: 0x3a0, Size: 0x10]
	int ParallelWorldId;//[Offset: 0x3c8, Size: 0x4]
	bool bAlwaysRelevantToParallelWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 0x1]
	delegate OnActorEnterParallelWorld;//[Offset: 0x3d0, Size: 0x10]
	delegate OnActorLeaveParallelWorld;//[Offset: 0x3e0, Size: 0x10]
	int RealParallelWorldId;//[Offset: 0x3f0, Size: 0x4]
	bool WasRecentlyRendered(float Tolerance);// 0x8c664c8
	void UserConstructionScript();// 0x70644c4
	void TearOff();// 0x8c664ac
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x8c663f8
	void SetTickGroup(byte NewTickGroup);// 0x8c6637c
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x8c662f8
	void SetReplicates(bool bInReplicates);// 0x8c66274
	void SetReplicateMovement(bool bInReplicateMovement);// 0x8c661e8
	void SetParallelWorldId(int InWorldId, int Masks);// 0x8c66134
	void SetOwner(Actor* NewOwner);// 0x8c660b0
	void SetNetUpdateGroupID(byte InGroupID);// 0x8c6602c
	void SetNetUpdateGroup(Actor* InConnectionActor);// 0x8c65fa8
	void SetNetDormancy(byte NewDormancy);// 0x8c65f2c
	void SetLifeSpan(float InLifespan);// 0x8c65ea8
	void SetActorTickInterval(float TickInterval);// 0x8c65e2c
	void SetActorTickEnabled(bool bEnabled);// 0x8c65da8
	void SetActorScale3D(Vector NewScale3D);// 0x8c65d2c
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x8c65cb0
	void SetActorHiddenInGame(bool bNewHidden);// 0x8c65c24
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x8c65ba0
	void ResetParallelWorldId(int Masks);// 0x8c65b24
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x8c65aa0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x8c65a1c
	void ReceiveTick(float DeltaSeconds);// 0x70644c4
	void ReceiveReInitForReplay();// 0x70644c4
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x70644c4
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x70644c4
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x70644c4
	void ReceiveEndPlay(byte EndPlayReason);// 0x70644c4
	void ReceiveDestroyed();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x70644c4
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x70644c4
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x70644c4
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x70644c4
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x70644c4
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x70644c4
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x70644c4
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x70644c4
	void ReceiveActorEndCursorOver();// 0x70644c4
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x70644c4
	void ReceiveActorBeginCursorOver();// 0x70644c4
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x8c65910
	void OnRep_ReplicateMovement();// 0x8c658f4
	void OnRep_ReplicatedMovement();// 0x8c658d8
	void OnRep_Owner();// 0x8c658bc
	void OnRep_Instigator();// 0x8c658a0
	void OnRep_AttachmentReplication();// 0x8c65884
	void MarkNetDormancyForReplay(bool bInDormancyForReplay);// 0x8c65800
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x8c65694
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x8c65608
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x8c6553c
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8c65350
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x8c6527c
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8c6509c
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8c64ef0
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8c64d44
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8c64b48
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8c64988
	void K2_OnReset();// 0x70644c4
	void K2_OnEndViewTarget(PlayerController* PC);// 0x70644c4
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x70644c4
	SceneComponent* K2_GetRootComponent();// 0x8c6496c
	Rotator K2_GetActorRotation();// 0x8c648a0
	Vector K2_GetActorLocation();// 0x8c64808
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x8c64714
	void K2_DestroyComponent(ActorComponent* Component);// 0x8c64698
	void K2_DestroyActor();// 0x8c6467c
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x8c644d0
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x8c64324
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x8c641f0
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x8c640bc
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8c63edc
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8c63d30
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8c63b84
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8c639a4
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8c637f8
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x8c6364c
	bool IsOverlappingActor(const Actor* Other);// 0x8c635bc
	bool IsChildActor();// 0x8c63584
	bool IsActorTickEnabled();// 0x8c6354c
	bool IsActorBeingDestroyed();// 0x8c6352c
	bool HasAuthority();// 0x8c63508
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x8c6347c
	Vector GetVelocity();// 0x8c6343c
	Transform GetTransform();// 0x8c63400
	bool GetTickableWhenPaused();// 0x8c633c8
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x8c6333c
	byte GetRole();// 0x8c63308
	byte GetRemoteRole();// 0x8c632ec
	ChildActorComponent* GetParentComponent();// 0x8c632b8
	Actor* GetParentActor();// 0x8c63284
	int GetParallelWorldId();// 0x8c63250
	Actor* GetOwner();// 0x8c63234
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x8c6317c
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x8c63078
	byte GetLocalRole();// 0x8c6305c
	float GetLifeSpan();// 0x8c63020
	Controller* GetInstigatorController();// 0x8c62fec
	Pawn* GetInstigator();// 0x8c62fb8
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x8c62d68
	float GetInputAxisValue(const FName InputAxisName);// 0x8c62cdc
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x8c62a90
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x8c62a04
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x8c62978
	float GetGameTimeSinceCreation();// 0x8c62944
	float GetDotProductTo(const Actor* OtherActor);// 0x8c628b8
	float GetDistanceTo(const Actor* OtherActor);// 0x8c6282c
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x8c62700
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x8c6260c
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x8c62580
	FName GetAttachParentSocketName();// 0x8c6254c
	Actor* GetAttachParentActor();// 0x8c62518
	void GetAttachedActors(out Actor*[] OutActors);// 0x8c62460
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x8c62354
	Vector GetActorUpVector();// 0x8c62300
	float GetActorTimeDilation();// 0x8c622cc
	float GetActorTickInterval();// 0x8c62298
	Vector GetActorScale3D();// 0x8c62260
	Vector GetActorRightVector();// 0x8c6220c
	Vector GetActorRelativeScale3D();// 0x8c621d4
	Vector GetActorForwardVector();// 0x8c62180
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x8c6209c
	bool GetActorEnableCollision();// 0x8c6207c
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x8c61f5c
	void ForceNetUpdate();// 0x8c61f40
	void ForceNetConsider();// 0x8c61f24
	void FlushNetDormancy();// 0x8c61f10
	void EnableInput(PlayerController* PlayerController);// 0x8c61e8c
	void DisableInput(PlayerController* PlayerController);// 0x8c61e08
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x8c61d84
	bool BeenInParallelWorld();// 0x8c61d4c
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x8c61cc8
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x8c61c44
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x8c61ac8
	bool ActorHasTag(FName Tag);// 0x8c61a38
<----------Generated by SSpawner v1.0.4---------->


Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x770, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x778, Size: 0x8]
	Vector PrePivot;//[Offset: 0x780, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x48]
	FName BoneName;//[Offset: 0x70, Size: 0x8]
	byte PhysicsType;//[Offset: 0x78, Size: 0x1]
	bool bCustomizePhysicsBlendWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 0x1]
	float PhysicsBlendWeight;//[Offset: 0x7c, Size: 0x4]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x80, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x80, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	bool bUsedPhysSimpleStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x98, Size: 0x10]
	byte CollisionReponse;//[Offset: 0xa8, Size: 0x1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1]
	byte[] SphereCollisionEnabledList;//[Offset: 0xb0, Size: 0x10]
	byte[] CapsuleCollisionEnabledList;//[Offset: 0xc0, Size: 0x10]
	byte[] BoxCollisionEnabledList;//[Offset: 0xd0, Size: 0x10]
	byte[] ConvexCollisionEnabledList;//[Offset: 0xe0, Size: 0x10]
	byte[] TriMeshesCollisionEnabledList;//[Offset: 0xf0, Size: 0x10]
	byte CollisionTraceFlag;//[Offset: 0x100, Size: 0x1]
	BodyInstance DefaultInstance;//[Offset: 0x108, Size: 0x180]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x288, Size: 0x10]
	float BuildScale;//[Offset: 0x298, Size: 0x4]
	Vector BuildScale3D;//[Offset: 0x29c, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 0x40]
	Vector Center;//[Offset: 0x60, Size: 0xc]
	float Radius;//[Offset: 0x6c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: KShapeElem
<----------Generated by SSpawner v1.0.4---------->


Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 0x40]
	Quat Orientation;//[Offset: 0x60, Size: 0x10]
	Vector Center;//[Offset: 0x70, Size: 0xc]
	Rotator Rotation;//[Offset: 0x7c, Size: 0xc]
	float X;//[Offset: 0x88, Size: 0x4]
	float Y;//[Offset: 0x8c, Size: 0x4]
	float Z;//[Offset: 0x90, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 0x40]
	Quat Orientation;//[Offset: 0x60, Size: 0x10]
	Vector Center;//[Offset: 0x70, Size: 0xc]
	Rotator Rotation;//[Offset: 0x7c, Size: 0xc]
	float Radius;//[Offset: 0x88, Size: 0x4]
	float Length;//[Offset: 0x8c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x20, Size: 0x10]
	Box ElemBox;//[Offset: 0x30, Size: 0x1c]
	Transform Transform;//[Offset: 0x50, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x20, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	Color MaterialColor;//[Offset: 0x38, Size: 0x4]
	float Density;//[Offset: 0x3c, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x40, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x44, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PhysicalMaterialPropertyBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: StaticMesh.Object
	bool bHasROCData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	int MinLOD;//[Offset: 0x44, Size: 0x4]
	MaterialInterface*[] Materials;//[Offset: 0x48, Size: 0x10]
	StaticMaterial[] StaticMaterials;//[Offset: 0x58, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x68, Size: 0x4]
	int LightMapResolution;//[Offset: 0x6c, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x70, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x74, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x80, Size: 0x8]
	int LODForCollision;//[Offset: 0x88, Size: 0x4]
	float CullingScreenSize;//[Offset: 0x8c, Size: 0x4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bLazyLoadBulkData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93, Size: 0x1]
	bool bEnableTransparentRenderOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x95, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x95, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0xd8, Size: 0x4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0x118, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0x138, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x144, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x150, Size: 0x1c]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x170, Size: 0x10]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x180, Size: 0xc]
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1]
	bool bEnableMeshletCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d, Size: 0x1]
	ClusterNode_Mesh[] ClusterNodesTree;//[Offset: 0x190, Size: 0x10]
	int ElementToIgnoreForTexFactor;//[Offset: 0x1a0, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1a8, Size: 0x10]
	NavCollision* NavCollision;//[Offset: 0x1b8, Size: 0x8]
	int GetNumSections(int InLOD);// 0x8e5a5a0
	int GetNumLODs();// 0x8e5a56c
	int GetMaterialIndex(FName MaterialSlotName);// 0x8e5a4e0
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x8e5a454
	BoxSphereBounds GetBounds();// 0x8e5a408
	Box GetBoundingBox();// 0x8e5a3bc
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x30, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x48, Size: 0x14]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	void SetStreamingTextureMipOffset(int NewMipOffset, bool SizeLimited);// 0x8da81a0
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x8da8050
	PhysicalMaterial* GetPhysicalMaterial();// 0x8da8014
	Material* GetBaseMaterial();// 0x8da7fe0
<----------Generated by SSpawner v1.0.4---------->


Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x24]
<----------Generated by SSpawner v1.0.4---------->


Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float EmissiveBoost;//[Offset: 0x4, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x8, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 0x4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x78, Size: 0x8]
	ColorMaterialInput DiffuseColor;//[Offset: 0x80, Size: 0x40]
	ColorMaterialInput SpecularColor;//[Offset: 0xc0, Size: 0x40]
	ColorMaterialInput BaseColor;//[Offset: 0x100, Size: 0x40]
	ScalarMaterialInput Metallic;//[Offset: 0x140, Size: 0x40]
	ScalarMaterialInput Specular;//[Offset: 0x180, Size: 0x40]
	ScalarMaterialInput Roughness;//[Offset: 0x1c0, Size: 0x40]
	VectorMaterialInput Normal;//[Offset: 0x200, Size: 0x48]
	ColorMaterialInput EmissiveColor;//[Offset: 0x248, Size: 0x40]
	ScalarMaterialInput Opacity;//[Offset: 0x288, Size: 0x40]
	ScalarMaterialInput OpacityMask;//[Offset: 0x2c8, Size: 0x40]
	byte MaterialDomain;//[Offset: 0x308, Size: 0x1]
	byte BlendMode;//[Offset: 0x309, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x30a, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x30b, Size: 0x1]
	byte ShadingModel;//[Offset: 0x30c, Size: 0x1]
	byte ShadingRate;//[Offset: 0x30d, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x310, Size: 0x4]
	float VertexOffsetAlongNormal;//[Offset: 0x314, Size: 0x4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1]
	byte OITBlendMode;//[Offset: 0x319, Size: 0x1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x320, Size: 0x48]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x368, Size: 0x48]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x3b0, Size: 0x40]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x3f0, Size: 0x40]
	ScalarMaterialInput ClearCoat;//[Offset: 0x430, Size: 0x40]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x470, Size: 0x40]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x4b0, Size: 0x40]
	ScalarMaterialInput Refraction;//[Offset: 0x4f0, Size: 0x40]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x530, Size: 0x48]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x770, Size: 0x40]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x7b0, Size: 0x40]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x7f0, Size: 0x50]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x840, Size: 0x50]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x890, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x890, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x890, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x890, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x890, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x890, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x890, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x894, Size: 0x4]
	byte TranslucencyLightingMode;//[Offset: 0x898, Size: 0x1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x89c, Size: 0x4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a0, Size: 0x1]
	float TranslucentShadowDensityScale;//[Offset: 0x8a4, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x8a8, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x8ac, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x8b0, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x8b4, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x8b8, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x8c8, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cc, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cc, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cc, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cc, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cc, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cc, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cc, Size: 0x1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cc, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cd, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cd, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cd, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cd, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cd, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cd, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cd, Size: 0x1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cd, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ce, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8ce, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8ce, Size: 0x1]
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8ce, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8ce, Size: 0x1]
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8ce, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8ce, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8ce, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cf, Size: 0x1]
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cf, Size: 0x1]
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cf, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cf, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cf, Size: 0x1]
	bool bProcessInGammaSpace;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cf, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cf, Size: 0x1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cf, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d0, Size: 0x1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d0, Size: 0x1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d0, Size: 0x1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d0, Size: 0x1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d0, Size: 0x1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d0, Size: 0x1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d0, Size: 0x1]
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d0, Size: 0x1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d1, Size: 0x1]
	bool bShadowUseTentFilter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d1, Size: 0x1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d1, Size: 0x1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d1, Size: 0x1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d1, Size: 0x1]
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d1, Size: 0x1]
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d1, Size: 0x1]
	bool bUsedWithLandscapeShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d1, Size: 0x1]
	bool bUseLandscapeMultiLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d2, Size: 0x1]
	bool bUsedWithPhotonShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d2, Size: 0x1]
	bool bUsedWithPhotonShadowPCSS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d2, Size: 0x1]
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d2, Size: 0x1]
	byte ShadowOverride;//[Offset: 0x8d3, Size: 0x1]
	byte SimpleVertexNormalSituation;//[Offset: 0x8d4, Size: 0x1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d5, Size: 0x1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d5, Size: 0x1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d5, Size: 0x1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d5, Size: 0x1]
	bool bUseAsTranslucentEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d5, Size: 0x1]
	bool bLiteRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d5, Size: 0x1]
	bool bUseSimpleSkyLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d5, Size: 0x1]
	bool bACESOff;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d5, Size: 0x1]
	bool bEmissionOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d6, Size: 0x1]
	bool bInstL2WOnlyTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d6, Size: 0x1]
	bool bUseLiteFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d6, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d6, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d6, Size: 0x1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d6, Size: 0x1]
	bool bApplyFogInscattering;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d6, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d6, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x8d7, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d8, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d8, Size: 0x1]
	bool bUsedWithTexture2DArrayShaderVariant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d8, Size: 0x1]
	float MaxDisplacement;//[Offset: 0x8dc, Size: 0x4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e0, Size: 0x1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8e0, Size: 0x1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8e0, Size: 0x1]
	int EditorX;//[Offset: 0x8e4, Size: 0x4]
	int EditorY;//[Offset: 0x8e8, Size: 0x4]
	int EditorPitch;//[Offset: 0x8ec, Size: 0x4]
	int EditorYaw;//[Offset: 0x8f0, Size: 0x4]
	MaterialExpression*[] Expressions;//[Offset: 0x8f8, Size: 0x10]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x908, Size: 0x10]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x918, Size: 0x10]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x928, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x928, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x928, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x928, Size: 0x1]
	bool bClearCoatBottomIBLOptClose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x928, Size: 0x1]
	bool bUsedWithMobileTAA;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x928, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x928, Size: 0x1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x929, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x929, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x929, Size: 0x1]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x929, Size: 0x1]
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x929, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x92c, Size: 0x4]
	byte BlendableLocation;//[Offset: 0x930, Size: 0x1]
	int BlendablePriority;//[Offset: 0x934, Size: 0x4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 0x1]
	byte RefractionMode;//[Offset: 0x939, Size: 0x1]
	float RefractionDepthBias;//[Offset: 0x93c, Size: 0x4]
	bool bOceanFoam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x940, Size: 0x1]
	bool bEnableMeshClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x940, Size: 0x1]
	bool bEnableMeshDiscard;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x940, Size: 0x1]
	bool bEnableMeshArcPlaneClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x940, Size: 0x1]
	bool bUsedWithMultiPassInstanceID;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x940, Size: 0x1]
	bool bUsedWithMobileReadScene;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x940, Size: 0x1]
	bool bIsEnhancedUImage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x940, Size: 0x1]
	Guid stateID;//[Offset: 0x944, Size: 0x10]
	Texture*[] ExpressionTextureReferences;//[Offset: 0xa50, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	Color Constant;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FString InputName;//[Offset: 0x8, Size: 0x10]
	int Mask;//[Offset: 0x18, Size: 0x4]
	int MaskR;//[Offset: 0x1c, Size: 0x4]
	int MaskG;//[Offset: 0x20, Size: 0x4]
	int MaskB;//[Offset: 0x24, Size: 0x4]
	int MaskA;//[Offset: 0x28, Size: 0x4]
	FName ExpressionName;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	float Constant;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	Vector Constant;//[Offset: 0x3c, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	float ConstantX;//[Offset: 0x3c, Size: 0x4]
	float ConstantY;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FString InputName;//[Offset: 0x8, Size: 0x10]
	int Mask;//[Offset: 0x18, Size: 0x4]
	int MaskR;//[Offset: 0x1c, Size: 0x4]
	int MaskG;//[Offset: 0x20, Size: 0x4]
	int MaskB;//[Offset: 0x24, Size: 0x4]
	int MaskA;//[Offset: 0x28, Size: 0x4]
	FName ExpressionName;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	Vector4 Constant;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8]
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8]
	FString Desc;//[Offset: 0x38, Size: 0x10]
	Color BorderColor;//[Offset: 0x48, Size: 0x4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c, Size: 0x1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c, Size: 0x1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4c, Size: 0x1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 0x1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 0x1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d, Size: 0x1]
	ExpressionOutput[] Outputs;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x28, Size: 0x10]
	FString Description;//[Offset: 0x38, Size: 0x10]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x50, Size: 0x10]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0, Size: 0x10]
	int Mask;//[Offset: 0x10, Size: 0x4]
	int MaskR;//[Offset: 0x14, Size: 0x4]
	int MaskG;//[Offset: 0x18, Size: 0x4]
	int MaskB;//[Offset: 0x1c, Size: 0x4]
	int MaskA;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0, Size: 0x10]
	MaterialFunction* Function;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x30, Size: 0x10]
	int LODBias;//[Offset: 0x40, Size: 0x4]
	int NumCinematicMipLevels;//[Offset: 0x44, Size: 0x4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x60, Size: 0x10]
	int CachedCombinedLODBias;//[Offset: 0x70, Size: 0x4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 0x1]
	byte CompressionSettings;//[Offset: 0x75, Size: 0x1]
	byte Filter;//[Offset: 0x76, Size: 0x1]
	byte LODGroup;//[Offset: 0x77, Size: 0x1]
	byte CrunchSetting;//[Offset: 0x78, Size: 0x1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 0x1]
	float CrunchCompressionAmount;//[Offset: 0x7c, Size: 0x4]
	byte BasisSetting;//[Offset: 0x80, Size: 0x1]
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1]
	float BasisCompressionAmount;//[Offset: 0x84, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AssetUserData.Object
<----------Generated by SSpawner v1.0.4---------->


Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ClusterNode_Mesh
	Vector BoundMin;//[Offset: 0x0, Size: 0xc]
	int FirstChild;//[Offset: 0xc, Size: 0x4]
	Vector BoundMax;//[Offset: 0x10, Size: 0xc]
	int LastChild;//[Offset: 0x1c, Size: 0x4]
	int FirstInstance;//[Offset: 0x20, Size: 0x4]
	int LastInstance;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x78, Size: 0x10]
	NavCollisionBox[] BoxCollision;//[Offset: 0x88, Size: 0x10]
	class NavArea* AreaClass;//[Offset: 0x98, Size: 0x8]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
	float Height;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 0xc]
	Vector Extent;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: NavArea.Object
	float DefaultCost;//[Offset: 0x28, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x2c, Size: 0x4]
	Color DrawColor;//[Offset: 0x30, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x34, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x39, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x39, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BodyInstance
	enum SleepFamily;//[Offset: 0x19, Size: 0x1]
	byte DOFMode;//[Offset: 0x1a, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x1b, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 0x8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b, Size: 0x1]
	float MaxDepenetrationVelocity;//[Offset: 0x5c, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x68, Size: 0x4]
	float LinearDamping;//[Offset: 0x6c, Size: 0x4]
	float AngularDamping;//[Offset: 0x70, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x74, Size: 0xc]
	Vector COMNudge;//[Offset: 0x80, Size: 0xc]
	float MassScale;//[Offset: 0x8c, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x90, Size: 0xc]
	byte ObjectType;//[Offset: 0x9c, Size: 0x1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xb0, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xc0, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc8, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xcc, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xd0, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xd4, Size: 0x4]
	int PositionSolverIterationCount;//[Offset: 0xd8, Size: 0x4]
	uint64 RigidActorSyncId;//[Offset: 0x108, Size: 0x8]
	uint64 RigidActorAsyncId;//[Offset: 0x110, Size: 0x8]
	int VelocitySolverIterationCount;//[Offset: 0x118, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ActorTickFunction.TickFunction
<----------Generated by SSpawner v1.0.4---------->


Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	float TickInterval;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]
	bool LocationQuantizationLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	FName LocationQuantizationLODGroup;//[Offset: 0x38, Size: 0x8]
	byte ForcedLocationQuantizationLOD;//[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x30, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]
	byte ExtraData;//[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: Vector_NetQuantize100.Vector
<----------Generated by SSpawner v1.0.4---------->


Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x8d1b3bc
	bool WasControllerKeyJustPressed(Key Key);// 0x8d1b16c
	bool IsControllerKeyDown(Key Key);// 0x8d1af1c
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x8d1adac
	Vector GetControllerVectorKeyState(Key Key);// 0x8d1ab5c
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x8d1aa78
	float GetControllerKeyTimeDown(Key Key);// 0x8d1a82c
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x8d1a70c
	float GetControllerAnalogKeyState(Key Key);// 0x8d1a4c0
<----------Generated by SSpawner v1.0.4---------->


Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x400, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x400, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x400, Size: 0x1]
	bool bRoleReplicationOptim;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x400, Size: 0x1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x400, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x404, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x408, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x409, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x410, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x418, Size: 0x8]
	byte RemoteViewPitch;//[Offset: 0x420, Size: 0x1]
	Controller* LastHitBy;//[Offset: 0x428, Size: 0x8]
	Controller* Controller;//[Offset: 0x430, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x440, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x44c, Size: 0xc]
	void SpawnDefaultController();// 0x8ded740
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x8ded6b4
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x8ded5e4
	void ReceiveUnpossessed(Controller* OldController);// 0x70644c4
	void ReceivePossessed(Controller* NewController);// 0x70644c4
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x8ded4a8
	void OnRep_PlayerState();// 0x8ded48c
	void OnRep_Controller();// 0x8ded470
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x8ded364
	Vector K2_GetMovementInputVector();// 0x8ded32c
	bool IsPlayerControlled();// 0x8ded2ec
	bool IsMoveInputIgnored();// 0x8ded2ac
	bool IsLocallyControlled();// 0x8ded26c
	bool IsControlled();// 0x8ded234
	Vector GetPendingMovementInputVector();// 0x8ded1fc
	Vector GetNavAgentLocation();// 0x8ded1bc
	PawnMovementComponent* GetMovementComponent();// 0x8ded180
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x8ded104
	Vector GetLastMovementInputVector();// 0x8ded0cc
	Rotator GetControlRotation();// 0x8ded08c
	Controller* GetController();// 0x8ded070
	Rotator GetBaseAimRotation();// 0x8ded030
	void DetachFromControllerPendingDestroy();// 0x8ded014
	Vector ConsumeMovementInputVector();// 0x8decfd4
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x8deced0
	void AddControllerYawInput(float Val);// 0x8dece4c
	void AddControllerRollInput(float Val);// 0x8decdc8
	void AddControllerPitchInput(float Val);// 0x8decd44
<----------Generated by SSpawner v1.0.4---------->


Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x400, Size: 0x8]
	Character* Character;//[Offset: 0x410, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x418, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x420, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x428, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x434, Size: 0x1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x434, Size: 0x1]
	FName StateName;//[Offset: 0x440, Size: 0x8]
	Actor* ObservedActor;//[Offset: 0x448, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x450, Size: 0x10]
	void UnPossess();// 0x8cc3c74
	void StopMovement();// 0x8cc3c58
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x8cc3b74
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x8cc3ae8
	void SetIgnoreLookInput(bool bNewLookInput);// 0x8cc3a5c
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x8cc3954
	void ResetIgnoreMoveInput();// 0x8cc3938
	void ResetIgnoreLookInput();// 0x8cc391c
	void ResetIgnoreInputFlags();// 0x8cc3900
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x70644c4
	void Possess(Pawn* InPawn);// 0x8cc387c
	void OnRep_PlayerState();// 0x8cc3860
	void OnRep_Pawn();// 0x8cc3844
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x8cc372c
	Pawn* K2_GetPawn();// 0x8cc36f8
	bool IsPlayerController();// 0x8cc36d8
	bool IsMoveInputIgnored();// 0x8cc3698
	bool IsLookInputIgnored();// 0x8cc3658
	bool IsLocalPlayerController();// 0x8cc3608
	bool IsLocalController();// 0x8cc35c8
	Actor* GetViewTarget();// 0x8cc358c
	Rotator GetDesiredRotation();// 0x8cc354c
	Rotator GetControlRotation();// 0x8cc350c
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x8cc3444
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x8cc3384
	PlayerController* CastToPlayerController();// 0x8cc3350
<----------Generated by SSpawner v1.0.4---------->


Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x458, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x460, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x468, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x470, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x4a0, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x4d0, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x4d4, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x4e0, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x4f0, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x500, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 0x1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x504, Size: 0x4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x508, Size: 0x4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x50c, Size: 0x4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x510, Size: 0x4]
	float CrouchedEyeHeight;//[Offset: 0x518, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51c, Size: 0x1]
	byte Ping;//[Offset: 0x51d, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51e, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51e, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x51e, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x51e, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x51e, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x51e, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x51e, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x51e, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x520, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x524, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x528, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x52c, Size: 0x4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x530, Size: 0x1]
	delegate OnReachedJumpApex;//[Offset: 0x538, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x558, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x568, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x578, Size: 0x100]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x680, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x6c0, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x6d0, Size: 0x160]
	void UnCrouch(bool bClientSimulation);// 0x8cb7e3c
	void StopJumping();// 0x8cb7e20
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x8cb7d9c
	void SetReplicateMovement(bool bInReplicateMovement);// 0x8cb7d10
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x8cb7c60
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x8cb7b54
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x8cb79dc
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x8cb79c8
	void OnRep_RootMotion();// 0x8cb79b4
	void OnRep_ReplicatedBasedMovement();// 0x8cb7998
	void OnRep_IsCrouched();// 0x8cb797c
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x70644c4
	void OnLanded(out const HitResult Hit);// 0x70644c4
	void OnJumped();// 0x8cb7960
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x8cb784c
	void K2_UpdateCustomMovement(float DeltaTime);// 0x70644c4
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x70644c4
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x70644c4
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x70644c4
	void Jump();// 0x8cb7830
	bool IsPlayingRootMotion();// 0x8cb77f8
	bool IsPlayingNetworkedRootMotionMontage();// 0x8cb77c0
	bool IsJumpProvidingForce();// 0x8cb7780
	AnimMontage* GetCurrentMontage();// 0x8cb774c
	Vector GetBaseTranslationOffset();// 0x8cb7724
	Rotator GetBaseRotationOffsetRotator();// 0x8cb76d0
	float GetAnimRootMotionTranslationScale();// 0x8cb769c
	void Crouch(bool bClientSimulation);// 0x8cb7610
	void ClientCheatWalk();// 0x8cb75f4
	void ClientCheatGhost();// 0x8cb75d8
	void ClientCheatFly();// 0x8cb75bc
	bool CanJumpInternal();// 0x8cb757c
	bool CanJump();// 0x8cb7544
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x8cb7484
<----------Generated by SSpawner v1.0.4---------->


Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x998, Size: 0x1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x9a0, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x9a8, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x9b0, Size: 0x8]
	AnimInstance*[] SubInstances;//[Offset: 0x9b8, Size: 0x10]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x9c8, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x9d0, Size: 0x18]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0xa20, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0xa30, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0xa60, Size: 0x4]
	enum UseAsyncScene;//[Offset: 0xa64, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa65, Size: 0x1]
	byte KinematicBonesUpdateType;//[Offset: 0xa66, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0xa67, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa68, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa68, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa68, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa68, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa68, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa68, Size: 0x1]
	FName[] DisallowedAnimCurves;//[Offset: 0xa70, Size: 0x10]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa80, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa80, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa80, Size: 0x1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa80, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa80, Size: 0x1]
	float ClothBlendWeight;//[Offset: 0xa84, Size: 0x4]
	Vector RootBoneTranslation;//[Offset: 0xa8c, Size: 0xc]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa98, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa98, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa98, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa99, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9a, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0xaa0, Size: 0x8]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa8, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa9, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa9, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaa9, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xaa9, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xaa9, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xaa9, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xaa9, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xaa9, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0xaaa, Size: 0x2]
	Vector LineCheckBoundsScale;//[Offset: 0xaac, Size: 0xc]
	delegate OnConstraintBroken;//[Offset: 0xac0, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0xbc0, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0xbc8, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0xbcc, Size: 0x4]
	delegate OnAnimInitialized;//[Offset: 0xd08, Size: 0x10]
	AnimSequence* SequenceToPlay;//[Offset: 0xde8, Size: 0x8]
	AnimationAsset* AnimToPlay;//[Offset: 0xdf0, Size: 0x8]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdf8, Size: 0x1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdf8, Size: 0x1]
	float DefaultPosition;//[Offset: 0xdfc, Size: 0x4]
	float DefaultPlayRate;//[Offset: 0xe00, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0xe04, Size: 0x4]
	float LastPoseTickTime;//[Offset: 0xe08, Size: 0x4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe40, Size: 0x1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe42, Size: 0x1]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x8e38f48
	void SuspendClothingSimulation();// 0x8e38f34
	void Stop();// 0x8e38f20
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x8e38e38
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x8e38db4
	void SetTeleportRotationThreshold(float Threshold);// 0x8e38d38
	void SetTeleportDistanceThreshold(float Threshold);// 0x8e38cbc
	void SetPosition(float InPos, bool bFireNotifies);// 0x8e38bfc
	void SetPlayRate(float rate);// 0x8e38b80
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x8e38b04
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x8e389f0
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x8e388f4
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x8e38870
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x8e38764
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x8e3869c
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x8e38618
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x8e38558
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x8e38460
	void SetClothMaxDistanceScale(float Scale);// 0x8e383e4
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x8e38314
	void SetAnimInstanceClass(class Object NewClass);// 0x8e38298
	void SetAnimationMode(byte InAnimationMode);// 0x8e3821c
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x8e381a0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x8e38074
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x8e37f68
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x8e37ee4
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x8e37dd0
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x8e37cbc
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x8e37b88
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x8e37b04
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x8e37a44
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x8e37924
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x8e377c8
	void ResumeClothingSimulation();// 0x8e377b4
	void ResetClothTeleportMode();// 0x8e377a0
	void ResetAllowedAnimCurveEvaluation();// 0x8e3778c
	void ResetAllBodiesSimulatePhysics();// 0x8e37778
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x8e376b8
	void Play(bool bLooping);// 0x8e37634
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x8e374b4
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x8e372d0
	bool IsPlaying();// 0x8e37298
	bool IsClothingSimulationSuspended();// 0x8e37260
	bool IsBodyGravityEnabled(FName BoneName);// 0x8e371d0
	float GetTeleportRotationThreshold();// 0x8e3719c
	float GetTeleportDistanceThreshold();// 0x8e37168
	AnimInstance*[] GetSubAnimInstances();// 0x8e370c4
	Vector GetSkeletalCenterOfMass();// 0x8e3708c
	AnimInstance* GetPostProcessInstance();// 0x8e37058
	float GetPosition();// 0x8e37024
	float GetPlayRate();// 0x8e36ff0
	float GetMorphTarget(FName MorphTargetName);// 0x8e36f64
	bool GetDisableAnimCurves();// 0x8e36f40
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x8e36dd0
	float GetClothMaxDistanceScale();// 0x8e36d9c
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x8e36ccc
	AnimInstance* GetAnimInstance();// 0x8e36c98
	byte GetAnimationMode();// 0x8e36c64
	bool GetAllowedAnimCurveEvaluate();// 0x8e36c44
	void ForceClothNextUpdateTeleportAndReset();// 0x8e36c30
	void ForceClothNextUpdateTeleport();// 0x8e36c1c
	FName FindConstraintBoneName(int ConstraintIndex);// 0x8e36b90
	void ClearMorphTargets();// 0x8e36b7c
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x8e36a88
	void BindClothToMasterPoseComponent();// 0x8e36a74
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x8e369b4
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x8e36864
	void AddForceToAllBodiesBelow(Vector force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x8e36714
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x8e365fc
<----------Generated by SSpawner v1.0.4---------->


Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x798, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x7a0, Size: 0x8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x858, Size: 0x1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x880, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x888, Size: 0x4]
	int MinLodModel;//[Offset: 0x88c, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x8a0, Size: 0x10]
	float StreamingDistanceMultiplier;//[Offset: 0x8b0, Size: 0x4]
	Color WireframeColor;//[Offset: 0x8b4, Size: 0x4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b8, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8b8, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8b8, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8b8, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d0, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d0, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d0, Size: 0x1]
	byte MeshComponentUpdateFlag;//[Offset: 0x8d1, Size: 0x1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d2, Size: 0x1]
	bool bDisableAnimOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d3, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d3, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e0, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8e0, Size: 0x1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x8e1, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e2, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8e2, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x8e4, Size: 0x4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e8, Size: 0x1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x904, Size: 0x1c]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 0x1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x952, Size: 0x1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x8e3cff8
	void UnHideBoneByName(FName BoneName);// 0x8e3cf7c
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x8e3cdec
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x8e3cc5c
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x8e3cb64
	bool SetSkinWeightProfile(FName InProfileName);// 0x8e3cad4
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x8e3c9dc
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x8e3c914
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReinit);// 0x8e3c84c
	void SetMinLOD(int InNewMinLOD);// 0x8e3c7d0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x8e3c754
	void SetForcedLOD(int InNewForcedLOD);// 0x8e3c6d8
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x8e3c654
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x8e3c5d0
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x8e3c554
	void ResetAnimUROParams(float[] DistanceFactors, int MaxEvalRateForInterpolation);// 0x8e3c3e4
	bool IsUsingSkinWeightProfile();// 0x8e3c3c4
	bool IsBoneHiddenByName(FName BoneName);// 0x8e3c334
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x8e3c27c
	FName GetSocketBoneName(FName InSocketName);// 0x8e3c1f0
	FName GetParentBone(FName BoneName);// 0x8e3c164
	int GetNumLODs();// 0x8e3c130
	int GetNumBones();// 0x8e3c0fc
	FName GetCurrentSkinWeightProfileName();// 0x8e3c0e0
	FName GetBoneName(int BoneIndex);// 0x8e3c054
	int GetBoneIndex(FName BoneName);// 0x8e3bfc8
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x8e3be70
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x8e3bd98
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x8e3bca8
	void EnableMeshClip4Planes(out const Plane[] ClipPlanes, bool bBox);// 0x8e3bb94
	void DisableMeshClipPlane(int PlaneIndex);// 0x8e3bb10
	void DisableMeshClipArc();// 0x8e3baf4
	void DisableMeshClip4Planes();// 0x8e3bad8
	void ClearVertexColorOverride(int LODIndex);// 0x8e3ba5c
	void ClearSkinWeightProfile();// 0x8e3ba48
	void ClearSkinWeightOverride(int LODIndex);// 0x8e3b9cc
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x8e3b904
<----------Generated by SSpawner v1.0.4---------->


Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x770, Size: 0x10]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x8daf9b4
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x8daf8fc
	void SetLayerVisibilityValue(byte Layer, bool Visible, bool bPropagateToChildren);// 0x8daf7e8
	void SetLayerVisibilityEnable(bool Enable, bool bPropagateToChildren);// 0x8daf710
	void SetLayerCastShadowValue(byte Layer, bool NewCastShadow);// 0x8daf648
	void SetLayerCastShadowEnable(bool Enable);// 0x8daf5bc
	void SetCastShadow(bool NewCastShadow);// 0x8daf530
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x8daf424
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x8daf38c
	FName[] GetMaterialSlotNames();// 0x8daf2e0
	MaterialInterface*[] GetMaterials();// 0x8daf234
	int GetMaterialIndex(FName MaterialSlotName);// 0x8daf1a0
	bool GetLayerVisibilityValue(byte Layer);// 0x8daf108
	bool GetLayerCastShadowValue(byte Layer);// 0x8daf070
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x8daef98
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x8daeea8
	void EnableMeshClip4Planes(out const Plane[] ClipPlanes, bool bBox);// 0x8daed94
	void DisableMeshClipPlane(int PlaneIndex);// 0x8daed10
	void DisableMeshClipArc();// 0x8daecf4
	void DisableMeshClip4Planes();// 0x8daecd8
<----------Generated by SSpawner v1.0.4---------->


Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x48, Size: 0x8]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 0xc]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0xd8, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xe8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xf8, Size: 0x10]
	byte SkelMirrorAxis;//[Offset: 0x108, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x109, Size: 0x1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x110, Size: 0x10]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x120, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x120, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x120, Size: 0x1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x120, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x128, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x130, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x138, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x140, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x150, Size: 0x10]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x2d0, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2e0, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x2e8, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x2f8, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x310, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x330, Size: 0x10]
	int NumSockets();// 0x8e32180
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x8e320ac
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x8e32020
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x8e31f94
	BoxSphereBounds GetImportedBounds();// 0x8e31f48
	BoxSphereBounds GetBounds();// 0x8e31efc
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x8e31e24
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x8e31d98
<----------Generated by SSpawner v1.0.4---------->


Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x30, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x40, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x160, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x170, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x180, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1e0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x248, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x258, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x330, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x8e3a9e4
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x8e3a954
<----------Generated by SSpawner v1.0.4---------->


Class: SmartNameContainer
<----------Generated by SSpawner v1.0.4---------->


Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x18]
	float BlendScale;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	FName MaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x30, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	bool[] bEnableShadowCasting;//[Offset: 0x18, Size: 0x10]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x28, Size: 0x10]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x170]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x1b0, Size: 0xa8]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x258, Size: 0x240]
	FName[] RemovedBones;//[Offset: 0x498, Size: 0x10]
	BoneReference[] BonesToRemove;//[Offset: 0x4a8, Size: 0x10]
	AnimSequence* BakePose;//[Offset: 0x4b8, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0x4c0, Size: 0x10]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0, Size: 0x1]
	byte CustomLeftRightAxis;//[Offset: 0x1, Size: 0x1]
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 0x4]
	int ScreenSize;//[Offset: 0xc, Size: 0x4]
	float WeldingThreshold;//[Offset: 0x10, Size: 0x4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float NormalsThreshold;//[Offset: 0x18, Size: 0x4]
	byte SilhouetteImportance;//[Offset: 0x1c, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1d, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1e, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1f, Size: 0x1]
	float BoneReductionRatio;//[Offset: 0x20, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 0x4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	BoneReference[] BonesToRemove;//[Offset: 0x30, Size: 0x10]
	int BaseLOD;//[Offset: 0x40, Size: 0x4]
	int LODChainLastIndex;//[Offset: 0x44, Size: 0x4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x50, Size: 0x80]
	MaterialProxySettings MaterialSettings;//[Offset: 0xd0, Size: 0x94]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]
	AnimSequence* BakePose;//[Offset: 0x168, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte MaterialLODType;//[Offset: 0x1, Size: 0x1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	byte TextureWidth;//[Offset: 0x3, Size: 0x1]
	byte TextureHeight;//[Offset: 0x4, Size: 0x1]
	byte SamplingQuality;//[Offset: 0x5, Size: 0x1]
	int GutterSpace;//[Offset: 0x8, Size: 0x4]
	byte TextureStrech;//[Offset: 0xc, Size: 0x1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 0x10]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x28, Size: 0x58]
<----------Generated by SSpawner v1.0.4---------->


Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0, Size: 0x1]
	byte Caster;//[Offset: 0x1, Size: 0x1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	byte ColorChannels;//[Offset: 0x3, Size: 0x1]
	int BitsPerChannel;//[Offset: 0x4, Size: 0x4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: OutputMaterialInfo
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 0x8]
	byte TextureSizingType;//[Offset: 0x8, Size: 0x1]
	float GutterSpace;//[Offset: 0xc, Size: 0x4]
	enum SamplingQuality;//[Offset: 0x10, Size: 0x1]
	enum UVStrech;//[Offset: 0x11, Size: 0x1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	float MetallicConstant;//[Offset: 0x18, Size: 0x4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float RoughnessConstant;//[Offset: 0x20, Size: 0x4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float SpecularConstant;//[Offset: 0x28, Size: 0x4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float OpacityConstant;//[Offset: 0x30, Size: 0x4]
	float AOConstant;//[Offset: 0x34, Size: 0x4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 0x4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 0x4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 0x8]
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 0x8]
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 0x8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 0x8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 0x8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 0x8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 0x8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 0x8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 0x8]
	byte MaterialMergeType;//[Offset: 0x90, Size: 0x1]
	byte BlendMode;//[Offset: 0x91, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa0, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xa8, Size: 0x10]
	float StreamableFirstChunkSecond;//[Offset: 0xc8, Size: 0x4]
	float StreamableFollowingChunkSecond;//[Offset: 0xcc, Size: 0x4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	byte AdditiveAnimType;//[Offset: 0x16c, Size: 0x1]
	byte RefPoseType;//[Offset: 0x16d, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x170, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x178, Size: 0x4]
	int EncodingPkgVersion;//[Offset: 0x17c, Size: 0x4]
	FName RetargetSource;//[Offset: 0x180, Size: 0x8]
	enum Interpolation;//[Offset: 0x188, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x18a, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x190, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x78, Size: 0x10]
	float SequenceLength;//[Offset: 0x88, Size: 0x4]
	float RateScale;//[Offset: 0x8c, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x90, Size: 0x10]
	float GetPlayLength();// 0x8c83864
<----------Generated by SSpawner v1.0.4---------->


Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x30, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x58, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa0, Size: 0x38]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x38]
	float BlendOutTime;//[Offset: 0x118, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x11c, Size: 0x4]
	FName SyncGroup;//[Offset: 0x120, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x128, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x130, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x150, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x160, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x170, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x182, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x188, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x198, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a8, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1d0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
<----------Generated by SSpawner v1.0.4---------->


Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x8, Size: 0x8]
	float blendTime;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x70]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x8cc9094
<----------Generated by SSpawner v1.0.4---------->


Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x8cc89cc
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x8cc88e8
<----------Generated by SSpawner v1.0.4---------->


Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x58, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x59, Size: 0x1]
	float DefaultValue;//[Offset: 0x5c, Size: 0x4]
	RichCurveKey[] Keys;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: KeyHandleMap
<----------Generated by SSpawner v1.0.4---------->


Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x40, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimMetaData.Object
<----------Generated by SSpawner v1.0.4---------->


Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x70644c4
	FString GetNotifyName();// 0x8c819dc
<----------Generated by SSpawner v1.0.4---------->


Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x70644c4
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x70644c4
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x70644c4
	FString GetNotifyName();// 0x8c824cc
<----------Generated by SSpawner v1.0.4---------->


Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x20, Size: 0x70]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0x10]
	int CurveTypeFlags;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int ScreenSize;//[Offset: 0x4, Size: 0x4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float HardAngleThreshold;//[Offset: 0xc, Size: 0x4]
	int MergeDistance;//[Offset: 0x10, Size: 0x4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float ClippingLevel;//[Offset: 0x18, Size: 0x4]
	int AxisIndex;//[Offset: 0x1c, Size: 0x4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x28, Size: 0x80]
<----------Generated by SSpawner v1.0.4---------->


Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum LevelOfDetailType;//[Offset: 0x1, Size: 0x1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x8, Size: 0x170]
	MeshProxySettings ProxySettings;//[Offset: 0x178, Size: 0xc4]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 0x4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 0x94]
	int TextureWidth;//[Offset: 0x98, Size: 0x4]
	int TextureHeight;//[Offset: 0x9c, Size: 0x4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 0x1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 0x1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	float MergeDistance;//[Offset: 0xa8, Size: 0x4]
	float HardAngleThreshold;//[Offset: 0xac, Size: 0x4]
	int LightMapResolution;//[Offset: 0xb0, Size: 0x4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 0x1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8, Size: 0x1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	int LODGroupIndex;//[Offset: 0xbc, Size: 0x4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	enum AggregatorMode;//[Offset: 0xc1, Size: 0x1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x28, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x38, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x48, Size: 0x10]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x100, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x108, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x370, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]
<----------Generated by SSpawner v1.0.4---------->


Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]
<----------Generated by SSpawner v1.0.4---------->


Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x108, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ThumbnailInfo.Object
<----------Generated by SSpawner v1.0.4---------->


Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x28, Size: 0x50]
	Blueprint* SourceAsset;//[Offset: 0x78, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0, Size: 0x8]
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x58, Size: 0x8]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x68, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x70, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x80, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x90, Size: 0x8]
	byte BlueprintType;//[Offset: 0x98, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x9c, Size: 0x4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]
	SCS_Node* RootNode;//[Offset: 0x50, Size: 0x8]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x50]
	FName VariableName;//[Offset: 0x88, Size: 0x8]
	FName AttachToName;//[Offset: 0x90, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x98, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0xa0, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xb0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xc0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xd0, Size: 0x10]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	FName NativeComponentName;//[Offset: 0xe8, Size: 0x8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	FName InternalVariableName;//[Offset: 0xf8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Struct.Field.Object
<----------Generated by SSpawner v1.0.4---------->


Class: Field.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x70]
	Vector GetVectorValue(float InTime);// 0x8cca470
<----------Generated by SSpawner v1.0.4---------->


Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x70]
	LinearColor GetLinearColorValue(float InTime);// 0x8cc9534
<----------Generated by SSpawner v1.0.4---------->


Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 0x8]
	FString ApexFileName;//[Offset: 0x8, Size: 0x10]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x1c, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 0x4]
	float HorizontalResistance;//[Offset: 0x4, Size: 0x4]
	float BendResistance;//[Offset: 0x8, Size: 0x4]
	float ShearResistance;//[Offset: 0xc, Size: 0x4]
	float Friction;//[Offset: 0x10, Size: 0x4]
	float Damping;//[Offset: 0x14, Size: 0x4]
	float TetherStiffness;//[Offset: 0x18, Size: 0x4]
	float TetherLimit;//[Offset: 0x1c, Size: 0x4]
	float Drag;//[Offset: 0x20, Size: 0x4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 0x4]
	float GravityScale;//[Offset: 0x28, Size: 0x4]
	float MassScale;//[Offset: 0x2c, Size: 0x4]
	float InertiaBlend;//[Offset: 0x30, Size: 0x4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 0x4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 0x4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 0x4]
	float SolverFrequency;//[Offset: 0x40, Size: 0x4]
	float FiberCompression;//[Offset: 0x44, Size: 0x4]
	float FiberExpansion;//[Offset: 0x48, Size: 0x4]
	float FiberResistance;//[Offset: 0x4c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x28, Size: 0x4]
	Skeleton* CurrentSkeleton;//[Offset: 0x30, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x38, Size: 0x1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x40, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x50, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x60, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x70, Size: 0x10]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x180, Size: 0x10]
	bool bDispatchQueuedAnimEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	bool bNeedReInitializeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 0x1]
	bool bForceParallelUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba, Size: 0x1]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x8c78c54
	Pawn* TryGetPawnOwner();// 0x8c78c18
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x8c78b60
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x8c78a70
	bool SetSubAnimNodeAnimInstance(FName SubInstanceSlotName, AnimInstance* AnimInstance);// 0x8c789a8
	void SetRootMotionMode(byte Value);// 0x8c78924
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x8c7886c
	void SetForceParallelUpdateAnimation(bool bForce);// 0x8c787e8
	void SavePoseSnapshot(FName SnapshotName);// 0x8c78764
	bool ResetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x8c786d4
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x8c784b0
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x8c78300
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x8c78248
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x8c78190
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x8c780d8
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x8c77fe8
	void Montage_Resume(const AnimMontage* Montage);// 0x8c77f6c
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x8c77e24
	void Montage_Pause(const AnimMontage* Montage);// 0x8c77da8
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x8c77cf4
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x8c77c40
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x8c77bb0
	bool Montage_IsActive(const AnimMontage* Montage);// 0x8c77b20
	float Montage_GetPosition(const AnimMontage* Montage);// 0x8c77a94
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x8c77a08
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x8c77944
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x8c778b4
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x8c77828
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x8c7779c
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x8c776cc
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x8c77584
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x8c774bc
	bool IsAnyMontagePlaying();// 0x8c77484
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x8c773bc
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x8c772a8
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x8c7720c
	AnimInstance* GetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x8c77180
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x8c770bc
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x8c76ff8
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x8c76f34
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x8c76e70
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x8c76dac
	SkeletalMeshComponent* GetOwningComponent();// 0x8c76d78
	Actor* GetOwningActor();// 0x8c76d44
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x8c76c80
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x8c76bbc
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x8c76af8
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x8c76a34
	float GetInstanceMachineWeight(int MachineIndex);// 0x8c769a8
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x8c7691c
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x8c76890
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x8c76804
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x8c76778
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x8c766ec
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x8c76660
	float GetCurveValue(FName CurveName);// 0x8c765d4
	FName GetCurrentStateName(int MachineIndex);// 0x8c76548
	AnimMontage* GetCurrentActiveMontage();// 0x8c76514
	AnimMontage* GetCurMontageBySlot(FName SlotName);// 0x8c76488
	bool DestroySubAnimInstance(AnimInstance* AnimInstance);// 0x8c763f8
	void DestroyAllSubAnimInstances();// 0x8c763e4
	AnimInstance* CreateSubAnimInstance(class AnimInstance InstanceClass, FName InstanceName);// 0x8c76320
	void ClearMorphTargets();// 0x8c7630c
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x8c76228
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x70644c4
	void BlueprintPostEvaluateAnimation();// 0x70644c4
	void BlueprintInitializeAnimation();// 0x70644c4
	void BlueprintBeginPlay();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	bool DefaultProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ClothingSimulationFactory.Object
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x1a0, Size: 0x8]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a8, Size: 0x1]
	float GravityScale;//[Offset: 0x1ac, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x1b0, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x1b4, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x1b8, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x1bc, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x1c0, Size: 0x4]
	byte MovementMode;//[Offset: 0x1c4, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x1c5, Size: 0x1]
	float GroundFriction;//[Offset: 0x1f0, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x1f4, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x1f8, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x1fc, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x200, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x204, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x208, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x20c, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x210, Size: 0x4]
	float BrakingFriction;//[Offset: 0x214, Size: 0x4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	float BrakingDecelerationWalking;//[Offset: 0x21c, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x220, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x224, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x228, Size: 0x4]
	float AirControl;//[Offset: 0x22c, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x230, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x234, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x238, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x23c, Size: 0x4]
	float Buoyancy;//[Offset: 0x240, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x244, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x248, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x24c, Size: 0xc]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x258, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x258, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x258, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x258, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x259, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x259, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x259, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x259, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x259, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x259, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x260, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x268, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x26c, Size: 0x4]
	float Mass;//[Offset: 0x270, Size: 0x4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	float StandingDownwardForceScale;//[Offset: 0x27c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x280, Size: 0x4]
	float PushForceFactor;//[Offset: 0x284, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x288, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x28c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x290, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x294, Size: 0x4]
	float RepulsionForce;//[Offset: 0x298, Size: 0x4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1]
	float CrouchedSpeedMultiplier;//[Offset: 0x2a0, Size: 0x4]
	float UpperImpactNormalScale;//[Offset: 0x2a4, Size: 0x4]
	Vector Acceleration;//[Offset: 0x2a8, Size: 0xc]
	Vector LastUpdateLocation;//[Offset: 0x2b4, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x2c0, Size: 0x10]
	Vector LastUpdateVelocity;//[Offset: 0x2d0, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x2dc, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x2e0, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x2ec, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x2f8, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x304, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x308, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x30c, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x310, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x314, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x318, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x31c, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x320, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x324, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x328, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x32c, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x330, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x334, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x338, Size: 0x4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x33d, Size: 0x1]
	float LedgeCheckThreshold;//[Offset: 0x340, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x344, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x348, Size: 0xa8]
	byte DefaultLandMovementMode;//[Offset: 0x3f0, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x3f1, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x3f2, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f3, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f3, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f3, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f3, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f3, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f3, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f8, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f8, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f8, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f8, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f8, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f8, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3f8, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f8, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f9, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f9, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f9, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f9, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f9, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f9, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3f9, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fa, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3fa, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3fa, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3fa, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3fa, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x40c, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x410, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x41c, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x420, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x424, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x428, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x42c, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x430, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x4f0, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x4f4, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x4f8, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x4fc, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x500, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x504, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x508, Size: 0x58]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x570, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x578, Size: 0x100]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x710, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x750, Size: 0xc]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75c, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x75d, Size: 0x1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x8cbb8c8
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x8cbb84c
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x8cbb78c
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x8cbb704
	void SetGroupsToIgnore(int GroupFlags);// 0x8cbb688
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x8cbb600
	void SetGroupsToAvoid(int GroupFlags);// 0x8cbb584
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x8cbb4fc
	void SetAvoidanceGroup(int GroupFlags);// 0x8cbb480
	void SetAvoidanceEnabled(bool bEnable);// 0x8cbb3fc
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x8cbb2c8
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x8cbaf0c
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x8cbab50
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x8cba8a8
	float K2_GetWalkableFloorZ();// 0x8cba874
	float K2_GetWalkableFloorAngle();// 0x8cba840
	float K2_GetModifiedMaxAcceleration();// 0x8cba804
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x8cba6ec
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x8cba524
	bool IsWalking();// 0x8cba4e4
	bool IsWalkable(out const HitResult Hit);// 0x8cba3f8
	float GetValidPerchRadius();// 0x8cba3c4
	float GetPerchRadiusThreshold();// 0x8cba390
	PrimitiveComponent* GetMovementBase();// 0x8cba35c
	float GetMinAnalogSpeed();// 0x8cba320
	float GetMaxJumpHeightWithJumpTime();// 0x8cba2e4
	float GetMaxJumpHeight();// 0x8cba2a8
	float GetMaxBrakingDeceleration();// 0x8cba26c
	float GetMaxAcceleration();// 0x8cba230
	Vector GetImpartedMovementBaseVelocity();// 0x8cba1f0
	Vector GetCurrentAcceleration();// 0x8cba1b8
	Character* GetCharacterOwner();// 0x8cba19c
	float GetAnalogInputModifier();// 0x8cba168
	void FlushServerMoves();// 0x8cba14c
	void DisableMovement();// 0x8cba130
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x8cb9f30
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x8cb9ba0
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x8cb98f4
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x8cb96b8
	void ClientAckGoodMove(float TimeStamp);// 0x8cb9634
	void ClearAccumulatedForces();// 0x8cb9618
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x8cb9408
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x8cb92c4
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x8cb91fc
	void AddForce(Vector force);// 0x8cb9178
<----------Generated by SSpawner v1.0.4---------->


Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x188, Size: 0x8]
	Vector K2_GetInputVector();// 0x8dee438
	bool IsMoveInputIgnored();// 0x8dee3f8
	Vector GetPendingInputVector();// 0x8dee3c0
	Pawn* GetPawnOwner();// 0x8dee38c
	Vector GetLastInputVector();// 0x8dee354
	Vector ConsumeInputVector();// 0x8dee314
	void AddInputVector(Vector WorldVector, bool bForce);// 0x8dee24c
<----------Generated by SSpawner v1.0.4---------->


Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x150, Size: 0x20]
	float FixedPathBrakingDistance;//[Offset: 0x170, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x174, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x174, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x174, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x178, Size: 0x4]
	void StopMovementKeepPathing();// 0x8dc1fe8
	void StopActiveMovement();// 0x8dc1fcc
	bool IsSwimming();// 0x8dc1f8c
	bool IsMovingOnGround();// 0x8dc1f4c
	bool IsFlying();// 0x8dc1f0c
	bool IsFalling();// 0x8dc1ecc
	bool IsCrouching();// 0x8dc1e8c
<----------Generated by SSpawner v1.0.4---------->


Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0x110, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0x118, Size: 0x8]
	Vector Velocity;//[Offset: 0x124, Size: 0xc]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0x131, Size: 0x1]
	Vector PlaneConstraintNormal;//[Offset: 0x134, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0x140, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 0x1]
	void StopMovementImmediately();// 0x8db25c4
	void SnapUpdatedComponentToPlane();// 0x8db25a8
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x8db2524
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x8db24a0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x8db241c
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x8db235c
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x8db22d0
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x8db224c
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x8db21c8
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x8db1fd8
	float K2_GetModifiedMaxSpeed();// 0x8db1f9c
	float K2_GetMaxSpeedModifier();// 0x8db1f60
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x8db1ec8
	Vector GetPlaneConstraintOrigin();// 0x8db1e88
	Vector GetPlaneConstraintNormal();// 0x8db1e48
	enum GetPlaneConstraintAxisSetting();// 0x8db1e2c
	PhysicsVolume* GetPhysicsVolume();// 0x8db1df0
	float GetMaxSpeed();// 0x8db1db4
	float GetGravityZ();// 0x8db1d78
	Vector ConstrainNormalToPlane(Vector Normal);// 0x8db1ce0
	Vector ConstrainLocationToPlane(Vector Location);// 0x8db1c48
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x8db1bb0
<----------Generated by SSpawner v1.0.4---------->


Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0x10, Size: 0x98]
<----------Generated by SSpawner v1.0.4---------->


Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Distance;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x54, Size: 0x4]
	int Item;//[Offset: 0x58, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 0x8]
	Actor* Actor;//[Offset: 0x64, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	int FaceIndex;//[Offset: 0x80, Size: 0x4]
	Vector[] TriangleVertexLocationArray;//[Offset: 0x88, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: Vector_NetQuantize.Vector
<----------Generated by SSpawner v1.0.4---------->


Class: Vector_NetQuantizeNormal.Vector
<----------Generated by SSpawner v1.0.4---------->


Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction
<----------Generated by SSpawner v1.0.4---------->


Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0xec, Size: 0xc]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0xf9, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: Vector_NetQuantize10.Vector
<----------Generated by SSpawner v1.0.4---------->


Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	class NavigationData* PreferredNavData;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x3f8, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x400, Size: 0x58]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x458, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x458, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x458, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x459, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x45c, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x460, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x538, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x20, Size: 0x8]
	Color Color;//[Offset: 0x28, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x2c, Size: 0xc]
	class NavigationData* NavigationDataClass;//[Offset: 0x38, Size: 0x8]
	SoftClassPath NavigationDataClassName;//[Offset: 0x40, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: SoftClassPath.SoftObjectPath
<----------Generated by SSpawner v1.0.4---------->


Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x790, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x794, Size: 0x4]
	float CapsuleHeight;//[Offset: 0x798, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x8cb62a8
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x8cb61e4
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x8cb6120
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x8cb6030
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x8cb5f48
	float GetUnscaledCapsuleRadius();// 0x8cb5f2c
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x8cb5f08
	float GetUnscaledCapsuleHalfHeight();// 0x8cb5eec
	float GetShapeScale();// 0x8cb5e8c
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x8cb5d4c
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x8cb5c14
	float GetScaledCapsuleRadius();// 0x8cb5bac
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x8cb5b3c
	float GetScaledCapsuleHalfHeight();// 0x8cb5ad4
<----------Generated by SSpawner v1.0.4---------->


Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x770, Size: 0x4]
	BodySetup* ShapeBodySetup;//[Offset: 0x778, Size: 0x8]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x780, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x780, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x780, Size: 0x1]
	class NavArea* AreaClass;//[Offset: 0x788, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	bool bNearPushBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bPushedByBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x160]
<----------Generated by SSpawner v1.0.4---------->


Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x100]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x148, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x154, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x3f4, Size: 0x4]
	byte Ping;//[Offset: 0x3f8, Size: 0x1]
	FString PlayerName;//[Offset: 0x400, Size: 0x10]
	int PlayerID;//[Offset: 0x420, Size: 0x4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x424, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x424, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x424, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x424, Size: 0x1]
	int StartTime;//[Offset: 0x428, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x430, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x440, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x450, Size: 0x18]
	Pawn* PawnPrivate;//[Offset: 0x470, Size: 0x8]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x70644c4
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x70644c4
	void OnRep_UniqueId();// 0x8e0aab0
	void OnRep_Score();// 0x8e0aa94
	void OnRep_PlayerName();// 0x8e0aa78
	void OnRep_bIsInactive();// 0x8e0aa5c
<----------Generated by SSpawner v1.0.4---------->


Class: Info.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: LocalMessage.Object
<----------Generated by SSpawner v1.0.4---------->


Class: UniqueNetIdRepl.UniqueNetIdWrapper
<----------Generated by SSpawner v1.0.4---------->


Class: UniqueNetIdWrapper
<----------Generated by SSpawner v1.0.4---------->


Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x460, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x470, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x478, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x488, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x490, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x498, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x4a4, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x4bc, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x4c0, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x4d0, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x4e4, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x4e8, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x4f4, Size: 0xc]
	int ClientCap;//[Offset: 0x500, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x508, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x510, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x518, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x520, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c2, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x5c3, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x600, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x608, Size: 0x8]
	float InputYawScale;//[Offset: 0x61c, Size: 0x4]
	float InputPitchScale;//[Offset: 0x620, Size: 0x4]
	float InputRollScale;//[Offset: 0x624, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x628, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x628, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x628, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x628, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x628, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x628, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x62c, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x630, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x640, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x641, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x642, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x643, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x644, Size: 0x4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x658, Size: 0x1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x6d0, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6d8, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x6f0, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x738, Size: 0x8]
	Vector SpawnLocation;//[Offset: 0x740, Size: 0xc]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]
	uint16 SeamlessTravelCount;//[Offset: 0x752, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x754, Size: 0x2]
	bool bOpenReconnectViewPointFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75c, Size: 0x1]
	bool WasInputKeyJustReleased(Key Key);// 0x8e05c24
	bool WasInputKeyJustPressed(Key Key);// 0x8e059d4
	void ToggleSpeaking(bool bInSpeaking);// 0x8e05948
	void SwitchLevel(FString URL);// 0x8e05898
	void StopHapticEffect(enum Hand);// 0x8e0581c
	void StartFire(byte FireModeNum);// 0x8e05798
	void SetVirtualJoystickVisibility(bool bVisible);// 0x8e0570c
	void SetViewTargetWithBlend(Actor* NewViewTarget, float blendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x8e05590
	void SetName(FString S);// 0x8e054e0
	void SetMouseLocation(const int X, const int Y);// 0x8e0542c
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x8e05374
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x8e05284
	void SetControllerLightColor(Color Color);// 0x8e0520c
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x8e05060
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x8e04f6c
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x8e04e58
	void ServerViewPrevPlayer();// 0x8e04df8
	void ServerViewNextPlayer();// 0x8e04d98
	void ServerVerifyViewTarget();// 0x8e04d38
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x8e04c44
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x8e04b50
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x8e04798
	void ServerToggleAILogging();// 0x8e04738
	void ServerShortTimeout();// 0x8e046d8
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x8e04614
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x8e0451c
	void ServerRestartPlayer();// 0x8e044bc
	void ServerPause();// 0x8e0445c
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x8e043bc
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x8e04004
	void ServerCheckClientPossessionReliable();// 0x8e03fa4
	void ServerCheckClientPossession();// 0x8e03f44
	void ServerChangeName(FString S);// 0x8e03e68
	void ServerCamera(FName NewMode);// 0x8e03db8
	void ServerAcknowledgePossession(Pawn* P);// 0x8e03d08
	void SendToConsole(FString Command);// 0x8e03c58
	void RestartLevel();// 0x8e03c3c
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x8e03b1c
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x8e039e4
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x8e03774
	void Pause();// 0x8e03758
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x8e036cc
	void OnGoingToLoseJoystick();// 0x8e036b0
	void LocalTravel(FString URL);// 0x8e03600
	bool IsInputKeyDown(Key Key);// 0x8e033b0
	void GetViewportSize(out int SizeX, out int SizeY);// 0x8e032cc
	SpectatorPawn* GetSpectatorPawn();// 0x8e032b0
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x8e031c0
	Vector GetInputVectorKeyState(Key Key);// 0x8e02f70
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x8e02e00
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x8e02d1c
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x8e02ba0
	float GetInputKeyTimeDown(Key Key);// 0x8e02954
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x8e02834
	float GetInputAnalogKeyState(Key Key);// 0x8e025e8
	HUD* GetHUD();// 0x8e025b4
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x8e023d0
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x8e02230
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x8e02090
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x8e01ee8
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x8e01d84
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x8e01c20
	Vector GetFocalLocation();// 0x8e01be0
	void FOV(float NewFOV);// 0x8e01b5c
	void EnableCheats();// 0x8e01b40
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x8e019e0
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x8e018f8
	void ConsoleKey(Key Key);// 0x8e016a8
	void ClientWasKicked(const FText KickReason);// 0x8e0155c
	void ClientVoiceHandshakeComplete();// 0x8e01540
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x8e013a4
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x8e01114
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x8e00f9c
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x8e00e2c
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x8e00cc4
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x8e00c08
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x8e00b40
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x8e00abc
	void ClientStartOnlineSession();// 0x8e00aa0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x8e00a1c
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x8e00910
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x8e00884
	void ClientSetHUD(class HUD NewHUDClass);// 0x8e00800
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x8e00704
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x8e0059c
	void ClientSetCameraMode(FName NewCamMode);// 0x8e00518
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x8e00394
	void ClientSetBlockOnAsyncLoading();// 0x8e00378
	void ClientReturnToMainMenu(FString ReturnReason);// 0x8e002c8
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x8e00244
	void ClientRestart(Pawn* NewPawn);// 0x8e001c0
	void ClientReset();// 0x8e001a4
	void ClientRepObjRef(Object* Object);// 0x8e00120
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x8dfffb0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x8dffe68
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x8dffd54
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x8dffc20
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x8dffb28
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x8dff9d8
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x8dff8a0
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x8dff62c
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x8dff39c
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x8dff270
	void ClientIgnoreMoveInput(bool bIgnore);// 0x8dff1e4
	void ClientIgnoreLookInput(bool bIgnore);// 0x8dff158
	void ClientGotoState(FName NewState);// 0x8dff0d4
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x8dff00c
	void ClientForceGarbageCollection();// 0x8dfeff0
	void ClientFlushLevelStreaming();// 0x8dfefdc
	void ClientEndOnlineSession();// 0x8dfefc0
	void ClientEnableNetworkVoice(bool bEnable);// 0x8dfef34
	void ClientCommitMapChange();// 0x8dfef18
	void ClientClearCameraLensEffects();// 0x8dfeefc
	void ClientCapBandwidth(int Cap);// 0x8dfee78
	void ClientCancelPendingMapChange();// 0x8dfee5c
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x8dfed60
	void ClearJoystick();// 0x8dfed44
	void ClearAudioListenerOverride();// 0x8dfed30
	void Camera(FName NewMode);// 0x8dfecac
	void AddYawInput(float Val);// 0x8dfec28
	void AddRollInput(float Val);// 0x8dfeba4
	void AddPitchInput(float Val);// 0x8dfeb20
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x8dfea9c
<----------Generated by SSpawner v1.0.4---------->


Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpTrackInst.Object
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x3f8, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x400, Size: 0x8]
	float DefaultFOV;//[Offset: 0x410, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x418, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x420, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x470, Size: 0x5b0]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0xa20, Size: 0x5b0]
	TViewTarget ViewTarget;//[Offset: 0xfd0, Size: 0x5c0]
	TViewTarget PendingViewTarget;//[Offset: 0x1590, Size: 0x5c0]
	CameraModifier*[] ModifierList;//[Offset: 0x1b68, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x1b78, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x1b88, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x1b8c, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x1b98, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x1bb8, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1bc8, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1bd0, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1c10, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1c30, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1c40, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x1c50, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c58, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c58, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c58, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c59, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x1c5c, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x1c60, Size: 0x4]
	float ViewYawMin;//[Offset: 0x1c64, Size: 0x4]
	float ViewYawMax;//[Offset: 0x1c68, Size: 0x4]
	float ViewRollMin;//[Offset: 0x1c6c, Size: 0x4]
	float ViewRollMax;//[Offset: 0x1c70, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x8dfc494
	void StopCameraFade();// 0x8dfc478
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x8dfc3b0
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x8dfc2e8
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x8dfc220
	void StopAllCameraShakes(bool bImmediately);// 0x8dfc194
	void StopAllCameraAnims(bool bImmediate);// 0x8dfc108
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x8dfbf44
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x8dfbe40
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x8dfbda8
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x8dfbd24
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x8dfbbdc
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x8dfb91c
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x8dfb7d0
	void OnPhotographySessionStart();// 0x8dfb7b4
	void OnPhotographySessionEnd();// 0x8dfb798
	void OnPhotographyMultiPartCaptureStart();// 0x8dfb77c
	void OnPhotographyMultiPartCaptureEnd();// 0x8dfb760
	PlayerController* GetOwningPlayerController();// 0x8dfb724
	float GetFOVAngle();// 0x8dfb6e8
	Rotator GetCameraRotation();// 0x8dfb6b0
	Vector GetCameraLocation();// 0x8dfb678
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x8dfb5e4
	void ClearCameraLensEffects();// 0x8dfb5c8
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x70644c4
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x8dfb534
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x8dfb4a0
<----------Generated by SSpawner v1.0.4---------->


Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5a0]
<----------Generated by SSpawner v1.0.4---------->


Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 0xc]
	Rotator Rotation;//[Offset: 0x18, Size: 0xc]
	float FOV;//[Offset: 0x24, Size: 0x4]
	float OrthoWidth;//[Offset: 0x28, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 0x4]
	float AspectRatio;//[Offset: 0x34, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x39, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x550]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x590, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_RadialBlurCenterPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_RadialBlurIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_RadialBlurDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_SRTDefaultOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_SRTSkyLightScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	float WhiteTemp;//[Offset: 0x18, Size: 0x4]
	float WhiteTint;//[Offset: 0x1c, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 0x10]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 0x4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]
	float FilmSlope;//[Offset: 0x174, Size: 0x4]
	float FilmToe;//[Offset: 0x178, Size: 0x4]
	float FilmShoulder;//[Offset: 0x17c, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x180, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x184, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1b0, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 0x10]
	float FilmContrast;//[Offset: 0x1e4, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x1e8, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x1ec, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x204, Size: 0x4]
	byte BloomMethod;//[Offset: 0x208, Size: 0x1]
	float BloomIntensity;//[Offset: 0x20c, Size: 0x4]
	float BloomThreshold;//[Offset: 0x210, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x214, Size: 0x4]
	float Bloom1Size;//[Offset: 0x218, Size: 0x4]
	float Bloom2Size;//[Offset: 0x21c, Size: 0x4]
	float Bloom3Size;//[Offset: 0x220, Size: 0x4]
	float Bloom4Size;//[Offset: 0x224, Size: 0x4]
	float Bloom5Size;//[Offset: 0x228, Size: 0x4]
	float Bloom6Size;//[Offset: 0x22c, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 0x10]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 0x8]
	float BloomConvolutionSize;//[Offset: 0x298, Size: 0x4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x29c, Size: 0x8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a4, Size: 0xc]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b0, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b4, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b8, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2bc, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2c0, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x2c8, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2cc, Size: 0x10]
	Vector2D RadialBlurCenterPos;//[Offset: 0x2dc, Size: 0x8]
	float RadialBlurIntensity;//[Offset: 0x2e4, Size: 0x4]
	float RadialBlurDistance;//[Offset: 0x2e8, Size: 0x4]
	LinearColor AmbientCubemapTint;//[Offset: 0x2ec, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x2fc, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x300, Size: 0x8]
	byte AutoExposureMethod;//[Offset: 0x308, Size: 0x1]
	float AutoExposureLowPercent;//[Offset: 0x30c, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x310, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x314, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x318, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x31c, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x320, Size: 0x4]
	bool BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 0x1]
	bool ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 0x1]
	Texture2D* BlindWatermarkingTexture;//[Offset: 0x328, Size: 0x8]
	bool bOverride_BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	bool bOverride_ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1]
	bool bOverride_BlindWatermarkingTexture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1]
	float AutoExposureBias;//[Offset: 0x334, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x338, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x33c, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x340, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x344, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x354, Size: 0x4]
	int LensFlareCount;//[Offset: 0x358, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x35c, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x360, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x368, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x3e8, Size: 0x4]
	float GrainJitter;//[Offset: 0x3ec, Size: 0x4]
	float GrainIntensity;//[Offset: 0x3f0, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x3f4, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3f8, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x3fc, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x404, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x408, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x40c, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x410, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x414, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x418, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x41c, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x420, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x424, Size: 0x4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x428, Size: 0x10]
	float SRTIndirectLightingIntensity;//[Offset: 0x438, Size: 0x4]
	float SRTMaxOcclusionDistance;//[Offset: 0x43c, Size: 0x4]
	float SRTMinOcclusion;//[Offset: 0x440, Size: 0x4]
	float SRTDefaultOcclusion;//[Offset: 0x444, Size: 0x4]
	float SRTSkyLightScale;//[Offset: 0x448, Size: 0x4]
	float SRTFilterSmoothness;//[Offset: 0x44c, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x450, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x460, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x464, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x468, Size: 0x8]
	byte DepthOfFieldMethod;//[Offset: 0x470, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x471, Size: 0x1]
	float DepthOfFieldFstop;//[Offset: 0x474, Size: 0x4]
	float DepthOfFieldSensorWidth;//[Offset: 0x478, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x47c, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x480, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x484, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x488, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x48c, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x490, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x494, Size: 0x4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x498, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x49c, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4a0, Size: 0x4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x4a8, Size: 0x8]
	float DepthOfFieldOcclusion;//[Offset: 0x4b0, Size: 0x4]
	float DepthOfFieldColorThreshold;//[Offset: 0x4b4, Size: 0x4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x4b8, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4bc, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4c0, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4c4, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x4c8, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x4cc, Size: 0x4]
	float LPVIntensity;//[Offset: 0x4d0, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x4d4, Size: 0x4]
	float LPVSize;//[Offset: 0x4d8, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4dc, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4e0, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x4e4, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4e8, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4ec, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4f0, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4f4, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4f8, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4fc, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x500, Size: 0x4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x504, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x508, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x50c, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x510, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x514, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x518, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x520, Size: 0x10]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x530, Size: 0x4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x534, Size: 0x4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x538, Size: 0x4]
	Object*[] Blendables;//[Offset: 0x540, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xe8, Size: 0x4]
	int LevelIndex;//[Offset: 0xec, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xf0, Size: 0x4]
	IntPoint ImportedSize;//[Offset: 0xf4, Size: 0x8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x100, Size: 0x8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10a, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10a, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10a, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10a, Size: 0x1]
	byte AddressX;//[Offset: 0x10b, Size: 0x1]
	byte AddressY;//[Offset: 0x10c, Size: 0x1]
	int Blueprint_GetSizeY();// 0x8e639dc
	int Blueprint_GetSizeX();// 0x8e639a8
<----------Generated by SSpawner v1.0.4---------->


Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TextureCube.Texture.Object
<----------Generated by SSpawner v1.0.4---------->


Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5a0]
	PlayerState* PlayerState;//[Offset: 0x5b0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x8cad910
	Actor* GetViewTarget();// 0x8cad8d4
	void EnableModifier();// 0x8cad8b8
	void DisableModifier(bool bImmediate);// 0x8cad82c
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x70644c4
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x458, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x460, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x468, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x470, Size: 0x30]
	float BaseFOV;//[Offset: 0x4a0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x4a8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x4b8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x3f8, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x400, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x400, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x408, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x418, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x428, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x438, Size: 0x10]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x448, Size: 0x10]
	void ToggleActive();// 0x8ce0a18
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x8ce0960
	void SetTemplate(ParticleSystem* NewTemplate);// 0x8ce08dc
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x8ce0828
	void SetFloatParameter(FName ParameterName, float Param);// 0x8ce0770
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x8ce06b8
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x8ce0604
	void OnRep_bCurrentlyActive();// 0x8ce05e8
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x8ce0564
	bool IsActive();// 0x8ce052c
	void Deactivate();// 0x8ce0518
	void Activate();// 0x8ce0504
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x28, Size: 0x1]
	bool bAlwaysUpdateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	float LODDistanceCheckTime;//[Offset: 0x64, Size: 0x4]
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bUseNewLodFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	byte LODMethod;//[Offset: 0x6a, Size: 0x1]
	float[] LODDistances;//[Offset: 0x70, Size: 0x10]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x88, Size: 0x10]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	Box FixedRelativeBoundingBox;//[Offset: 0x9c, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xb8, Size: 0x4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 0x1]
	float Delay;//[Offset: 0xc0, Size: 0x4]
	float DelayLow;//[Offset: 0xc4, Size: 0x4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xcc, Size: 0x4]
	enum InsignificantReaction;//[Offset: 0xd0, Size: 0x1]
	float InsignificanceDelay;//[Offset: 0xd4, Size: 0x4]
	enum MaxSignificanceLevel;//[Offset: 0xd8, Size: 0x1]
	Vector MacroUVPosition;//[Offset: 0xdc, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xe8, Size: 0x4]
	byte OcclusionBoundsMethod;//[Offset: 0xec, Size: 0x1]
	Box CustomOcclusionBounds;//[Offset: 0xf0, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0x110, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x120, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x8de43d0
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x38, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0x4c, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x50, Size: 0x4]
	float MediumDetailSpawnRateScale;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x5c, Size: 0x4]
	byte DetailMode;//[Offset: 0x60, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x62, Size: 0x1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x48, Size: 0x8]
	MaterialInterface* MaterialPath;//[Offset: 0x50, Size: 0x28]
	Vector EmitterOrigin;//[Offset: 0x78, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x84, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x90, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x94, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x98, Size: 0x4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 0x1]
	byte SortMode;//[Offset: 0x9d, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9e, Size: 0x1]
	float EmitterDuration;//[Offset: 0xa0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xa4, Size: 0x4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1]
	int EmitterLoops;//[Offset: 0xac, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0xb0, Size: 0x38]
	byte ParticleBurstMethod;//[Offset: 0xe8, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xf0, Size: 0x10]
	float EmitterDelay;//[Offset: 0x100, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0x104, Size: 0x4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0x109, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0x10c, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0x110, Size: 0x4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x114, Size: 0x1]
	float RandomImageTime;//[Offset: 0x118, Size: 0x4]
	int RandomImageChanges;//[Offset: 0x11c, Size: 0x4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	Vector MacroUVPosition;//[Offset: 0x124, Size: 0xc]
	float MacroUVRadius;//[Offset: 0x130, Size: 0x4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 0x1]
	int MaxDrawCount;//[Offset: 0x138, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0x13c, Size: 0x1]
	Texture2D* CutoutTexture;//[Offset: 0x140, Size: 0x8]
	Texture2D* CutoutTexturePath;//[Offset: 0x148, Size: 0x28]
	byte BoundingMode;//[Offset: 0x170, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0x171, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x174, Size: 0x4]
	int CutoutSubImagesX;//[Offset: 0x178, Size: 0x4]
	int CutoutSubImagesY;//[Offset: 0x17c, Size: 0x4]
	byte EmitterNormalsMode;//[Offset: 0x180, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0x184, Size: 0xc]
	Vector NormalsCylinderDirection;//[Offset: 0x190, Size: 0xc]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 0x1]
	FName[] NamedMaterialOverrides;//[Offset: 0x1a0, Size: 0x10]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x1b0, Size: 0x10]
	bool bUseComputeRaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]
	float MaxValue;//[Offset: 0x2c, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: Distribution.Object
<----------Generated by SSpawner v1.0.4---------->


Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 0x1]
	byte EntryCount;//[Offset: 0x1, Size: 0x1]
	byte EntryStride;//[Offset: 0x2, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x3, Size: 0x1]
	float TimeScale;//[Offset: 0x4, Size: 0x4]
	float TimeBias;//[Offset: 0x8, Size: 0x4]
	float[] Values;//[Offset: 0x10, Size: 0x10]
	byte LockFlag;//[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleModuleTypeDataBase.ParticleModule.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat rate;//[Offset: 0x50, Size: 0x38]
	RawDistributionFloat RateScale;//[Offset: 0x88, Size: 0x38]
	byte ParticleBurstMethod;//[Offset: 0xc0, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xc8, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xd8, Size: 0x38]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleModuleEventBase.ParticleModule.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleModuleEventSendToGame.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x49, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x50, Size: 0x50]
	OrbitOptions OffsetOptions;//[Offset: 0xa0, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0xa8, Size: 0x50]
	OrbitOptions RotationOptions;//[Offset: 0xf8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0x100, Size: 0x50]
	OrbitOptions RotationRateOptions;//[Offset: 0x150, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]
	float MaxValue;//[Offset: 0x2c, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x30, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x3c, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x48, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x48, Size: 0x1]
	FName EventName;//[Offset: 0x50, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x770, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x778, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x788, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x799, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x799, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x799, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x799, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79a, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79a, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x79a, Size: 0x1]
	byte LODMethod;//[Offset: 0x79c, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x79d, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x7a0, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x7b0, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x7c0, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x7d0, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x7e0, Size: 0x10]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x7f0, Size: 0x10]
	Vector OldPosition;//[Offset: 0x800, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x80c, Size: 0xc]
	float WarmupTime;//[Offset: 0x818, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x81c, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x824, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x82c, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x850, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x868, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x8c0, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x8c8, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x8d0, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x8d1, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x8d2, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x900, Size: 0x10]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x8debcd0
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x8debba4
	void SetTemplate(ParticleSystem* NewTemplate);// 0x8debb28
	void SetSocketName(FName InSocketName);// 0x8debaac
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x8deb9f8
	void SetLODLevel(int InLODLevel);// 0x8deb974
	void SetFloatParameter(FName ParameterName, float Param);// 0x8deb8b4
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x8deb7ec
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x8deb72c
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x8deb630
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x8deb534
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x8deb438
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x8deb33c
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x8deb240
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x8deb144
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x8deb084
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x8deaf74
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x8deadec
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x8dead30
	void OnMaterialLoaded(MaterialInterface* MaterialInstance, int ElementIndex);// 0x8deac78
	int GetNumActiveParticles();// 0x8deac44
	MaterialInterface* GetNamedMaterial(FName InName);// 0x8deabb0
	int GetLODLevel();// 0x8deab74
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x8deaa5c
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x8dea940
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x8dea828
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x8dea710
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x8dea5f4
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x8dea4dc
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x8dea3fc
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x8dea28c
	void EndTrails();// 0x8dea278
	void CreateNamedDynamicMaterialInstanceAsync(FName InName, delegate MaterialInstCallback, MaterialInterface* SourceMaterial);// 0x8dea15c
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x8dea090
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x8de9f64
<----------Generated by SSpawner v1.0.4---------->


Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x8de9b40
	void SetFloatParameter(FName ParameterName, float Param);// 0x8de9a80
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x8de99c0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x8de9904
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x8da77ec
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x8da7738
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x8da7680
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x8da7590
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x8da7500
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x8da7474
	float K2_GetScalarParameterValue(FName ParameterName);// 0x8da73e8
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x8da736c
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x8da72f0
	void CopyInterpParameters(MaterialInstance* Source);// 0x8da7274
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x78, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0x80, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x90, Size: 0x10]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xa0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0xb0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xc0, Size: 0x10]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0xd0, Size: 0x50]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x124, Size: 0x10]
	Texture*[] PermutationTextureReferences;//[Offset: 0x158, Size: 0x10]
	bool bEnableTexture2DArrayShaderVariant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Font* FontValue;//[Offset: 0x8, Size: 0x8]
	int FontPage;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x20]
<----------Generated by SSpawner v1.0.4---------->


Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]
<----------Generated by SSpawner v1.0.4---------->


Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: CompositeSubFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	Int32Range[] CharacterRanges;//[Offset: 0x10, Size: 0x10]
	float ScalingFactor;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	float ParameterValue;//[Offset: 0x8, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Texture* ParameterValue;//[Offset: 0x8, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bOverride_ShadingRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 0x4]
	byte BlendMode;//[Offset: 0xc, Size: 0x1]
	byte ShadingModel;//[Offset: 0xd, Size: 0x1]
	byte ShadingRate;//[Offset: 0xe, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleSystemLOD
<----------Generated by SSpawner v1.0.4---------->


Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakeMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x70644c4
	void ReceivePlayShake(float Scale);// 0x70644c4
	bool ReceiveIsFinished();// 0x8caec58
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x550]
	float BasePostProcessBlendWeight;//[Offset: 0x5b0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x8cabe28
	void SetScale(float NewDuration);// 0x8cabdac
	void SetDuration(float NewDuration);// 0x8cabd30
	void SetCurrentTime(float NewTime);// 0x8cabcb4
<----------Generated by SSpawner v1.0.4---------->


Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x3f4, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x3f8, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x400, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 0x1]
	float AspectRatio;//[Offset: 0x414, Size: 0x4]
	float FOVAngle;//[Offset: 0x418, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x41c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x420, Size: 0x550]
	int GetAutoActivatePlayerIndex();// 0x8cab630
<----------Generated by SSpawner v1.0.4---------->


Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x2cc, Size: 0x4]
	float OrthoWidth;//[Offset: 0x2d0, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x2d4, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x2d8, Size: 0x4]
	float AspectRatio;//[Offset: 0x2dc, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 0x1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 0x1]
	bool bAutoFixFovByAspectRatio;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e0, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x2e1, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x2e4, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2f0, Size: 0x550]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b0, Size: 0x1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x8cacd54
	void SetProjectionMode(byte InProjectionMode);// 0x8caccdc
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x8cacc64
	void SetOrthoWidth(float InOrthoWidth);// 0x8cacbec
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x8cacb74
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x8cacafc
	void SetFieldOfView(float InFieldOfView);// 0x8caca78
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x8cac9ec
	void SetAutoFixFovByAspectRatio(bool bInAutoFixFovByAspectRatio);// 0x8cac968
	void SetAspectRatio(float InAspectRatio);// 0x8cac8f0
	void SetActive(bool bNewActive, bool bReset);// 0x8cac818
	void RemoveBlendable(interface class InBlendableObject);// 0x8cac71c
	void OnViewportSizeChanged(Vector2D OldViewportSize, Vector2D NewViewportSize);// 0x8cac66c
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x8cac4cc
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x8cac450
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x8cac310
<----------Generated by SSpawner v1.0.4---------->


Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x8cbff18
	void ViewSelf();// 0x8cbfefc
	void ViewPlayer(FString S);// 0x8cbfe4c
	void ViewClass(class Actor DesiredClass);// 0x8cbfdc8
	void ViewActor(FName actorName);// 0x8cbfd44
	void TriggerCrash();// 0x8cbfd30
	void ToggleDebugCamera();// 0x8cbfd14
	void ToggleAILogging();// 0x8cbfcf8
	void TestCollisionDistance();// 0x8cbfcdc
	void Teleport();// 0x8cbfcc0
	void Summon(FString ClassName);// 0x8cbfc10
	void StreamLevelOut(FName PackageName);// 0x8cbfb8c
	void StreamLevelIn(FName PackageName);// 0x8cbfb08
	void Slomo(float NewTimeDilation);// 0x8cbfa84
	void SetWorldOrigin();// 0x8cbfa70
	void SetNavDrawDistance(float DrawDistance);// 0x8cbf9f4
	void SetMouseSensitivityToDefault();// 0x8cbf9e0
	void ServerToggleAILogging();// 0x8cbf980
	void ReceiveInitCheatManager();// 0x70644c4
	void ReceiveEndPlay();// 0x70644c4
	void RebuildNavigation();// 0x8cbf964
	void PlayersOnly();// 0x8cbf948
	void OnlyLoadLevel(FName PackageName);// 0x8cbf8c4
	void LogLoc();// 0x8cbf8a8
	void InvertMouse();// 0x8cbf894
	void God();// 0x8cbf878
	void Ghost();// 0x8cbf85c
	void FreezeFrame(float Delay);// 0x8cbf7d8
	void Fly();// 0x8cbf7bc
	void FlushLog();// 0x8cbf7a0
	void EnableDebugCamera();// 0x8cbf784
	void DumpVoiceMutingState();// 0x8cbf768
	void DumpPartyState();// 0x8cbf74c
	void DumpOnlineSessionState();// 0x8cbf730
	void DumpChatState();// 0x8cbf714
	void DisableDebugCamera();// 0x8cbf6f8
	void DestroyTarget();// 0x8cbf6dc
	void DestroyPawns(class Pawn aClass);// 0x8cbf658
	void DestroyAllPawnsExceptTarget();// 0x8cbf63c
	void DestroyAll(class Actor aClass);// 0x8cbf5b8
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x8cbf4fc
	void DebugCapsuleSweepPawn();// 0x8cbf4e0
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x8cbf454
	void DebugCapsuleSweepClear();// 0x8cbf438
	void DebugCapsuleSweepChannel(byte Channel);// 0x8cbf3b4
	void DebugCapsuleSweepCapture();// 0x8cbf398
	void DebugCapsuleSweep();// 0x8cbf37c
	void DamageTarget(float DamageAmount);// 0x8cbf2f8
	void CheatScript(FString ScriptName);// 0x8cbf1c4
	void ChangeSize(float F);// 0x8cbf140
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x8cbef84
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x8cbeddc
	void BugIt(FString ScreenShotDescription);// 0x8cbed2c
<----------Generated by SSpawner v1.0.4---------->


Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x75d, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x75d, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x760, Size: 0x8]
	float SpeedScale;//[Offset: 0x788, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x78c, Size: 0x4]
	float InitialAccel;//[Offset: 0x790, Size: 0x4]
	float InitialDecel;//[Offset: 0x794, Size: 0x4]
	void ToggleDisplay();// 0x8ccc208
	void ShowDebugSelectedInfo();// 0x8ccc1ec
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x8ccc170
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x70644c4
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x70644c4
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x70644c4
	Actor* GetSelectedActor();// 0x8ccc13c
<----------Generated by SSpawner v1.0.4---------->


Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x770, Size: 0x4]
	float FrustumAngle;//[Offset: 0x774, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x778, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x77c, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x780, Size: 0x4]
	Texture* Texture;//[Offset: 0x788, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1]
	KeyBind[] DebugExecBindings;//[Offset: 0x198, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x1d8, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x8e0a21c
	void SetBind(FName BindName, FString Command);// 0x8e0a134
	void InvertAxisKey(const Key AxisKey);// 0x8e09eec
	void InvertAxis(const FName AxisName);// 0x8e09e70
	void ClearSmoothing();// 0x8e09e5c
<----------Generated by SSpawner v1.0.4---------->


Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x78]
<----------Generated by SSpawner v1.0.4---------->


Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x70]
	CurveFloat* ExternalCurve;//[Offset: 0x70, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	Actor* ObserveTarget;//[Offset: 0xa0, Size: 0x8]
	int MaxPacket;//[Offset: 0xa8, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool RecordLifetimeChangelist;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	UniqueNetIdRepl PlayerID;//[Offset: 0x160, Size: 0x18]
	double LastReceiveTime;//[Offset: 0x1e0, Size: 0x8]
	bool bOpenClampBandwidthDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338b8, Size: 0x1]
	float MaxBandwitdhDeltaTime;//[Offset: 0x338bc, Size: 0x4]
	Channel*[] ChannelsToTick;//[Offset: 0x33af0, Size: 0x10]
	int MaxPacketFaultCountPerMinute;//[Offset: 0x355ec, Size: 0x4]
	int MaxPacketFaultCountTotal;//[Offset: 0x355f0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x35600, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x40, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x48, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x4c, Size: 0x4]
	int MaxClientRate;//[Offset: 0x50, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x54, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x58, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x5c, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x60, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x64, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x68, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x6c, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x78, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x80, Size: 0x10]
	World* World;//[Offset: 0xa8, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0xd0, Size: 0x8]
	Property* RoleProperty;//[Offset: 0xd8, Size: 0x8]
	Property* RemoteRoleProperty;//[Offset: 0xe0, Size: 0x8]
	FName NetDriverName;//[Offset: 0xe8, Size: 0x8]
	float Time;//[Offset: 0x138, Size: 0x4]
	<Object*> PendingForceNetUpdateObjectSet;//[Offset: 0x520, Size: 0x50]
	NetOptimConfig* NetOptimConfig;//[Offset: 0x5d0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Property.Field.Object
<----------Generated by SSpawner v1.0.4---------->


Class: NetOptimConfig.WorldSubsystem.Subsystem.Object
	bool ActorRepNetNotRelevantLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	<byte,ActorRepNetNotRelevantLODConfig> ActorRepNetNotRelevantLODGroups;//[Offset: 0x38, Size: 0x50]
	<byte,ActorReplicateFreqLODGroup> ActorReplicateFreqLODGroups;//[Offset: 0x88, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: WorldSubsystem.Subsystem.Object
<----------Generated by SSpawner v1.0.4---------->


Class: Subsystem.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ActorRepNetNotRelevantLODConfig
	FName Category;//[Offset: 0x0, Size: 0x8]
	bool LODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float LODDeltaTime;//[Offset: 0xc, Size: 0x4]
	float LODDistFactor;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ActorReplicateFreqLODGroup
	FName Category;//[Offset: 0x0, Size: 0x8]
	bool LODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool LODDistEnhancedOnBack;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float LODBackEnhanceMinDistSq;//[Offset: 0xc, Size: 0x4]
	float LODBackEnhanceFactor;//[Offset: 0x10, Size: 0x4]
	float LODLongDistViewFactor;//[Offset: 0x14, Size: 0x4]
	ActorReplicateFreqLODConfig[] LODDistConfigs;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ActorReplicateFreqLODConfig
	float DistSquared;//[Offset: 0x0, Size: 0x4]
	float NetUpdateFreq;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PackageMap.Object
<----------Generated by SSpawner v1.0.4---------->


Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	SlateBrush Brush1;//[Offset: 0x10, Size: 0xb8]
	SlateBrush Brush2;//[Offset: 0xc8, Size: 0xb8]
	Vector2D Center;//[Offset: 0x180, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x188, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x190, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x198, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x1a0, Size: 0x8]
	Key MainInputKey;//[Offset: 0x1a8, Size: 0x18]
	Key AltInputKey;//[Offset: 0x1c0, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	Margin Margin;//[Offset: 0x10, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]
	bool bAsyncEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	Object* ResourceObject;//[Offset: 0x50, Size: 0x8]
	Object* SoftResourceObject;//[Offset: 0x58, Size: 0x28]
	FName ResourceName;//[Offset: 0x80, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x88, Size: 0x14]
	byte DrawAs;//[Offset: 0x9c, Size: 0x1]
	byte Tiling;//[Offset: 0x9d, Size: 0x1]
	byte Mirroring;//[Offset: 0x9e, Size: 0x1]
	byte ImageType;//[Offset: 0x9f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x458, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x45c, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x460, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x468, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x470, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x478, Size: 0x1]
	void TurnAtRate(float rate);// 0x8ccf050
	void MoveUp_World(float Val);// 0x8ccefcc
	void MoveRight(float Val);// 0x8ccef48
	void MoveForward(float Val);// 0x8cceec4
	void LookUpAtRate(float rate);// 0x8ccee48
<----------Generated by SSpawner v1.0.4---------->


Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x790, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x8e4d0b8
	float GetUnscaledSphereRadius();// 0x8e4d09c
	float GetShapeScale();// 0x8e4d03c
	float GetScaledSphereRadius();// 0x8e4cfd4
<----------Generated by SSpawner v1.0.4---------->


Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x798, Size: 0x4]
	int LowDeviceForcedLodModel;//[Offset: 0x79c, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x7a0, Size: 0x4]
	int MinLOD;//[Offset: 0x7a4, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x7a8, Size: 0x8]
	byte TileLength;//[Offset: 0x800, Size: 0x1]
	byte TileNum;//[Offset: 0x801, Size: 0x1]
	Texture2D* TileTexture;//[Offset: 0x808, Size: 0x8]
	Vector2D TileLocalMin;//[Offset: 0x810, Size: 0x8]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x818, Size: 0x1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x818, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x818, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x818, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x818, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x818, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x818, Size: 0x1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x818, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x819, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x819, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x819, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x819, Size: 0x1]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x819, Size: 0x1]
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x819, Size: 0x1]
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x819, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x81c, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x820, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x828, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x848, Size: 0x10]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 0x1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x860, Size: 0x50]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x8b0, Size: 0x18]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x8c8, Size: 0x14]
	Actor*[] AffectPointLightBPActors;//[Offset: 0x8e0, Size: 0x10]
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x8f0, Size: 0x10]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x8e5b6e0
	void SetOverrideCullingScreenSizeEnable(bool bEnable);// 0x8e5b65c
	void SetOverrideCullingScreenSize(float ScreenSize);// 0x8e5b5e0
	void SetLowDeviceForcedLodModel(int NewLowDeviceForcedLodModel);// 0x8e5b564
	void SetForcedLodModel(int NewForcedLodModel);// 0x8e5b4e8
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x8e5b46c
	void SetDirty();// 0x8e5b458
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x8e5b3dc
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x8e5b300
	void EnableMeshClipPlane(out const Plane ClipPlane, int PlaneIndex);// 0x8e5b228
	void EnableMeshClipArc(out const Plane ClipPlane, out const Vector4 ClipSphere);// 0x8e5b138
	void EnableMeshClip4Planes(out const Plane[] ClipPlanes, bool bBox);// 0x8e5b024
	void DisableMeshClipPlane(int PlaneIndex);// 0x8e5afa0
	void DisableMeshClipArc();// 0x8e5af84
	void DisableMeshClip4Planes();// 0x8e5af68
<----------Generated by SSpawner v1.0.4---------->


Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 0xc]
	PackedNormal Normal;//[Offset: 0xc, Size: 0x4]
	Color Color;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 0x1]
	byte Y;//[Offset: 0x1, Size: 0x1]
	byte Z;//[Offset: 0x2, Size: 0x1]
	byte W;//[Offset: 0x3, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 0x4]
	float LightmapBoost;//[Offset: 0x4, Size: 0x4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 0x4]
	float SunIntensity;//[Offset: 0xc, Size: 0x4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: StaticMeshPointLightVertexDataBuffer
	byte[] VertexData;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x108, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x118, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x128, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x150, Size: 0x10]
	Margin Padding;//[Offset: 0x160, Size: 0x10]
	WAnimTime WAnimTime;//[Offset: 0x170, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x180, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x190, Size: 0x10]
	delegate OnTouchStart;//[Offset: 0x1a0, Size: 0x10]
	delegate OnTouchMove;//[Offset: 0x1b0, Size: 0x10]
	delegate OnTouchEnd;//[Offset: 0x1c0, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1d0, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1e0, Size: 0x8]
	int Priority;//[Offset: 0x1e8, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ec, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ec, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ec, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ec, Size: 0x1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ec, Size: 0x1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1ec, Size: 0x1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1ec, Size: 0x1]
	bool needAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 0x1]
	bool isAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee, Size: 0x1]
	FName[] autoPlayNameList;//[Offset: 0x1f0, Size: 0x10]
	enum TickFrequency;//[Offset: 0x200, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x208, Size: 0x8]
	void UnregisterInputComponent();// 0x804d0cc
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x70644c4
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x804d00c
	void StopListeningForAllInputActions();// 0x804cff8
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x804cf7c
	void SetWAnimTime(WAnimTime InWAnimTime);// 0x804cf00
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x804ce44
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x804cd8c
	void SetPadding(Margin InPadding);// 0x804cd10
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x804cc94
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x804cc18
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x804cb60
	void SetInputActionPriority(int NewPriority);// 0x804cae4
	void SetInputActionBlocking(bool bShouldBlock);// 0x804ca60
	void SetForegroundColor(SlateColor InForegroundColor);// 0x804c808
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x804c784
	void SetDesiredSizeInViewport(Vector2D Size);// 0x804c70c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x804c690
	void SetAnchorsInViewport(Anchors Anchors);// 0x804c614
	void SetAlignmentInViewport(Vector2D Alignment);// 0x804c59c
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x804c520
	void RemoveFromViewport();// 0x804c50c
	void RegisterInputComponent();// 0x804c4f8
	void PreConstruct(bool IsDesignTime);// 0x70644c4
	void PlaySound(SoundBase* SoundToPlay);// 0x804c47c
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x804c2d8
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x804c16c
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x804c0e0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x70644c4
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x70644c4
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x70644c4
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x70644c4
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x70644c4
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x70644c4
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x70644c4
	void OnPaint(out PaintContext Context);// 0x70644c4
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x70644c4
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x70644c4
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x70644c4
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x70644c4
	void OnMouseCaptureLost();// 0x70644c4
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x70644c4
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x70644c4
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x70644c4
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x70644c4
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x70644c4
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x70644c4
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x70644c4
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x70644c4
	void OnFocusLost(FocusEvent InFocusEvent);// 0x70644c4
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x70644c4
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x70644c4
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x70644c4
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x70644c4
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x70644c4
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x70644c4
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x804c05c
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x804bfd8
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x70644c4
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x70644c4
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x804be74
	bool IsPlayingAnimation();// 0x804be50
	bool IsListeningForInputAction(FName ActionName);// 0x804bdc0
	bool IsInViewport();// 0x804bd88
	bool IsInteractable();// 0x70644c4
	bool IsAnyAnimationPlaying();// 0x804bd50
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x804bcc0
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x804bc30
	Widget* GetWidgetFromName(out const FName Name);// 0x804bb94
	Pawn* GetOwningPlayerPawn();// 0x804bb60
	PlayerController* GetOwningPlayer();// 0x804bb24
	LocalPlayer* GetOwningLocalPlayer();// 0x804baf0
	bool GetIsVisible();// 0x804bab8
	bool GetDontPaintWhenChildEmpty();// 0x804ba80
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x804b9f4
	Anchors GetAnchorsInViewport();// 0x804b9bc
	Vector2D GetAlignmentInViewport();// 0x804b988
	void Destruct();// 0x70644c4
	void Construct();// 0x70644c4
	void AddToViewport(int ZOrder);// 0x804b90c
	bool AddToPlayerScreen(int ZOrder);// 0x804b87c
<----------Generated by SSpawner v1.0.4---------->


Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1]
	bool bDisableVolatileInSlateGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 0x1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb4, Size: 0x1]
	bool bWriteSceneZBufferNew;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb4, Size: 0x1]
	byte UsedLayerPolicy;//[Offset: 0xb5, Size: 0x1]
	byte PreservedLayerNum;//[Offset: 0xb6, Size: 0x1]
	byte Cursor;//[Offset: 0xb7, Size: 0x1]
	enum Clipping;//[Offset: 0xb8, Size: 0x1]
	enum Visibility;//[Offset: 0xb9, Size: 0x1]
	bool bVisiblePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	enum WidgetVisible;//[Offset: 0xbb, Size: 0x1]
	bool bOpenReciveClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	bool bReciveClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]
	WidgetNavigation* Navigation;//[Offset: 0xc0, Size: 0x8]
	PropertyBinding*[] NativeBindings;//[Offset: 0xf0, Size: 0x10]
	void SetWidgetRender(const enum InWidgetVisible);// 0x8052cec
	void SetVisibility(enum InVisibility);// 0x8052c68
	void SetUserFocus(PlayerController* PlayerController);// 0x8052bec
	void SetToolTipText(out const FText InToolTipText);// 0x8052a98
	void SetToolTip(Widget* Widget);// 0x8052a1c
	void SetRenderTranslation(Vector2D Translation);// 0x80529a4
	void SetRenderTransformPivot(Vector2D Pivot);// 0x805292c
	void SetRenderTransform(WidgetTransform InTransform);// 0x8052880
	void SetRenderShear(Vector2D Shear);// 0x8052808
	void SetRenderScale(Vector2D Scale);// 0x8052790
	void SetRenderAngle(float Angle);// 0x8052714
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x8052620
	void SetKeyboardFocus();// 0x805260c
	void SetIsEnabled(bool bInIsEnabled);// 0x8052580
	void SetCursor(byte InCursor);// 0x8052504
	void SetClipping(enum InClipping);// 0x8052488
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x80523d0
	void ResetCursor();// 0x80523bc
	void RemoveFromParent();// 0x80523a0
	EventReply OnReply__DelegateSignature();// 0x70644c4
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x70644c4
	bool IsVisible();// 0x8052368
	bool IsHovered();// 0x8052330
	void InvalidateLayoutCache();// 0x805231c
	void InvalidateLayoutAndVolatility();// 0x8052308
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x8052278
	bool HasUserFocus(PlayerController* PlayerController);// 0x80521e8
	bool HasMouseCapture();// 0x80521b0
	bool HasKeyboardFocus();// 0x8052178
	bool HasFocusedDescendants();// 0x8052140
	bool HasAnyUserFocus();// 0x8052108
	enum GetWidgetRender();// 0x80520d4
	Widget* GetWidget__DelegateSignature();// 0x70644c4
	enum GetVisibility();// 0x80520a0
	Geometry GetTickSpaceGeometry();// 0x8052068
	Widget* GetTheTemplate();// 0x8052034
	FText GetText__DelegateSignature();// 0x70644c4
	enum GetSlateVisibility__DelegateSignature();// 0x70644c4
	SlateColor GetSlateColor__DelegateSignature();// 0x70644c4
	SlateBrush GetSlateBrush__DelegateSignature();// 0x70644c4
	PanelWidget* GetParent();// 0x8052000
	Geometry GetPaintSpaceGeometry();// 0x8051fc8
	PlayerController* GetOwningPlayer();// 0x8051f8c
	byte GetMouseCursor__DelegateSignature();// 0x70644c4
	LinearColor GetLinearColor__DelegateSignature();// 0x70644c4
	bool GetIsEnabled();// 0x8051f54
	int GetInt32__DelegateSignature();// 0x70644c4
	float GetFloat__DelegateSignature();// 0x70644c4
	Vector2D GetDesiredSize();// 0x8051f20
	enum GetClipping();// 0x8051eec
	enum GetCheckBoxState__DelegateSignature();// 0x70644c4
	Geometry GetCachedGeometry();// 0x8051eb4
	Geometry GetCachedAllottedGeometry();// 0x8051e7c
	bool GetBool__DelegateSignature();// 0x70644c4
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x70644c4
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x70644c4
	void ForceVolatile(bool bForce);// 0x8051df8
	void ForceLayoutPrepass();// 0x8051de4
	void DisableVolatileInSlateGI(bool bDisabled);// 0x8051d60
	void AdaptationWidgetSlot(out const Margin InOffset);// 0x8051cd8
<----------Generated by SSpawner v1.0.4---------->


Class: Visual.Object
<----------Generated by SSpawner v1.0.4---------->


Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x100, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x803840c
	bool RemoveChild(Widget* Content);// 0x803837c
	bool HasChild(Widget* Content);// 0x80382ec
	bool HasAnyChildren();// 0x80382b4
	int GetChildrenCount();// 0x8038280
	int GetChildIndex(Widget* Content);// 0x80381f4
	Widget* GetChildAt(int Index);// 0x8038168
	void ClearChildren();// 0x8038154
	PanelSlot* AddChildAt(int Index, Widget* Content);// 0x803808c
	PanelSlot* AddChild(Widget* Content);// 0x8038000
<----------Generated by SSpawner v1.0.4---------->


Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x18]
	WidgetNavigationData Down;//[Offset: 0x40, Size: 0x18]
	WidgetNavigationData Left;//[Offset: 0x58, Size: 0x18]
	WidgetNavigationData Right;//[Offset: 0x70, Size: 0x18]
	WidgetNavigationData Next;//[Offset: 0x88, Size: 0x18]
	WidgetNavigationData Previous;//[Offset: 0xa0, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 0x8]
	Widget* Widget;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x10]
	FName DestinationProperty;//[Offset: 0x40, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]
	Field* Field;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: EventReply
<----------Generated by SSpawner v1.0.4---------->


Class: Geometry
<----------Generated by SSpawner v1.0.4---------->


Class: PointerEvent.InputEvent
<----------Generated by SSpawner v1.0.4---------->


Class: InputEvent
<----------Generated by SSpawner v1.0.4---------->


Class: WAnimTime
	float PlayTime;//[Offset: 0x0, Size: 0x4]
	float PlayTime;//[Offset: 0x4, Size: 0x4]
	float PlayTime;//[Offset: 0x8, Size: 0x4]
	float PlayTime;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x370, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x2e0, Size: 0x10]
	delegate OnAnimationFinished;//[Offset: 0x2f0, Size: 0x10]
	MovieScene* MovieScene;//[Offset: 0x300, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x308, Size: 0x10]
	float GetStartTime();// 0x8053c70
	float GetEndTime();// 0x8053c3c
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x50, Size: 0x220]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x270, Size: 0x2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x278, Size: 0x50]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x170, Size: 0xa8]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneSegment[] Segments;//[Offset: 0x18, Size: 0x10]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x28, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x38, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0x70, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneSegment
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneEvalTemplatePtr
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneTrackImplementationPtr
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 0x8]
	Object* SequenceKeyObject;//[Offset: 0x8, Size: 0x8]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x10, Size: 0x8]
	Guid SourceSequenceSignature;//[Offset: 0x18, Size: 0x10]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x28, Size: 0x4]
	FloatRange PreRollRange;//[Offset: 0x2c, Size: 0x10]
	FloatRange PostRollRange;//[Offset: 0x3c, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x4c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float Offset;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x58, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x80, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x90, Size: 0x8]
	FloatRange SelectionRange;//[Offset: 0x98, Size: 0x10]
	FloatRange PlaybackRange;//[Offset: 0xa8, Size: 0x10]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	float FixedFrameInterval;//[Offset: 0xbc, Size: 0x4]
	float InTime;//[Offset: 0xc0, Size: 0x4]
	float OutTime;//[Offset: 0xc4, Size: 0x4]
	float StartTime;//[Offset: 0xc8, Size: 0x4]
	float EndTime;//[Offset: 0xcc, Size: 0x4]
	bool bLowDeviceFrameRateLimitEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	int LowDeviceFrameLimit;//[Offset: 0xd4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	FString Name;//[Offset: 0x10, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x20, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x28, Size: 0x10]
	enum Ownership;//[Offset: 0x38, Size: 0x1]
	enum DeviceLevel;//[Offset: 0x39, Size: 0x1]
	enum UserQualitySettingLevel;//[Offset: 0x3a, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	FString Name;//[Offset: 0x10, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x20, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]
	Widget*[] AllWidgets;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x58, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x7c, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x80, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	int ControllerId;//[Offset: 0x108, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x38, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x40, Size: 0x10]
	World* World;//[Offset: 0x78, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 0x8]
	void SSSwapControllers();// 0x8d10360
	void ShowTitleSafeArea();// 0x8d10344
	void SetConsoleTarget(int playerIndex);// 0x8d102c0
	static void RemoveViewportChangeDelegate(out const delegate Delegate);// 0x8d1020c
	static void AddViewportChangeDelegate(out const delegate Delegate);// 0x8d10158
<----------Generated by SSpawner v1.0.4---------->


Class: ScriptViewportClient.Object
<----------Generated by SSpawner v1.0.4---------->


Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x38, Size: 0x10]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x48, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x58, Size: 0x8]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	void ReceiveShutdown();// 0x70644c4
	void ReceiveInit();// 0x70644c4
	void HandleTravelError(byte FailureType);// 0x70644c4
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x70644c4
	int GetDeviceLevel();// 0x8cf79c8
	void DebugRemovePlayer(int ControllerId);// 0x8cf7944
	void DebugCreatePlayer(int ControllerId);// 0x8cf78c0
<----------Generated by SSpawner v1.0.4---------->


Class: OnlineSession.Object
<----------Generated by SSpawner v1.0.4---------->


Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x38, Size: 0x8]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x40, Size: 0xc]
	byte MaxConcurrentResolutionRule;//[Offset: 0x4c, Size: 0x1]
	int MaxConcurrentPlayCount;//[Offset: 0x50, Size: 0x4]
	float Duration;//[Offset: 0x54, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x58, Size: 0x8]
	float Priority;//[Offset: 0x60, Size: 0x4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x68, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x70, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x80, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x88, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x28]
	SoundClass*[] ChildClasses;//[Offset: 0x50, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x60, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0x70, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float StereoBleed;//[Offset: 0x8, Size: 0x4]
	float LFEBleed;//[Offset: 0xc, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 0x4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	byte OutputTarget;//[Offset: 0x25, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x38]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x68, Size: 0x10]
	float InitialDelay;//[Offset: 0x78, Size: 0x4]
	float FadeInTime;//[Offset: 0x7c, Size: 0x4]
	float Duration;//[Offset: 0x80, Size: 0x4]
	float FadeOutTime;//[Offset: 0x84, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 0x4]
	float Gain0;//[Offset: 0xc, Size: 0x4]
	float Bandwidth0;//[Offset: 0x10, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 0x4]
	float Gain1;//[Offset: 0x18, Size: 0x4]
	float Bandwidth1;//[Offset: 0x1c, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 0x4]
	float Gain2;//[Offset: 0x24, Size: 0x4]
	float Bandwidth2;//[Offset: 0x28, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 0x4]
	float Gain3;//[Offset: 0x30, Size: 0x4]
	float Bandwidth3;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x2b8]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa4, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa4, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa4, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa4, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa4, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa4, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5, Size: 0x1]
	byte DistanceType;//[Offset: 0xa6, Size: 0x1]
	float OmniRadius;//[Offset: 0xa8, Size: 0x4]
	float StereoSpread;//[Offset: 0xac, Size: 0x4]
	byte SpatializationAlgorithm;//[Offset: 0xb0, Size: 0x1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0xb8, Size: 0x8]
	float RadiusMin;//[Offset: 0xc0, Size: 0x4]
	float RadiusMax;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc8, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xcc, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xd0, Size: 0x1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd8, Size: 0x78]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x150, Size: 0x78]
	float LPFFrequencyAtMin;//[Offset: 0x1c8, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1cc, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1d0, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1d4, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1d8, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1dc, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1e0, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1e4, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x1e8, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x1ec, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x1f4, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x1f8, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x1fc, Size: 0x4]
	byte OcclusionTraceChannel;//[Offset: 0x200, Size: 0x1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x204, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x20c, Size: 0x4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x210, Size: 0x8]
	enum ReverbSendMethod;//[Offset: 0x218, Size: 0x1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x220, Size: 0x8]
	float ReverbWetLevelMin;//[Offset: 0x228, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x230, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x78]
	float ManualReverbSendLevel;//[Offset: 0x2b0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x10, Size: 0x78]
	byte AttenuationShape;//[Offset: 0x88, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0x8c, Size: 0x4]
	Vector AttenuationShapeExtents;//[Offset: 0x90, Size: 0xc]
	float ConeOffset;//[Offset: 0x9c, Size: 0x4]
	float FalloffDistance;//[Offset: 0xa0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SpatializationPluginSourceSettingsBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: OcclusionPluginSourceSettingsBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ReverbPluginSourceSettingsBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]
	SoundSubmix* ParentSubmix;//[Offset: 0x38, Size: 0x8]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundEffectSubmixPreset.SoundEffectPreset.Object
<----------Generated by SSpawner v1.0.4---------->


Class: SoundEffectPreset.Object
<----------Generated by SSpawner v1.0.4---------->


Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 0x4]
	SoundSubmix* SoundSubmix;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundEffectSourcePreset.SoundEffectPreset.Object
<----------Generated by SSpawner v1.0.4---------->


Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 0x4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x274, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x278, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x9c, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	int StreamingPriority;//[Offset: 0xa4, Size: 0x4]
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa8, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa8, Size: 0x1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa8, Size: 0x1]
	byte SoundGroup;//[Offset: 0xaa, Size: 0x1]
	FString SpokenText;//[Offset: 0xb0, Size: 0x10]
	float SubtitlePriority;//[Offset: 0xc0, Size: 0x4]
	float Volume;//[Offset: 0xc4, Size: 0x4]
	float Pitch;//[Offset: 0xc8, Size: 0x4]
	int NumChannels;//[Offset: 0xcc, Size: 0x4]
	int SampleRate;//[Offset: 0xd0, Size: 0x4]
	int RawPCMDataSize;//[Offset: 0xd4, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0xd8, Size: 0x10]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xe8, Size: 0x10]
	CurveTable* Curves;//[Offset: 0xf8, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x100, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 0x10]
	SubtitleCue[] Subtitles;//[Offset: 0x10, Size: 0x10]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CurveTable.Object
<----------Generated by SSpawner v1.0.4---------->


Class: FocusEvent
<----------Generated by SSpawner v1.0.4---------->


Class: KeyEvent.InputEvent
<----------Generated by SSpawner v1.0.4---------->


Class: PaintContext
<----------Generated by SSpawner v1.0.4---------->


Class: MotionEvent.InputEvent
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterEvent.InputEvent
<----------Generated by SSpawner v1.0.4---------->


Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x8028da8
	void Dragged(out const PointerEvent PointerEvent);// 0x8028bf0
	void DragCancelled(out const PointerEvent PointerEvent);// 0x8028a38
<----------Generated by SSpawner v1.0.4---------->


Class: AnalogInputEvent.KeyEvent.InputEvent
<----------Generated by SSpawner v1.0.4---------->


Class: ViewTargetTransitionParams
	float blendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: HapticFeedbackEffect_Base.Object
<----------Generated by SSpawner v1.0.4---------->


Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x3f8, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x400, Size: 0x8]
	float PlayRate;//[Offset: 0x408, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40c, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40c, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x410, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x414, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x414, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x414, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x414, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x414, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x414, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x414, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x414, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x418, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41c, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41c, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41c, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41c, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x420, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x430, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x438, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x448, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x458, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x458, Size: 0x1]
	float InterpPosition;//[Offset: 0x45c, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x464, Size: 0x1]
	delegate OnPlay;//[Offset: 0x468, Size: 0x10]
	delegate OnStop;//[Offset: 0x478, Size: 0x10]
	delegate OnPause;//[Offset: 0x488, Size: 0x10]
	void Stop();// 0x8dadf88
	void SetPosition(float NewPosition, bool bJump);// 0x8dadec8
	void SetLoopingState(bool bNewLooping);// 0x8dade3c
	void Reverse();// 0x8dade20
	void Play();// 0x8dade04
	void Pause();// 0x8dadde8
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x8dadc70
	void ChangePlaybackDirection();// 0x8dadc54
<----------Generated by SSpawner v1.0.4---------->


Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpGroupDirector.InterpGroup.Object
<----------Generated by SSpawner v1.0.4---------->


Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float TimeStamp;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x2d0, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x2d8, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x2e0, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x8cc1080
<----------Generated by SSpawner v1.0.4---------->


Class: ActorComponentTickFunction.TickFunction
<----------Generated by SSpawner v1.0.4---------->


Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction
<----------Generated by SSpawner v1.0.4---------->


Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f4, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x70644c4
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x8d806fc
	bool RemoteEvent(FName EventName);// 0x8d80664
	void LevelReset();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x400, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x408, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x410, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x770, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x778, Size: 0x1]
	float ScreenSize;//[Offset: 0x77c, Size: 0x4]
	float U;//[Offset: 0x780, Size: 0x4]
	float UL;//[Offset: 0x784, Size: 0x4]
	float V;//[Offset: 0x788, Size: 0x4]
	float VL;//[Offset: 0x78c, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x8c9abe4
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x8c9aa78
	void SetSprite(Texture2D* NewSprite);// 0x8c9a9f4
<----------Generated by SSpawner v1.0.4---------->


Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 0x1]
	Vector2D[] FOVCulling;//[Offset: 0x408, Size: 0x10]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 0x1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x418, Size: 0x1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x418, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x418, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x418, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x418, Size: 0x1]
	bool bEnableParallelWorld;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x418, Size: 0x1]
	int[] ParallelWorldIds;//[Offset: 0x420, Size: 0x10]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x430, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x430, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x430, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x430, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x430, Size: 0x1]
	float KillZ;//[Offset: 0x434, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x438, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x440, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x444, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x448, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x450, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x458, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x460, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x468, Size: 0x4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46c, Size: 0x1]
	Vector DefaultColorScale;//[Offset: 0x470, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x47c, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x480, Size: 0x4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 0x1]
	float MaxWorldSize;//[Offset: 0x488, Size: 0x4]
	int RegionSizeNear;//[Offset: 0x48c, Size: 0x4]
	int RegionSizeFar;//[Offset: 0x490, Size: 0x4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 0x1]
	int Graduation;//[Offset: 0x498, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x49c, Size: 0x4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a0, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a0, Size: 0x1]
	int VisibilityCellSize;//[Offset: 0x4a4, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x4a8, Size: 0x1]
	bool bUsePrecomputedVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a9, Size: 0x1]
	byte CurrentDSPVSCategory;//[Offset: 0x4aa, Size: 0x1]
	<byte,DSPVSParameter> DSPVSCategorys;//[Offset: 0x4b0, Size: 0x50]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x500, Size: 0x1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x504, Size: 0x50]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x554, Size: 0x64]
	SurfelRayTracingSettings SurfelRayTracingSettings;//[Offset: 0x5b8, Size: 0x40]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x5f8, Size: 0x18]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x610, Size: 0x24]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x638, Size: 0x8]
	float WorldToMeters;//[Offset: 0x640, Size: 0x4]
	float MonoCullingDistance;//[Offset: 0x644, Size: 0x4]
	BookMark* BookMarks;//[Offset: 0x648, Size: 0x8]
	float TimeDilation;//[Offset: 0x698, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x69c, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x6a0, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x6a4, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x6a8, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x6ac, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x6b0, Size: 0x4]
	PlayerState* Pauser;//[Offset: 0x6b8, Size: 0x8]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c0, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c0, Size: 0x1]
	NetViewer[] ReplicationViewers;//[Offset: 0x6c8, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x6d8, Size: 0x10]
	bool bEnableUnLoadLevelGCMemoryOptimitize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 0x1]
	float[] LODRelativeDistances;//[Offset: 0x6f0, Size: 0x10]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]
	int WorldCompositionNums;//[Offset: 0x704, Size: 0x4]
	int CompositionBlockLength;//[Offset: 0x708, Size: 0x4]
	void OnRep_WorldGravityZ();// 0x8e77e78
<----------Generated by SSpawner v1.0.4---------->


Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x3f8, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x408, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x410, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x418, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x420, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x428, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x430, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x438, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x440, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x448, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x450, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x458, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x470, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x470, Size: 0x1]
	void StartPlay();// 0x8cf9df8
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x8cf9d2c
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x8cf9c34
	bool ShouldReset(Actor* ActorToReset);// 0x8cf9b9c
	void ReturnToMainMenuHost();// 0x8cf9b80
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x8cf9a98
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x8cf99dc
	void RestartPlayer(Controller* NewPlayer);// 0x8cf9958
	void ResetLevel();// 0x8cf993c
	bool PlayerCanRestart(PlayerController* Player);// 0x8cf98a4
	bool MustSpectate(PlayerController* NewPlayerController);// 0x8cf980c
	void K2_PostLogin(PlayerController* NewPlayer);// 0x70644c4
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x70644c4
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x70644c4
	void K2_OnLogout(Controller* ExitingController);// 0x70644c4
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x70644c4
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x8cf9714
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x8cf9658
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x8cf95d4
	bool HasMatchStarted();// 0x8cf9594
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x8cf9510
	int GetNumSpectators();// 0x8cf94d4
	int GetNumPlayers();// 0x8cf9498
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x8cf9404
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x8cf9304
	Actor* ChoosePlayerStart(Controller* Player);// 0x8cf9270
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x8cf913c
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x8cf906c
<----------Generated by SSpawner v1.0.4---------->


Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x3f4, Size: 0x4]
	int MaxPlayers;//[Offset: 0x3f8, Size: 0x4]
	int MaxPartySize;//[Offset: 0x3fc, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x400, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 0x1]
	FName SessionName;//[Offset: 0x408, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x3f8, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x400, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x408, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x410, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x424, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x428, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x42c, Size: 0x4]
	void OnRep_SpectatorClass();// 0x8d0d2d8
	void OnRep_ReplicatedWorldTimeSeconds();// 0x8d0d2bc
	void OnRep_ReplicatedHasBegunPlay();// 0x8d0d2a0
	void OnRep_GameModeClass();// 0x8d0d284
	bool HasMatchStarted();// 0x8d0d244
	bool HasBegunPlay();// 0x8d0d204
	float GetServerWorldTimeSeconds();// 0x8d0d1c8
	float GetPlayerStartTime(Controller* Controller);// 0x8d0d134
	float GetPlayerRespawnDelay(Controller* Controller);// 0x8d0d0a0
<----------Generated by SSpawner v1.0.4---------->


Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x3f4, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x3f8, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x3fc, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x400, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x404, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x408, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x408, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x40c, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x410, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x414, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x418, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x41c, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x420, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x424, Size: 0x4]
	float MoveRepSize;//[Offset: 0x428, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x42c, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x430, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x434, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x438, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x43c, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x440, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x444, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x448, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x44c, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x450, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x458, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x460, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x464, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x468, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x46c, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: DSPVSParameter
	bool bUsePrecomputedVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	int DSVisibilityCellSize;//[Offset: 0x4, Size: 0x4]
	byte DSVisibilityAggressiveness;//[Offset: 0x8, Size: 0x1]
	int[] DSDebugGroups;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 0x4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 0x4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 0x4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 0x4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 0x4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 0x4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 0x4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x20, Size: 0x4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 0x1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 0x4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 0x4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 0x4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 0x4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x40, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 0x4]
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 0x4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 0x1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 0x4]
	int NumSamples;//[Offset: 0x8, Size: 0x4]
	int NumLightingBounces;//[Offset: 0xc, Size: 0x4]
	float LightmapBoost;//[Offset: 0x10, Size: 0x4]
	float SunHardness;//[Offset: 0x14, Size: 0x4]
	enum BakingMode;//[Offset: 0x18, Size: 0x1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	float LocalOcclusionRadius;//[Offset: 0x1c, Size: 0x4]
	float LocalOcclusionFallOff;//[Offset: 0x20, Size: 0x4]
	float LocalOcclusionDistribution;//[Offset: 0x24, Size: 0x4]
	float LocalOcclusionFadeRatio;//[Offset: 0x28, Size: 0x4]
	int LocalOcclusionRes;//[Offset: 0x2c, Size: 0x4]
	int LocalOcclusionMultiple;//[Offset: 0x30, Size: 0x4]
	float LocalOcclusionPower;//[Offset: 0x34, Size: 0x4]
	int LocalOcclusionDenoising;//[Offset: 0x38, Size: 0x4]
	int LocalOcclusionDilation;//[Offset: 0x3c, Size: 0x4]
	int NumDenoisingIterators;//[Offset: 0x40, Size: 0x4]
	int NumDilationIterators;//[Offset: 0x44, Size: 0x4]
	int DirectLightDenoising;//[Offset: 0x48, Size: 0x4]
	float RayTraceMaxDistance;//[Offset: 0x4c, Size: 0x4]
	float RayTraceBias;//[Offset: 0x50, Size: 0x4]
	float RetraceDistance;//[Offset: 0x54, Size: 0x4]
	float SmallestTexelRadius;//[Offset: 0x58, Size: 0x4]
	uint32 AreaLightSampleCount;//[Offset: 0x5c, Size: 0x4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bWithGrayDiffuse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SurfelRayTracingSettings
	bool bAllowSurfelRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	Vector SurfelVoxelSize;//[Offset: 0x4, Size: 0xc]
	IntVector SurfelHierarchyDimension;//[Offset: 0x10, Size: 0xc]
	Vector IrradianceVolumeCellSize;//[Offset: 0x1c, Size: 0xc]
	IntVector IrradianceVolumeDimension;//[Offset: 0x28, Size: 0xc]
	uint32 IrradianceVolumeCellDim;//[Offset: 0x34, Size: 0x4]
	uint32 SurfelInjectSingleSize;//[Offset: 0x38, Size: 0x4]
	uint32 SurfelPoolInitScale;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	byte ReverbType;//[Offset: 0x1, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	float Volume;//[Offset: 0x10, Size: 0x4]
	float FadeTime;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BookMark.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	FString[] HiddenLevels;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x28, Size: 0x8]
	World* WorldAsset;//[Offset: 0x30, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x58, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x60, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb3, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb3, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb3, Size: 0x1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb3, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	int LevelLODIndex;//[Offset: 0xb8, Size: 0x4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 0x1]
	Color DrawColor;//[Offset: 0xc0, Size: 0x4]
	LinearColor LevelColor;//[Offset: 0xc4, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd8, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe8, Size: 0x4]
	FString[] Keywords;//[Offset: 0xf0, Size: 0x10]
	delegate OnLevelLoaded;//[Offset: 0x100, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x110, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x120, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x130, Size: 0x10]
	delegate OnStatusChanged;//[Offset: 0x140, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x160, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x168, Size: 0x8]
	Level*[] UnloadingLevels;//[Offset: 0x170, Size: 0x10]
	bool IsStreamingStatePending();// 0x8d810f4
	bool IsLevelVisible();// 0x8d810bc
	bool IsLevelLoaded();// 0x8d81098
	FName GetWorldAssetPackageFName();// 0x8d81064
	Level* GetLoadedLevel();// 0x8d81048
	LevelScriptActor* GetLevelScriptActor();// 0x8d81014
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x8d80ed8
<----------Generated by SSpawner v1.0.4---------->


Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x430, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x440, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x441, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x6a8, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9f4, Size: 0x4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa12, Size: 0x1]
	bool bAllowForceNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa13, Size: 0x1]
	GameInstance* GameInstance;//[Offset: 0xa40, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleEventManager.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ObjectPoolManager
	bool bUseGMCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	<class Object,ObjectPool> Pools;//[Offset: 0x8, Size: 0x50]
	<FName,ObjectPoolClassConfig> mapClassConfigs;//[Offset: 0x58, Size: 0x50]
	Actor* Holder;//[Offset: 0xb0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ObjectPool
	class Object* ObjectClass;//[Offset: 0x0, Size: 0x8]
	int ObjectLifePeriodTime;//[Offset: 0x8, Size: 0x4]
	Object*[] Pool;//[Offset: 0x10, Size: 0x10]
	<Object*,uint32> RecycleTime;//[Offset: 0x20, Size: 0x50]
	int Size;//[Offset: 0x70, Size: 0x4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ObjectPoolClassConfig
	FName ObjectClassName;//[Offset: 0x0, Size: 0x8]
	bool ObjectPoolEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool ObjectPoolEnableForComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	int PoolSize;//[Offset: 0xc, Size: 0x4]
	int LifePeriodTime;//[Offset: 0x10, Size: 0x4]
	bool UseOldPoolLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool DisableOnLowMemDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	int BackendSwitchType;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 0x8]
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 0x8]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x40, Size: 0x8]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48, Size: 0x1]
	enum DataGatheringMode;//[Offset: 0x49, Size: 0x1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a, Size: 0x1]
	float ActiveTilesUpdateInterval;//[Offset: 0x4c, Size: 0x4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x50, Size: 0x10]
	float UpdateInterval;//[Offset: 0x60, Size: 0x4]
	float DirtyAreasUpdateFreq;//[Offset: 0x64, Size: 0x4]
	NavigationData*[] NavDataSet;//[Offset: 0x68, Size: 0x10]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x78, Size: 0x10]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xe8, Size: 0x10]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xf8, Size: 0x10]
	enum OperationMode;//[Offset: 0x1d4, Size: 0x1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x8dbab14
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x8dbaa98
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x8dba9dc
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x8dba930
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x8dba8b4
	void SetGeometryGatheringMode(enum NewMode);// 0x8dba838
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x8dba824
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x8dba734
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x8dba5b0
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x8dba534
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x8dba34c
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x8dba17c
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x8db9fac
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x8db9ddc
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x8db9d5c
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x8db9cdc
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x8db9b58
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x8db99d4
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x8db97ec
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x8db9604
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x8db9588
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x8db93f8
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x8db923c
<----------Generated by SSpawner v1.0.4---------->


Class: BlueprintFunctionLibrary.Object
<----------Generated by SSpawner v1.0.4---------->


Class: CrowdManagerBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0, Size: 0xc]
	float GenerateRadiusMin;//[Offset: 0xc, Size: 0x4]
	float GenerateRadiusMax;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x430, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 0x10]
	Vector[] PathPoints;//[Offset: 0x38, Size: 0x10]
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 0x1]
	bool IsValid();// 0x8db87c0
	bool IsStringPulled();// 0x8db8788
	bool IsPartial();// 0x8db8750
	float GetPathLength();// 0x8db871c
	float GetPathCost();// 0x8db86e8
	FString GetDebugString();// 0x8db8644
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x8db85c0
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x8db84f8
<----------Generated by SSpawner v1.0.4---------->


Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x8c9a520
	int GetObjectCount();// 0x8c9a4ec
	int GetNewAvoidanceUID();// 0x8c9a4b8
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x8c9a428
<----------Generated by SSpawner v1.0.4---------->


Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]
	World* World;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x8cb4b6c
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x8cb4a74
	Vector K2_Project(Vector WorldLocation);// 0x8cb49e4
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x8cb486c
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x8cb4614
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x8cb42dc
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x8cb4178
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x8cb4000
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x8cb3e28
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x8cb3cf8
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x8cb3c0c
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x8cb381c
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x8cb3708
<----------Generated by SSpawner v1.0.4---------->


Class: ReporterGraph.ReporterBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ReporterBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x120, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x130, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x13c, Size: 0x4]
	FString PVEBordersName;//[Offset: 0x140, Size: 0x10]
	FString[] UnloadTileOnServer;//[Offset: 0x150, Size: 0x10]
	<FString> UnloadTileSet;//[Offset: 0x160, Size: 0x50]
	bool bClientUseInitViewpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 0x1]
	Vector ClientInitViewPoint;//[Offset: 0x1d0, Size: 0xc]
	LevelStreaming*[] LandScapeStreamingLevel;//[Offset: 0x1e0, Size: 0x10]
	bool SetStreamingDistanceScalePerLevel(out const FName LevelName, float Scale);// 0x8e77244
	bool SetStreamingDistanceScaleByLayer(FString LayerName, float Scale);// 0x8e77148
	bool SetStreamingDistanceScaleAllLevel(float Scale);// 0x8e770b8
	bool RemoveDynamicTile(FString TilePackageNameStr);// 0x8e76ffc
	LevelStreaming* GetDynamicTile(FString TilePackageNameStr);// 0x8e76f44
	void AddEnableStreamingTile(int EnableTileIdx);// 0x8e76ec8
	void AddEnableStreamingLayer(FString EnableLayerName);// 0x8e76d94
	LevelStreaming* AddDynamicTile(FString TilePackageNameStr, int X, int Y, bool bAllowCopy, bool bDisableDistanceStreaming);// 0x8e76bdc
<----------Generated by SSpawner v1.0.4---------->


Class: Landscape.LandscapeProxy.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x418, Size: 0x8]
	Guid LandscapeGuid;//[Offset: 0x420, Size: 0x10]
	Guid BoundingGuid;//[Offset: 0x430, Size: 0x10]
	IntPoint LandscapeSectionOffset;//[Offset: 0x440, Size: 0x8]
	int MaxLODLevel;//[Offset: 0x448, Size: 0x4]
	float LODDistanceFactor;//[Offset: 0x44c, Size: 0x4]
	byte LODFalloff;//[Offset: 0x450, Size: 0x1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 0x1]
	float LOD0DistributionSetting;//[Offset: 0x454, Size: 0x4]
	float LODDistributionSetting;//[Offset: 0x458, Size: 0x4]
	byte NearMaxLOD_Baked;//[Offset: 0x45c, Size: 0x1]
	float NearFactor_Baked;//[Offset: 0x460, Size: 0x4]
	float NearExtent_Baked;//[Offset: 0x464, Size: 0x4]
	float FarFactor_Baked;//[Offset: 0x468, Size: 0x4]
	float LandscapeRoughness;//[Offset: 0x46c, Size: 0x4]
	bool EnableImproveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	float[] ImproveLODValues;//[Offset: 0x478, Size: 0x10]
	byte NearMaxLOD;//[Offset: 0x488, Size: 0x1]
	float NearFactor;//[Offset: 0x48c, Size: 0x4]
	float NearExtent;//[Offset: 0x490, Size: 0x4]
	float FarFactor;//[Offset: 0x494, Size: 0x4]
	int StaticLightingLOD;//[Offset: 0x498, Size: 0x4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x4a0, Size: 0x8]
	float StreamingDistanceMultiplier;//[Offset: 0x4a8, Size: 0x4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4ac, Size: 0x1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x4b0, Size: 0x8]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x4b8, Size: 0x8]
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x4c0, Size: 0x50]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x510, Size: 0x1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x518, Size: 0x10]
	float MinGrassWeightThreshold;//[Offset: 0x528, Size: 0x4]
	float NegativeZBoundsExtension;//[Offset: 0x52c, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x530, Size: 0x4]
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x538, Size: 0x8]
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x540, Size: 0x8]
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x548, Size: 0x8]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x550, Size: 0x10]
	LandscapeAOTextureDataAsset* LandscapeAOTextureDataAsset;//[Offset: 0x560, Size: 0x8]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x568, Size: 0x10]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x578, Size: 0x10]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]
	float StaticLightingResolution;//[Offset: 0x5ec, Size: 0x4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f0, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f0, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f0, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x5f1, Size: 0x1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f2, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f2, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x5f4, Size: 0x4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x5f8, Size: 0x18]
	int CollisionMipLevel;//[Offset: 0x610, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x614, Size: 0x4]
	float CollisionThickness;//[Offset: 0x618, Size: 0x4]
	BodyInstance BodyInstance;//[Offset: 0x620, Size: 0x180]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a0, Size: 0x1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a0, Size: 0x1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7a0, Size: 0x1]
	int ComponentSizeQuads;//[Offset: 0x7a4, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x7a8, Size: 0x4]
	int NumSubsections;//[Offset: 0x7ac, Size: 0x4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b0, Size: 0x1]
	bool bMobileMultiLayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7b0, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x7b1, Size: 0x1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b2, Size: 0x1]
	Texture2D* MaskTextureUsedByGrassClear;//[Offset: 0x7b8, Size: 0x8]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x7db74b0
	void ChangeLODDistributionSettingConsoleVariable();// 0x7db7494
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x7db7410
	void ChangeLOD0DistributionSettingConsoleVariable();// 0x7db73f4
	void ChangebUseScreenSizeLOD(bool InbUseScreenSizeLOD);// 0x7db7368
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x770, Size: 0x10]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x780, Size: 0x10]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x790, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	float Width;//[Offset: 0x40, Size: 0x4]
	float SideFalloff;//[Offset: 0x44, Size: 0x4]
	float EndFalloff;//[Offset: 0x48, Size: 0x4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x50, Size: 0x10]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x60, Size: 0x10]
	Box Bounds;//[Offset: 0x70, Size: 0x1c]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x90, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18]
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10]
	Box Bounds;//[Offset: 0x80, Size: 0x1c]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8]
	float TangentLen;//[Offset: 0x8, Size: 0x4]
	FName SocketName;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector Left;//[Offset: 0xc, Size: 0xc]
	Vector Right;//[Offset: 0x18, Size: 0xc]
	Vector FalloffLeft;//[Offset: 0x24, Size: 0xc]
	Vector FalloffRight;//[Offset: 0x30, Size: 0xc]
	float StartEndFalloff;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x908, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x960, Size: 0xc]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x96c, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x96c, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x96d, Size: 0x1]
	float SplineBoundaryMin;//[Offset: 0x970, Size: 0x4]
	float SplineBoundaryMax;//[Offset: 0x974, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x978, Size: 0x8]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x980, Size: 0x10]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x990, Size: 0x1]
	void UpdateMesh();// 0x8e58194
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x8e580d4
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x8e58018
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x8e57f58
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x8e57e98
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x8e57ddc
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x8e57c58
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x8e57b80
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x8e57ac0
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x8e57a00
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x8e57944
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x8e57884
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x8e577c4
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x8e57708
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x8e57648
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x8e57588
	Vector GetStartTangent();// 0x8e57550
	Vector2D GetStartScale();// 0x8e5751c
	float GetStartRoll();// 0x8e574e8
	Vector GetStartPosition();// 0x8e574b0
	Vector2D GetStartOffset();// 0x8e5747c
	Vector GetSplineUpDir();// 0x8e57444
	byte GetForwardAxis();// 0x8e57410
	Vector GetEndTangent();// 0x8e573d8
	Vector2D GetEndScale();// 0x8e573a4
	float GetEndRoll();// 0x8e57370
	Vector GetEndPosition();// 0x8e57338
	Vector2D GetEndOffset();// 0x8e57304
	float GetBoundaryMin();// 0x8e572d0
	float GetBoundaryMax();// 0x8e5729c
<----------Generated by SSpawner v1.0.4---------->


Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector EndTangent;//[Offset: 0x38, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x44, Size: 0x8]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	StaticMesh* GrassMesh;//[Offset: 0x38, Size: 0x8]
	float GrassDensity;//[Offset: 0x40, Size: 0x4]
	float PlacementJitter;//[Offset: 0x44, Size: 0x4]
	int StartCullDistance;//[Offset: 0x48, Size: 0x4]
	int EndCullDistance;//[Offset: 0x4c, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	float GrassDensity;//[Offset: 0x8, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float PlacementJitter;//[Offset: 0x10, Size: 0x4]
	int StartCullDistance;//[Offset: 0x14, Size: 0x4]
	int EndCullDistance;//[Offset: 0x18, Size: 0x4]
	int MinLOD;//[Offset: 0x1c, Size: 0x4]
	enum Scaling;//[Offset: 0x20, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x770, Size: 0x4]
	int SectionBaseY;//[Offset: 0x774, Size: 0x4]
	int ComponentSizeQuads;//[Offset: 0x778, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x77c, Size: 0x4]
	int NumSubsections;//[Offset: 0x780, Size: 0x4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x788, Size: 0x8]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x790, Size: 0x8]
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x798, Size: 0x50]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x7e8, Size: 0x20]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x808, Size: 0x1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x810, Size: 0x10]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x820, Size: 0x10]
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x830, Size: 0x50]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x880, Size: 0x10]
	Texture2D*[] WeightmapTextures;//[Offset: 0x890, Size: 0x10]
	int VisibilityLayerChannel;//[Offset: 0x8a0, Size: 0x4]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x8a8, Size: 0x8]
	Vector4 WeightmapScaleBias;//[Offset: 0x8b0, Size: 0x10]
	float WeightmapSubsectionOffset;//[Offset: 0x8c0, Size: 0x4]
	Vector4 HeightmapScaleBias;//[Offset: 0x8d0, Size: 0x10]
	Texture2D* HeightmapTexture;//[Offset: 0x8e0, Size: 0x8]
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x8e8, Size: 0x50]
	FString VisibleVisibilityLayer;//[Offset: 0x938, Size: 0x10]
	Box CachedLocalBox;//[Offset: 0x948, Size: 0x1c]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x964, Size: 0x1c]
	Guid MapBuildDataId;//[Offset: 0x980, Size: 0x10]
	Guid[] IrrelevantLights;//[Offset: 0x990, Size: 0x10]
	int CollisionMipLevel;//[Offset: 0x9a0, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x9a4, Size: 0x4]
	float NegativeZBoundsExtension;//[Offset: 0x9a8, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x9ac, Size: 0x4]
	float StaticLightingResolution;//[Offset: 0x9b0, Size: 0x4]
	int ForcedLOD;//[Offset: 0x9b4, Size: 0x4]
	int LODBias;//[Offset: 0x9b8, Size: 0x4]
	int MobileVertexHoleMaxLOD;//[Offset: 0x9bc, Size: 0x4]
	float[] LODDeltaVertex;//[Offset: 0x9d0, Size: 0x10]
	float MaxDeltaVertex;//[Offset: 0x9e0, Size: 0x4]
	Guid stateID;//[Offset: 0x9e4, Size: 0x10]
	Guid BakedTextureMaterialGuid;//[Offset: 0x9f4, Size: 0x10]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0xa08, Size: 0x8]
	StaticMesh* OccluderMesh;//[Offset: 0xa10, Size: 0x8]
	byte MobileBlendableLayerMask;//[Offset: 0xa18, Size: 0x1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0xa20, Size: 0x8]
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0xa28, Size: 0x50]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0xa78, Size: 0x10]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0xa88, Size: 0x8]
	bool bMobileMultiLayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa90, Size: 0x1]
	uint16[] CachedHeightData;//[Offset: 0xa98, Size: 0x10]
	bool bHasROCData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 0x1]
	FName UsedOtherMaterialName;//[Offset: 0xb28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 0x10]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
<----------Generated by SSpawner v1.0.4---------->


Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8]
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1]
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8]
	float Hardness;//[Offset: 0x38, Size: 0x4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VisibilityData
	byte[] VisibilityData;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x770, Size: 0x10]
	int SectionBaseX;//[Offset: 0x780, Size: 0x4]
	int SectionBaseY;//[Offset: 0x784, Size: 0x4]
	int CollisionSizeQuads;//[Offset: 0x788, Size: 0x4]
	float CollisionScale;//[Offset: 0x78c, Size: 0x4]
	int SimpleCollisionSizeQuads;//[Offset: 0x790, Size: 0x4]
	byte[] CollisionQuadFlags;//[Offset: 0x798, Size: 0x10]
	Guid HeightfieldGuid;//[Offset: 0x7a8, Size: 0x10]
	Box CachedLocalBox;//[Offset: 0x7b8, Size: 0x1c]
	LandscapeComponent* RenderComponent;//[Offset: 0x7d4, Size: 0x1c]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x800, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeAOTextureDataAsset.DataAsset.Object
	uint32 DataSize;//[Offset: 0x30, Size: 0x4]
	byte[] LandscapeAOPlatformData;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0xa60, Size: 0x10]
	int NumBuiltInstances;//[Offset: 0xa70, Size: 0x4]
	Box BuiltInstanceBounds;//[Offset: 0xa78, Size: 0x1c]
	Box UnbuiltInstanceBounds;//[Offset: 0xa94, Size: 0x1c]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0xab0, Size: 0x10]
	int[] UnbuiltInstanceIndexList;//[Offset: 0xac0, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad0, Size: 0x1]
	int OcclusionLayerNumNodes;//[Offset: 0xaf8, Size: 0x4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0xafc, Size: 0x1c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1d, Size: 0x1]
	int MinInstancesToSplitNode;//[Offset: 0xb20, Size: 0x4]
	bool ShowInstances(out const int[] InstanceIndices, out const Transform[] InstanceTransforms);// 0x8d11288
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x8d111b4
<----------Generated by SSpawner v1.0.4---------->


Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x900, Size: 0x10]
	int InstancingRandomSeed;//[Offset: 0x910, Size: 0x4]
	int InstanceStartCullDistance;//[Offset: 0x914, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x918, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x920, Size: 0x10]
	int[] RemovedInstances;//[Offset: 0x930, Size: 0x10]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 0x1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x941, Size: 0x1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x9d0, Size: 0x8]
	<int,Matrix> StashInstanceTransform;//[Offset: 0x9d8, Size: 0x50]
	int NumPendingLightmaps;//[Offset: 0xa30, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0xa38, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x8d1e748
	bool ShowInstances(out const int[] InstanceIndices, out const Transform[] InstanceTransforms);// 0x8d1e5f8
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x8d1e544
	int[] ReplaceAllInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices);// 0x8d1e3c8
	bool RemoveInstances(out const int[] InstanceIndices);// 0x8d1e2f4
	bool RemoveInstance(int InstanceIndex);// 0x8d1e25c
	bool HideInstance(out const int[] InstanceIndices);// 0x8d1e188
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x8d1e04c
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x8d1dec0
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x8d1dd48
	int GetInstanceCount();// 0x8d1dd14
	void ClearInstances();// 0x8d1dcf8
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x8d1dc48
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices, bool bMarkRenderStateDirty);// 0x8d1da80
	int AddInstance(out const Transform InstanceTransform);// 0x8d1d9c8
<----------Generated by SSpawner v1.0.4---------->


Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]
<----------Generated by SSpawner v1.0.4---------->


Class: PhysicsSerializer.Object
<----------Generated by SSpawner v1.0.4---------->


Class: InstancedStaticMeshMappingInfo
<----------Generated by SSpawner v1.0.4---------->


Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x770, Size: 0x60]
	InterpCurveVector SplineInfo;//[Offset: 0x7d0, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x7e8, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x800, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x818, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x834, Size: 0x4]
	float Duration;//[Offset: 0x838, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83d, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83e, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83f, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x841, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x842, Size: 0x1]
	float LoopPosition;//[Offset: 0x844, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x848, Size: 0xc]
	bool bUseConfigRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 0x1]
	void UpdateSpline();// 0x8e521f4
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x8e52128
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x8e51fd8
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x8e51f50
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x8e51db4
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x8e51c64
	void SetSplineWorldPoints(out const Vector[] Points);// 0x8e51ba4
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x8e51aa8
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x8e51960
	void SetSplineLocalPoints(out const Vector[] Points);// 0x8e518a0
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x8e51818
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x8e516c8
	void SetDrawDebug(bool bShow);// 0x8e51644
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x8e51574
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x8e51468
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x8e51398
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x8e512d8
	bool IsClosedLoop();// 0x8e512a0
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x8e5120c
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x8e51134
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x8e510a0
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x8e50fc8
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x8e50f34
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x8e50ea0
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x8e50dc8
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x8e50d34
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x8e50c24
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x8e50b58
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x8e50a8c
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x8e50924
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x8e50800
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x8e506dc
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x8e505cc
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x8e50500
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x8e50434
	byte GetSplinePointType(int PointIndex);// 0x8e503a8
	float GetSplineLength();// 0x8e50374
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x8e502a0
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x8e50210
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x8e50180
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x8e50070
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x8e4ffa4
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x8e4fed8
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x8e4fdcc
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x8e4fd04
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x8e4fc3c
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x8e4fb2c
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x8e4fa60
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x8e4f994
	int GetNumberOfSplinePoints();// 0x8e4f960
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x8e4f850
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x8e4f784
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x8e4f6b8
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x8e4f560
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x8e4f444
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x8e4f378
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x8e4f2ec
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x8e4f260
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x8e4f1d4
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x8e4f0c4
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x8e4eff8
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x8e4ef2c
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x8e4ee9c
	float GetCurvatureAtSplinePoint(int PointIndex);// 0x8e4ee10
	float GetCurvatureAtDistance(float Distance);// 0x8e4ed84
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x8e4ecb8
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x8e4ebdc
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x8e4eaa8
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x8e4e9cc
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x8e4e930
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x8e4e854
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x8e4e77c
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x8e4e6a0
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x8e4e5c4
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x8e4e52c
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x8e4e450
	void ClearSplinePoints(bool bUpdateSpline);// 0x8e4e3cc
	void AddSplineWorldPoint(out const Vector Position);// 0x8e4e33c
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x8e4e1ec
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x8e4e0d8
	void AddSplineLocalPoint(out const Vector Position);// 0x8e4e048
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x8e4df3c
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x8e4de44
<----------Generated by SSpawner v1.0.4---------->


Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeGizmoActor.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x430, Size: 0x10]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 0x1]
	bool bEnabledDeviceScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x440, Size: 0x1]
	float VeryLowScale;//[Offset: 0x444, Size: 0x4]
	float LowScale;//[Offset: 0x448, Size: 0x4]
	float MidScale;//[Offset: 0x44c, Size: 0x4]
	float HighScale;//[Offset: 0x450, Size: 0x4]
	bool bEnableStaticMeshMovable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 0x1]
	bool bEnableCullDistanceOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 0x4]
	float CullDistance;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x3f8, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 0x1]
	void OnRep_bEnabled();// 0x8cf3628
<----------Generated by SSpawner v1.0.4---------->


Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x2cc, Size: 0x4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x2d0, Size: 0x10]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	float CustomFogLow_Height;//[Offset: 0x2e4, Size: 0x4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x2e8, Size: 0x4]
	LinearColor CustomFogLow_Color;//[Offset: 0x2ec, Size: 0x10]
	float CustomFogHigh_Height;//[Offset: 0x2fc, Size: 0x4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x300, Size: 0x4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x304, Size: 0x10]
	LinearColor FogInscatteringColor;//[Offset: 0x314, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x328, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x330, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x334, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x344, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x348, Size: 0x4]
	float DirectionalInscatteringGapControl;//[Offset: 0x34c, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x350, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x354, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x358, Size: 0x10]
	float FogHeightFalloff;//[Offset: 0x368, Size: 0x4]
	float FogMaxOpacity;//[Offset: 0x36c, Size: 0x4]
	float StartDistance;//[Offset: 0x370, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x374, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x37c, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x380, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x384, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x394, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x398, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x39c, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	float VolumetricFogStartDistance;//[Offset: 0x3a4, Size: 0x4]
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x3a8, Size: 0x8]
	Transform VolumetricFogNoiseTransform;//[Offset: 0x3b0, Size: 0x30]
	void SetVolumetricFogStartDistance(float NewValue);// 0x8cf4804
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x8cf4788
	void SetVolumetricFogNoiseTransform(Transform Transform);// 0x8cf46e4
	void SetVolumetricFogNoiseTexture(Texture2D* NewValue);// 0x8cf4668
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x8cf45ec
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x8cf4570
	void SetVolumetricFogDistance(float NewValue);// 0x8cf44f4
	void SetVolumetricFogAlbedo(Color NewValue);// 0x8cf447c
	void SetVolumetricFog(bool bNewValue);// 0x8cf43f8
	void SetStartDistance(float Value);// 0x8cf437c
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x8cf4300
	void SetInscatteringTextureTint(LinearColor Value);// 0x8cf4284
	void SetInscatteringColorCubemapAngle(float Value);// 0x8cf4208
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x8cf418c
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x8cf4110
	void SetFogMaxOpacity(float Value);// 0x8cf4094
	void SetFogInscatteringColor(LinearColor Value);// 0x8cf4018
	void SetFogHeightFalloff(float Value);// 0x8cf3f9c
	void SetFogDensity(float Value);// 0x8cf3f20
	void SetFogCutoffDistance(float Value);// 0x8cf3ea4
	void SetDirectionalInscatteringStartDistance(float Value);// 0x8cf3e28
	void SetDirectionalInscatteringGapControl(float Value);// 0x8cf3dac
	void SetDirectionalInscatteringExponent(float Value);// 0x8cf3d30
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x8cf3cb4
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x8cf3bfc
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x8cf3b44
<----------Generated by SSpawner v1.0.4---------->


Class: CustomHeightFog
	float Height;//[Offset: 0x0, Size: 0x4]
	float DensityCoefficient;//[Offset: 0x4, Size: 0x4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x3f8, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x401, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BlockingVolume.Volume.Brush.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x400, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x3f8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x2d0, Size: 0x8]
	enum ReflectionSourceType;//[Offset: 0x2d8, Size: 0x1]
	float Brightness;//[Offset: 0x2dc, Size: 0x4]
	float RealtimeBrightness;//[Offset: 0x2e0, Size: 0x4]
	float RealtimeAngle;//[Offset: 0x2e4, Size: 0x4]
	Vector RealtimeColor;//[Offset: 0x2e8, Size: 0xc]
	Vector CaptureOffset;//[Offset: 0x2f4, Size: 0xc]
	bool bUseHighPrecisionNormalize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	float DesaturatedNormalizeRatio;//[Offset: 0x30c, Size: 0x4]
	Vector4 IrradianceMap;//[Offset: 0x310, Size: 0x10]
	Guid stateID;//[Offset: 0x398, Size: 0x10]
	void SetRealtimeColor(Vector InColor);// 0x8e1cc08
	void SetRealtimeBrightness(float InBrightness);// 0x8e1cb8c
	void SetRealtimeAngle(float InAngle);// 0x8e1cb10
<----------Generated by SSpawner v1.0.4---------->


Class: BP_radiation_C.RadiationCircle.Actor.Object
	void UserConstructionScript(float OriginalRadius);// 0x70644c4
	StaticMeshComponent* Cylinder_Base;//[Offset: 0x430, Size: 0x8]
	StaticMeshComponent* Cylinder;//[Offset: 0x438, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x440, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: RadiationCircle.Actor.Object
	StaticMeshComponent* CylinderMesh;//[Offset: 0x3f8, Size: 0x8]
	StaticMeshComponent* CylinderMeshBase;//[Offset: 0x400, Size: 0x8]
	STExtraGameStateBase* SGameStatNew;//[Offset: 0x408, Size: 0x8]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x420, Size: 0x8]
	MaterialInstanceDynamic* DynamicMatBase;//[Offset: 0x428, Size: 0x8]
	void PostInitRadiationCircle();// 0x70644c4
	void InitRadiationCircle();// 0x602e68c
	void HandleOnSafeZoneTips(float Val);// 0x602e610
	void CloseCircle();// 0x602e5fc
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	AirDropPathData3D AirDropPathData;//[Offset: 0x5a8, Size: 0x48]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 0x1]
	Vector BlueCircle;//[Offset: 0x5f4, Size: 0xc]
	Vector WhiteCircle;//[Offset: 0x600, Size: 0xc]
	float CirclePain;//[Offset: 0x60c, Size: 0x4]
	bool bIsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	Vector AirAttackArea;//[Offset: 0x614, Size: 0xc]
	delegate OnPlayerDamageInfo;//[Offset: 0x620, Size: 0x10]
	delegate OnSimpleCharacterDamageInfo;//[Offset: 0x630, Size: 0x10]
	delegate OnSafeZoneTips;//[Offset: 0x640, Size: 0x10]
	delegate OnHideCircle;//[Offset: 0x650, Size: 0x10]
	delegate OnBlueCirclePreWarning;//[Offset: 0x660, Size: 0x10]
	delegate OnBlueCircleRun;//[Offset: 0x670, Size: 0x10]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x680, Size: 0x10]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x690, Size: 0x10]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x6a0, Size: 0x10]
	delegate VehicleDestroyedDelegate;//[Offset: 0x6b0, Size: 0x10]
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x6c0, Size: 0x10]
	delegate STExtraCharacterDestroyed;//[Offset: 0x6d0, Size: 0x10]
	int PlayerNum;//[Offset: 0x6f0, Size: 0x4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f4, Size: 0x1]
	delegate OnPlayerNumChange;//[Offset: 0x6f8, Size: 0x10]
	delegate OnBeKilledNumChange;//[Offset: 0x708, Size: 0x10]
	delegate OnGameEnd;//[Offset: 0x718, Size: 0x10]
	bool bIsRevivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 0x1]
	bool bIngoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 0x1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 0x1]
	bool bIsOpenDuelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72b, Size: 0x1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 0x1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 0x1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72e, Size: 0x1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72f, Size: 0x1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 0x1]
	bool bForbidDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x731, Size: 0x1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x732, Size: 0x1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x733, Size: 0x1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x734, Size: 0x1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x735, Size: 0x1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x736, Size: 0x1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x737, Size: 0x1]
	int[] forbitPickItemTypeList;//[Offset: 0x738, Size: 0x10]
	int TrainingCountdownTimer;//[Offset: 0x748, Size: 0x4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74c, Size: 0x1]
	FString GrenadeEffectPath;//[Offset: 0x750, Size: 0x10]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 0x1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x761, Size: 0x1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x762, Size: 0x1]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x768, Size: 0x10]
	uint64 DSOptimGrayPublishFlags;//[Offset: 0x7c8, Size: 0x8]
	delegate OnDSOptimGrayPublishFlagsChanged;//[Offset: 0x7d0, Size: 0x10]
	delegate OnDSSwitchChanged;//[Offset: 0x7e0, Size: 0x10]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 0x1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f1, Size: 0x1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f2, Size: 0x1]
	FString RoomType;//[Offset: 0x7f8, Size: 0x10]
	int nSignalGunEffectId;//[Offset: 0x808, Size: 0x4]
	byte nServerZoneId;//[Offset: 0x80c, Size: 0x1]
	bool bRegisterPickUpsOnEnterFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 0x1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 0x1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x862, Size: 0x1]
	bool bEnableUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x863, Size: 0x1]
	bool bPlayVehicleMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x864, Size: 0x1]
	float TrainingModePickUpColdCD;//[Offset: 0x868, Size: 0x4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x86c, Size: 0x4]
	float PickUpColdCountDownMinTime;//[Offset: 0x870, Size: 0x4]
	float TrainingModeDropLifeTime;//[Offset: 0x874, Size: 0x4]
	bool bReportAllPickUpFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 0x1]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x879, Size: 0x1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87a, Size: 0x1]
	delegate OnAirAttack;//[Offset: 0x880, Size: 0x10]
	delegate OnInfectedAreaWarn;//[Offset: 0x890, Size: 0x10]
	delegate OnSkillManagerInitFinishDelegate;//[Offset: 0x8a0, Size: 0x10]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 0x1]
	bool IsCanSwitchFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b1, Size: 0x1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b2, Size: 0x1]
	FName[] EnableMapPackages;//[Offset: 0x8b8, Size: 0x10]
	FName[] EnableMapLayers;//[Offset: 0x8c8, Size: 0x10]
	class ViewMaskManager* ViewMaskManagerClass;//[Offset: 0x8d8, Size: 0x8]
	ViewMaskManager* ViewMaskManager;//[Offset: 0x8e0, Size: 0x8]
	class ModAdapter* ModAdapterClass;//[Offset: 0x8e8, Size: 0x8]
	ModAdapter* ModAdapter;//[Offset: 0x8f0, Size: 0x8]
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 0x1]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x8fc, Size: 0x4]
	int PveZombieGrenadeCount;//[Offset: 0x900, Size: 0x4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904, Size: 0x1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x908, Size: 0x40]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x948, Size: 0x8]
	bool bIsShowCircleWarningTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 0x1]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951, Size: 0x1]
	int ReadyStateTime;//[Offset: 0x960, Size: 0x4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x980, Size: 0x10]
	delegate RetriveDataAfterReconnectingDelegate;//[Offset: 0x990, Size: 0x10]
	bool IsCircleShowSafeZoneTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 0x1]
	FString GameModeDisplayName;//[Offset: 0x9a8, Size: 0x10]
	int CurCircleWave;//[Offset: 0x9b8, Size: 0x4]
	bool bNoAliveHumanPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bc, Size: 0x1]
	bool EnableControllVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bd, Size: 0x1]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x9c0, Size: 0x4]
	FName GameModeState;//[Offset: 0x9d8, Size: 0x8]
	bool bLessening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	float timeFromLessen;//[Offset: 0x9e4, Size: 0x4]
	Vector CircleLessenFrom;//[Offset: 0x9e8, Size: 0xc]
	Vector CircleLessenTo;//[Offset: 0x9f4, Size: 0xc]
	float timeForLessen;//[Offset: 0xa00, Size: 0x4]
	byte CurCircleStatusInfo;//[Offset: 0xa10, Size: 0x1]
	float CurCircleStateStartServerWorldSecond;//[Offset: 0xa14, Size: 0x4]
	float CurCircleStatusElapsedTime;//[Offset: 0xa18, Size: 0x4]
	float CurCircleStatusLastTime;//[Offset: 0xa1c, Size: 0x4]
	byte CurAirAttackType;//[Offset: 0xa20, Size: 0x1]
	int CurAirAttackWave;//[Offset: 0xa24, Size: 0x4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 0x1]
	float ScreenSizeFactor;//[Offset: 0xa2c, Size: 0x4]
	float ExtraRadius;//[Offset: 0xa30, Size: 0x4]
	int AlivePlayerNum;//[Offset: 0xa34, Size: 0x4]
	int AliveTeamNum;//[Offset: 0xa38, Size: 0x4]
	int NoneAIGameTime;//[Offset: 0xa3c, Size: 0x4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0xa40, Size: 0x10]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0xa50, Size: 0x10]
	delegate OnGetPlayerLandAreaList;//[Offset: 0xa60, Size: 0x10]
	delegate OnUICustomBehavior;//[Offset: 0xa70, Size: 0x10]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0xa80, Size: 0x2]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0xa88, Size: 0x10]
	GameModePlayerShowUpassInfo RepUpassInfoList;//[Offset: 0xa98, Size: 0xb0]
	enum GameModeType;//[Offset: 0xe08, Size: 0x1]
	enum GameModeConfigType;//[Offset: 0xe09, Size: 0x1]
	enum GameModeConfigSubType;//[Offset: 0xe0a, Size: 0x1]
	enum GameModeSubType;//[Offset: 0xe0b, Size: 0x1]
	int PlayerNumPerTeam;//[Offset: 0xe0c, Size: 0x4]
	int MaxPlayersPerGroupInReadyState;//[Offset: 0xe10, Size: 0x4]
	FString[] OpenTagCullingMaps;//[Offset: 0xe18, Size: 0x10]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 0x1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe29, Size: 0x1]
	int WeatherID;//[Offset: 0xe40, Size: 0x4]
	FString WeatherLevel;//[Offset: 0xe48, Size: 0x10]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe58, Size: 0x1]
	float FPVEWeatherPlaySpeed;//[Offset: 0xe70, Size: 0x4]
	float WeatherPhaseIndex;//[Offset: 0xe74, Size: 0x4]
	enum[] WeatherProcessArray;//[Offset: 0xe78, Size: 0x10]
	delegate OnWeatherStateChange;//[Offset: 0xe88, Size: 0x10]
	delegate OnWeatherSpeedChange;//[Offset: 0xe98, Size: 0x10]
	enum CurDynamicWeatherState;//[Offset: 0xea8, Size: 0x1]
	<FString,float> BeInvitedPlayers;//[Offset: 0xeb0, Size: 0x50]
	float InviteCountDownTime;//[Offset: 0xf00, Size: 0x4]
	CircleDataMining[] CircleDataMining;//[Offset: 0xf08, Size: 0x10]
	Vector[] CircleArray;//[Offset: 0xf18, Size: 0x10]
	GameDataMining GameDataMining;//[Offset: 0xf28, Size: 0x48]
	uint64 GameID;//[Offset: 0xf70, Size: 0x8]
	FString GameModeID;//[Offset: 0xf78, Size: 0x10]
	FString[] ModeUIManagerArrayCached;//[Offset: 0xf88, Size: 0x10]
	FString ModLogicSwitchTag;//[Offset: 0xf98, Size: 0x10]
	delegate OnValidDynamicLevelChanged;//[Offset: 0xfa8, Size: 0x10]
	Character* CurCastActorMsgOwner;//[Offset: 0xfb8, Size: 0x8]
	float StartFlyTime;//[Offset: 0xfc0, Size: 0x4]
	int64 StartReadyUnixTimestamp;//[Offset: 0xfc8, Size: 0x8]
	int64 StartFightingUnixTimestamp;//[Offset: 0xfd0, Size: 0x8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0xfd8, Size: 0x8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff1, Size: 0x1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff2, Size: 0x1]
	int EnableNewStateMachine;//[Offset: 0xff4, Size: 0x4]
	float PlayerInBlueCircleClipTime;//[Offset: 0xffc, Size: 0x4]
	float BroadcastClientDistance;//[Offset: 0x1000, Size: 0x4]
	int[] FinalWinTeams;//[Offset: 0x1028, Size: 0x10]
	uint32[] FinalWinPlayers;//[Offset: 0x1038, Size: 0x10]
	uint32 GameTerminatorPlayerKey;//[Offset: 0x1048, Size: 0x4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104c, Size: 0x1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104d, Size: 0x1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0x1050, Size: 0x10]
	int[] ImprisonmentTeammateGameType;//[Offset: 0x1060, Size: 0x10]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1070, Size: 0x1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1071, Size: 0x1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1072, Size: 0x1]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1073, Size: 0x1]
	FString GuideImageName;//[Offset: 0x1078, Size: 0x10]
	FString GuideLuaTableName;//[Offset: 0x1088, Size: 0x10]
	FString GuideLuaFunctionName;//[Offset: 0x1098, Size: 0x10]
	bool IsDisableTeamPanelPlayerStateInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a8, Size: 0x1]
	float PlayerNoOperationTime;//[Offset: 0x10ac, Size: 0x4]
	float PlayerNoConfirmRetToGameTime;//[Offset: 0x10b0, Size: 0x4]
	bool IsEnableHealthNumberText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b4, Size: 0x1]
	Vector2D SelfHealthOffset;//[Offset: 0x10b8, Size: 0x8]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c0, Size: 0x1]
	bool bOpenVehicleOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c1, Size: 0x1]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0x10c8, Size: 0x8]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x10d0, Size: 0x10]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x10e0, Size: 0x10]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0x10f0, Size: 0x10]
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0x1100, Size: 0x10]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0x1118, Size: 0x8]
	class Actor* PreloadPoolActorClass;//[Offset: 0x1120, Size: 0x28]
	class Actor* CommonPreloadPoolActorClass;//[Offset: 0x1148, Size: 0x28]
	FString CommonPrePoolActorPath;//[Offset: 0x1170, Size: 0x10]
	<FString,ActorExtraComponents> ActorExtraComponents;//[Offset: 0x1180, Size: 0x50]
	XTriggerLuaRemoteComponent* LuaRemoteComponent;//[Offset: 0x11d0, Size: 0x8]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0x11d8, Size: 0x8]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e0, Size: 0x1]
	bool bAIUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e1, Size: 0x1]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x11e8, Size: 0x10]
	bool IgnoreWhenAttackNotInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f8, Size: 0x1]
	delegate OnVeteranOrRecruitListUpdate;//[Offset: 0x1200, Size: 0x10]
	bool bNewForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1210, Size: 0x1]
	FString FServerStartTime;//[Offset: 0x1218, Size: 0x10]
	bool bIsLowMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1228, Size: 0x1]
	uint32 ServerStartTimestamp;//[Offset: 0x122c, Size: 0x4]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0x1230, Size: 0x10]
	FString MainWeaponTableName;//[Offset: 0x1240, Size: 0x10]
	class Object[] PlaneAvatarClassArray;//[Offset: 0x1250, Size: 0x10]
	<uint32,bool> SendStartFlowRecord;//[Offset: 0x1270, Size: 0x50]
	<uint32,bool> SendEndFlowRecord;//[Offset: 0x12c0, Size: 0x50]
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0x1310, Size: 0x8]
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0x1318, Size: 0x8]
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1320, Size: 0x1]
	bool bAvatarDownloadInBattleClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1321, Size: 0x1]
	bool bEnableDeathPlaybackRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1322, Size: 0x1]
	bool bEnableDisplayPlayerAddonCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1323, Size: 0x1]
	int PlayerAddonCount;//[Offset: 0x1324, Size: 0x4]
	STExtraBaseCharacter*[] DyingCharacters;//[Offset: 0x1330, Size: 0x10]
	bool bEnableCarryAllCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1340, Size: 0x1]
	MapUIMarkManager* MarkMgr;//[Offset: 0x1348, Size: 0x8]
	FString RenderTargetMgrClassPath;//[Offset: 0x1350, Size: 0x10]
	WidgetToRenderTarget* RenderTargetMgr;//[Offset: 0x1360, Size: 0x8]
	GameStateWeaponRule WeaponRule;//[Offset: 0x1368, Size: 0x28]
	bool bHasUnderEarthWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1390, Size: 0x1]
	<uint32,EmotePlayer> LocalEmotePlayerList;//[Offset: 0x1398, Size: 0x50]
	ReplayRecordInfo* ReplayRecordInfo;//[Offset: 0x13e8, Size: 0x8]
	ParallelWorldDebugSummary ParallelWorldDebugSummary;//[Offset: 0x13f0, Size: 0x18]
	void WeatherStateChangeDelegate__DelegateSignature();// 0x70644c4
	void WeatherSpeedChangeDelegate__DelegateSignature();// 0x70644c4
	void UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x61829dc
	void UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x618282c
	void UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x6182540
	void UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x61823cc
	STExtraPlayerState* TryGetOneRealPlayerState();// 0x6182398
	STExtraBaseCharacter* TryGetCharacterByPlayerKey(FString PlayerKey);// 0x618225c
	void SyncAirplaneAndAirDrops(out AirDropPathData3D InAirDropPathData);// 0x6182188
	void SimulateAirAttackOver(int waveIndex);// 0x61820d8
	void ShowGameTips(int PlayerKey, int TipsID, FString Params);// 0x6181fb4
	void SetTagCulling(bool IsUse);// 0x6181f30
	void SetStandAloneIDSwitch(const int SwitchId, const FString bOpen);// 0x6181dbc
	void SetServerStartTime(uint32 nServerStartTime);// 0x6181d40
	void SetSendStartFlow(uint32 PlayerKey);// 0x6181cc4
	void SetSendEndFlow(uint32 PlayerKey);// 0x6181c48
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x6181b48
	static void SetOnGameStateEndPlay(delegate InOnGameStateEndPlay);// 0x6181ab4
	static void SetOnGameStateBeginPlay(delegate InOnGameStateBeginPlay);// 0x6181a20
	void SetIsLowMatch(int nClientType);// 0x61819a4
	void SetCustomRoute(out const Vector2D StartPoint, out const Vector2D EndPoint);// 0x61818c8
	void SetCurAirAttackWave(int AirAttackWave);// 0x618184c
	void SetCurAirAttackType(byte airattacktype);// 0x61817d0
	void SetCircleLessening(bool IsLessing);// 0x6181750
	void SetCircleInfo(GetCircleInfo ReConnectInfo);// 0x6181678
	void SetAvatarDownloadInBattleClientSwitch(bool bOpen);// 0x61815f4
	void SetAlivePlayerNum(int InAlivePlayerNum);// 0x6181578
	void ServerRemoteDestroyAllActor();// 0x6181564
	void ServerRemoteDestroyActor(int SingleId);// 0x61814e8
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x61813a8
	void RPC_Client_RemoteDestroyAllActor();// 0x618138c
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x6181308
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x6181198
	void RoomTypeChanged();// 0x618117c
	void PlayPawnActive(FString PlayerKey, Actor* PlayerCharacter);// 0x6181004
	void OnSimpleCharacterTakeDamage(STExtraBaseCharacter* Attacker, Actor* DamageCauser, STExtraSimpleCharacter* VictimSimpleCharacter, float Damage, out const DamageEvent DamageEvent, bool bIsFatalHealthCost, bool IsHeadshot);// 0x6180de4
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x70644c4
	void OnRep_WeatherStateChanged();// 0x6180dd0
	void OnRep_WeatherLevel();// 0x6180dbc
	void OnRep_WeatherId();// 0x6180da8
	void OnRep_VisualFieldFeatureParam();// 0x6180d94
	void OnRep_VeteranRecruitListUpdate();// 0x6180d80
	void OnRep_UpassInfoList();// 0x6180d6c
	void OnRep_StartFlyTime();// 0x6180d58
	void OnRep_RoomType();// 0x6180d44
	void OnRep_ResetWeatherPlaySpeed();// 0x6180d30
	void OnRep_ReplicatedWorldTimeSeconds();// 0x6180d14
	void OnRep_ReadyStateTime();// 0x6180cf8
	void OnRep_ReadyStateCountingDown();// 0x6180ce4
	void OnRep_PlayerNumChange();// 0x6180cd0
	void OnRep_PlayerAddonCount();// 0x6180cb4
	void OnRep_MarkSyncData();// 0x6180ca0
	void OnRep_IsTrainingMode();// 0x6180c8c
	void OnRep_IsShowDeadBox();// 0x6180c78
	void OnRep_IsOpenDuelMode();// 0x6180c64
	void OnRep_IsFPPMode();// 0x6180c50
	void OnRep_IsDark();// 0x6180c3c
	void OnRep_GameTerminatorPlayerKey();// 0x6180c28
	void OnRep_GameModeType();// 0x6180c14
	void OnRep_GameModeSubType();// 0x6180c00
	void OnRep_GameModeState();// 0x6180be4
	void OnRep_GameModeFeatureSet();// 0x6180bd0
	void OnRep_FinalWinTeams();// 0x6180bbc
	void OnRep_FinalWinPlayers();// 0x6180ba8
	void OnRep_DynamicWeatherState();// 0x6180b94
	void OnRep_DSSwitch();// 0x6180b80
	void OnRep_DSOptimGrayPublishFlags();// 0x6180b6c
	void OnRep_CircleWaveChanged();// 0x6180b50
	void OnRep_CircleArray();// 0x6180b3c
	void OnRep_AliveTeamNum();// 0x6180b28
	void OnRep_AlivePlayerNum();// 0x6180b14
	void OnRep_AirDropPathData();// 0x6180b00
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x6180a40
	void OnPlaneAvatarAsyncLoadComplete(out class Object[] ClassArrays);// 0x6180988
	void OnGameStateEndPlay__DelegateSignature(byte EndPlayReason);// 0x70644c4
	void OnGameStateBeginPlay__DelegateSignature(GameState* GameState);// 0x70644c4
	void OnGameModeDisplayNameChange();// 0x6180974
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x61808b8
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage, out const DamageEvent DamageEvent, float DamageBeforeCalArmor, bool bIsFatalHealthCost, Actor* DamageCauser, bool bIsNearDeathHealthCost);// 0x6180658
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x61805a0
	bool IsSendStartFlow(uint32 PlayerKey);// 0x6180510
	bool IsSendEndFlow(uint32 PlayerKey);// 0x6180480
	bool IsRevivalGame();// 0x6180448
	bool IsPVEMode();// 0x6180410
	bool IsNoCircleInfo();// 0x61803d8
	bool IsMapUseTeamPattern();// 0x6180398
	bool IsInWhiteCircle(out const Vector pos);// 0x61802fc
	bool IsInNight();// 0x61802bc
	bool IsInBlueCircleByCircleMgr(Actor* _actor);// 0x618022c
	bool IsInBlueCircle(out const Vector pos);// 0x6180190
	bool IsFeatureSupported(enum SubSystemType);// 0x61800f8
	bool IsEnableObjectPool();// 0x61800c0
	bool IsEnableDamageInfo();// 0x6180080
	bool IsCreativeEditor();// 0x6180040
	FString GetWeatherLevelName();// 0x617ff9c
	int GetWeatherID();// 0x617ff68
	TslSimpleCollisionManager* GetSimpleCollisionManager();// 0x617ff34
	int GetServerStartUnixTimestamp();// 0x617ff00
	FString GetServerStartTime();// 0x617fe5c
	float GetRepServerWorldTimeSeconds();// 0x617fe28
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x617fdac
	int GetPVEWeatherPhaseIndex();// 0x617fd78
	STExtraPlayerState* GetPlayerStateByUID(uint64 PlayerUID);// 0x617fcec
	STExtraPlayerState* GetPlayerStateByPlayerName(FString PlayerName);// 0x617fc34
	STExtraPlayerState* GetPlayerStateByPlayerKey(uint32 PlayerKey);// 0x617fba8
	XTriggerLuaRemoteComponent* GetLuaRemoteComponent();// 0x617fb74
	bool GetIsReadyStateReport();// 0x617fb34
	bool GetIsCreative();// 0x617faf4
	FName GetGameModeState();// 0x617fac0
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x617fa8c
	FString GetDSSwitchValueFastWithCache(const int InSwitchId);// 0x617f998
	FString GetDSSwitchValue(const int InSwitchId);// 0x617f8a4
	DestructibleSurfaceManager* GetDestructibleSurfaceManager();// 0x617f870
	enum GetCurWeatherState();// 0x617f83c
	enum GetCurDynamicWeatherState();// 0x617f808
	int GetCurCircleWave();// 0x617f7ec
	byte GetCurCircleState();// 0x617f7a8
	int GetCurCircleIndex();// 0x617f774
	GetCircleInfo GetCircleStateInfo();// 0x617f708
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x617f654
	MarkSyncData[] GetAllMarkLocalData(byte _TYPE);// 0x617f5a0
	int GetAlivePlayerNum();// 0x617f56c
	AirDropPathData3D GetAirDropPathData();// 0x617f3f4
	STExtraBaseCharacter* FindCharacterByPlayerKey(FString PlayerKey);// 0x617f2b8
	void ExecuteCVarConfig();// 0x617f2a4
	void EnableObjectPool(bool bEnable);// 0x617f220
	void DSSwitchChangeDelegate__DelegateSignature();// 0x70644c4
	Widget* DeepFindWidgetInUserWidget(UserWidget* SourceWidget, FName WidgetName);// 0x617f15c
	void ClearAirDropPathData();// 0x617f148
	bool CheckIsLowMatch();// 0x617f110
	void CheckInitLuaRemoteEvent();// 0x617f0fc
	bool CheckDSSwitchOpen(const int SwitchId);// 0x617f064
	bool CheckDamage(STExtraBaseCharacter* AttackCharacter, STExtraBaseCharacter* TargetBaseCharacter);// 0x617ef94
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x617ef18
	void ChangeDynamicWeatherState(enum DayState);// 0x617ee9c
	void BroadcastUISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x617edac
	void BroadcastUISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x617ebf4
	void BroadcastUIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x617ea78
	void BroadcastUICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x617e8fc
	void BroadcastTemporaryMessage(FString Message);// 0x617e84c
	void BroadcastShowGameTips(int TipsID, FString Params);// 0x617e75c
	void BroadcastLuaTipsBehaviorWithTime(FString BehaviorTag, int ID, FString Params1, FString Params2, float ControlTime);// 0x617e568
	void BroadcastLuaTipsBehavior(FString BehaviorTag, int ID, FString Params1, FString Params2);// 0x617e3b0
	void BroadcastEndCircle();// 0x617e350
	void BroadcastCustomLuaTipsBehavior(FString BehaviorTag, int ID, const byte[] ExpandDataContent);// 0x617e1fc
	void BroadcastCircleWaveOver(int Index);// 0x617e14c
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index, bool InbActiveScreenSize, float InScreenSizeFactor, float InExtraRadius, float Pain, bool IsCustomCircle);// 0x617deb4
	void BroadcastCircleInfo(byte circleInfo, float Time, const Vector BlueCircleSync, const Vector WhiteCircleSync, int CircleInvertedIndex, enum State);// 0x617dccc
	void BroadcastAirAttackWarning(const Vector AirAttackAreaSrc, int waveIndex);// 0x617dc10
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, const Vector AirAttackAreaSrc, int waveIndex);// 0x617da84
	void AsyncLoadResFinishCallback();// 0x617da70
	void AsyncLoadCommonResFinishCallback();// 0x617da5c
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x617d9a0
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x617d8e4
	void AddPveZombieGrenadeCount(int Value);// 0x617d868
	void AddPvePoliceOfficeTriggerCount(int Value);// 0x617d7ec
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x617d5f0
<----------Generated by SSpawner v1.0.4---------->


Class: UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	bool bTeamIDChgDeactivePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51d, Size: 0x1]
	FString WeaponAttrReloadTableName;//[Offset: 0x570, Size: 0x10]
	FString DamageSearchTableName;//[Offset: 0x580, Size: 0x10]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x6924e28
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x6924d08
	bool CheckDSSwitchOpen(const int SwitchId);// 0x6924c70
<----------Generated by SSpawner v1.0.4---------->


Class: LuaGameState.GameState.GameStateBase.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x4b8, Size: 0x50]
	FString LuaFilePath;//[Offset: 0x508, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x438, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x440, Size: 0x8]
	int ElapsedTime;//[Offset: 0x448, Size: 0x4]
	void OnRep_MatchState();// 0x8d0ccc0
	void OnRep_ElapsedTime();// 0x8d0cca4
<----------Generated by SSpawner v1.0.4---------->


Class: LuaNetSerialization
<----------Generated by SSpawner v1.0.4---------->


Class: AirDropPathData3D
	int AirDropIndex;//[Offset: 0x0, Size: 0x4]
	Vector StartLoc3D;//[Offset: 0x4, Size: 0xc]
	Vector TargetLoc3D;//[Offset: 0x10, Size: 0xc]
	Vector[] AirDropLocs3D;//[Offset: 0x20, Size: 0x10]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	Vector MapCenter;//[Offset: 0x34, Size: 0xc]
	float Radius;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DSSwitchInfo
	int KeyNum;//[Offset: 0x0, Size: 0x4]
	FString SValue;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ViewMaskManager.Object
	enum ViewMaskTypeSetting;//[Offset: 0x28, Size: 0x1]
	class Actor[] FilterActorClassList;//[Offset: 0x30, Size: 0x10]
	void SetViewMaskType(enum NewMaskType);// 0x6343a60
	bool IsPlayerViewMaskValid(STExtraBaseCharacter* BaseCharacter);// 0x63439d0
	void Init();// 0x63439bc
	int ClearViewMaskForActor(Actor* MaskActor);// 0x6343930
	int ApplyViewMaskForPlayer(STExtraBaseCharacter* BaseCharacter);// 0x63438a4
	int ApplyViewMaskForActorWithOwnerPlayer(Actor* MaskActor, STExtraBaseCharacter* BaseCharacter);// 0x63437e0
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0x1138, Size: 0x10]
	delegate OnDeath;//[Offset: 0x1148, Size: 0x10]
	delegate OnBulletChange;//[Offset: 0x1158, Size: 0x10]
	delegate OnPlayerPoseChange;//[Offset: 0x1168, Size: 0x10]
	delegate OnAnimAssetSkeletonMatch;//[Offset: 0x1178, Size: 0x10]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x1188, Size: 0x10]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0x1198, Size: 0x10]
	delegate OnPlayerPickUp;//[Offset: 0x11a8, Size: 0x10]
	delegate OnPlayerWeaponChangeState;//[Offset: 0x11b8, Size: 0x10]
	delegate OnPlayerWeaponReloadLastBullet;//[Offset: 0x11c8, Size: 0x10]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0x11d8, Size: 0x10]
	delegate OnWeaponShootIntervalModeChangeDelegate;//[Offset: 0x11e8, Size: 0x10]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0x11f8, Size: 0x10]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0x1208, Size: 0x10]
	delegate IsEnterNearDeathDelegate;//[Offset: 0x1218, Size: 0x10]
	delegate OnFollowStateChanged;//[Offset: 0x1228, Size: 0x10]
	delegate OnPlayerStartRescue;//[Offset: 0x1268, Size: 0x10]
	delegate OnCharacterAimModeChanged;//[Offset: 0x1278, Size: 0x10]
	delegate OnPerspectiveChanged;//[Offset: 0x1288, Size: 0x10]
	delegate OnServerPerspectiveChanged;//[Offset: 0x1298, Size: 0x10]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0x12a8, Size: 0x10]
	delegate OnDeathDelegate;//[Offset: 0x12b8, Size: 0x10]
	delegate OnPostTakeDamage;//[Offset: 0x12c8, Size: 0x10]
	delegate OnReconnectNotifyDelegate;//[Offset: 0x12d8, Size: 0x10]
	delegate OnStartInitDelegate;//[Offset: 0x12e8, Size: 0x10]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0x12f8, Size: 0x10]
	delegate OnUpdateForSleepComponent;//[Offset: 0x1308, Size: 0x10]
	delegate PostAttrModifiedDelegate;//[Offset: 0x1318, Size: 0x10]
	delegate AnimMontagePlayDelegate;//[Offset: 0x1368, Size: 0x10]
	delegate AnimMontagePlayExtraDelegate;//[Offset: 0x1378, Size: 0x10]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0x1388, Size: 0x10]
	delegate OnCharacterStartFillGasDelegate;//[Offset: 0x1398, Size: 0x10]
	delegate OnCharacterStartFireDelegate;//[Offset: 0x13a8, Size: 0x10]
	delegate OnCharacterStopFireDelegate;//[Offset: 0x13b8, Size: 0x10]
	delegate OnCharacterShootDelegate;//[Offset: 0x13c8, Size: 0x10]
	delegate OnCharacterShootBulletDelegate;//[Offset: 0x13d8, Size: 0x10]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0x13e8, Size: 0x10]
	delegate OnCharacterEndViewTarget;//[Offset: 0x13f8, Size: 0x10]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0x1408, Size: 0x10]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0x1418, Size: 0x10]
	delegate OnPawnChangeFinishDelegate;//[Offset: 0x1428, Size: 0x10]
	delegate OnPawnRespawnDelegate;//[Offset: 0x1438, Size: 0x10]
	delegate OnRequestPaintDecalDelegate;//[Offset: 0x1448, Size: 0x10]
	delegate OnPawnExitParachute;//[Offset: 0x1458, Size: 0x10]
	delegate SetClimbAnimationDelegate;//[Offset: 0x1468, Size: 0x10]
	delegate OnCanVaultFlagChangeDelegate;//[Offset: 0x1478, Size: 0x10]
	delegate OnPreRepAttachment;//[Offset: 0x1488, Size: 0x10]
	delegate OnPostRepAttachment;//[Offset: 0x1498, Size: 0x10]
	delegate OnCalcPickUpItemFlow;//[Offset: 0x14a8, Size: 0x10]
	delegate OnCalcUseItemFlow;//[Offset: 0x14b8, Size: 0x10]
	delegate OnReceivePlayerKey;//[Offset: 0x14c8, Size: 0x10]
	AkAudioEvent* DeathSound;//[Offset: 0x14d8, Size: 0x8]
	AkAudioEvent* PickupSound;//[Offset: 0x14e0, Size: 0x8]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0x14e8, Size: 0x8]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0x14f0, Size: 0x8]
	AkAudioEvent* SwitchSightSound;//[Offset: 0x14f8, Size: 0x8]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0x1500, Size: 0x8]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1508, Size: 0x1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1508, Size: 0x1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1508, Size: 0x1]
	float NetDelayMinAniCompensate;//[Offset: 0x150c, Size: 0x4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1510, Size: 0x1]
	float Money;//[Offset: 0x1514, Size: 0x4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1518, Size: 0x1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1519, Size: 0x1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1519, Size: 0x1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151a, Size: 0x1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151b, Size: 0x1]
	bool bShootSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151c, Size: 0x1]
	float MaxSwimSprintSpeed;//[Offset: 0x1520, Size: 0x4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1524, Size: 0x1]
	bool bStandAloneUnlimitBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1525, Size: 0x1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1526, Size: 0x1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1527, Size: 0x1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1528, Size: 0x1]
	float AllowToggleADSCoolDownLength;//[Offset: 0x1530, Size: 0x4]
	bool bCanBeHitWhenHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1535, Size: 0x1]
	float PreviousValueToSetForHealthPredict;//[Offset: 0x1538, Size: 0x4]
	float PreviousValueToSetForEnergyPredict;//[Offset: 0x153c, Size: 0x4]
	float ValueLimitForHealthPredict;//[Offset: 0x1540, Size: 0x4]
	FName HeadSocketName;//[Offset: 0x1548, Size: 0x8]
	FName LFootSocketName;//[Offset: 0x1550, Size: 0x8]
	FName RFootSocketName;//[Offset: 0x1558, Size: 0x8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0x1560, Size: 0x8]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0x1568, Size: 0x8]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0x1570, Size: 0x8]
	EffectComponent* NewEffectComponent;//[Offset: 0x1578, Size: 0x8]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0x1580, Size: 0x8]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0x1588, Size: 0x8]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0x1590, Size: 0x8]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1598, Size: 0x1]
	Rotator ServerControlRotation;//[Offset: 0x159c, Size: 0xc]
	byte PoseState;//[Offset: 0x15a8, Size: 0x1]
	float LastChangeCapsuleSizeTime;//[Offset: 0x15ac, Size: 0x4]
	Actor* ThePlane;//[Offset: 0x15b0, Size: 0x8]
	float ReplicatedNowShovelingSpeed;//[Offset: 0x15b8, Size: 0x4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0x15bc, Size: 0xc]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c8, Size: 0x1]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c9, Size: 0x1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ca, Size: 0x1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d8, Size: 0x1]
	float VaultCheckBroadcastInterval;//[Offset: 0x15dc, Size: 0x4]
	bool bEnableSinkEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e0, Size: 0x1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x15e8, Size: 0x8]
	RepMovementKeyLoc RepMovementKeyLoc;//[Offset: 0x15f8, Size: 0x28]
	byte ClientSidePoseState;//[Offset: 0x1624, Size: 0x1]
	float RadialDamageScale;//[Offset: 0x1628, Size: 0x4]
	float RadialDamageReduce;//[Offset: 0x162c, Size: 0x4]
	float MomentumResistanceScale;//[Offset: 0x1630, Size: 0x4]
	float MomentumResistanceFixed;//[Offset: 0x1634, Size: 0x4]
	float MoveOptimizeChangeCD;//[Offset: 0x16ec, Size: 0x4]
	byte LastPoseState;//[Offset: 0x16f4, Size: 0x1]
	float LastSwitchCharPoseTime;//[Offset: 0x16f8, Size: 0x4]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1710, Size: 0x1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0x1714, Size: 0x4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171c, Size: 0x1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171d, Size: 0x1]
	bool bAttachmentRepNotifyAlways;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171e, Size: 0x1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171f, Size: 0x1]
	float AnimDeathLifeSpan;//[Offset: 0x1720, Size: 0x4]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1724, Size: 0x1]
	bool bRespawnResetAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1725, Size: 0x1]
	bool bRespawnClearAttrModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1726, Size: 0x1]
	bool bRespawnClearAllbuffs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1727, Size: 0x1]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0x1728, Size: 0x8]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x1730, Size: 0x10]
	Actor*[] PlayerSlotData;//[Offset: 0x1740, Size: 0x10]
	Actor*[] InventoryData;//[Offset: 0x1750, Size: 0x10]
	AkComponent* SoundComp;//[Offset: 0x17b0, Size: 0x8]
	AkComponent* AmbientSoundComp;//[Offset: 0x17b8, Size: 0x8]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c0, Size: 0x1]
	bool bEnableFootSoundOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c1, Size: 0x1]
	AkAudioEvent* FootstepSound;//[Offset: 0x17c8, Size: 0x8]
	AkAudioEvent* AmbientSound;//[Offset: 0x17d0, Size: 0x8]
	AkAudioEvent* AkHitHeadWithHelmet;//[Offset: 0x17d8, Size: 0x8]
	AkAudioEvent* AkHitHeadWithoutHelmet;//[Offset: 0x17e0, Size: 0x8]
	enum[] ModesIgnoreHitHead;//[Offset: 0x17e8, Size: 0x10]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0x17f8, Size: 0x50]
	SceneComponent* MeshContainer;//[Offset: 0x1848, Size: 0x8]
	Vector2D MeshContainerDefaultOffsetXY;//[Offset: 0x1850, Size: 0x8]
	int CurrentTaskTriggerAreaID;//[Offset: 0x1858, Size: 0x4]
	float ProduceSoundInterval;//[Offset: 0x185c, Size: 0x4]
	float ProduceSoundVelocitySquared;//[Offset: 0x1860, Size: 0x4]
	float HearRadius;//[Offset: 0x1864, Size: 0x4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1874, Size: 0x1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1875, Size: 0x1]
	byte EnsureStyle;//[Offset: 0x1876, Size: 0x1]
	uint32 EnsureLevel;//[Offset: 0x1878, Size: 0x4]
	int MLEnsureStyle;//[Offset: 0x187c, Size: 0x4]
	Actor* WaterObj;//[Offset: 0x1880, Size: 0x8]
	byte DSHitPartJudgment;//[Offset: 0x1889, Size: 0x1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0x1890, Size: 0x8]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0x1898, Size: 0x8]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0x18a0, Size: 0x8]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18a8, Size: 0x1]
	float ReplciateRestoringDuraion;//[Offset: 0x18ac, Size: 0x4]
	float NearDeathBreath;//[Offset: 0x18b0, Size: 0x4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b4, Size: 0x1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0x18b8, Size: 0x4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c0, Size: 0x1]
	float DistSquaredInterruptRevival;//[Offset: 0x18c4, Size: 0x4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x18c8, Size: 0x8]
	BodyTypeDef StandBodyDef;//[Offset: 0x18d0, Size: 0x8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x18d8, Size: 0x8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x18e0, Size: 0x8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x18e8, Size: 0x8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x18f0, Size: 0x50]
	Vector ScopeNewIdleLoc;//[Offset: 0x1940, Size: 0xc]
	Vector ScopeNewAimLoc;//[Offset: 0x194c, Size: 0xc]
	float ScopeMoveInOutSpeed;//[Offset: 0x1958, Size: 0x4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0x195c, Size: 0xc]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0x1968, Size: 0x4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x196c, Size: 0x4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x1970, Size: 0x4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x1978, Size: 0xc]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x1984, Size: 0x4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x1988, Size: 0x4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x198c, Size: 0x4]
	float ScopeLagScale;//[Offset: 0x1994, Size: 0x4]
	float ScopeAimCrosshairUIScale;//[Offset: 0x1998, Size: 0x4]
	float ScopeFov;//[Offset: 0x199c, Size: 0x4]
	bool bIsUseDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a0, Size: 0x1]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x19a8, Size: 0x8]
	bool bAIDropToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b0, Size: 0x1]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0x19b8, Size: 0x8]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x19c0, Size: 0x4]
	int FirstDamageTypeSpesificID;//[Offset: 0x19c4, Size: 0x4]
	float RefreshUITimeAfterSpawn;//[Offset: 0x19c8, Size: 0x4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x19cc, Size: 0x4]
	Vector ScopeNewTargetLoc;//[Offset: 0x19d8, Size: 0xc]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19e4, Size: 0x1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x19e8, Size: 0x8]
	bool bFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f0, Size: 0x1]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0x19f8, Size: 0x8]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x1a00, Size: 0x8]
	CameraComponent* FPPCameraComp;//[Offset: 0x1a08, Size: 0x8]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x1a10, Size: 0x8]
	CameraComponent* ScopeCameraComp;//[Offset: 0x1a18, Size: 0x8]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x1a20, Size: 0x8]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a28, Size: 0x1]
	SyncAKEvent SyncAKEvent;//[Offset: 0x1a2c, Size: 0x10]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x1a40, Size: 0x10]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x1a50, Size: 0x10]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x1a60, Size: 0x10]
	delegate OnMovementBaseChanged;//[Offset: 0x1a70, Size: 0x10]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a80, Size: 0x1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a81, Size: 0x1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a82, Size: 0x1]
	BoxComponent* ProneBoxComponent;//[Offset: 0x1a88, Size: 0x8]
	Vector ProneBoxRelativeLocation;//[Offset: 0x1a90, Size: 0xc]
	float DamageCauserRecordKeepTime;//[Offset: 0x1a9c, Size: 0x4]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x1aa0, Size: 0x10]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x1ab0, Size: 0x10]
	<STExtraPlayerState*,int> PlayerLastDamageTime;//[Offset: 0x1ac0, Size: 0x50]
	int MaxRecordOvertimeAssistTime;//[Offset: 0x1b10, Size: 0x4]
	float LastDamageTime;//[Offset: 0x1b14, Size: 0x4]
	float OutOfContestConfig;//[Offset: 0x1b18, Size: 0x4]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x1b20, Size: 0x8]
	bool AttackerNeedReceiveDamageRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b28, Size: 0x1]
	float PickUpRadius;//[Offset: 0x1b2c, Size: 0x4]
	bool bSyncCameraByChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b30, Size: 0x1]
	SimLocalViewData SimulateViewData;//[Offset: 0x1b34, Size: 0x10]
	SimViewData NetSimulateViewData;//[Offset: 0x1b44, Size: 0x6]
	bool IsFakeOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b58, Size: 0x1]
	AnchorPlatData AnchorPlat;//[Offset: 0x1b5c, Size: 0x8]
	bool bShouldIgnorePVSTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c20, Size: 0x1]
	<int,class AnimInstance> SkillSubAnimInstances;//[Offset: 0x1c40, Size: 0x50]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x1c98, Size: 0x28]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x1cc0, Size: 0x8]
	delegate OnMoveBlockDelegate;//[Offset: 0x1cd8, Size: 0x10]
	float JumpCheckImmediatelyBlockZVelocityRate;//[Offset: 0x1ce8, Size: 0x4]
	PickUpItemData[] CacheDropItemDataList;//[Offset: 0x1cf0, Size: 0x10]
	bool bCanSwitchToSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d00, Size: 0x1]
	delegate OnPlayWeaponSound;//[Offset: 0x1d08, Size: 0x10]
	float MaxDispalyFootprintDistance;//[Offset: 0x1d18, Size: 0x4]
	Rotator DefaultMeshRot;//[Offset: 0x1d1c, Size: 0xc]
	Vector DefaultMeshLoc;//[Offset: 0x1d28, Size: 0xc]
	InteractiveMoveActor* CurrentInteractiveMoveActor;//[Offset: 0x1d38, Size: 0x8]
	class AnimInstance* MainCharAnimClass;//[Offset: 0x1d40, Size: 0x8]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x1d48, Size: 0x8]
	class AnimInstance* MainCharTPPAnimClass;//[Offset: 0x1d50, Size: 0x8]
	class AnimInstance* AvatarAnimClassCache;//[Offset: 0x1d58, Size: 0x8]
	bool IsNetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d60, Size: 0x1]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d61, Size: 0x1]
	int CurrentEmoteIndex;//[Offset: 0x1d64, Size: 0x4]
	float EmoteAnimLastTime;//[Offset: 0x1d68, Size: 0x4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x1d70, Size: 0x10]
	delegate EmoteReadyToPlayNext;//[Offset: 0x1d80, Size: 0x10]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x1d90, Size: 0x10]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x1da0, Size: 0x10]
	AnimationAsset* TempEmoteResource;//[Offset: 0x1db0, Size: 0x28]
	bool bEnableEmotePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd8, Size: 0x1]
	bool bStopEmoteLoadCallbackWhenCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd9, Size: 0x1]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x1de0, Size: 0x8]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x1de8, Size: 0x4]
	bool bEnablePlayerPickUpAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e28, Size: 0x1]
	bool bEnablePlayerDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e29, Size: 0x1]
	bool bRecordKillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2a, Size: 0x1]
	float AIThrowPitch;//[Offset: 0x1e2c, Size: 0x4]
	Vector2D AISpeedScale;//[Offset: 0x1e30, Size: 0x8]
	PlayerSecurityInfoCollector* PlayerSecurityInfoCollector;//[Offset: 0x1e38, Size: 0x8]
	bool bValidCalculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e40, Size: 0x1]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0x1e48, Size: 0x50]
	<int,enum> PawnStateRelatedBuffIDMap;//[Offset: 0x1e98, Size: 0x50]
	int[] ToRemoveBuffSkillIdListWhenOnPlane;//[Offset: 0x1ee8, Size: 0x10]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef8, Size: 0x1]
	float ForceSyncMovementStateDeltaTime;//[Offset: 0x1efc, Size: 0x4]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f05, Size: 0x1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x1f08, Size: 0x8]
	float[] HealthChangeHistoryPerFrame;//[Offset: 0x1f10, Size: 0x10]
	float LastSyncHealthChange;//[Offset: 0x1f20, Size: 0x4]
	Vector CurInputVector;//[Offset: 0x1f24, Size: 0xc]
	StaticMeshComponent* ScopComp;//[Offset: 0x1f30, Size: 0x8]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x1f48, Size: 0x8]
	int[] DisableConfigAttrPoseMoveIndexs;//[Offset: 0x1f50, Size: 0x10]
	float voiceCheckCD;//[Offset: 0x1f60, Size: 0x4]
	float voiceCheckShowCD;//[Offset: 0x1f64, Size: 0x4]
	float voiceCheckDis;//[Offset: 0x1f68, Size: 0x4]
	float voiceCheckDisInParachute;//[Offset: 0x1f6c, Size: 0x4]
	bool voiceCheckInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f70, Size: 0x1]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x1f74, Size: 0x4]
	<byte> DanyinCompletedIDSet;//[Offset: 0x1f90, Size: 0x50]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x1fe0, Size: 0x8]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x1ff8, Size: 0x8]
	byte MovementModeBeforeNearDeath;//[Offset: 0x2000, Size: 0x1]
	float MoveableSwitchPoseTime;//[Offset: 0x2004, Size: 0x4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x2008, Size: 0x8]
	int HandFolderRatio;//[Offset: 0x2010, Size: 0x4]
	float SwimUpRate;//[Offset: 0x2014, Size: 0x4]
	PlayerSwimComponent* SwimComponet;//[Offset: 0x2018, Size: 0x8]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2021, Size: 0x1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2022, Size: 0x1]
	WeaponRecordDataForReplay WeaponRecordDataForReplay;//[Offset: 0x202c, Size: 0xc]
	bool SkipCirclePain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2038, Size: 0x1]
	bool bIsOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2039, Size: 0x1]
	float UpdateAIPawnInfoTime;//[Offset: 0x203c, Size: 0x4]
	PickUpItemData[] CacheDropList;//[Offset: 0x2048, Size: 0x10]
	bool bForbidAiPronePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2058, Size: 0x1]
	bool bUpdateContainerLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2059, Size: 0x1]
	bool bForceDiffStateOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205a, Size: 0x1]
	Vector MoveInputState;//[Offset: 0x2094, Size: 0xc]
	byte MovementInputReplication;//[Offset: 0x20a0, Size: 0x1]
	float SwitchPoseCD;//[Offset: 0x20c4, Size: 0x4]
	float SwitchPoseStartTime;//[Offset: 0x20c8, Size: 0x4]
	float SwitchPerspectiveStartTime;//[Offset: 0x20cc, Size: 0x4]
	bool bWatchProneStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d0, Size: 0x1]
	bool bHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f0, Size: 0x1]
	float CollideByTeammateCDConfig;//[Offset: 0x2104, Size: 0x4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x210c, Size: 0x10]
	Transform HitBoxLeanTransL;//[Offset: 0x2120, Size: 0x30]
	Transform HitBoxLeanTransR;//[Offset: 0x2150, Size: 0x30]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x2198, Size: 0x8]
	PickupManagerComponent* PickupManagerComponent;//[Offset: 0x21a0, Size: 0x8]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x21a8, Size: 0x8]
	float DelayHideDuration;//[Offset: 0x21b0, Size: 0x4]
	float DelayResetStandDuration;//[Offset: 0x21b4, Size: 0x4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x21b8, Size: 0x4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21bc, Size: 0x1]
	float MaxRagdollActiveDuration;//[Offset: 0x21c0, Size: 0x4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21dc, Size: 0x1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x21e0, Size: 0x168]
	AnimParamList CurAnimParamList;//[Offset: 0x2348, Size: 0x134]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x2480, Size: 0x168]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x25e8, Size: 0x30]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x2618, Size: 0x28]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x2640, Size: 0x28]
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x2668, Size: 0x10]
	byte ThrowGrenadeMode;//[Offset: 0x2678, Size: 0x1]
	bool bShowHPFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2688, Size: 0x1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2689, Size: 0x1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268a, Size: 0x1]
	float PeekCheckCollisionTimer;//[Offset: 0x268c, Size: 0x4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2694, Size: 0x1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x2698, Size: 0x4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x269c, Size: 0x4]
	float HighWalkSpeed;//[Offset: 0x26b0, Size: 0x4]
	float WalkSpeedChangeRate;//[Offset: 0x26b4, Size: 0x4]
	float WalkSpeedThreshold;//[Offset: 0x26b8, Size: 0x4]
	float MaxCrouchSpeed;//[Offset: 0x26bc, Size: 0x4]
	float MaxProneSpeed;//[Offset: 0x26c0, Size: 0x4]
	float MaxSprintSpeed;//[Offset: 0x26c4, Size: 0x4]
	float MaxSprintCrouchSpeed;//[Offset: 0x26c8, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x26cc, Size: 0x4]
	float HealthPredict;//[Offset: 0x26d0, Size: 0x4]
	float BreathAmount;//[Offset: 0x26d4, Size: 0x4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d8, Size: 0x1]
	int PoisonSmogStage;//[Offset: 0x26dc, Size: 0x4]
	float PoisonSmogProgress;//[Offset: 0x26e0, Size: 0x4]
	float AntidoteExeTime;//[Offset: 0x26e4, Size: 0x4]
	float AntidoteMaxTime;//[Offset: 0x26e8, Size: 0x4]
	float SpeedDynamicScale;//[Offset: 0x26ec, Size: 0x4]
	float TurnInPlaceAngel;//[Offset: 0x26f0, Size: 0x4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x26f8, Size: 0x10]
	byte HealthStatus;//[Offset: 0x2708, Size: 0x1]
	byte LastHealthStatus;//[Offset: 0x2709, Size: 0x1]
	delegate OnHealthStatusChangeDelegate;//[Offset: 0x2710, Size: 0x10]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x2720, Size: 0x50]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2770, Size: 0x1]
	float SpeedRate;//[Offset: 0x2774, Size: 0x4]
	float EnergySpeedScale;//[Offset: 0x2778, Size: 0x4]
	float RecoveryScale;//[Offset: 0x277c, Size: 0x4]
	float DefaultSpeedValue;//[Offset: 0x2780, Size: 0x4]
	float PawnBackpackCapacity;//[Offset: 0x2784, Size: 0x4]
	float SwitchWeaponSpeedScale;//[Offset: 0x2788, Size: 0x4]
	BackpackReplayData BackpackReplayData;//[Offset: 0x2790, Size: 0x28]
	CharacterEnergyData Energy;//[Offset: 0x27b8, Size: 0x40]
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x27f8, Size: 0x10]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2808, Size: 0x1]
	float FarDistanceAimFOV;//[Offset: 0x280c, Size: 0x4]
	float FarRelevantDistanceSqured;//[Offset: 0x2810, Size: 0x4]
	float MiddleDistanceAimFOV;//[Offset: 0x2814, Size: 0x4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x2818, Size: 0x4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x2820, Size: 0x4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x2824, Size: 0x4]
	float PrachuteLandedFallingDamageMax;//[Offset: 0x282c, Size: 0x4]
	bool EnablePrachuteLandedFallingDamageMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2830, Size: 0x1]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x2834, Size: 0x4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x2838, Size: 0x8]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x2840, Size: 0x8]
	float StandHalfHeight;//[Offset: 0x2848, Size: 0x4]
	float CrouchHalfHeight;//[Offset: 0x284c, Size: 0x4]
	float ProneHalfHeight;//[Offset: 0x2850, Size: 0x4]
	float CrouchEnableCheckTolerance;//[Offset: 0x2854, Size: 0x4]
	float StandRadius;//[Offset: 0x2858, Size: 0x4]
	float DyingRadius;//[Offset: 0x285c, Size: 0x4]
	float DyingBeCarriedRadius;//[Offset: 0x2860, Size: 0x4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x2868, Size: 0x10]
	HealthPredictShowData[] EnergyPredictShowDataList;//[Offset: 0x2878, Size: 0x10]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x2888, Size: 0x8]
	bool bInAssistantState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a0, Size: 0x1]
	delegate InAssistantStateDelegate;//[Offset: 0x28a8, Size: 0x10]
	Actor* CurrentAttachParent;//[Offset: 0x28b8, Size: 0x8]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c0, Size: 0x1]
	RepVehicleAttachment VehicleReplication;//[Offset: 0x28c8, Size: 0x18]
	RepVehicleAttachment CurrentVehicleAttachment;//[Offset: 0x28e0, Size: 0x18]
	STExtraVehicleBase* LastAttachedVehicle;//[Offset: 0x2900, Size: 0x8]
	float LastVehicleDamageCD;//[Offset: 0x2908, Size: 0x4]
	float LastLeaveVehicleTime;//[Offset: 0x290c, Size: 0x4]
	int VehicleSeatIdx;//[Offset: 0x2910, Size: 0x4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291a, Size: 0x1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x291c, Size: 0x4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2938, Size: 0x1]
	PredictLineComponent* PredictLineComp;//[Offset: 0x2940, Size: 0x8]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x2948, Size: 0x8]
	STExtraUnderWaterEffectComp* UnderWaterEffectComponent;//[Offset: 0x2950, Size: 0x8]
	delegate OnAttachedToVehicle;//[Offset: 0x2970, Size: 0x10]
	delegate OnDetachedFromVehicle;//[Offset: 0x2980, Size: 0x10]
	delegate OnChangedVehicleSeat;//[Offset: 0x2990, Size: 0x10]
	delegate OnPlayerStateUpdated;//[Offset: 0x29a0, Size: 0x10]
	float MaxLeaveVehicleVelocity;//[Offset: 0x29c8, Size: 0x4]
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x29d8, Size: 0x10]
	Rotator AngledSightRotOffset;//[Offset: 0x29e8, Size: 0xc]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x2b58, Size: 0x8]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b60, Size: 0x1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x2b64, Size: 0x4]
	<FName,class ActorComponent> DynamicComponentMap;//[Offset: 0x2b80, Size: 0x50]
	STParachuteState STReplicateParchuteState;//[Offset: 0x2bd0, Size: 0x18]
	SlideMoveData SlideMoveData;//[Offset: 0x2be8, Size: 0x14]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x2c00, Size: 0x8]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x2c08, Size: 0x48]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c50, Size: 0x1]
	float MoveForwardInputValue;//[Offset: 0x2c54, Size: 0x4]
	float MoveRightInputValue;//[Offset: 0x2c58, Size: 0x4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5c, Size: 0x1]
	float ParachuteLandingHeightAdded;//[Offset: 0x2c60, Size: 0x4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c64, Size: 0x1]
	bool bEnableAutoFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c65, Size: 0x1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x2c68, Size: 0x4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x2c6c, Size: 0x4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x2c78, Size: 0x8]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x2c80, Size: 0x10]
	STExtraBaseCharacter* Leader;//[Offset: 0x2c90, Size: 0x8]
	enum FollowState;//[Offset: 0x2c98, Size: 0x1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x2ca0, Size: 0x10]
	STExtraBaseCharacter*[] Inviters;//[Offset: 0x2cb0, Size: 0x10]
	STExtraPlayerState*[] InviterStateArr;//[Offset: 0x2cc0, Size: 0x10]
	FString LatestInviter;//[Offset: 0x2cd0, Size: 0x10]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce0, Size: 0x1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x2d3c, Size: 0x4]
	float maxShowAlpha;//[Offset: 0x2d44, Size: 0x4]
	float MoveMaxShowDis;//[Offset: 0x2d48, Size: 0x4]
	float WeaponMaxShowDis;//[Offset: 0x2d4c, Size: 0x4]
	float VehicleMaxShowDis;//[Offset: 0x2d50, Size: 0x4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x2d80, Size: 0x4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x2d84, Size: 0x4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x2d88, Size: 0x4]
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dcc, Size: 0x1]
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x2ddc, Size: 0xc]
	float CollectPlayerRouteInterval;//[Offset: 0x2dec, Size: 0x4]
	int IsEnableReportRoute;//[Offset: 0x2e84, Size: 0x4]
	int CurrentPlayEmoteId;//[Offset: 0x2e8c, Size: 0x4]
	bool IsHandedWeaponBeforePlayEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e98, Size: 0x1]
	Vector EmoteColBox;//[Offset: 0x2ec8, Size: 0xc]
	<int,Vector> EmoteColBoxMap;//[Offset: 0x2ed8, Size: 0x50]
	int IsEnableLogAIPlayerPos;//[Offset: 0x2f30, Size: 0x4]
	float CompVisionOpDis;//[Offset: 0x2f34, Size: 0x4]
	float CompVisionOpDelay;//[Offset: 0x2f38, Size: 0x4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3c, Size: 0x1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x2f50, Size: 0x50]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa0, Size: 0x1]
	float MaxRelavantDistance;//[Offset: 0x2fa8, Size: 0x4]
	float MaxRelavantDistanceSquared;//[Offset: 0x2fac, Size: 0x4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x2fb0, Size: 0x4]
	int IsEnableReportGameSetting;//[Offset: 0x2fb4, Size: 0x4]
	int EnableReportGameSettingLevel;//[Offset: 0x2fb8, Size: 0x4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x2fbc, Size: 0x4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x2fc0, Size: 0x4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x2fc4, Size: 0x4]
	bool EnableDyingInVehicleMeshCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc8, Size: 0x1]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc9, Size: 0x1]
	BaseFPPComponent* FPPComp;//[Offset: 0x2fd0, Size: 0x8]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x2fd8, Size: 0x8]
	UAEChaCustomAnimListComponent* OwnedChaCustomAnimComp;//[Offset: 0x2fe0, Size: 0x8]
	float ClientSwitchWeaponDeltaTime;//[Offset: 0x2ff0, Size: 0x4]
	float ClientCallSwitchWeaponDur;//[Offset: 0x2ff4, Size: 0x4]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ff8, Size: 0x1]
	bool bExitingParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ff9, Size: 0x1]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ffa, Size: 0x1]
	delegate OnEquipZoomScope;//[Offset: 0x3000, Size: 0x10]
	float CharacterFallingVelocityZFactor;//[Offset: 0x3014, Size: 0x4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3030, Size: 0x1]
	bool IsOpenCommonShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3031, Size: 0x1]
	int AloneDistance;//[Offset: 0x3038, Size: 0x4]
	int NearTeamPlayerDistance;//[Offset: 0x303c, Size: 0x4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x3048, Size: 0x28]
	float ChangeWearingLastTime;//[Offset: 0x3070, Size: 0x4]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x3078, Size: 0x8]
	delegate WearingMontageFinishedEvent;//[Offset: 0x3080, Size: 0x10]
	SoftObjectPath ChangeWearingIconPath;//[Offset: 0x30d0, Size: 0x18]
	Vector ChangeWearingColBox;//[Offset: 0x30e8, Size: 0xc]
	float PaintDecalMaxDistance;//[Offset: 0x30f8, Size: 0x4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30fc, Size: 0x1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30fd, Size: 0x1]
	float RequestPaintDecalCD;//[Offset: 0x3100, Size: 0x4]
	float MaxRequestPaintDecalCD;//[Offset: 0x3104, Size: 0x4]
	ChildActorComponent* DecalComponent;//[Offset: 0x3108, Size: 0x8]
	Actor* DecalActor;//[Offset: 0x3110, Size: 0x8]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3118, Size: 0x1]
	float OutBattleStateTime;//[Offset: 0x311c, Size: 0x4]
	delegate OnBattleStateChange;//[Offset: 0x3128, Size: 0x10]
	delegate OnCharacterPlayEmote;//[Offset: 0x3138, Size: 0x10]
	delegate OnAutonomousCharacterPlayEmote;//[Offset: 0x3148, Size: 0x10]
	delegate OnCharacterWin;//[Offset: 0x3158, Size: 0x10]
	delegate OnCharacterFallingModeChange;//[Offset: 0x3168, Size: 0x10]
	Vector LastServerHitImpactPoint;//[Offset: 0x3178, Size: 0xc]
	byte RemainUseSupplySpotTimes;//[Offset: 0x3184, Size: 0x1]
	byte RemainUseEnhancerSpotTimes;//[Offset: 0x3185, Size: 0x1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3186, Size: 0x1]
	int[] UseEnhanceSpotTip;//[Offset: 0x3188, Size: 0x10]
	int MonsterDamageReduceSkillID;//[Offset: 0x3198, Size: 0x4]
	<int,InteractionEmoteConfig> InteractionEmoteConfig;//[Offset: 0x31a0, Size: 0x50]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x31f0, Size: 0x8]
	STExtraBaseCharacter* InteractionEmoteReceiver;//[Offset: 0x31f8, Size: 0x8]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320a, Size: 0x1]
	FString CharacterSkillTableName;//[Offset: 0x3210, Size: 0x10]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x3220, Size: 0x8]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x3228, Size: 0x8]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x3240, Size: 0x110]
	byte MeleeAutoAimType;//[Offset: 0x3350, Size: 0x1]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3364, Size: 0x1]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x3368, Size: 0x20]
	CharacterHide CharacterHide;//[Offset: 0x3388, Size: 0xc]
	float CharacterShowWeaponTime;//[Offset: 0x3394, Size: 0x4]
	bool bForbiddenRespawnAfterConstructSetClientLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339a, Size: 0x1]
	enum CharacterMainType;//[Offset: 0x339b, Size: 0x1]
	enum CharacterSubType;//[Offset: 0x339c, Size: 0x1]
	delegate BulletTrackShowDelegate;//[Offset: 0x33a0, Size: 0x10]
	delegate OnClientHoldGrenadeStateChange;//[Offset: 0x33b0, Size: 0x10]
	delegate MarkPlayerPosDelegate;//[Offset: 0x33c0, Size: 0x10]
	delegate OnPlayerOpenDoorDelegate;//[Offset: 0x33d0, Size: 0x10]
	float Config_PlayerHurt_ResetTime;//[Offset: 0x33e0, Size: 0x4]
	PlayerMantleComponent* VaultControllerComp;//[Offset: 0x33e8, Size: 0x8]
	AnimParamsComponent* AnimParamsComponent;//[Offset: 0x33f0, Size: 0x8]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33f8, Size: 0x1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33f9, Size: 0x1]
	bool bEnableSetMeshUpdateFlagInBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33fa, Size: 0x1]
	delegate OnUseSpringJump;//[Offset: 0x3400, Size: 0x10]
	float LastSprintTriggerTime;//[Offset: 0x3410, Size: 0x4]
	float FallingTime;//[Offset: 0x3418, Size: 0x4]
	bool bInteractWithActivityActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341c, Size: 0x1]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341d, Size: 0x1]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341e, Size: 0x1]
	Actor* MyConstActor;//[Offset: 0x3420, Size: 0x8]
	bool EnterSnowArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3428, Size: 0x1]
	byte[] ShowSnowAreaTypes;//[Offset: 0x3430, Size: 0x10]
	float TickCanDriveSnowBoardInterval;//[Offset: 0x3440, Size: 0x4]
	float ClientAttachToVehicleKeepTime;//[Offset: 0x3448, Size: 0x4]
	float RefreshAnimListTimerMaxTime;//[Offset: 0x3454, Size: 0x4]
	float RealtimeVerifyInterval;//[Offset: 0x3458, Size: 0x4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x345c, Size: 0x4]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3469, Size: 0x1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346a, Size: 0x1]
	float FixMovementOnVehicleInterval;//[Offset: 0x346c, Size: 0x4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x3474, Size: 0x4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x3480, Size: 0x30]
	byte DefaultParticleAttachLocationType;//[Offset: 0x34b0, Size: 0x1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x34b8, Size: 0x10]
	float ParticleShowingInterval;//[Offset: 0x34c8, Size: 0x4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d0, Size: 0x1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d1, Size: 0x1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x34d8, Size: 0x28]
	Vector MoveAdditionalSpeed;//[Offset: 0x3500, Size: 0xc]
	int CharacterMovementReplicatID;//[Offset: 0x350c, Size: 0x4]
	int CharacterReplicatID;//[Offset: 0x3510, Size: 0x4]
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x3518, Size: 0x8]
	float RTNoDamageTime;//[Offset: 0x3520, Size: 0x4]
	bool IsCanEnableWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3524, Size: 0x1]
	bool IsWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x352c, Size: 0x1]
	float MinWingUpControlTime;//[Offset: 0x3538, Size: 0x4]
	WidgetComponent* PlayerInfoWidgetComp;//[Offset: 0x3540, Size: 0x8]
	FString DebugInfoWidgetPath;//[Offset: 0x3548, Size: 0x10]
	FString DebugInfoWidgetRefreshFunName;//[Offset: 0x3558, Size: 0x10]
	Vector DebugInfoLocation;//[Offset: 0x3568, Size: 0xc]
	Actor* ACurrentFloor;//[Offset: 0x3574, Size: 0x8]
	bool IsMotifyAutoUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x357c, Size: 0x1]
	bool IsMotifyAttackerByState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x357d, Size: 0x1]
	float WaitRefreshShootDetailInfoTime;//[Offset: 0x3580, Size: 0x4]
	float CurWaitRefreshShootDetailInfoTime;//[Offset: 0x3584, Size: 0x4]
	float[] AIHotValueDebugInfo;//[Offset: 0x3588, Size: 0x10]
	Actor*[] OverlapDarkAreas;//[Offset: 0x3598, Size: 0x10]
	float SwimmingSwitchMovementModeCD;//[Offset: 0x35a8, Size: 0x4]
	int PrepareEmoteId;//[Offset: 0x35b0, Size: 0x4]
	FString EmoteSouceEventName;//[Offset: 0x35b8, Size: 0x10]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x35c8, Size: 0x8]
	bool bIsInUnderGroundArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d0, Size: 0x1]
	bool bIsAroundUndergroundEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d1, Size: 0x1]
	bool bIsSkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d2, Size: 0x1]
	bool bMoveHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d3, Size: 0x1]
	uint32 SightVisionMask;//[Offset: 0x35d4, Size: 0x4]
	bool bUnderWaterPoseCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d9, Size: 0x1]
	bool bReviseIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35da, Size: 0x1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35db, Size: 0x1]
	int nRepShoulderState;//[Offset: 0x35dc, Size: 0x4]
	int nCurShoulderStateCount;//[Offset: 0x35e0, Size: 0x4]
	bool bForceChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e4, Size: 0x1]
	bool bSkillLockChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e5, Size: 0x1]
	bool bEmoteLockChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e6, Size: 0x1]
	float SimulateFootstepQueryInternal;//[Offset: 0x3680, Size: 0x4]
	<int> NotDownloadPetIDs;//[Offset: 0x3690, Size: 0x50]
	bool bDisableAttachRepInBeCarried;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36e0, Size: 0x1]
	NetCarryBackState NetCarryBackState;//[Offset: 0x36e8, Size: 0x18]
	STCharacterCarryBackComp* CarryBackComponent;//[Offset: 0x3700, Size: 0x8]
	DynamicOptimizeActorComponents* DynamicOptimizeActorComponent;//[Offset: 0x3708, Size: 0x8]
	delegate OnCharacterHiddenStateChange;//[Offset: 0x3710, Size: 0x10]
	BattleRoyaleGameMode* CachedGameMode;//[Offset: 0x3720, Size: 0x8]
	bool EnablePlayEmoteAnimLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3729, Size: 0x1]
	float DefaultEmoteFollowCheckTime;//[Offset: 0x372c, Size: 0x4]
	float DefaultEmoteFollowCheckRange;//[Offset: 0x3730, Size: 0x4]
	float DefaultCoopEmoteCheckInterval;//[Offset: 0x3734, Size: 0x4]
	float DefaultCoopEmoteCheckRange;//[Offset: 0x3738, Size: 0x4]
	float CoopEmoteTargetOffset;//[Offset: 0x373c, Size: 0x4]
	float CoopEmoteCheckGroundHeight;//[Offset: 0x3740, Size: 0x4]
	bool bFollowEmoteNeedRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3744, Size: 0x1]
	STExtraBaseCharacter* CachedCoopEmotePlayer;//[Offset: 0x3754, Size: 0x8]
	BlowUpData CurrentBlowUpData;//[Offset: 0x3778, Size: 0x2c]
	bool bNeedPlayVehicleEnterMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37b8, Size: 0x1]
	bool EnableAireBorneAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37b9, Size: 0x1]
	bool UseNewParachuteMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37ba, Size: 0x1]
	float AirBornCanCurrentAbsoluteMaxHight;//[Offset: 0x37bc, Size: 0x4]
	float ExceptionMonitorInterval;//[Offset: 0x37c0, Size: 0x4]
	int ExceptionMonitorHitTimes;//[Offset: 0x37c4, Size: 0x4]
	<int,enum> AttrStateMap;//[Offset: 0x37c8, Size: 0x50]
	bool bReportedModifierException;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3818, Size: 0x1]
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x612938c
	void VaultFailPawnCPP(const FString Content);// 0x61292dc
	void VaultFailPawnBluePrint(out const FString Content);// 0x612921c
	bool ValidCalculate();// 0x61291e4
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x6129130
	void UseSpringJump(int SpringID);// 0x61290b4
	void UserCancelRescue();// 0x61290a0
	bool UpdateShovelingState();// 0x6129068
	void UpdateShovelingHoldStateRelease();// 0x6129054
	void UpdateShovelingHoldStatePressed();// 0x6129040
	void UpdatePoseCollisionCpp(byte CurState, byte preState);// 0x6128f88
	void UpdateFallingTime(float Delta);// 0x6128f0c
	void UpdateDynamicHoldGunOption();// 0x6128ef8
	void UpdateCurrentShootWeaponTick();// 0x6128ee4
	void UpdateAttrValue(FString AttrName, float Val, int Reason, bool bSet);// 0x6128d7c
	void UpdateAllInstanceBodyTransform(int Type);// 0x6128d00
	void UnequipWeaponFinish();// 0x6128cec
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x6128c2c
	void TryToBroadcastFatalDamageEvent(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadshot, Actor* DamageCauser);// 0x6128a88
	void TryReplaySpecialMontage();// 0x6128a74
	void TryRecordEmoteState(int EmoteId, uint32 FollowPlayer);// 0x61289c0
	void TryPeek(bool IsLeft, bool ButtonDown);// 0x61288f0
	bool TryFollowInitialParachuteLeader(FString Name);// 0x61287b0
	bool TriggerEntrySkillWithParams(int SkillID, out const FString[] InKeyStrings, bool bEnable);// 0x6128600
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x6128524
	void ThrowGrenadeModeChangedDelegate__DelegateSignature(byte NewMode, byte PrevMode);// 0x70644c4
	void TakeDamageWhenThrowedDelegate__DelegateSignature();// 0x70644c4
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x61283e8
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x6128364
	bool SwitchWeaponCheck(byte Slot, bool bIgnoreState);// 0x6128288
	bool SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x6128124
	void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x6128010
	void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, bool bSwitchToNoneWhenNoWeapon);// 0x6127eb0
	void SwitchShoulderStateServer(bool bShoulder, int nClientShouldState);// 0x6127dac
	void SwitchShoulderStateLocal(bool bShoulder);// 0x6127d20
	void SwitchShoulderState(bool bShoulder);// 0x6127c9c
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x6127af4
	void SwapMainWeapon();// 0x6127ae0
	void STServerUpdateStateUnreliaby(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x6127974
	void STServerUpdateStateDirectly(float InThrottleInput, float InSteeringInput, Vector InLocalVelocity);// 0x6127840
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x61276d4
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float blendTime);// 0x61275d4
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x6127544
	void StopMove();// 0x6127530
	bool StopFireFilter();// 0x61274f0
	void StopFire();// 0x61274dc
	void StopFillGas();// 0x61274c8
	bool StopChangeWearingAnim();// 0x6127490
	void StopCarryBack(enum InDetachMethod);// 0x6127414
	void StopAnimMontageOriginal(AnimMontage* AnimMontage);// 0x6127398
	void StopAnimMontageExtra(AnimMontage* AnimMontage, FName IgnoreStopSection);// 0x61272e4
	void StopAllMontages(FString GroupName);// 0x61271b0
	void StopAllAnimations(bool bStop);// 0x612712c
	void StartWaitRefreshShootDetailInfo();// 0x6127118
	bool StartPlayEmoteAnim(int EmoteIndex, uint32 FollowPlayerKey);// 0x6127050
	void StartFireSimple(byte ShootMode);// 0x6126fcc
	bool StartFireFilter(STExtraShootWeapon* ExtraWeapon);// 0x6126f34
	void StartFire(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget, bool DoCheck, STExtraShootWeapon* ExtraWeapon);// 0x6126d74
	void StartFillGas();// 0x6126d60
	bool StartChangeWearingAnim();// 0x6126d28
	void SpawnFootprint(enum FootprintType);// 0x6126cac
	void SpawnAndSwithToGrenadeServerCall(int InGrenadeID);// 0x6126bfc
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(int GrenadeID);// 0x6126b70
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(int GrenadeID);// 0x6126ae4
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bResetBulletNum);// 0x6126934
	void SimulatedPlayEmote(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x6126800
	void ShowPlayerDebugInfo(bool bShow, FString[] BasicInfoKeys, FString[] DetailInfoKeys);// 0x6126480
	void ShowNightVisionFrame();// 0x6126464
	void ShowInjuryScreenEffect();// 0x6126450
	void ShowDebugRole();// 0x612643c
	void ShowDebugRecordData();// 0x6126428
	void ShowDebugPickUpFlow();// 0x6126414
	void ShowDebugEquipOrUnequipFlow();// 0x6126400
	void ShowDebugBornLandFlow();// 0x61263ec
	void ShowConfirmDialogOfMisKill();// 0x61263d0
	bool ShouldUpdateHPOnUI();// 0x6126390
	bool ShouldShowCorp();// 0x6126358
	bool ShouldShowCoopEmoteBtn(EmotePlayer EmotePlayer);// 0x6126294
	bool ShouldShowAnchor();// 0x612625c
	bool ShouldForceFPP();// 0x6126224
	bool ShouldCheckCoopEmote();// 0x61261e4
	bool ShouldAutoScopeWhenPeek();// 0x61261a4
	enum ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x612608c
	void SeverParachuteSimualteDrag(uint32 DragCount);// 0x6125fdc
	void SetWeaponShootType(byte ShootType);// 0x6125f60
	void SetViewTargetAgainForOB();// 0x6125f4c
	void SetThrowGrenadeMode(byte ThrowMode);// 0x6125ed0
	void SetTargetPlayer(STExtraBaseCharacter* InTargetPlayer);// 0x6125e54
	void SetSightVision(bool Enable, enum Flag);// 0x6125d8c
	void SetSightCondition(bool Enable, enum Flag);// 0x6125cc4
	void SetRTNoDamageTimer(float Timer);// 0x6125c48
	void SetReloadMethod(byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x6125b88
	void SetPrepareEmoteId(int InEmoteID);// 0x6125b0c
	void SetPoseState(byte NewPoseState);// 0x6125a90
	void SetPawnReloadWeaponFinished(bool IsFinished);// 0x6125a04
	void SetOverrideCirclePainActor(Actor* CirclePainActor);// 0x6125988
	void SetMLEnsureStyle(int InMLStyle);// 0x612590c
	void SetMeshForceAnimLOD(int InNewForceAnimLOD);// 0x6125890
	void SetMeshContainerOffsetZ(float Z);// 0x6125814
	void SetMeshContainerOffsetY(float Y);// 0x6125798
	void SetMeshContainerOffsetX(float X);// 0x612571c
	void SetMEnsure(bool bMValue);// 0x6125690
	void SetIsDuringTransferLeader(bool isTransfer);// 0x612560c
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x6125544
	void SetInsectCameraEnable(bool bEnable);// 0x61254c0
	void SetHitAnimInfo(Actor* DamageCauser);// 0x6125444
	void SetHighWalkSpeed(float WalkSpeed);// 0x61253c8
	void SetHealthSafety(float NewHealth, byte Reason);// 0x6125310
	void SetHandFoldRatio(int Ratio);// 0x6125294
	static void SetExpandDataContent(out const byte[] Content);// 0x61251e4
	void SetExitingParachute(bool ExitParachute);// 0x6125160
	void SetEnterSnowArea(bool IsEnterSnowArea);// 0x61250dc
	void SetEnsureStyle(byte InStyle);// 0x6125060
	void SetEnsureLevel(uint32 InLevel);// 0x6124fe4
	void SetEnsure(bool bValue);// 0x6124f58
	void SetEmoteSouceEventName(FString EventName);// 0x6124e24
	void SetDelayStateSwitchTime(float DelayTime);// 0x6124dac
	void SetDefaultWaterHeight(float InDefaultWater);// 0x6124d30
	void SetCurScopeFov(float InFov);// 0x6124cb4
	void SetCurrentVehicle(STExtraVehicleBase* InVehicle);// 0x6124c3c
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool ForceSetting);// 0x6124b60
	void SetCurrentFloor(Actor* floor);// 0x6124ae4
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x6124a1c
	void SetCheatSpeedModifier(float NewModifier);// 0x6124998
	void SetCharAnimUpdateFlag();// 0x612497c
	void SetCharAnimInstanceClass(class Object NewAnimClass, FString SetReason, bool bForceClearOldAnim);// 0x6124848
	void SetCharacterHideInGame(bool bHide, bool bStopTick, bool bCloseCollision, float fScale);// 0x61246f0
	void SetChangeWearingPromptEnable(bool bShow);// 0x612466c
	void SetBasePoseStateMachineSwitching(bool bIsSwitching);// 0x61245e8
	void SetBaseBluePrint(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x61244f0
	void SetAttachmentExtraData(int SeatIndex);// 0x6124474
	void SetAttachment(Actor* InAttachParent, SceneComponent* InAttachComponent, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D, FName AttachSocket);// 0x61242c8
	void SetAntidoteMaxTime(float MaxTime);// 0x6124250
	void SetAntidoteExeTime(float ExeTime);// 0x61241d8
	void SetAnimParamIsRescueing(bool Val);// 0x6124154
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x61240d0
	void SetAnimParamClimbAnimTime(float ExplicitTime, bool bFlag);// 0x6124010
	void SetAnimParamClimbAnimSwitch(bool bFlag, float TransTime);// 0x6123f48
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x6123ec4
	void SetAnimParamAlwaysLandLight(bool bAlwaysLandLight);// 0x6123e40
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x6123d88
	void SetAnimListComponentChild(UAECharAnimListCompBase* ChildComp, bool Add, byte AddLayer, byte AnimOverrideType);// 0x6123c48
	void SetAmbientRTPC(FString RTPC, float Value);// 0x6123ad8
	void SetAIActive(bool bActive);// 0x6123a54
	void SetActorLocationServerAndClient(Vector Location);// 0x61239d8
	bool SetActorLocationSafetyWithParams(Vector NewLocation, out const ResolvePenetrationParams ResolveParams);// 0x612384c
	bool SetActorLocationSafety(Vector NewLocation);// 0x61237bc
	void ServerUpdateShovelingHoldState(bool ishold);// 0x61236f8
	void ServerTriggerJump();// 0x6123698
	void ServerSetPoisonSmogStage(int SmogStage);// 0x612361c
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);// 0x612350c
	void ServerSetPeekCollision(bool HasCollision);// 0x6123448
	void ServerSetMovementStateNewReliable(byte Input);// 0x6123398
	void ServerSetMovementStateNew(byte Input);// 0x61232e8
	void ServerSetMovementState(Vector Input);// 0x6123234
	void ServerSendToLobbyServerUseItem(int ItemId, int Count);// 0x6123180
	void ServerResponseInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x6122fcc
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x6122e60
	void ServerOnCoopEmotePhaseChange(int CoopPhase);// 0x70644c4
	void ServerInviteTeammate(FString Name, enum InvitationType);// 0x6122d40
	void ServerHandleBulletHitData(STExtraWeapon* OwnerWeapon, out BulletHitInfoUploadData Data);// 0x6122c3c
	void ServerFollowTeammate(FString Name);// 0x6122b60
	void ServerDropCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x6122ab0
	bool ServerCheckEmoteCanPlay(int EmoteIndex);// 0x6122a18
	void ServerChangeThrowGrenadeMode(byte ThrowMode);// 0x6122968
	void ServerCancelFollow();// 0x6122908
	void SendServerMoveToClientUnreliabyNew(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x61227dc
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x61226b0
	void SendServerMoveToAdjustClient(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x6122584
	void SendClientMoveToServerUnreliabyNew(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x6122420
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x61222bc
	void SendClientMoveToServerReliabyNew(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x6122158
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x6121ff4
	void SendClientMoveToServerAccurate(float TimeStamp, float ThrottleInput, float SteerInput, float GlidingSpeed, enum State, Rotator CameraRotation, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x6121d5c
	void SendAckServerMoveToClient(float TimeStamp);// 0x6121cd8
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x6121bb4
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x6121ab4
	void Scoping(byte NewType);// 0x6121a38
	void ScopeOut(byte NewType);// 0x61219bc
	void ScopeInterrupt(byte NewType);// 0x6121940
	void ScopeIn(byte NewType);// 0x61218c4
	void SaveMeshUpdateFlag();// 0x61218a4
	void RspSetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x61217f4
	void RspPlayInteractionEmote(int EmoteId);// 0x6121744
	void RspClientSureLeaveVehicle(bool bCanLeave);// 0x61216b8
	void RPC_Server_TriggerEntryEventWithParams(int SkillID, const FString[] InKeyStrings, bool bEnable);// 0x61214f0
	void RPC_Server_TriggerEntryEventByID(int SkillID, bool bEnable);// 0x61213ec
	void RPC_Server_SwitchWeaponShootInterval(STExtraShootWeapon* Weapon, enum Mode);// 0x61212fc
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x6121158
	void RPC_Server_SwapMainWeapon();// 0x61210f8
	void RPC_Server_SpawnAndSwitchToGrenade(int GrenadeID);// 0x6121048
	void RPC_Server_ShootVertifyFailAlarm(const enum VertifyRes, FString Tips);// 0x6120f28
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x6120e78
	void RPC_Server_SetCurScopeFov(float InFov);// 0x6120dc8
	void RPC_Server_SetCoopEmotePhase(int CoopPhase);// 0x6120d18
	void RPC_Server_ReportSimulateCharacterLocation(STExtraBaseCharacter* MoveCharacter, const Vector Location, float TargetTime, int MoveType);// 0x6120bac
	void RPC_Server_JoinCoopEmote(EmotePlayer EmotePlayer);// 0x6120ac0
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x6120a60
	void RPC_Server_ChangeWeaponState(byte State, STExtraWeapon* Weapon);// 0x6120970
	void RPC_Server_ChangeToShootGrenade();// 0x6120910
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x6120860
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x61207b0
	void RPC_Client_TeleportToFinish(bool bSuccess, Vector DestLocation, Rotator DestRotation);// 0x6120664
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x61204c0
	void RPC_Client_SwapMainWeapon();// 0x6120460
	void RPC_Client_SpawnAndSwitchToGrenade(int GrenadeID);// 0x61203b0
	void RPC_Client_ShootVertifyRes(const enum VertifyRes, const BulletHitInfoUploadData HistoryShootData, const CharacterHistoryData HistoryChData, const Vector ServerVictmPos);// 0x61201e0
	void RPC_Client_ShootVertifyFailAlarm(const enum VertifyRes, FString Tips);// 0x61200c0
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x6120010
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x611ff60
	void RPC_Client_OnNearDeathRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x611fe64
	void RPC_Client_OnNearDeathRecordingNotify(FString SpectatorName, bool bSpectatorIsAI);// 0x611fd30
	void RPC_Client_OnDeathStopRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x611fc34
	void RPC_Client_OnDeathStopRecordingNotify(FString SpectatorName, bool bSpectatorIsAI, bool bForce);// 0x611fab4
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x611f870
	void RPC_Client_OnCoopEmotePhaseChange(int CoopPhase);// 0x611f7c0
	void RPC_Client_NoticeSimulateMoveErrorRange(STExtraBaseCharacter* MoveCharacter, float ErrorRange, float TimeDif);// 0x611f698
	void RPC_Client_MarkPlayersOnUI(const PlayerPosMarkerParam[] PlayerMarkersParam);// 0x611f5bc
	void RPC_Client_DrawDebugSphere(Vector Center, float Radius, int Segments, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x611f38c
	void RPC_Client_DrawDebugLine(Vector LineStart, Vector LineEnd, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x611f194
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x611f134
	void RPC_Client_ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x611eff0
	void RestoreMeshUpdateFlag();// 0x611efd0
	void ResponceInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x611ee68
	void ResetValueLimitForHealthPredict();// 0x611ee54
	void ResetCharAnimInstanceClass(FString SetReason, bool bForceClearOldAnim);// 0x611ed5c
	void ResetCharacterEnergy();// 0x611ed48
	void ResetCharacter();// 0x611ed2c
	void ResetCamera();// 0x611ed18
	void ResetAnimInstanceClass();// 0x611ed04
	void RequestWeaponStopFire(STExtraShootWeapon* ShootWeapon);// 0x611ec88
	void RequestUserCancleRescue();// 0x611ec28
	void RequestServerSureLeaveVehicle();// 0x611ebc8
	void RequestServerAssistantTrackVehicle(bool bEnterAssistant);// 0x611eb04
	bool RequestPaintDecal(int DecalId);// 0x611ea74
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x611e8f8
	void ReqStartChangeWearing();// 0x611e898
	void ReqSetIsWingUpControl(bool IsUpControl);// 0x611e7d4
	void ReqSetInteractionEmoteReceiver(STExtraBaseCharacter* Receiver);// 0x611e724
	void ReqPlayInteractionEmote(STExtraBaseCharacter* OtherCharacter, int SelfEmoteId, int OtherEmoteId);// 0x611e5fc
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x611e54c
	void ReqInteruptChangeWearing();// 0x611e4ec
	void ReqEmotePlayFinished(int EmoteIndex);// 0x611e43c
	void ReqChangeWearingFinished(int Index);// 0x611e38c
	void ReqAcceptInteractionEmote();// 0x611e32c
	void ReportSpeedException();// 0x611e310
	void ReportPlayerLocationInfo();// 0x611e2fc
	void ReportExceptionOnVehicle(FString Type, FString Msg);// 0x70644c4
	void ReportAttrException(int AttrIndex);// 0x611e278
	void ReportAntiCheatInfo();// 0x611e264
	void RemoveClientLeaveStateCheck(enum State);// 0x611e1e8
	void RemoveBuffWhenGotoPlane();// 0x611e1d4
	bool ReloadWeaponFilter();// 0x611e194
	bool ReloadCurrentWeapon();// 0x611e15c
	void RegisterPlayerPickUpList();// 0x611e148
	void RefreshVehicleReplication();// 0x611e134
	void RefreshPersonPerspective();// 0x611e120
	void RefreshPawnVaultTypeServer();// 0x611e0c0
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x611e034
	void RefreshMoveAttrModifier();// 0x611e020
	void RefreshEmote();// 0x611e00c
	void RefreshAvatar(enum SlotType, bool IsEquipped, int ItemId);// 0x611df08
	void RecordFinalParachuteLeader();// 0x611def4
	void RecordEmoteState(int EmoteId, uint32 FollowPlayer);// 0x611de40
	void PrintAIPolicyDecisionData();// 0x611de2c
	bool PreSwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x611dcc8
	void PreDoDrop(STExtraBaseCharacter* DamageCauser);// 0x611dc4c
	void PostGetPlayerAnimation();// 0x70644c4
	void PostCollectDropWrapperList();// 0x70644c4
	bool PoseOnGround(byte InPoseState);// 0x611dbb4
	bool PlayWeaponSound(AkAudioEvent* WeaponSound, STExtraWeapon* Weapon);// 0x611daec
	void PlaySwitchSightSound(bool IsScopeIn);// 0x611da68
	void PlaySwitchFireModeSound();// 0x611da54
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x611d9d8
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float blendTime, const byte InLoopCount, const float InStartPos, const float LoopStartPos);// 0x611d7f0
	void PlaySelfThrowAwayWeaponSound();// 0x611d7dc
	void PlayPullBoltSound();// 0x611d7c8
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x611d5b8
	void PlayMountAccessoriesSound();// 0x611d5a4
	void PlayMagOUTSound();// 0x611d590
	void PlayMagINSound();// 0x611d57c
	void PlayLocalShellDropFX();// 0x611d568
	void PlayLoadBulletSound();// 0x611d554
	void PlayFootstepSound(byte FootStepState);// 0x611d4d0
	bool PlayerConfirmToRescue();// 0x611d498
	void PlayEmoteSoundByEmoteId(int EmoteId);// 0x611d41c
	bool PlayEmote_Autonomous(int EmoteId);// 0x611d38c
	void PlayChangeMagazineSound();// 0x611d378
	float PlayAnimMontageExtra(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, bool bOnlyJumpToSectionWhilePlaying, FName IgnoreStopSection);// 0x611d1f4
	void PlayAmbientSound();// 0x611d1e0
	void PickUpWrapperAttachmentItem(Actor* Target, out const PickUpItemData ItemData, enum PickupAttachmentID, ItemDefineID TargetDefineID);// 0x611cfe0
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount, int BattleItemClientPickupType);// 0x611cdfc
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x611ccd0
	void PawnVaultStopCPP();// 0x611ccb4
	void PawnVaultStopBluePrint();// 0x611cc98
	void PawnVaultServerStopCheckCPP();// 0x611cc38
	void PawnVaultServerStopCheckBluePrint();// 0x611cc1c
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x611c898
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x611c568
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x611c290
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x611bf9c
	void PawnLeaveState(enum State);// 0x611bf18
	bool PawnHasState(enum PawnState);// 0x611be80
	bool PawnEnterState(enum State);// 0x611bde8
	bool PawnAllowState(enum State, bool withLog);// 0x611bd0c
	void ParseServiceDebugInfo(FString[] BasicInfoKeys, FString[] DetailInfoKeys);// 0x611b9d0
	void OnWeaponEquipmentUpdateHandled();// 0x611b9b4
	void OnWeaponEquipmentUpdate();// 0x611b998
	void OnWeaponDropStart(STExtraShootWeapon* ShootWeapon);// 0x611b91c
	void OnWeaponDropFinished(STExtraShootWeapon* ShootWeapon);// 0x611b8a0
	void OnUnEquipWeaponWithParams(STExtraShootWeapon* ShootWeapon, enum Reason);// 0x611b7e0
	void OnUnEquipWeapon();// 0x70644c4
	void OnStatusChanged();// 0x611b7c4
	void OnStateLeave(enum EnteredState);// 0x611b740
	void OnStateEnter(enum EnteredState);// 0x611b6bc
	void OnShowName(bool _IsShow, FString _Name);// 0x70644c4
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x611b638
	void OnScopeNotHandFold();// 0x611b624
	void OnScopeHandFold();// 0x611b610
	void OnRep_WaterObj();// 0x611b5fc
	void OnRep_VehicleSeatIdx();// 0x611b5e8
	void OnRep_VehicleReplication();// 0x611b5d4
	void OnRep_UnmannedVehicleSyncData();// 0x611b5b8
	void OnRep_ThrowGrenadeMode(byte PrevMode);// 0x611b53c
	void OnRep_Temperature(float LastValue);// 0x611b4b8
	void OnRep_SwitchWeaponSpeedScale();// 0x611b4a4
	void OnRep_StatusChanged(byte prevStatus);// 0x611b420
	void OnRep_SightVisionMask();// 0x611b40c
	void OnRep_ShowRevivalPointIcon();// 0x611b3f0
	void OnRep_ShowHPFX();// 0x611b3dc
	void OnRep_ShoulderStateChanged();// 0x611b3c0
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x611b3ac
	void OnRep_ScopeFov();// 0x611b398
	void OnRep_RespawnResetAnim();// 0x611b384
	void OnRep_ResetDataOnRespawn();// 0x611b370
	void OnRep_ReplicatedParachuteState();// 0x611b35c
	void OnRep_ReplicatedMoveState();// 0x611b348
	void OnRep_ReplicatedMovement();// 0x611b32c
	void OnRep_ReplicatedIsStartParachute();// 0x611b318
	void OnRep_RemainUseSupplySpotTimes();// 0x611b304
	void OnRep_RemainUseEnhancerSpotTimes();// 0x611b2f0
	void OnRep_PoseStateNotify(byte LastState);// 0x611b274
	void OnRep_PoisonFogStageChange();// 0x611b260
	void OnRep_PlayerKey();// 0x611b244
	void OnRep_PeekHasCollision();// 0x611b230
	void OnRep_NetSimulateViewData();// 0x611b21c
	void OnRep_MovementInputReplication();// 0x611b208
	void OnRep_MoneyNotify();// 0x611b1f4
	void OnRep_IsWingUpControl();// 0x611b1e0
	void OnRep_IsRescueingOtherStatusChange();// 0x611b1cc
	void OnRep_IsInvincible();// 0x611b1b0
	void OnRep_IsFPPChanged();// 0x611b194
	void OnRep_IsFakeOnVehicle();// 0x611b178
	void OnRep_IsBeingRescuedStatusChange();// 0x611b164
	void OnRep_InAssistantState();// 0x611b150
	void OnRep_HealthPredict();// 0x611b13c
	void OnRep_HealthMax();// 0x611b120
	void OnRep_Health(float PrevHealth);// 0x611b09c
	void OnRep_HandFolderRatio();// 0x611b088
	void OnRep_FollowState();// 0x611b074
	void OnRep_EnergyChange();// 0x611b060
	void OnRep_DestroyOnDeath();// 0x611b04c
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x611afd0
	void OnRep_CurrentStates(uint64 prevStates);// 0x611af4c
	void OnRep_CharacterHide();// 0x611af38
	void OnRep_CharacterFallingVelocityZFactor();// 0x611af24
	void OnRep_CarryBackStateChanged();// 0x611af08
	void OnRep_BreathAmmountChange();// 0x611aef4
	void OnRep_bIsCallingForRevival();// 0x611aee0
	void OnRep_AntidoteMaxTimeSync();// 0x611aecc
	void OnRep_AntidoteExeTimeSync();// 0x611aeb8
	void OnRep_AngleSightRotOffsetChanged();// 0x611aea4
	void OnRep_AnchorPlat();// 0x611ae90
	void OnRep_AKEventNotify();// 0x611ae7c
	void OnPreRepAttachmentDelegate__DelegateSignature(Actor* AttachParent, SceneComponent* AttachComponent, FName AttachSocket, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D);// 0x70644c4
	void OnPostRepAttachmentDelegate__DelegateSignature(Actor* AttachParent, SceneComponent* AttachComponent, FName AttachSocket, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D);// 0x70644c4
	void OnPostFlushHealthChangeHistoryOnServer();// 0x611ae60
	void OnPoseStateChange(byte LastState, byte CurState);// 0x70644c4
	bool OnPlayFollowEmote(int EmoteId, int FollowPlayerKey, bool bKeepFollowState);// 0x611ad54
	void OnPlayEmoteStop(int EmoteIndex);// 0x611acd8
	void OnPlayEmoteEnd(int EmoteIndex);// 0x611ac5c
	bool OnPlayEmote(int EmoteId);// 0x611abcc
	void OnOverlapDarkArea(bool bIsBegin, Actor* DarkAreaActor);// 0x611ab04
	void OnOpenDoor(PUBGDoor* Door, int DoorState);// 0x611aa44
	void OnNotifyHurt();// 0x70644c4
	void OnNeedSetSpeedOverLimit();// 0x611aa30
	void OnLoadEmoteAssetEnd(BackpackEmoteHandle* Handle, int EmoteIndex, uint32 FollowPlayerKey);// 0x611a940
	void OnLoadEmoteAssetBegin(BackpackEmoteHandle* Handle, int EmoteIndex, out SoftObjectPath[] OutAssetRefListToLoad);// 0x611a7ac
	void OnLeaveStateInChangeWearing(enum HasLeavedState);// 0x611a730
	void OnInterruptCurrentEmote();// 0x611a71c
	void OnInterruptChangeWearing();// 0x611a708
	void OnHealthChangeFromRPC(float PrevHealth, float InHealth);// 0x611a654
	void OnFollowStateChangedDelegate__DelegateSignature(enum LastFollowState, enum NewFollowState);// 0x70644c4
	void OnFollowStateChange();// 0x611a640
	void OnFollowNearPlayerEmote();// 0x611a62c
	void OnFlushHealthChangeHistoryOnClient(out const float[] ChangeHistory);// 0x611a56c
	void OnEquipWeapon(byte Slot);// 0x70644c4
	void OnEnterStateInChangeWearing(enum HasEnteredState);// 0x611a4f0
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x611a43c
	void OnEndChangeWearing(int StopReason);// 0x611a3c0
	void OnDetectPaintDecalTarget(bool bStart);// 0x70644c4
	void OnCurEquipedShootWeaponReloadLastBullet(int RemainReloadTimes);// 0x611a33c
	void OnCurEquipedShootWeaponChangeState(byte LastState, byte State);// 0x611a284
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x611a194
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x611a0a4
	void OnChangeWearingAnimFinishedEvent(int Reason);// 0x611a028
	bool OnChangeWearing(int Index);// 0x6119f98
	void OnBPMoneyChange();// 0x70644c4
	void OnBPIsInvincibleChange();// 0x70644c4
	void OnBPHealthChange();// 0x70644c4
	void OnBeforeGetUp();// 0x70644c4
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim, BackpackEmoteHandle* Handle, int EmoteIndex, uint32 FollowPlayerKey);// 0x6119da8
	void OnAsyncLoadChangeWearingAnim();// 0x6119d94
	void OnActorHitHandle(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x6119c14
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x6119b3c
	bool NeedHandleHitAnim(int DamageID, float MinDamageThreshold);// 0x6119a68
	void MulticastStartPlayEmoteWithRandReliable(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x61198ec
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x6119770
	void MulticastStartChangeWearing();// 0x6119710
	void MulticastPlayerSoundByID(int SoundID);// 0x6119660
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x61195b0
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x6119500
	void MulticastInteruptChangeWearingOnServer();// 0x61194a0
	void MulticastInteruptChangeWearing();// 0x6119440
	void MoveCameraTo(Vector DestLocation, Rotator DestRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath);// 0x6119278
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x61191e8
	float Montage_GetPosition(const AnimMontage* AnimMontage);// 0x611915c
	void MonitorAttrModifierException(float DeltaTime);// 0x61190e0
	void MeleeServer();// 0x6119080
	void MeleeReleased();// 0x611906c
	void MeleeLocal();// 0x70644c4
	void MeleeBroadcastOtherClients();// 0x611900c
	void Melee(bool IsForCE);// 0x6118f88
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x6118f74
	void LocalUnEquipWeapon(STExtraWeapon* Weapon);// 0x6118ef8
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x6118dd0
	bool LocalStartPlayEmote(int EmoteIndex, uint32 FollowPlayerKey, bool bKeepFollowState);// 0x6118cc4
	bool LocalStartChangeWearing();// 0x6118c8c
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x6118bfc
	bool LocalInteruptChangeWearing();// 0x6118bc4
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot, enum TriggerType);// 0x6118ad0
	void LocalEquipProp(STExtraProp* Prop);// 0x6118a54
	void LevaveFire(STExtraShootWeapon* OwnerShootWeapon);// 0x61189d0
	void LeaveState(enum State);// 0x611894c
	void LeaveServerState(enum State);// 0x611889c
	void LeaveBattleState();// 0x6118888
	bool IsWeaponOwnerLocallyControlled();// 0x6118848
	bool IsVisionOptimizationComponent(SceneComponent* InSceneComp);// 0x61187b8
	bool IsValidPaintDecalTarget_Simple();// 0x6118798
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x6118658
	bool IsUsingGrenade();// 0x6118620
	bool IsThermalImagingValid();// 0x61185e8
	bool IsTargetAnimClassSkeletonMatching(class Object TargetAnimClass);// 0x6118550
	bool IsSwimOnWaterSuface();// 0x6118518
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x6118488
	bool IsSameTeamWithLocal();// 0x6118450
	bool IsSameTeam(Pawn* Other);// 0x61183b8
	bool IsSameCharAnimClass(class Object NewAnimClass);// 0x6118328
	bool IsReplayViewTarget();// 0x61182f0
	bool IsProneMove();// 0x61182b8
	bool IsPlayingEmotes();// 0x6118280
	bool IsOnVehicleNotUAV();// 0x6118248
	bool IsOnVehicle();// 0x6118210
	bool IsOnFireBalloon();// 0x61181d8
	bool IsNowUpWater();// 0x61181a0
	bool IsNightVisionValid();// 0x6118168
	bool IsNearDeath();// 0x6118130
	bool IsLocalViewed();// 0x61180f0
	bool IsLocalControlorView();// 0x61180b8
	bool IsInteractiveMoveComponentTakeOverJump();// 0x6118080
	bool IsInInteractiveMoveComponentState();// 0x6118048
	bool IsInFlyingTeam();// 0x6118010
	bool IsInEditor();// 0x6117fd8
	bool IsInCarryBackState();// 0x6117fa0
	bool IsInBeCarriedBackState();// 0x6117f68
	bool IsHealthyAlive();// 0x6117f30
	bool IsHealthAlive();// 0x6117ef8
	bool IsHandleInFold();// 0x6117ec0
	bool IsGunADS();// 0x6117e80
	bool IsFirstPerson();// 0x6117e48
	bool IsExitingParachute();// 0x6117e10
	bool IsEnableFollowPlayEmote();// 0x6117dd0
	bool IsEnableDamage(STExtraBaseCharacter* TargetBaseCharacter);// 0x6117d40
	bool IsEnableBulletFlySound();// 0x6117d00
	bool IsDropAvatar();// 0x6117cc0
	bool IsDetectingPaintDecalTarget();// 0x6117ca0
	bool IsDefaultCharType();// 0x6117c60
	bool IsCoopEmote(int EmoteId, int CoopPhase);// 0x6117b90
	bool IsComponentDormant(ActorComponent* InComp);// 0x6117b00
	bool IsCompatibleSkeletalCharAnimClass(class Object NewAnimClass);// 0x6117a70
	bool IsCommonFollowTeam(EmotePlayer EmotePlayer);// 0x61179b4
	bool IsClientCarryBackViewTarget();// 0x611797c
	bool IsClientBeCarriedBackViewTarget();// 0x6117944
	bool IsClient_WeaponOwner();// 0x6117904
	bool IsCharacterSprinting();// 0x61178cc
	bool IsChangeWearingState();// 0x6117894
	bool IsCarryBackEnable();// 0x611785c
	bool IsCanPlayEmote(int EmoteId, bool ShowTips);// 0x6117788
	bool IsCanFollowed();// 0x6117748
	bool IsCanDriveSnowBoard();// 0x6117710
	bool IsBattleState();// 0x61176d8
	bool IsAttackerIgnoreDamage(int DamageEventType);// 0x6117640
	bool IsAngledSight();// 0x6117608
	bool IsAllowScopeIn();// 0x61175d0
	bool IsAlive();// 0x6117590
	void InviteTeammate(FString Name, enum InvitationType);// 0x61174a8
	void InterruptAutonomousFollowEmote(int EmoteId);// 0x611742c
	void InterrupEmoteSoundByEmoteId(int EmoteId);// 0x61173b0
	void InteractiveMoveComponentHandleJumpInput();// 0x611739c
	void InteractiveMoveComponentHandleEnterInput();// 0x6117388
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x61172d0
	void InitCharacterSkillList();// 0x61172bc
	bool InDarkArea();// 0x6117284
	void InClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x61171d0
	void HidePlayerMagOnGunReload();// 0x61171bc
	void HideNightVisionFrame();// 0x61171a0
	bool HaveAngledSight();// 0x6117168
	bool HasStateExceptStandOrPlayEmote();// 0x6117130
	bool HasState(enum State);// 0x6117098
	bool HasSightCondition(enum Flags);// 0x6117008
	bool HasCarryBackState(enum InState);// 0x6116f78
	bool HasAnyStates(enum[] States);// 0x6116e38
	bool HasAnySightVision(enum Flags);// 0x6116da8
	bool HasAllStates(enum[] States);// 0x6116c68
	void HandleWeaponShootLost();// 0x6116c4c
	void HandleWeaponOnShoot();// 0x6116c38
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x6116b44
	void HandleStartFireDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x6116ac0
	void HandleStartFillGasDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x6116a3c
	void HandleShootDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x61169b8
	void HandlePlayOperateItemSoundOnServer(int ItemSoundID, enum ItemOperation);// 0x6116900
	void HandlePlayerWeaponChangeState(byte WeaponStateType);// 0x611687c
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x61167c4
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x611670c
	void HandlePlayEmoteCloseWeapon(byte TargetChangeSlot);// 0x6116690
	void HandleOpenPickUpBoxAction();// 0x611667c
	void HandleOnCharCustomAnimLoadingFinished();// 0x6116660
	void HandleOnCharAnimLoadingFinished();// 0x6116644
	void HandleMoveAntiShootVerifyMiss();// 0x6116628
	void HandleConsumeItemSkillBreak();// 0x6116614
	void HandleChangeWearingCloseWeapon(byte TargetChangeSlot);// 0x6116598
	void HandleBulletHitEvent(out const HitResult InImpactResult);// 0x61164c0
	void HandleAutoSwitchWeaponDelay();// 0x61164ac
	void GrenadeBackToWeaponServerCall();// 0x611644c
	void GMShowName();// 0x6116438
	Actor* GetWeaponUserConst();// 0x61163fc
	float GetWeaponOwnerPawnHealth();// 0x61163c0
	WeaponManagerComponent* GetWeaponManager();// 0x6116384
	Rotator GetViewRotation();// 0x6116344
	int GetVehicleSeatSafetyIndex();// 0x6116310
	PlayerMantleComponent* GetVaultComponent();// 0x61162dc
	float GetValueLimitForHealthPredict();// 0x61162a8
	STExtraUnderWaterEffectComp* getUnderWaterEffectComponent();// 0x6116274
	Vector GetUIHelmetPosition();// 0x6116234
	enum GetUAVState();// 0x6116218
	byte GetThrowGrenadeMode();// 0x61161f8
	int GetTeamMateIndex(STExtraBaseCharacter* Teammate);// 0x611616c
	STExtraBaseCharacter* GetTargetPlayer();// 0x6116150
	Vector GetSpringArmLocation();// 0x6116110
	SkeletalMeshComponent* GetSpecialWeaponAttachMesh();// 0x61160d4
	AkComponent* GetSoundComponent();// 0x61160a0
	int[] GetSkillIdListByCharaSkillID(int[] CharSkillTableIDList);// 0x6115f04
	float GetSimpleCollisionHalfHeightInStandPose();// 0x6115ed0
	bool GetShouldDrowningHurt();// 0x6115e90
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0x70644c4
	Vector GetShootVertifyHitBoxScale(out const CharacterHistoryData CharacterHistotyData, out const MovementRecordData MovementRecordData);// 0x6115d50
	SecuryInfoComponent* GetSecuryComponent();// 0x6115d1c
	STCharacterRescueOtherComp* GetRescueOtherComponent();// 0x6115d00
	STExtraVehicleBase* GetRelevantVehicleInReady();// 0x6115ce4
	int GetRedClothIDByEmote(int EmoteIndex);// 0x6115c50
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x6115bb8
	BoxComponent* GetProneShapeComponent();// 0x6115b9c
	byte GetPlayerWeaponFireMode();// 0x6115b68
	byte GetPlayerWeaponEquipSlot();// 0x6115b34
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x6115a6c
	PlayerVehAnimList GetPlayerVehAnimation();// 0x6115a30
	int GetPlayerTeamIndex();// 0x61159fc
	STExtraPlayerState* GetPlayerStateSafety();// 0x61159c8
	STExtraPlayerState* GetPlayerState();// 0x611598c
	FString GetPlayerNameSafety();// 0x61158e0
	Vector GetPlayerMovementDir();// 0x61158a0
	FString GetPlayerDetailInfo();// 0x61157fc
	STExtraPlayerController* GetPlayerControllerSafety();// 0x61157c0
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x611578c
	AnimParamList GetPlayerAnimParam(float DeltaTime);// 0x6115640
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType);// 0x61155b0
	PlayerAnimList GetPlayerAnimation();// 0x6115488
	PickupManagerComponent* GetPickupManager();// 0x6115454
	Vector GetOwnerShootStartLocation();// 0x6115414
	Vector GetOverrideCirclePainPos();// 0x61153dc
	int GetNearTeamPlayerNum();// 0x61153a8
	Vector GetMoveInputLocalDir();// 0x6115370
	MoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();// 0x6115334
	int GetMeshAnimLOD();// 0x6115300
	bool GetMEnsure();// 0x61152c0
	FString GetLatestInviter();// 0x611521c
	STExtraPlayerState* GetLastInviterPlayerState();// 0x61151e8
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x61151ac
	float GetKdValue();// 0x6115178
	bool GetIsPlayingEmote();// 0x6115158
	bool GetIsFPPOnVehicle();// 0x6115118
	bool GetIsFPP();// 0x61150d8
	bool GetIsChangeWearing();// 0x61150b8
	float GetInjuryFreeRate(int BodyPart);// 0x6115024
	Vector GetHeadLocation(bool bUseHeadBone);// 0x6114f8c
	int GetHandFolderRatio();// 0x6114f50
	Vector GetGunOwnerHeadLocation();// 0x6114f10
	int GetGrenadeKillBindGunIDByPC(STExtraPlayerController* KillerPC, int GrenadeID);// 0x6114e40
	int GetGrenadeKillBindGunID(int CurWeaponID, int GrenadeID);// 0x6114d74
	enum GetGender();// 0x6114d58
	bool GetFuzzyPosition(out Vector FuzzyPostion);// 0x6114cbc
	BaseFPPComponent* GetFPPComp();// 0x6114c88
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x6114bf8
	Vector GetFollowerLoc(STExtraBaseCharacter* follower);// 0x6114b68
	STExtraAnimInstanceBase* GetExtraAnimInstanceBase(bool bisFPP);// 0x6114ad4
	bool GetEnsure();// 0x6114a94
	float GetEmoteStartPosition(int CharacterPlayerKey);// 0x6114a08
	float GetEmotePlayRate();// 0x61149d4
	FString GetEmoteHandlePath(int ItemId);// 0x70644c4
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x70644c4
	FString GetEmote(int ItemDefineID);// 0x70644c4
	STExtraWeapon* GetCurrentWeapon();// 0x61149a0
	int GetCurrentVehicleAnimVehicleType();// 0x611496c
	STExtraVehicleBase* GetCurrentVehicle();// 0x6114930
	uint64 GetCurrentStatesInterface();// 0x61148f4
	STExtraShootWeapon* GetCurrentShootWeapon();// 0x61148c0
	STExtraWeapon* GetCurrentShieldWeapon();// 0x611488c
	InteractiveActorMoveComponent* GetCurrentInteractiveMoveComponent();// 0x6114858
	int GetCurrentFloorType();// 0x6114824
	int GetCurrentEmoteId();// 0x61147f0
	AnimMontage* GetCurPlayingEmote();// 0x61147bc
	float GetCrouchHalfHeight();// 0x61147a0
	FString GetCorpName();// 0x61146fc
	Controller* GetControllerSafety();// 0x61146c0
	UAEChaParachuteAnimListComponent* GetCharParachuteAnimListComponent();// 0x611468c
	float GetCharacterXYPlaneVelocity();// 0x6114658
	enum GetCharacterSubType();// 0x6114624
	class AnimInstance GetCharacterSkillAnimBP(int SkillID);// 0x6114598
	enum GetCharacterMainType();// 0x6114564
	CharacterEnergyData GetCharacterEnergy();// 0x61143bc
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x6114380
	UAEChaCustomAnimListComponent* GetChaCustomAnimComponent();// 0x611434c
	STCharacterCarryBackComp* GetCarryBackComp();// 0x6114318
	STExtraBaseCharacter* GetCarryBackCharacter();// 0x61142e4
	CapsuleComponent* GetCapsuleComponentInterface();// 0x61142a8
	Rotator GetCachedControlRotation();// 0x6114270
	STExtraBaseCharacter* GetBeCarriedBackCharacter();// 0x611423c
	CharacterAvatarComponent2* getAvatarComponent2();// 0x6114208
	AnimParamsComponent* GetAnimParamsComponent();// 0x61141ec
	bool GetAnimParamAlwaysLandLight();// 0x61141b4
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x6114128
	float GetAdjustDurabilityReduce(float DurabilityReduce, enum HitPos);// 0x6114060
	PickUpItemData[] GetAdditionalTombBoxItemBP(int InstanceIDCnt);// 0x6113fa4
	SpringArmComponent* GetActiveSpringArm();// 0x6113f68
	void GeneratePlayerBackpackWrappersToGround();// 0x6113f4c
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x6113cec
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x6113ae8
	void ForceWeaponFireInMuzzleDirection(bool bUseMuzzleDirection);// 0x6113a64
	bool ForceUseLodZeroAnim();// 0x6113a24
	void ForceSyncMovementState();// 0x6113a08
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x6113940
	void ForceRepFPPChange(bool bSetSelf);// 0x61138b4
	void ForcePlayerUpdateAnimation();// 0x61138a0
	void ForceDestroyWeaponInventoryAndClearData();// 0x611388c
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x611379c
	void FollowTeammate(FString Name);// 0x6113668
	EmotePlayer FindNearPlayingEmote();// 0x611361c
	enum FindBuffRelatedPawnStateByID(int BuffID);// 0x6113590
	bool FindActorLocationSafetyWithParams(out Vector FindLoc, Vector NewLocation, out const ResolvePenetrationParams ResolveParams);// 0x61133b0
	bool FindActorLocationSafety(out Vector FindLoc, Vector NewLocation);// 0x61132d4
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x6113128
	bool FillGasWeaponFilter();// 0x61130f0
	void FaceRotation(Rotator NewControlRotation, float DeltaTime);// 0x6113030
	void ExitClimbingActor(InteractiveMoveActor* ClimbingActor);// 0x6112fb4
	void EquipZoomScope(int WeaponId, int ScopeID);// 0x6112f00
	void EquipWeaponFinish();// 0x6112eec
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x6112e2c
	bool EnterState(enum State);// 0x6112d94
	void EnterServerState(enum State);// 0x6112ce4
	void EnterFire();// 0x6112cc8
	void EnterClimbingActor(InteractiveMoveActor* ClimbingActor);// 0x6112c4c
	void EnterBattleState();// 0x6112c38
	void EnterAssistantOnTrackVehicle(bool bEnter);// 0x6112bb4
	bool EnergyBuffConditionOK();// 0x6112b7c
	void EnableStanbyAnim(bool bIsEnable);// 0x6112af8
	bool EmoteAnimFinishedSuccessfully();// 0x6112ac0
	void DSSetCharacterIntPropertyForReplay(FString KeyName, int InValue);// 0x61129d0
	void DoDetectPaintDecalTarget(bool bStart);// 0x611294c
	void DoAutoDropWeapon(STExtraShootWeapon* ShootWeapon);// 0x61128d0
	void DisappearOnDeath();// 0x61128bc
	void DettachWeapon();// 0x61128a8
	bool DestroyWeaponOnServerByPropSlot(byte Slot, bool bEnableBroadcast);// 0x61127d4
	bool DestroyWeaponOnServer(FName LogicSocket, bool bEnableBroadcast);// 0x6112700
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x61126ec
	void DelayResetStandState();// 0x61126d8
	void DelayMoveEnd();// 0x61126c4
	void DelayMove(float Time);// 0x6112648
	void DelayHidden();// 0x611262c
	void DelayCustomDepth(float Time);// 0x61125b0
	void DelayChangeRectiftAvatar(float InDelayTime, enum InSlotType, int InItemID, bool bWear);// 0x6112478
	float CustomCalculateBodyhurtDamage(float Damage, int DamageTypeId, int AvatarDamagePosition, Actor* DamageCauser, STExtraBaseCharacter* AttackerBaseCharacter);// 0x61122fc
	void CurrentMeleeReleased();// 0x61122e8
	void CurrentMelee(bool IsForCE);// 0x6112264
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x61121d0
	byte ConvertWeaponSlotToCharacterAnimType(byte WeaponSlot);// 0x6112144
	byte ConvertWeaponFireModeToWeaponAnimType(byte FireMode);// 0x61120b8
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x611202c
	bool ConsumeVehicleEnterMontageTag();// 0x6111ff4
	void CollectPlayerTombBoxIDCard(out PickUpItemData[] OutItemDataList, out int InstanceIDCnt);// 0x6111eec
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x6111da4
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res, enum InivationType);// 0x6111c78
	void ClientSomeOneInviteMe(FString SomeOne, enum InvitationType);// 0x6111b88
	void ClientShowVeteranRecruitParachuteTeamTip(const int TipsID, FString Param1, FString Param2);// 0x6111a34
	void ClientShowAutoGroupParachuteTeamTips(bool bDoGroupSuccessfully, FString LeaderName);// 0x6111934
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x61118b0
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x61117f4
	void ClientSetActorLocation(Vector Location, bool bDeactiveMov);// 0x611172c
	void ClientResponseFeedback(enum res);// 0x61116a8
	void ClientPlayVehicleOverlapCameraShake();// 0x6111648
	void ClientPlayInteractEmote(int EmoteId);// 0x61115c4
	void ClientOnPossessBy(Controller* NewController);// 0x6111514
	void ClientFeedbackZombiePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, bool bHeadShotDamage);// 0x6111308
	void ClientFeedbackZombieMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, bool bHeadShotDamage);// 0x61110bc
	void ClientFeedbackVehiclePointDamage(float Damage, const STPointDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool bHeadShot);// 0x6110eb0
	void ClientChangeCharacterMesh(int MeshID);// 0x6110e2c
	void ClientBulletLineTrace(Vector_NetQuantize BornPos, Vector_NetQuantize EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x6110cf4
	void ClientAttackerHandleShootDamageTips(const ShootDamageTipsStr ShootDamageTipsStr);// 0x6110c40
	void ClientAIHotValueDebugInfo(const float[] Info);// 0x6110b90
	void ClearOnDeath(Controller* EventInstigator, Actor* DamageCauser);// 0x6110ad4
	void ClearHPUI();// 0x6110ab8
	void ClearEmotePlayer();// 0x6110aa4
	void ClearClientJump();// 0x6110a90
	bool CheckWeaponIsCurUsingWeapon(STExtraWeapon* CurWeapon);// 0x61109f8
	void CheckStateChangedInterruptEmoteState();// 0x61109e4
	void CheckPoseCollisionRight();// 0x61109d0
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x6110928
	bool CheckPickWeaponCanAutoUse();// 0x61108e8
	bool CheckOnMoveablePlatform();// 0x61108b0
	void CheckNeedReload(STExtraShootWeapon* OwnerShootWeapon, Actor* WeaponOwnerActor);// 0x61107f4
	bool CheckNeedRecordEmoteState(int EmoteId);// 0x611075c
	void CheckNeedPlayReliableEmote();// 0x6110748
	void CheckNeedClearEmotePlayer();// 0x6110734
	void CheckNearPlayingEmote();// 0x6110720
	void CheckNearPlayingCoopEmote();// 0x611070c
	bool CheckLowSpeedException();// 0x61106cc
	bool CheckIsWearingThoseClothes(out const int[] InClothIDList);// 0x6110600
	bool CheckIsWearingThisCloth(int InClothID);// 0x6110570
	bool CheckIsValidXSuitBornIslandAction(int EmoteIndex);// 0x61104d8
	bool CheckIsValidEmoteIDBP(int EmoteIndex);// 0x6110440
	bool CheckInPhotoGrapherMode();// 0x6110400
	bool CheckEmoteNeedUseReliableRPC(int EmoteIndex);// 0x6110368
	void CheckEmoteFollow(float DeltaTime);// 0x61102ec
	bool CheckEmoteCollision(int EmoteId);// 0x611025c
	void CheckCharacterDelayHide();// 0x6110248
	bool CheckCanStand();// 0x6110210
	bool CheckCanShowFollowPlayEmote(EmotePlayer EmotePlayer);// 0x611014c
	bool CheckCanShovelInSpringState();// 0x611010c
	bool CheckCanFollowPlayEmote(const int EmoteId);// 0x6110074
	bool CheckCanBeginPlayCoopEmote();// 0x611003c
	bool CheckCanAutoUseWeapon(STExtraWeapon* Weapon);// 0x610ffa4
	bool CheckBuffTarget(STBuff* Buff);// 0x610ff0c
	bool CheckBaseIsSmallMoveable();// 0x610fed4
	bool CheckBaseIsMoving();// 0x610fe9c
	bool CheckBaseIsMoveable();// 0x610fe64
	void CheckAutonomousNeedFollowEmote(int EmoteId);// 0x610fde0
	void CharacterStateReset();// 0x610fdcc
	void CharacterProcessAnimLanded();// 0x610fdb0
	static byte CharacterPoseStateToPoseType(byte InPoseState);// 0x610fd34
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x610fc40
	void CharacterHideInGameLogic();// 0x610fc24
	bool ChangeWearingAnimFinishedSuccessfully();// 0x610fbec
	void ChangeVehWeaponCameraData(bool Enable, float InVehicleSpringArmLength);// 0x610fb24
	void ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x610fa28
	bool CanSwitchWeaponWhenEnterFight();// 0x610f9e8
	bool CanSelfRescue();// 0x610f9b0
	bool CanRegisterToPickUpList(Actor* Actor);// 0x610f918
	bool CanPlayHitAnim();// 0x610f8d8
	bool CanPaintDecal(int DecalId);// 0x610f848
	bool CanHearWeaponLockSound();// 0x610f808
	bool CanEnterWaterArea(enum[] disallowedState);// 0x610f6c8
	bool CanEnterState(enum NewState);// 0x610f638
	bool CanDrawWeaponCrossHair();// 0x610f5f8
	void CancelFollow();// 0x610f5e4
	bool CanAutoUseWeaopon(int WeaponId);// 0x610f54c
	void CalculateUseBuffFlow(int InBuffID);// 0x610f4d0
	void CalculateTakeItemFlow(int SpesificID, int Count);// 0x610f41c
	float CalculateTakeDamageFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x610f2c0
	void CalculateShootPlayerHeadNum(int AddShootTimes, bool IsAI);// 0x610f1f8
	void CalculatePickUpItemFlowInstance(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam, uint64 InstanceID);// 0x610f058
	void CalculatePickUpItemFlow(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam);// 0x610eef0
	void CalculateHeathRecoverVal(float RecoverVal, int Reason);// 0x610ee30
	void CalculateHeathRecoverTimes();// 0x610ee14
	void CalculateBuildingEnterFlow(int InBuildingID, int InCount);// 0x610ed60
	void CalculateBornLandThrowGrenade(int ID);// 0x610ece4
	void CalculateBornLandGrenadeBattle(int ID, bool bHitOthers);// 0x610ec24
	void CalculateAreaUseItemFlow(int SpesificID, int Count);// 0x610eb70
	void CalculateActivityEventFlow(TLog_ActivityEventType InEventID, int InCount);// 0x610eaac
	void CalcKillDataDeferred(out const DamageCauserRecordData Record);// 0x610ea10
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* MeshComp, Actor* BulletActor);// 0x610e8e4
	void BulletChange();// 0x610e884
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x610e628
	void BroadcastFatalDamageInfoWrapper(UAECharacter* Causer, UAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadshot, int ResultHealthStatus, int PreviousHealthStatus, UAECharacter* WhoKillMe, int KillerKillCount);// 0x610e3bc
	void BroadcastFatalDamageInfo(UAECharacter* Causer, UAECharacter* Victim, ClientFatalDamageRecordData Data, uint32 CauserKey, uint32 VictimKey);// 0x610e1a4
	void BroadcastClientsSimulateVehicleDamageDie(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x610decc
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x610dc34
	void BroadcastClientsSimulateSTRadialDamage(float BaseDamage, const STRadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x610d9fc
	void BroadcastClientsSimulateRadialDamageDie(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x610d6ec
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x610d41c
	void BroadcastClientsSimulatePoisonDamageDie(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x610d144
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x610ceac
	void BroadcastClientsSimulatePointDamageDie(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x610cbd4
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x610c93c
	void BroadcastClientsSimulateMeleeDamageDie(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x610c624
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x610c34c
	void BroadcastClientsSimulateFallingDamageDie(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x610c074
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x610bddc
	void BroadcastClientsSimulateDrowningDamageDie(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x610bb04
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x610b86c
	void BroadcastClientsSimulateDotDamageDie(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x610b590
	void BroadcastClientsSimulateDotDamage(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x610b2f4
	void BroadcastClientsSimulateBurningDamageDie(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x610afe4
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x610ad14
	void BroadcastClientsSimulateAirAttackDamageDie(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage, byte RespawnCount);// 0x610aa00
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x610a72c
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x610a5cc
	void BPResetCharacter();// 0x70644c4
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x70644c4
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x70644c4
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x70644c4
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser, byte DamageEventType);// 0x70644c4
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x70644c4
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x70644c4
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x610a47c
	float BPCalFinalDamage(Controller* Killer, float FinalDamage, bool bHeadShoot, bool bBreathing);// 0x610a324
	void BP_SetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x70644c4
	void BP_ResetDataOnRespawn();// 0x610a308
	int BP_GetWeaponSyncTicket();// 0x610a2cc
	enum BP_CheckWeaponSyncTicket(int InTicket);// 0x610a238
	void AutoScopeWhenPeek();// 0x610a224
	void AttachWeapon();// 0x610a210
	void AttachCurrentWeaponMeshToHand(out const FName WeaponSocketName);// 0x610a184
	void AsyncLoadPlayerVehAnimationByAnimType(const STExtraVehicleBase* InVehicle, const byte InAnimType, const int InSeatId);// 0x610a090
	void AsyncAnimOpenDoorCallback(AnimationAsset* RetAsset);// 0x610a014
	void AsyncAnimListOpenDoorCallback(AnimationAsset*[] RetAssetList);// 0x6109ee0
	void ApplyLeaveVehicleVelocity(Vector InLeaveVelocity);// 0x6109e64
	bool AllowState(enum State, bool withLog);// 0x6109d88
	void AIStartFireOnServer(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget);// 0x6109c50
	void AddPlayerLastDamageTime(STExtraPlayerState* Player, int Time);// 0x6109b98
	void AddOneDamageCauserRecord(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadshot, Actor* DamageCauser, float Damage);// 0x61099c0
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x61098d0
	void AddDamageRecord(Controller* Causer, float Damage, int HSChangeMargin, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x610973c
	void AddClientLeaveStateCheck(enum State, float Duration);// 0x6109684
	void ActivateParachuteFreeFallingShake(float FreeFallingShakeTime);// 0x6109608
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnEditorKeyPressedDelegate;//[Offset: 0xbe8, Size: 0x10]
	bool bForceOpenPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf8, Size: 0x1]
	delegate CharacterAnimEventDelegate;//[Offset: 0xc00, Size: 0x10]
	delegate CharacterCommonEventDelegate;//[Offset: 0xc10, Size: 0x10]
	delegate OnPushDamageDynamicDelegate;//[Offset: 0xc50, Size: 0x10]
	delegate OnTakeDamageDynamicDelegate;//[Offset: 0xc60, Size: 0x10]
	delegate OnPreTakeDamageDynamicDelegate;//[Offset: 0xc70, Size: 0x10]
	delegate OnAttackerPreTakeDamageDelegate;//[Offset: 0xc80, Size: 0x10]
	delegate OnVictimPreTakeDamageDelegate;//[Offset: 0xc90, Size: 0x10]
	delegate OnClientPushDamageEvent;//[Offset: 0xca0, Size: 0x10]
	delegate OnAttrChangeEventDelegate;//[Offset: 0xd40, Size: 0x10]
	float Health;//[Offset: 0xd50, Size: 0x4]
	float HealthMax;//[Offset: 0xd54, Size: 0x4]
	int[] TypeIds;//[Offset: 0xd58, Size: 0x10]
	float SwimSpeedDynamicScale;//[Offset: 0xd68, Size: 0x4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd6c, Size: 0x1]
	bool bAIIgnore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6d, Size: 0x1]
	float threatenValue;//[Offset: 0xd70, Size: 0x4]
	float HurtParticleOffset;//[Offset: 0xd74, Size: 0x4]
	delegate DoOnNextFrameEnsureSpawnActorTriggerSuccess;//[Offset: 0xd88, Size: 0x10]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0xd98, Size: 0x8]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0xda0, Size: 0x10]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0xdb0, Size: 0x10]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0xdc0, Size: 0x8]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xdc8, Size: 0x8]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd0, Size: 0x1]
	FString CharacterStateType;//[Offset: 0xde0, Size: 0x10]
	bool bEnableDebugServiceInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf0, Size: 0x1]
	FString BehaviorServiceDebugInfo;//[Offset: 0xe48, Size: 0x10]
	FString ServiceDebugInfoForShow;//[Offset: 0xe58, Size: 0x10]
	int DebugInfoDetailLv;//[Offset: 0xe68, Size: 0x4]
	delegate OnHandleSkillStartDelegate;//[Offset: 0xe70, Size: 0x10]
	delegate OnHandleSkillEndDelegate;//[Offset: 0xe80, Size: 0x10]
	float SkillPromptStartTime;//[Offset: 0xe90, Size: 0x4]
	STBuffSystemComponent* BuffSystem;//[Offset: 0xe98, Size: 0x8]
	UTSkillManagerComponent* SkillManager;//[Offset: 0xea0, Size: 0x8]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xea8, Size: 0x8]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0xeb0, Size: 0x8]
	delegate StateEnterHandler;//[Offset: 0xeb8, Size: 0x10]
	delegate StateLeaveHandler;//[Offset: 0xec8, Size: 0x10]
	delegate StateInterruptedHandlerBP;//[Offset: 0xee8, Size: 0x10]
	delegate OnSimulateCharacterStatesChange;//[Offset: 0xef8, Size: 0x10]
	uint64 CurrentStates;//[Offset: 0xf20, Size: 0x8]
	uint64 DisabledStates;//[Offset: 0xf28, Size: 0x8]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0xf30, Size: 0x10]
	enum[] AllowStates;//[Offset: 0xf40, Size: 0x10]
	float RencentStatesValidRange;//[Offset: 0xf50, Size: 0x4]
	<float,uint64> RencentStatesMap;//[Offset: 0xf58, Size: 0x50]
	delegate OnPawnStateDisabled;//[Offset: 0xfa8, Size: 0x10]
	delegate OnPawnStateEnabled;//[Offset: 0xfb8, Size: 0x10]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xfc8, Size: 0x10]
	PartHitComponent* PartHitComponent;//[Offset: 0xfd8, Size: 0x8]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe1, Size: 0x1]
	TurnAroundViewComponent* TurnAroundViewComp;//[Offset: 0xfe8, Size: 0x8]
	byte TeamNum;//[Offset: 0xff8, Size: 0x1]
	TickControlComponent* TickControlComp;//[Offset: 0x1000, Size: 0x8]
	float SpeedScale;//[Offset: 0x1010, Size: 0x4]
	float SpeedValue;//[Offset: 0x1014, Size: 0x4]
	float Temperature;//[Offset: 0x1018, Size: 0x4]
	float TemperatureMax;//[Offset: 0x101c, Size: 0x4]
	float TemperatureMin;//[Offset: 0x1020, Size: 0x4]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1038, Size: 0x1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1039, Size: 0x1]
	CharacterMaterialComponent* CharacterMaterialComponent;//[Offset: 0x1048, Size: 0x8]
	float VehicleDetailedTraceDist;//[Offset: 0x1050, Size: 0x4]
	float SpringArmTraceDist;//[Offset: 0x1054, Size: 0x4]
	<byte,CharacterHasGunBodyOffsetList> BodyRelativeOffsetConfig;//[Offset: 0x1058, Size: 0x50]
	ActivitySyncData ActicitySyncData;//[Offset: 0x10a8, Size: 0x1c]
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 0x1]
	void StopCurrentLevelSequence();// 0x70644c4
	void ShotVoice(bool bBegin);// 0x615ecb8
	bool SetSubAnimNodeAnimInstance(FName SubInstanceSlotName, AnimInstance* AnimInstance);// 0x615ebf0
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x615eb30
	void SetMEnsure(bool bMValue);// 0x615eaa4
	void SetEnsure(bool bValue);// 0x615ea18
	void SetAllowPawnState(enum PawnState, bool bAllow);// 0x615e958
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x615e89c
	void RPC_Client_SetServiceDebugInfo(FString Info);// 0x615e7ec
	void RPC_Client_SetIsMLAI(bool InIsMLAI);// 0x615e760
	void RPC_Client_ChangeToMLAI(const uint64 DisplayUID, FString Name);// 0x615e670
	bool ResetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x615e5e0
	void ResetPawnStateDisabled(enum State);// 0x615e564
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x615e458
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x615e310
	void PlayLevelSequenceByPathAndBindingInfo(FString SequenceActorPath, FString LevelSequencePath, out const <FString,FString> TrackBindingInfo, float TimeOffset);// 0x70644c4
	void PlayLevelSequenceByPath(FString SequenceActorPath, FString LevelSequencePath, float TimeOffset);// 0x70644c4
	float PlayAnimMontageWithStartPos(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, float StartPos);// 0x615e1c8
	void OnRep_UnmannedVehicleSyncData();// 0x615e1ac
	void OnRep_Temperature(float LastValue);// 0x615e128
	void OnRep_HealthMax();// 0x615e10c
	void OnRep_Health(float PrevHealth);// 0x615e088
	void OnRep_DisabledStates(uint64 prevStates);// 0x615e004
	void OnRep_CurrentStates(uint64 prevStates);// 0x615df80
	void OnRep_AllowStates();// 0x615df64
	void OnRep_ActivitySyncData();// 0x615df50
	void OnLeaveStateForBp(enum State);// 0x70644c4
	void OnHandleSkillStart__DelegateSignature(Character* OwnerCharacter, int SkillID);// 0x70644c4
	void OnHandleSkillEnd__DelegateSignature(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x70644c4
	void OnEnterStateForBp(enum State);// 0x70644c4
	void LeaveState(enum State);// 0x615decc
	bool IsPawnStateDisabledByWeapon(STExtraWeapon* Weapon, enum State);// 0x615ddf8
	bool IsPawnStateDisabled(enum State);// 0x615dd68
	bool IsCanDamageTeammate(out const DamageEvent DamageEvent);// 0x615dcc0
	bool IsCanDamageSelf(out const DamageEvent DamageEvent);// 0x615dc18
	bool IsAllowPawnState(enum State);// 0x615db88
	bool IsAlive();// 0x615db48
	bool HasState(enum State);// 0x615dab0
	bool HasRencentState(enum State);// 0x615da18
	bool HasBuffID(int BuffID);// 0x615d980
	STExtraVehicleBase* GetUnmannedVehicle();// 0x615d964
	UTSkillManagerComponent* GetSkillManager();// 0x615d928
	float GetScaledSpeed();// 0x615d8ec
	FString GetPlayerNameSafety();// 0x615d840
	STExtraPlayerController* GetPlayerControllerSafety();// 0x615d804
	enum GetObserverType();// 0x615d7c8
	bool GetMEnsure();// 0x615d788
	bool GetEnsure();// 0x615d748
	enum[] GetDamageableGameObjectType();// 0x615d69c
	STExtraVehicleBase* GetCurrentVehicle();// 0x615d660
	float GetBuffDuration(int InstID, int CauseSkillID);// 0x615d594
	UAEBlackboard* GetBuffBlackboard(int BuffID);// 0x615d508
	void FillBuffBlackboard(int BuffID, UAEBlackboardParameter[] ParamList);// 0x615d388
	int ExtractDamageParams(out const DamageEvent DamageEvent, Actor* DamagetCauser, out int DamagetType);// 0x615d254
	int ExtractDamageAdditionType(out const DamageEvent DamageEvent, Actor* DamagetCauser);// 0x615d16c
	bool EnterState(enum State);// 0x615d0d4
	bool DestroySubAnimInstance(AnimInstance* AnimInstance);// 0x615d044
	void DelayHidden();// 0x615d028
	AnimInstance* CreateSubAnimInstance(class AnimInstance InstanceClass, FName InstanceName);// 0x615cf64
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x615cdc4
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x615cc90
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x615cb5c
	void Client_ShowDebugCone(Vector InLocation, float InRadius, Color InColor, float InTime, Vector forwardDir, float ang);// 0x615c9b0
	void Client_ShowDebugCapsule(Vector InLocation, float InRadius, float Length, Color InColor, float InTime, Rotator Rot, float ang);// 0x615c7c0
	void Client_ShowDebugBox(Vector Center, Color InColor, float InTime, Vector Extent, Quat Rot);// 0x615c63c
	void ClearBuff();// 0x615c620
	bool ChangeBuffDuration(int InstID, float Duration);// 0x615c54c
	bool CanBeAttackedByWeapon(int WeaponId);// 0x615c4b4
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser, byte DamageEventType);// 0x70644c4
	void BPOnRespawned();// 0x70644c4
	void BPOnRecycled();// 0x70644c4
	bool AllowState(enum State, bool withLog);// 0x615c3d8
	void AddEntryEventTokenByID(int SkillID);// 0x615c35c
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer, int Level);// 0x615c214
	int AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID, int Level);// 0x615c094
<----------Generated by SSpawner v1.0.4---------->


Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x898, Size: 0x4]
	FName RepPropertyCategory;//[Offset: 0x8a0, Size: 0x8]
	FName PlayerType;//[Offset: 0x8a8, Size: 0x8]
	FString PlayerName;//[Offset: 0x8b0, Size: 0x10]
	FString Nation;//[Offset: 0x8c0, Size: 0x10]
	uint32 PlayerKey;//[Offset: 0x8d0, Size: 0x4]
	FString PlayerUID;//[Offset: 0x8d8, Size: 0x10]
	FString MLAIPlayerUID;//[Offset: 0x8e8, Size: 0x10]
	int TeamID;//[Offset: 0x8f8, Size: 0x4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8fc, Size: 0x1]
	int CampID;//[Offset: 0x900, Size: 0x4]
	int resID;//[Offset: 0x904, Size: 0x4]
	enum DefaultCharacterGender;//[Offset: 0x908, Size: 0x1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x910, Size: 0x10]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x920, Size: 0x38]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x958, Size: 0x20]
	int planeAvatarId;//[Offset: 0x978, Size: 0x4]
	int DyeDebugFlag;//[Offset: 0x97c, Size: 0x4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x980, Size: 0x10]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 0x1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x991, Size: 0x1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x992, Size: 0x1]
	bool bAINeedCheckBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x993, Size: 0x1]
	float DestinyValue;//[Offset: 0x994, Size: 0x4]
	float RatingScore;//[Offset: 0x9a4, Size: 0x4]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a8, Size: 0x1]
	bool bEnsure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a9, Size: 0x1]
	bool bMEnsure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9aa, Size: 0x1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ab, Size: 0x1]
	FString LuaFilePath;//[Offset: 0x9b8, Size: 0x10]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x9c8, Size: 0x50]
	void SetNetCullDistanceSquared(float fNetCullDistanceSquared);// 0x690be00
	void SetMEnsure(bool bMValue);// 0x690bd74
	void SetEnsure(bool bValue);// 0x690bce8
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x690bbf0
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x690bad0
	void OnRep_UseWholeModel();// 0x690babc
	void OnRep_TeamID();// 0x690baa8
	void OnRep_PlayerUID();// 0x690ba94
	void OnRep_PlayerKey();// 0x690ba78
	void OnRep_MLAIPlayerUID();// 0x690ba64
	void OnRep_CampID();// 0x690ba50
	bool IsDefaultCharType();// 0x690ba10
	int GetTeamId();// 0x690b9f4
	FString GetPlayerKey();// 0x690b950
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x690b8a4
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x690b7f8
	ActorComponent*[] GetNonSimulatedComponents();// 0x690b74c
	ActorComponent*[] GetNonDedicatedComponents();// 0x690b6a0
	PrimitiveComponent* GetMovementBaseComponent();// 0x690b66c
	bool GetMEnsure();// 0x690b62c
	bool GetEnsure();// 0x690b5ec
	int GetCampId();// 0x690b5b8
	void ClientAcknowledgeReconnection(uint32 Token);// 0x690b534
<----------Generated by SSpawner v1.0.4---------->


Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0x30, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float MinimumDuration;//[Offset: 0x38, Size: 0x4]
	float MaximumDuration;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x5d8, Size: 0x4]
	class AnimInstance[] CharacterInVehicleAnimBPs;//[Offset: 0x5e0, Size: 0x10]
	bool MeshAlwaysTickPoseAndRefreshBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 0x1]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 0x1]
	enum VehicleType;//[Offset: 0x5f2, Size: 0x1]
	enum VehicleShapeType;//[Offset: 0x5f3, Size: 0x1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x5f8, Size: 0x18]
	ItemDefineID AvatarDefaultCfgLOD;//[Offset: 0x610, Size: 0x18]
	MaterialInterface* BrokenMat;//[Offset: 0x628, Size: 0x8]
	ParticleSystem* AssetParticleExplosion;//[Offset: 0x630, Size: 0x28]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x658, Size: 0x8]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x660, Size: 0x50]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x6b0, Size: 0x50]
	Texture2D* VehicleIcon;//[Offset: 0x700, Size: 0x8]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 0x1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x70c, Size: 0x4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x710, Size: 0x4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714, Size: 0x1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x715, Size: 0x1]
	float ShowGrainyScreenMinDist;//[Offset: 0x718, Size: 0x4]
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 0x1]
	bool bCanHandBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71d, Size: 0x1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71e, Size: 0x1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71f, Size: 0x1]
	float LanscapeCheckDistance;//[Offset: 0x720, Size: 0x4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724, Size: 0x1]
	float LockZeroAngularDampingValue;//[Offset: 0x728, Size: 0x4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 0x1]
	bool bRespawnNeedAdjustLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 0x1]
	int MainMaterialIndex;//[Offset: 0x730, Size: 0x4]
	FText VehicleDisplayName;//[Offset: 0x738, Size: 0x18]
	bool ShowVehicleEnterButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]
	bool bStopAnimWhenDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 0x1]
	bool AdvanceVehicleShowAsStandardVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x752, Size: 0x1]
	Vector AirDropVelocity;//[Offset: 0x754, Size: 0xc]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x760, Size: 0x8]
	FName AirDropParachuteSocketName;//[Offset: 0x768, Size: 0x8]
	float AirdropOvertime;//[Offset: 0x770, Size: 0x4]
	delegate OnVehicleStartAirdrop;//[Offset: 0x778, Size: 0x10]
	delegate OnVehicleEndAirdrop;//[Offset: 0x788, Size: 0x10]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x798, Size: 0x1]
	bool bHasBeenCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x799, Size: 0x1]
	bool bEnableBuffComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79a, Size: 0x1]
	bool bEnableAttrModifyComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79b, Size: 0x1]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79c, Size: 0x1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79d, Size: 0x1]
	float BackpackCapacity;//[Offset: 0x7a0, Size: 0x4]
	FName BackpackName;//[Offset: 0x7a8, Size: 0x8]
	int[] marr_MidIndexes;//[Offset: 0x7b0, Size: 0x10]
	float EnterVehicleCameraBlendTime;//[Offset: 0x7c0, Size: 0x4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x7c4, Size: 0x4]
	bool bEnableVehicleSteeringCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x7cc, Size: 0x4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 0x1]
	float StaticForceFixInterval;//[Offset: 0x7d4, Size: 0x4]
	bool EnableMapMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1]
	int[] SwitchSeatWithItemTypeList;//[Offset: 0x7e8, Size: 0x10]
	Vector[] RouteList;//[Offset: 0x7f8, Size: 0x10]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x808, Size: 0x10]
	int AutoDrive_CurrentTargetWaypointIdx;//[Offset: 0x818, Size: 0x4]
	Vector AutoDriverTargetPosition;//[Offset: 0x81c, Size: 0xc]
	Vector AutoDriverStartPosition;//[Offset: 0x828, Size: 0xc]
	delegate OnSeatAttached;//[Offset: 0x838, Size: 0x10]
	delegate OnSeatDetached;//[Offset: 0x848, Size: 0x10]
	delegate OnSeatChange;//[Offset: 0x858, Size: 0x10]
	delegate OnStartResolveStuck;//[Offset: 0x868, Size: 0x10]
	delegate OnEndResolveStuck;//[Offset: 0x878, Size: 0x10]
	RepMovementKeyLoc RepMovementKeyLoc;//[Offset: 0x888, Size: 0x28]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b4, Size: 0x1]
	FString LuaFilePath;//[Offset: 0x8b8, Size: 0x10]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x8c8, Size: 0x50]
	bool bEnableVoiceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 0x1]
	float voiceCheckCD;//[Offset: 0x91c, Size: 0x4]
	float voiceCheckShowCD;//[Offset: 0x920, Size: 0x4]
	float voiceCheckDis;//[Offset: 0x924, Size: 0x4]
	float voiceUsingHornCheckDis;//[Offset: 0x928, Size: 0x4]
	float voiceCheckSpeed;//[Offset: 0x92c, Size: 0x4]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x945, Size: 0x1]
	float PassengerInjuryAvoidance;//[Offset: 0x948, Size: 0x4]
	bool IsCanVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94c, Size: 0x1]
	bool CanPushUpCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94d, Size: 0x1]
	bool CanSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94e, Size: 0x1]
	uint16 ReplicatedFuelRatio;//[Offset: 0x950, Size: 0x2]
	ParticleSystem* ParticleExplosion;//[Offset: 0x988, Size: 0x8]
	enum VehicleHealthState;//[Offset: 0x990, Size: 0x1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x991, Size: 0x1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x992, Size: 0x1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x993, Size: 0x1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 0x1]
	Vector BloodEffectScale;//[Offset: 0x998, Size: 0xc]
	SkeletalMeshComponent* Mesh;//[Offset: 0x9a8, Size: 0x8]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x9b0, Size: 0x8]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x9b8, Size: 0x8]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x9c0, Size: 0x8]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x9c8, Size: 0x8]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x9d0, Size: 0x8]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x9d8, Size: 0x8]
	VehicleComponent*[] TickedComponents;//[Offset: 0x9e0, Size: 0x10]
	VehicleComponent*[] WeakTickedComponents;//[Offset: 0x9f0, Size: 0x10]
	bool bClearComponentTickWhenDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa00, Size: 0x1]
	float EnActiveTimeThreshold;//[Offset: 0xa08, Size: 0x4]
	float FreezeVehicleThreshold;//[Offset: 0xa0c, Size: 0x4]
	bool bFreezeNeedChangeVehiclePhysx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 0x1]
	float VehicleHitThreshold;//[Offset: 0xa28, Size: 0x4]
	float VehicleHitCharacterThreshold;//[Offset: 0xa2c, Size: 0x4]
	float AndroidGLES2TailLightScale;//[Offset: 0xa3c, Size: 0x4]
	int EnableTickEffectsDevciveLevel;//[Offset: 0xa40, Size: 0x4]
	float EffectUpdateInterval;//[Offset: 0xa48, Size: 0x4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0xa50, Size: 0x10]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa61, Size: 0x1]
	bool bServerClearLinearVelocityZEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa62, Size: 0x1]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa63, Size: 0x1]
	float lastForwardSpeed;//[Offset: 0xa64, Size: 0x4]
	delegate OnClientEnterVehicleEvent;//[Offset: 0xa68, Size: 0x10]
	delegate OnClientExitVehicleEvent;//[Offset: 0xa78, Size: 0x10]
	delegate OnClientChangeVehicleSeatEvent;//[Offset: 0xa88, Size: 0x10]
	bool NeedCheckMovetoVehicleStraight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa98, Size: 0x1]
	bool bEnableEnterDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9a, Size: 0x1]
	float VehicleEnterDistance;//[Offset: 0xa9c, Size: 0x4]
	float TickEnterSphereInterval;//[Offset: 0xaa0, Size: 0x4]
	float EnterSphereExtraHeight;//[Offset: 0xaa4, Size: 0x4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab2, Size: 0x1]
	float AsyncLoadResDistance;//[Offset: 0xab4, Size: 0x4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0xab8, Size: 0x4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac1, Size: 0x1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0xac4, Size: 0x4]
	float EnterCullWaterDistanceSq;//[Offset: 0xac8, Size: 0x4]
	Vector CullWaterCapsuleA;//[Offset: 0xacc, Size: 0xc]
	Vector CullWaterCapsuleB;//[Offset: 0xad8, Size: 0xc]
	float CullWaterCapsuleRadius;//[Offset: 0xae4, Size: 0x4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0xae8, Size: 0x4]
	float PeneTerrainProtectionInterval;//[Offset: 0xaf4, Size: 0x4]
	float SaveValidTransformInterval;//[Offset: 0xaf8, Size: 0x4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0xafc, Size: 0xc]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb30, Size: 0x1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0xb40, Size: 0x8]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0xb48, Size: 0x8]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0xb50, Size: 0x8]
	AkAudioEvent* Sfx_Boost;//[Offset: 0xb58, Size: 0x8]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0xb60, Size: 0x8]
	AkAudioEvent* Sfx_Landing;//[Offset: 0xb68, Size: 0x8]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0xb70, Size: 0x8]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0xb78, Size: 0x8]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0xb80, Size: 0x8]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0xb88, Size: 0x8]
	AkAudioEvent* Sfx_Horn;//[Offset: 0xb90, Size: 0x8]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0xb98, Size: 0x8]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0xba0, Size: 0x8]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0xba8, Size: 0x8]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0xbb0, Size: 0x8]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0xbb8, Size: 0x8]
	AkAudioEvent* Sfx_EngineStart;//[Offset: 0xbc0, Size: 0x8]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0xbc8, Size: 0x8]
	float EngineSfxEndDelayTime;//[Offset: 0xbd0, Size: 0x4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd4, Size: 0x1]
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0xbd8, Size: 0x78]
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0xc50, Size: 0x78]
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0xcc8, Size: 0x78]
	AkComponent* SoundComponent;//[Offset: 0xd40, Size: 0x8]
	float RPMSfxScale;//[Offset: 0xd7c, Size: 0x4]
	float ThrottleSfxMinSpeed;//[Offset: 0xd80, Size: 0x4]
	enum VehicleSyncTag;//[Offset: 0xda1, Size: 0x1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xda4, Size: 0x4]
	delegate OnVehiclePossessed;//[Offset: 0xda8, Size: 0x10]
	delegate OnVehicleUnPossessed;//[Offset: 0xdb8, Size: 0x10]
	VehicleSimViewData SimulateViewData;//[Offset: 0xdd8, Size: 0x4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0xddc, Size: 0x4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0xde0, Size: 0x8]
	VehiclePickableComponent* VehiclePickupComp;//[Offset: 0xde8, Size: 0x8]
	bool bAddVehicleRotationChangeOnPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf0, Size: 0x1]
	delegate OnVehicleHealthStateChanged;//[Offset: 0xe30, Size: 0x10]
	delegate OnVehicleHealthDestroy;//[Offset: 0xe40, Size: 0x10]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe50, Size: 0x1]
	float MinRideAngleDgree;//[Offset: 0xe54, Size: 0x4]
	bool bServerDetachApplyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe58, Size: 0x1]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe64, Size: 0x1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe65, Size: 0x1]
	float VehicleRadiusImulseScale;//[Offset: 0xe68, Size: 0x4]
	float VehicleAdditionalBlowUp;//[Offset: 0xe6c, Size: 0x4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe94, Size: 0x1]
	float StuckMinImpulse;//[Offset: 0xe98, Size: 0x4]
	float ContinuousStuckInterval;//[Offset: 0xe9c, Size: 0x4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0xea0, Size: 0x4]
	float StuckResovingTime;//[Offset: 0xea4, Size: 0x4]
	float ContinuousStuckTimer;//[Offset: 0xeac, Size: 0x4]
	float StuckResovingTimer;//[Offset: 0xeb0, Size: 0x4]
	float PenePercent;//[Offset: 0xeb4, Size: 0x4]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf00, Size: 0x1]
	float RespawnWaitingTime;//[Offset: 0xf04, Size: 0x4]
	float RespawnTickInterval;//[Offset: 0xf08, Size: 0x4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0c, Size: 0x1]
	bool bServerDetachEveryoneWhenRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf90, Size: 0x1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf98, Size: 0x1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xfa0, Size: 0x10]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xfb0, Size: 0x10]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xfc0, Size: 0x10]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1000, Size: 0x1]
	bool EnableServerRecordWhenEnterCheatPunishMentNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1008, Size: 0x1]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0x1020, Size: 0x8]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0x1028, Size: 0x8]
	SkeletalMesh* MeshAssetRef;//[Offset: 0x1030, Size: 0x28]
	SkeletalMesh* TPPMesh;//[Offset: 0x1058, Size: 0x8]
	bool bOnPlayerActiveRegionsChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1138, Size: 0x1]
	bool bInActiveRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1139, Size: 0x1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113a, Size: 0x1]
	Vector SeekLockOffset;//[Offset: 0x113c, Size: 0xc]
	FName SeekLockSocket;//[Offset: 0x1148, Size: 0x8]
	float ProduceSoundInterval;//[Offset: 0x1150, Size: 0x4]
	delegate VehicleAnimEventDelegate;//[Offset: 0x1158, Size: 0x10]
	BattleItemHandleBase* BindingHandle;//[Offset: 0x1168, Size: 0x8]
	delegate OnEnterVehicle;//[Offset: 0x1170, Size: 0x10]
	float OverlapCameraShakeInterval;//[Offset: 0x1190, Size: 0x4]
	float OverlapDamageRate;//[Offset: 0x1198, Size: 0x4]
	float OverlapImpulseRate;//[Offset: 0x119c, Size: 0x4]
	float OverlapImpulseRateZ;//[Offset: 0x11a0, Size: 0x4]
	float MaxOverlapImpulse;//[Offset: 0x11a4, Size: 0x4]
	float MinOverlapSpeed;//[Offset: 0x11a8, Size: 0x4]
	float OverlapSimpleCharacterInterval;//[Offset: 0x11ac, Size: 0x4]
	Vector OverrideOverlapSimpleCharBoxExtent;//[Offset: 0x11b0, Size: 0xc]
	float OverlapVehicleDamageRate;//[Offset: 0x11c0, Size: 0x4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0x11c4, Size: 0x4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0x11cc, Size: 0x10]
	float EngineSoundCheckInterval;//[Offset: 0x11dc, Size: 0x4]
	float EngineSoundMinCheckSpeed;//[Offset: 0x11e4, Size: 0x4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0x11e8, Size: 0x10]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f9, Size: 0x1]
	class AttrModifyComponent* AttrModifyCompClass;//[Offset: 0x1200, Size: 0x8]
	class STBuffSystemComponent* BuffSystemCompClass;//[Offset: 0x1208, Size: 0x8]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0x1210, Size: 0x8]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0x1218, Size: 0x8]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x1220, Size: 0x10]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0x1230, Size: 0x10]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0x1240, Size: 0x8]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0x1248, Size: 0x8]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1250, Size: 0x1]
	delegate OnAdvanceAvatarChanged;//[Offset: 0x1258, Size: 0x10]
	bool ForcePlayerUpdateAnimEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1268, Size: 0x1]
	int CandidateAvatarID;//[Offset: 0x126c, Size: 0x4]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1270, Size: 0x1]
	bool bEnableWeakTickComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1278, Size: 0x1]
	float WeakTickDoSomethingDuration;//[Offset: 0x127c, Size: 0x4]
	bool bSpawnedInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1280, Size: 0x1]
	float MaxLinearVelocity;//[Offset: 0x1284, Size: 0x4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1288, Size: 0x1]
	int TeamID;//[Offset: 0x128c, Size: 0x4]
	int CampID;//[Offset: 0x1290, Size: 0x4]
	float VehicleGoStraight;//[Offset: 0x1294, Size: 0x4]
	bool DamageIgnoreWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1298, Size: 0x1]
	STExtraPlayerCharacter* ReqExchangeCharacter;//[Offset: 0x12a0, Size: 0x8]
	float ExchangeVehicleSeatInterval;//[Offset: 0x12a8, Size: 0x4]
	delegate OnHitSpecialEffectDelegate;//[Offset: 0x12b0, Size: 0x10]
	delegate OnControlRotationInit;//[Offset: 0x12c0, Size: 0x10]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0x12d0, Size: 0x8]
	EffectComponent* NewEffectComponent;//[Offset: 0x12d8, Size: 0x8]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e0, Size: 0x1]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e1, Size: 0x1]
	int WeaponReconnectIdx;//[Offset: 0x12e4, Size: 0x4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x12e8, Size: 0x8]
	enum UAVOperateState;//[Offset: 0x12f4, Size: 0x1]
	float SingleMoveRate;//[Offset: 0x12f8, Size: 0x4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0x1300, Size: 0x18]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0x1318, Size: 0x18]
	int CurrentVehicleStatesData;//[Offset: 0x1330, Size: 0x4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0x1348, Size: 0x10]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0x1358, Size: 0x10]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1368, Size: 0x1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0x1370, Size: 0x8]
	float TombBoxTraceLength;//[Offset: 0x1378, Size: 0x4]
	float PlayerOutAngleCosin;//[Offset: 0x137c, Size: 0x4]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1380, Size: 0x1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1381, Size: 0x1]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1382, Size: 0x1]
	float SleepVehicleTolerance;//[Offset: 0x1384, Size: 0x4]
	float StaticFixAngel;//[Offset: 0x1388, Size: 0x4]
	float ClientAwakeVehicleTolerance;//[Offset: 0x138c, Size: 0x4]
	float SleepVehicleTickTime;//[Offset: 0x1390, Size: 0x4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0x1398, Size: 0x4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0x139c, Size: 0x4]
	bool CharacterFollowVehicleViewLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a5, Size: 0x1]
	int CannotEnterTips;//[Offset: 0x13a8, Size: 0x4]
	bool CanLeaveVehicleVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ac, Size: 0x1]
	float LeaveVehicleVelocity;//[Offset: 0x13b0, Size: 0x4]
	int CannotLeaveTips_HighSpeed;//[Offset: 0x13b4, Size: 0x4]
	int CannotDriveTips;//[Offset: 0x13b8, Size: 0x4]
	delegate VehicleBeforeWheelDestroy;//[Offset: 0x13c0, Size: 0x10]
	Vector AttachedRelLoc;//[Offset: 0x13d0, Size: 0xc]
	Actor* AttachedActor;//[Offset: 0x13e0, Size: 0x8]
	int HasAttachedActorTips;//[Offset: 0x13e8, Size: 0x4]
	bool bEnableTickSafeSpawnInternalNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f4, Size: 0x1]
	VehicleAIComponent* VehicleAIComponent;//[Offset: 0x13f8, Size: 0x8]
	float LandTraceMaxHeight;//[Offset: 0x1400, Size: 0x4]
	bool bNeedPlayVehicleEnterMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1404, Size: 0x1]
	FName ChassisBoneName;//[Offset: 0x1408, Size: 0x8]
	Actor*[] VehicleIgnoreActors;//[Offset: 0x1410, Size: 0x10]
	delegate OnVehicleStateChanged;//[Offset: 0x1420, Size: 0x10]
	TrailerRepMovement TrailerMovement;//[Offset: 0x1430, Size: 0x18]
	byte CameraDataType;//[Offset: 0x1450, Size: 0x1]
	bool bBlockForwardInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1451, Size: 0x1]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1452, Size: 0x1]
	float FuelConsumptionModifierBoost;//[Offset: 0x1454, Size: 0x4]
	bool bVehicleSimualetdPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1474, Size: 0x1]
	FName DecalSocketName;//[Offset: 0x1478, Size: 0x8]
	IdeaDecalActor*[] DecalActors;//[Offset: 0x1480, Size: 0x10]
	float Timer_HitEffect;//[Offset: 0x1490, Size: 0x4]
	bool bMinimalTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a0, Size: 0x1]
	bool bRepPhysicsSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a1, Size: 0x1]
	void WeakTick(float DeltaTime);// 0x623c38c
	void VehicleStateChanged__DelegateSignature();// 0x70644c4
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x623c310
	void UpdateHeightToLand();// 0x623c2fc
	void UnregisterComponentWeakTick(VehicleComponent* InComponent);// 0x623c280
	void UnregisterComponentTick(VehicleComponent* InComponent);// 0x623c204
	void TickVehicleHealthState();// 0x623c1e8
	void TickEnableAvatarOutline();// 0x623c1d4
	void StopEngine();// 0x623c1b8
	void StopAutoDriving();// 0x623c1a4
	void StartFireSimple(byte ShootMode);// 0x623c128
	void StartEngine();// 0x623c10c
	void StartAirDrop();// 0x623c0f0
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x623c04c
	void ShowInteractiveButton(bool bShow);// 0x623bfc8
	void ShowBoostingEffect(bool bShow);// 0x70644c4
	bool ShouldUseSpecialHitEffect();// 0x623bf88
	bool ShouldShowVehicleEnterUI();// 0x623bf48
	enum ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x623be30
	void ShakePassengersCameraResponseHitSimpleCharacter();// 0x623be14
	void SetWeaponReconnectIdx(int ReconnectOpIndex);// 0x623bd90
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x623bc8c
	void SetVehicleReplicatedFuelRatio(float InFuel);// 0x623bc10
	void SetVehicleMusicPlayState(bool bEnabled);// 0x70644c4
	void SetUsingHorn(bool bUse);// 0x623bb8c
	void SetUAVOperateState(enum NewState);// 0x623bb10
	void SetSpawnedInReady(bool bFlag);// 0x623ba8c
	void SetSimulatePhysics(bool bSimulate);// 0x623ba00
	void SetRegionBasedNetConsideration(bool bUseRegion);// 0x623b97c
	void SetPhysActive(bool bActive, float Delay);// 0x623b8b4
	void SetJoystickMoveVelocity(Vector2D moveVelocity);// 0x623b83c
	void SetInputControlEnabled(bool bEnable);// 0x623b7bc
	void SetHandBrake(float rate);// 0x623b738
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x623b678
	bool SetBoosting(bool bEnabled);// 0x623b5d8
	void SetAllowDifferentTeam(bool bAllow);// 0x623b558
	void SetAirControlF(float rate);// 0x623b4d4
	void SetAirControlB(float rate);// 0x623b450
	void ServerSetUsingHorn(bool bUse);// 0x623b38c
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x623b2c8
	void ServerSetBoosting(bool bEnalbed);// 0x623b204
	void ServerSetAttachedActor(Actor* InAttachTarget);// 0x623b188
	void ServerSetAirControlF(float rate);// 0x623b0d8
	void ServerSetAirControlB(float rate);// 0x623b028
	void ServerResetToPosition(Vector NewLocation, Rotator NewRotation);// 0x623af68
	void ServerDetachEveryoneFromSeat(bool bMustExit, bool bApplyVehicleVelocity);// 0x623ae98
	void SendVehicleInAirChangedTimeToServer();// 0x623ae38
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x623ad88
	void SendCreateDamage(STExtraSimpleCharacter* Target);// 0x623acd8
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x623acbc
	void SafeSleepVehicle();// 0x623aca8
	void RestartAntiCheat();// 0x623ac94
	void ResetJoystickMove();// 0x623ac80
	void RequestChangeVehicleAvatar();// 0x623ac20
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x623ab14
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x623a9cc
	void RemoveAntiStuckBox();// 0x623a9b8
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x623a93c
	void RegisterComponentWeakTick(VehicleComponent* InComponent);// 0x623a8c0
	void RegisterComponentTick(VehicleComponent* InComponent);// 0x623a844
	void RecordValidTransform();// 0x623a830
	void RecordInAirTime();// 0x623a81c
	void ProcessAvatarOutline();// 0x623a800
	void PrintStats();// 0x623a7e4
	bool PreChangeVehicleFPPAvatar();// 0x623a7ac
	bool PreChangeVehicleBrokenAvatar();// 0x623a774
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x623a6ac
	void PostLoadFPPMesh();// 0x623a690
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x623a614
	bool PawnHasState(enum PawnState);// 0x623a57c
	bool OverlapTest(out const Transform Transform, PrimitiveComponent* PrimComp, out const Transform PrimCompTransform, bool UseOBB);// 0x623a3c4
	void OnUserSwitchWeapon(STExtraBaseCharacter* InUser, byte Slot);// 0x623a304
	void OnUpdateEffects();// 0x70644c4
	void OnStopFire();// 0x70644c4
	void OnSkeletalMeshSleep(PrimitiveComponent* SleepingComponent, FName BoneName);// 0x623a248
	void OnSkeletalMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x623a18c
	void OnSetTailLightValue(float LightValue);// 0x70644c4
	void OnServerReconnectPossess();// 0x623a170
	void OnServerPlayerChangeVehicleSeat(enum LastSeatType, enum NewSeatType);// 0x70644c4
	void OnRep_VehicleSyncFlag();// 0x623a15c
	void OnRep_VehicleSimulatedPhysics();// 0x623a148
	void OnRep_VehicleHealthState();// 0x623a12c
	void OnRep_TrailerMovement();// 0x623a118
	void OnRep_TeamID();// 0x623a0fc
	void OnRep_SimulateViewData();// 0x623a0e8
	void OnRep_SimulateFreeCameraViewData();// 0x623a0d4
	void OnRep_ServerLastReplicatedServer();// 0x623a0c0
	void OnRep_ReplicatedFuelRatio();// 0x623a0ac
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x623a098
	void OnRep_IsForbidNightVehicle();// 0x623a084
	void OnRep_IsEngineStarted();// 0x623a070
	void OnRep_IsBoosting();// 0x623a05c
	void OnRep_IsAirdroppingVehicle();// 0x623a048
	void OnRep_FrozenStatic();// 0x623a034
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x6239fb8
	void OnRep_CandidateAvatar();// 0x70644c4
	void OnRep_CampID();// 0x6239fa4
	void OnRep_AttachedRelLoc();// 0x6239f90
	void OnRep_AttachedActor();// 0x6239f7c
	void OnPlayerReqExitVehicle(STExtraPlayerCharacter* Player);// 0x6239ef8
	void OnPlayerExitVehicle(bool IsDriver, const STExtraPlayerCharacter* Character, bool bSuccess);// 0x70644c4
	void OnPlayerEnterVehicle(bool IsSuccess, enum SeatType);// 0x70644c4
	void OnMeshLoaded(SoftObjectPath AssetRef);// 0x6239dbc
	void OnFireBeginOverlapEvent(Actor* OtherActor);// 0x6239d40
	void OnEngineStop();// 0x70644c4
	void OnEngineStart();// 0x70644c4
	void OnBoostingChanged();// 0x70644c4
	void NotifyServerProjectileBulletImpact(out const ExplosionProjectileHitInfo InExpProjectileInfo, ProjectileBulletBase* Bullet);// 0x6239c58
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x6239b64
	void LoadFPPVehicleModel();// 0x6239b50
	bool IsVehicleWarVehicle();// 0x6239b10
	bool IsVehicleBlockFromExplosion();// 0x6239ad0
	bool IsValidYawInput(float YawInput, VehicleSpringArmComponent* SpringArm);// 0x62399fc
	bool IsUsingFPPModel();// 0x62399c4
	bool IsUnusable();// 0x6239984
	bool IsUCAV();// 0x6239960
	bool IsUAV();// 0x6239938
	bool IsTrailer();// 0x6239900
	bool IsSpawnedInReady();// 0x62398e0
	bool IsSimulatePhysics();// 0x62398a8
	bool IsNotInWater();// 0x6239868
	bool IsMotorbike();// 0x6239830
	bool IsInMidAir();// 0x62397f0
	bool IsInBuffSpeedState();// 0x62397d0
	bool IsHelicopter();// 0x6239798
	bool IsFloatingOnWater();// 0x6239760
	bool IsEntirelyUnderWater();// 0x6239728
	bool IsElectronic_Failure();// 0x62396f0
	bool IsDestroyed();// 0x62396b8
	bool IsClient_WeaponOwner();// 0x6239678
	bool IsCharacterPlayingSeatAnim(STExtraPlayerCharacter* Character);// 0x62395e8
	bool IsBoosting();// 0x62395a8
	bool IsAutoDriving();// 0x6239570
	bool IsArmedVehicle();// 0x6239538
	bool IsAmphibiousVehicle();// 0x6239500
	bool IsAlive();// 0x62394c0
	bool IsAirVehicle();// 0x6239480
	bool IsAirdroppingVehicle();// 0x6239464
	bool IsActiveEffect(FName EffectName);// 0x62393d4
	bool IsAcceptInputControl();// 0x62393b8
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse);// 0x62392a4
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x62391dc
	bool HasTrailer();// 0x62391a4
	bool HasSkillID(int SkillID);// 0x6239114
	bool HasBuffID(int BuffID);// 0x623907c
	bool HasAutoDriveTarget();// 0x6239044
	void HandleVehicleHealthDestroy();// 0x6239028
	void HandlePlayerAttachedToVehcicle(STExtraBaseCharacter* Player);// 0x6238fa4
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x6238f20
	void HandleOnVehicleAvatarDataCopied();// 0x6238f0c
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x6238e10
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x6238c9c
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x6238ba0
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x62389dc
	void HandleMoveAntiShootVerifyMiss();// 0x62389c0
	void HandleMeshPhysicsCreated();// 0x62389ac
	void HandleMeshLodChange(int LODLevel);// 0x6238930
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x62388ac
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x6238828
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x62387ac
	Actor* GetWeaponUserConst();// 0x6238770
	Actor* GetWeaponUser();// 0x6238734
	int GetWeaponReconnectIdx();// 0x62386f8
	WeaponOwnerProxy* GetWeaponOwnerProxy();// 0x62386bc
	uint32 GetWeaponOwnerPlayerKey();// 0x6238680
	float GetWeaponOwnerPawnHealth();// 0x6238644
	WeaponManagerBaseComponent* GetWeaponManagerBase();// 0x6238608
	WeaponManagerComponent* GetWeaponManager();// 0x62385cc
	Rotator GetViewRotation();// 0x623858c
	SkeletalMeshComponent* GetVehicleWheelMesh();// 0x6238558
	VehicleShootWeapon* GetVehicleWeapon(int SeatID, int WeaponListID);// 0x6238494
	VehicleSyncComponent* GetVehicleSync();// 0x6238478
	VehicleSpringArmComponent* GetVehicleSpringArm();// 0x6238444
	int GetVehicleSkinItemID();// 0x6238410
	VehicleSeatComponent* GetVehicleSeats();// 0x62383f4
	float GetVehicleReplicatedFuelRatio();// 0x62383c0
	float GetVehicleOriginToLand();// 0x6238384
	VehicleDamageComponent* GetVehicleDamage();// 0x6238368
	VehicleCommonComponent* GetVehicleCommon();// 0x623834c
	Vector GetVehicleCenter();// 0x623830c
	VehicleAvatarComponent* GetVehicleAvatar();// 0x62382d8
	VehicleAIComponent* GetVehicleAIComponent();// 0x62382bc
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x6238288
	bool GetUsingHorn();// 0x6238250
	VehicleTrailerComponent* GetTrailerComponent();// 0x623821c
	int GetTeamId();// 0x62381e8
	MaterialInstanceDynamic* GetTailLightDIM();// 0x62381b4
	AkComponent* GetSoundComponent();// 0x6238180
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x62380b0
	Vector GetRotationInputDir();// 0x6238070
	float GetReloadAllWeaponTime();// 0x623803c
	Actor*[] GetQueryIgnoreActors();// 0x6237f90
	VehiclePickableComponent* GetPickUpComponent();// 0x6237f5c
	Rotator GetPhysicsBoundsRotation(bool IsOBB);// 0x6237ec4
	Vector GetPhysicsBoundsExtent(bool IsOBB);// 0x6237e2c
	Vector GetPhysicsBoundsCenter(bool IsOBB);// 0x6237d94
	float GetMoveRightRate();// 0x6237d78
	float GetMoveForwardRate();// 0x6237d5c
	SkeletalMeshComponent* GetMesh();// 0x6237d40
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x6237d04
	BattleItemHandleBase* GetItemHandle();// 0x6237ce8
	bool GetIsPhysSleep();// 0x6237ca8
	bool GetIsOpenVertify();// 0x6237c88
	float GetHandBrakeRate();// 0x6237c6c
	Vector GetGunOwnerHeadLocation();// 0x6237c2c
	MaterialInstanceDynamic* GetFrontLightDIM();// 0x6237bf8
	float GetForwardSpeed();// 0x6237bbc
	STExtraPlayerCharacter* GetFirstPassenger();// 0x6237b88
	MaterialInstanceDynamic* GetFFPLightDIM();// 0x6237b54
	SkeletalMeshComponent* GetEquipWeaponAttachMesh();// 0x6237b18
	bool GetEnsure();// 0x6237ad8
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x6237abc
	STExtraPlayerCharacter* GetDriver();// 0x6237a88
	int GetDiedBoxAvatarID();// 0x6237a4c
	uint64 GetCurrentStatesInterface();// 0x6237a10
	void GetCurrentOverlapActors(out STExtraSimpleCharacter*[] Result);// 0x6237958
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x62377d4
	Vector2D GetCharacterViewLimit(STExtraBaseCharacter* Character);// 0x6237748
	class AnimInstance GetCharacterInVehicleAnimBP(int SeatID);// 0x62376bc
	int GetCampId();// 0x6237688
	BuoyancyForceComponent* GetBuoyancyForce();// 0x623766c
	Vector GetBoxExtent();// 0x6237634
	int GetAvatarId();// 0x6237600
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x6237548
	void GetAllSkeletalMeshList(out SkeletalMeshComponent*[] OutList);// 0x6237490
	void ExitFPPVehicle();// 0x623747c
	void EnterFPPVehicle();// 0x6237460
	void EnablePlayMusic(bool InEnable);// 0x62373e0
	void EnableAvatarOutline(enum OutlineType);// 0x6237364
	void DestroyAndRespawnSelf();// 0x6237350
	void DeactiveEffect(FName EffectName);// 0x62372d4
	void CreateAntiStuckBox();// 0x62372c0
	void CorrectControlRotation(Rotator NewRotation);// 0x623723c
	bool ComponentTickRegistered(const VehicleComponent* InComponent);// 0x62371ac
	void ClientPlayVehicleCameraShake();// 0x623714c
	void ClientFeedbackPointDamage(Actor* DamageCauser, float Damage);// 0x623705c
	void ClearInputs();// 0x6237040
	void ClearDecals();// 0x623702c
	void ClearBuff();// 0x6237010
	void ClearAllInputState();// 0x6236ff4
	void ClearAllComponentWeakTick();// 0x6236fe0
	void ClearAllComponentTick();// 0x6236fcc
	bool CheckHaveSpecialAttachActor();// 0x6236f8c
	void CheckEnableAvatarOutline();// 0x70644c4
	bool CheckAllWeaponIsReadyForFire();// 0x6236f54
	void ChangeVehicleAvatar(STExtraPlayerController* MainPlayerController);// 0x6236ed0
	void ChangeAssetBy(BackpackVehicleAvatarHandle* InAvatarHandle);// 0x6236e54
	bool CanVehicleJump();// 0x6236e1c
	bool CanVehicleBePickup();// 0x6236de4
	bool CanPushUpCharacterWhenPenetrating();// 0x6236dc8
	bool CanLeaveVehicle();// 0x6236d88
	bool CanDrive(STExtraPlayerCharacter* Character);// 0x6236cf0
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x6236c58
	bool CanAutoDrivingNoDriver();// 0x6236c20
	bool CanAutoDriving();// 0x6236be8
	void CalcPhysicsBounds(out Vector OutLocation, out Rotator OutRotation, out const Transform NewVehicleTM, bool IsOBB);// 0x6236a54
	void BroadCastEnterVehicleEvent(bool IsSucc, enum SeatType);// 0x623698c
	void BroadcastClientVehicleExplosionEffect();// 0x6236970
	void BPPostLoadFPPMesh();// 0x70644c4
	void BPPlayOverlapDamageCameraShake();// 0x70644c4
	void BPOnSetAttachedActor(Actor* InAttachTarget);// 0x62368ec
	bool BPCanCharacterEnter(STExtraPlayerCharacter* InCharacter, enum SeatType);// 0x6236818
	void AutoLoadEffect();// 0x6236804
	void ApplyVehicleImpulse(out const Vector ApplyImpulse, bool bVelocityChange);// 0x6236724
	bool ApplyAnimation();// 0x62366ec
	void AfterBeginPlay();// 0x70644c4
	void AddHealthSafety(float AddVal);// 0x6236668
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer, int Level);// 0x6236520
	int AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID, int Level);// 0x62363a0
	void ActiveEffectAsync(FName EffectName);// 0x6236324
	void ActiveEffect(FName EffectName);// 0x62362a8
<----------Generated by SSpawner v1.0.4---------->


Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 0x4]
	int TypeSpecificID;//[Offset: 0x4, Size: 0x4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	uint64 InstanceID;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0, Size: 0x28]
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	Vector Scale;//[Offset: 0x40, Size: 0xc]
	FName AttachSocketName;//[Offset: 0x50, Size: 0x8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int ValidDeviceLevel;//[Offset: 0x5c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: RepMovementKeyLoc
	enum LocationQuantizationLevel;//[Offset: 0x1c, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x1d, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleSeatComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	float VaildExitVehicleHeight;//[Offset: 0x1d4, Size: 0x4]
	STExtraVehicleSeat[] Seats;//[Offset: 0x1d8, Size: 0x10]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0x1e8, Size: 0x10]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0x1f8, Size: 0x10]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0x208, Size: 0x10]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0x218, Size: 0x10]
	delegate OnSeatOccupiersChanged;//[Offset: 0x228, Size: 0x10]
	delegate OnSeatSocketChanged;//[Offset: 0x238, Size: 0x10]
	delegate OnVehicleWeaponRep;//[Offset: 0x248, Size: 0x10]
	delegate OnClientDriverChange;//[Offset: 0x258, Size: 0x10]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x268, Size: 0x10]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x278, Size: 0x10]
	float LeaveVehicleVelocityScale;//[Offset: 0x288, Size: 0x4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	bool bCheckLeaveLocationSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 0x1]
	float LeaveLocationSpaceInflation;//[Offset: 0x290, Size: 0x4]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	bool bHidenCharacterOnSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 0x1]
	bool bCanChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296, Size: 0x1]
	enum[] SeatGUITypes;//[Offset: 0x2a0, Size: 0x10]
	delegate OnPlayEnterVehicleAnim;//[Offset: 0x2b0, Size: 0x10]
	delegate OnPlayExitVehicleAnim;//[Offset: 0x2c0, Size: 0x10]
	delegate OnSeatAttached;//[Offset: 0x2d0, Size: 0x10]
	delegate OnSeatDetachedBefore;//[Offset: 0x2e0, Size: 0x10]
	delegate OnSeatDetached;//[Offset: 0x2f0, Size: 0x10]
	delegate OnSeatChanged;//[Offset: 0x300, Size: 0x10]
	delegate OnUpdateSeatGUI;//[Offset: 0x310, Size: 0x10]
	FString LatestDriverPlayerName;//[Offset: 0x320, Size: 0x10]
	delegate OnDriverChange;//[Offset: 0x330, Size: 0x10]
	FString LatestDriverPlayerUID;//[Offset: 0x340, Size: 0x10]
	int MaxInUseSeatGUIIndex;//[Offset: 0x354, Size: 0x4]
	STExtraPlayerController* RemoteController;//[Offset: 0x360, Size: 0x8]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x370, Size: 0x8]
	delegate BeginEnterVehicleEvent;//[Offset: 0x378, Size: 0x10]
	delegate EndEnterVehicleEvent;//[Offset: 0x388, Size: 0x10]
	delegate BeginExitVehicleEvent;//[Offset: 0x398, Size: 0x10]
	delegate EndExitVehicleEvent;//[Offset: 0x3a8, Size: 0x10]
	bool bShowSeatUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	bool bLeaveFailedTipsNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 0x1]
	void VehicleWeaponRepDelegate__DelegateSignature();// 0x70644c4
	void TestReleaseSeatAnim();// 0x631e67c
	void SeatOccupiersChangedDelegate__DelegateSignature();// 0x70644c4
	void ReAttachAllCharacters();// 0x631e668
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x631e5b4
	void OnSeatSocketChanged__DelegateSignature();// 0x70644c4
	void OnRep_VehicleWeapons();// 0x631e5a0
	void OnRep_Occupiers(out const STExtraPlayerCharacter*[] LastOccupiers);// 0x631e4e8
	void OnRep_Attachments();// 0x631e4d4
	void OnDeleyReleaseWeapon(STExtraPlayerCharacter* Character, int SeatIdx);// 0x631e41c
	bool IsSeatIndexAvailable(int SeatIndex);// 0x631e38c
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x631e2fc
	bool IsSeatAvailable(enum SeatType);// 0x631e26c
	bool IsDriver(STExtraBaseCharacter* InCharacter);// 0x631e1dc
	bool IsCharacterControlWeapon(STExtraPlayerCharacter* InCharacter);// 0x631e14c
	bool HasCharacter(const STExtraBaseCharacter* Character);// 0x631e0bc
	int GetSeatNum();// 0x631e0a0
	bool GetPlayerSeatInfo(STExtraPlayerCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x631df04
	STExtraBaseCharacter* GetPassenger(int SeatIndex);// 0x631de78
	int GetInUseSeatNum();// 0x631de44
	STExtraBaseCharacter* GetFirstSeatCharacterBySeatType(enum SeatType);// 0x631ddb8
	STExtraPlayerCharacter* GetFirstPassenger();// 0x631dd84
	int GetDriverSeatIndex();// 0x631dd50
	STExtraPlayerCharacter* GetDriver();// 0x631dd1c
	int GetChracterSeatIndex(STExtraBaseCharacter* Character);// 0x631dc90
	int GetAvailableSeatIndex(enum SeatType);// 0x631dc04
	void EndExitVehicle__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, bool Success);// 0x70644c4
	void EndEnterVehicle__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, bool Success);// 0x70644c4
	void DetachEveryoneSafely();// 0x631dbf0
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x631db08
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x631da48
	void ClientDriverChangeDelegate__DelegateSignature(STExtraBaseCharacter* LastDriver, STExtraBaseCharacter* NewDriver);// 0x70644c4
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int NewIndex);// 0x631d920
	void ChangeCharacterSeatSocket(out const FName[] InSeatSockets);// 0x631d868
	bool CanChangeSeat(const STExtraBaseCharacter* InCharacter, int NewSeatIndex, out int FailedTips);// 0x631d770
	void BeginExitVehicle__DelegateSignature(STExtraPlayerCharacter* Character);// 0x70644c4
	void BeginEnterVehicle__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleComponent.LuaActorComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: LuaActorComponent.ActorComponent.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x170, Size: 0x50]
	FString LuaFilePath;//[Offset: 0x1c0, Size: 0x10]
	void UnRegistLuaTick();// 0xa02a584
	void RegistLuaTick(float TickInterval);// 0xa02a508
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0, Size: 0x1]
	FName AnimCompTagName;//[Offset: 0x8, Size: 0x8]
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 0x8]
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 0x8]
	bool bHasUpPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bHasDownPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	byte OccupyMovementMode;//[Offset: 0x22, Size: 0x1]
	enum HoldWeaponType;//[Offset: 0x23, Size: 0x1]
	enum SeatSpecialType;//[Offset: 0x24, Size: 0x1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool NarrowSeatNeedUseCommomAimAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	int GUIDisplayIndex;//[Offset: 0x28, Size: 0x4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x30, Size: 0x8]
	Vector2D ViewPitchLimit;//[Offset: 0x38, Size: 0x8]
	Rotator CharRotVsVehiRot;//[Offset: 0x40, Size: 0xc]
	enum SeatSideType;//[Offset: 0x4c, Size: 0x1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 0x1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x50, Size: 0x10]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x68, Size: 0x8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float Radius;//[Offset: 0x74, Size: 0x4]
	float HalfHeight;//[Offset: 0x78, Size: 0x4]
	Transform CollisionOffset;//[Offset: 0x80, Size: 0x30]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float OnSeatCameraSpringArmLength;//[Offset: 0xb4, Size: 0x4]
	Vector2D CharacterPitchLimit;//[Offset: 0xb8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 0x8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 0x8]
	Vector2D ViewYawLimit;//[Offset: 0x10, Size: 0x8]
	Vector2D ViewPitchLimit;//[Offset: 0x18, Size: 0x8]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float MuzzleDirTor;//[Offset: 0x24, Size: 0x4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float MuzzleVehicleTore;//[Offset: 0x2c, Size: 0x4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	Box MuzzleRangeBox;//[Offset: 0x34, Size: 0x1c]
	float DistTorSquared;//[Offset: 0x50, Size: 0x4]
	bool UseByDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	int VehicleWeaponParentIndex;//[Offset: 0x58, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
	delegate OnVehWeaponUseStateChange;//[Offset: 0x13a0, Size: 0x10]
	float RotateSpeedOnVehicle;//[Offset: 0x13b0, Size: 0x4]
	bool bDoWeaponYawOnComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b4, Size: 0x1]
	bool bDoWeaponRotationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b5, Size: 0x1]
	float WeaponRotationLagYawThreshold;//[Offset: 0x13b8, Size: 0x4]
	float WeaponRotationLagPitchThreshold;//[Offset: 0x13bc, Size: 0x4]
	bool bUseWeaponRotationLagSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c0, Size: 0x1]
	bool bEquipOnDriversSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c1, Size: 0x1]
	float WeaponRotationLagMaxTimeStep;//[Offset: 0x13c4, Size: 0x4]
	float WeaponRotationLagSpeed;//[Offset: 0x13c8, Size: 0x4]
	float WeaponRotationScopingScale;//[Offset: 0x13cc, Size: 0x4]
	float WeaponRotationYawScopingScale;//[Offset: 0x13d0, Size: 0x4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d4, Size: 0x1]
	bool bWeaponStateNotifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d5, Size: 0x1]
	byte FireMode;//[Offset: 0x13d6, Size: 0x1]
	enum CameraSpace;//[Offset: 0x13d7, Size: 0x1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d8, Size: 0x1]
	bool bUseOwnerActorView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d9, Size: 0x1]
	bool bIgnorePawnControlView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13da, Size: 0x1]
	bool bDebugCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13db, Size: 0x1]
	FName CameraParentComponentTag;//[Offset: 0x13e0, Size: 0x8]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e8, Size: 0x1]
	FName VehWeaponBindSocket;//[Offset: 0x13f0, Size: 0x8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0x13f8, Size: 0x2c]
	bool bUseAnimRotationLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1424, Size: 0x1]
	float AnimRotationLimitOffset;//[Offset: 0x1428, Size: 0x4]
	CameraOffsetData OwnerActorViewCameraData;//[Offset: 0x142c, Size: 0x2c]
	Vector2D PitchRange;//[Offset: 0x1458, Size: 0x8]
	Vector2D YawRange;//[Offset: 0x1460, Size: 0x8]
	bool bUseSeatLimitCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1468, Size: 0x1]
	bool bShowCrosshairUsedByDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1469, Size: 0x1]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146a, Size: 0x1]
	FName OnBlockMuzzleSocket;//[Offset: 0x1470, Size: 0x8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0x1478, Size: 0x8]
	AnimSequence* VehicleWeaponReload;//[Offset: 0x1480, Size: 0x8]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0x1488, Size: 0x8]
	float VehicleWeaponReloadRate;//[Offset: 0x1490, Size: 0x4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0x1498, Size: 0x8]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a0, Size: 0x1]
	FName VehicleWeaponGripSocketR;//[Offset: 0x14a8, Size: 0x8]
	FName VehicleWeaponGripSocketL;//[Offset: 0x14b0, Size: 0x8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b8, Size: 0x1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b9, Size: 0x1]
	bool bVehicleWeaponUseParentRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ba, Size: 0x1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14bb, Size: 0x1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14bc, Size: 0x1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14bd, Size: 0x1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14cc, Size: 0x1]
	bool bSyncVehicleSimulateBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14cd, Size: 0x1]
	bool bEnableSyncShootInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ce, Size: 0x1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14cf, Size: 0x1]
	bool bEnableMoveCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d0, Size: 0x1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d1, Size: 0x1]
	float UnEquipTime;//[Offset: 0x14d4, Size: 0x4]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14da, Size: 0x1]
	FName CharacterSocket;//[Offset: 0x14e0, Size: 0x8]
	float TimeDelayAttachCharacter;//[Offset: 0x14e8, Size: 0x4]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ec, Size: 0x1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ed, Size: 0x1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ee, Size: 0x1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ef, Size: 0x1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f0, Size: 0x1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f1, Size: 0x1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0x14f8, Size: 0x8]
	FName GrenadePredictLineSocket;//[Offset: 0x1500, Size: 0x8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0x1508, Size: 0x8]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1510, Size: 0x1]
	float FuelConsumptionRate;//[Offset: 0x1514, Size: 0x4]
	Rotator MuzzleShootDirection;//[Offset: 0x151c, Size: 0xc]
	float LastUseTimeStamp;//[Offset: 0x1528, Size: 0x4]
	Vector MuzzleShootTarget;//[Offset: 0x152c, Size: 0xc]
	Vector2D MuzzleShootTargetOnScreenLoc;//[Offset: 0x1538, Size: 0x8]
	Vector4 Limit;//[Offset: 0x1540, Size: 0x10]
	Vector2D UIOffset;//[Offset: 0x1550, Size: 0x8]
	float StartReloadDelayTime;//[Offset: 0x1568, Size: 0x4]
	float EndReloadDelayTime;//[Offset: 0x1578, Size: 0x4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0x1580, Size: 0x8]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1588, Size: 0x1]
	Actor* OwnerActor;//[Offset: 0x1590, Size: 0x8]
	WeaponSyncData VehicleWeaponSyncData;//[Offset: 0x1598, Size: 0x8]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x15a0, Size: 0x8]
	WeaponOverHeatingComponent* WeaponOverHeatingComp;//[Offset: 0x15c8, Size: 0x8]
	int BulletTypeTipMsgID;//[Offset: 0x15d0, Size: 0x4]
	int NotEnoughEnergyTipMsgID;//[Offset: 0x15d4, Size: 0x4]
	int CantUseFireWeaponTipMsgID;//[Offset: 0x15d8, Size: 0x4]
	void StartReloadAnim();// 0x6320014
	void SetVehWeaponTickEnabled(bool bEnabled);// 0x631ff90
	void SetVehicleWeaponSkin(MaterialInterface* InMaterial);// 0x631ff14
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x631fe08
	void SetCameraSpace(enum InCameraSpace);// 0x631fd8c
	void OnVehicleExplode();// 0x631fd70
	void OnRep_VehicleWeaponSyncData();// 0x631fd5c
	void OnRep_OwnerActorBP();// 0x70644c4
	void OnRep_OwnerActor();// 0x631fd48
	void OnClientVehWeaponUseStateChange__DelegateSignature(STExtraPlayerCharacter* uCharacter, bool bUse);// 0x70644c4
	void NetMulticastReturnBullets();// 0x631fce8
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x631fba4
	void K2_SetSpecialMeshHide(bool isHide);// 0x70644c4
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x70644c4
	void K2_OnReturnBullets();// 0x70644c4
	MeshComponent* K2_GetWeaponMeshComp();// 0x70644c4
	void HnadleScopeInAfterReload();// 0x631fb90
	void HandleWeaponStateChanged(byte LastState, byte NewState);// 0x631fad8
	void HandleWeaponStartReload();// 0x631fac4
	void HandleWeaponEndReload();// 0x631fab0
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x631fa2c
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x631f9a4
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x631f970
	STExtraVehicleBase* GetOwnerVehicle();// 0x631f93c
	Rotator GetOwnerCameraRotator();// 0x631f904
	Vector2D GetMuzzleShootTargetOnScreen();// 0x631f8d0
	Transform GetCharacterSocketTransform();// 0x631f87c
	void DoVehicleWeaponEquipActionBP(bool bEquip);// 0x70644c4
	void DoUsedOrNotBP(STExtraPlayerCharacter* Character, bool bUsed);// 0x70644c4
	void DoAutoReloadVehicleWeapon(STExtraShootWeapon* ShootWeapon);// 0x631f800
	bool CheckIsAutonomousOrObTarget();// 0x631f7c8
	void ChangeScopingRotateSpeed(bool IsScoping);// 0x631f744
	void AfterReloadEnd();// 0x631f730
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba8, Size: 0x1]
	bool bUseAdjusetImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba9, Size: 0x1]
	float voiceCheckCD;//[Offset: 0xbac, Size: 0x4]
	float voiceCheckShowCD;//[Offset: 0xbb0, Size: 0x4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb4, Size: 0x1]
	byte[] CanAutoTryingToFireStateList;//[Offset: 0xbb8, Size: 0x10]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0xbe0, Size: 0x40]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20, Size: 0x1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc21, Size: 0x1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0xc28, Size: 0x10]
	delegate OnCurBulletChange;//[Offset: 0xc38, Size: 0x10]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0xc48, Size: 0x10]
	delegate OnStartFireDelegate;//[Offset: 0xc58, Size: 0x10]
	delegate OnStopFireDelegate;//[Offset: 0xc68, Size: 0x10]
	delegate OnWeaponShootDelegate;//[Offset: 0xc78, Size: 0x10]
	delegate OnServerWeaponShootDelegate;//[Offset: 0xc88, Size: 0x10]
	delegate OnWeaponShootHitDelegate;//[Offset: 0xc98, Size: 0x10]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xca8, Size: 0x10]
	delegate OnWeaponReloadReplayDelegate;//[Offset: 0xcb8, Size: 0x10]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xcc8, Size: 0x10]
	delegate OnWeaponEquipDelegate;//[Offset: 0xcd8, Size: 0x10]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0xce8, Size: 0x10]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0xcf8, Size: 0x10]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0xd08, Size: 0x10]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0xd18, Size: 0x10]
	delegate OnReloadScuccessDelegate;//[Offset: 0xd28, Size: 0x10]
	delegate OnBulletNumChangeDelegate;//[Offset: 0xd38, Size: 0x10]
	delegate OnShootIntervalModeChangeDelegate;//[Offset: 0xd48, Size: 0x10]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0xd68, Size: 0x10]
	delegate OnWeaponDurabilityChangedDelegate;//[Offset: 0xd78, Size: 0x10]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0xd88, Size: 0x10]
	delegate OnShootWeaponAutoDrop;//[Offset: 0xd98, Size: 0x10]
	delegate OnWeaponDropStart;//[Offset: 0xda8, Size: 0x10]
	delegate OnWeaponDropFinished;//[Offset: 0xdb8, Size: 0x10]
	delegate OnBulletLaunch;//[Offset: 0xdc8, Size: 0x10]
	delegate OnBulletImpact;//[Offset: 0xdd8, Size: 0x10]
	delegate OnBulletImpactFX;//[Offset: 0xde8, Size: 0x10]
	delegate OnSpawnBulletImpactFX;//[Offset: 0xdf8, Size: 0x10]
	delegate OnChangeShootType;//[Offset: 0xe08, Size: 0x10]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0xe18, Size: 0x8]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0xe20, Size: 0x8]
	BulletTrackComponent* CachedBulletTrackComponent;//[Offset: 0xe28, Size: 0x8]
	delegate OnScopeIn;//[Offset: 0xe30, Size: 0x10]
	delegate OnScopeOut;//[Offset: 0xe40, Size: 0x10]
	delegate OnScopeInContinue;//[Offset: 0xe50, Size: 0x10]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0xe60, Size: 0x8]
	MultiBulletComponent* MultiBulletComponent;//[Offset: 0xe68, Size: 0x8]
	GrenadeLaunchComponent* GrenadeLaunchComponent;//[Offset: 0xe70, Size: 0x8]
	EnergyAccumulateShootComponent* EnergyAccumulateShootComponent;//[Offset: 0xe78, Size: 0x8]
	FillGasComponent* FillGasComponent;//[Offset: 0xe80, Size: 0x8]
	int CurBulletNumInClip;//[Offset: 0xe88, Size: 0x4]
	BulletInClip CurBulletInClip;//[Offset: 0xe90, Size: 0x18]
	int CurMaxBulletNumInOneClip;//[Offset: 0xea8, Size: 0x4]
	int CurBulletNumInBarrel;//[Offset: 0xeac, Size: 0x4]
	int DynamicReloadType;//[Offset: 0xeb0, Size: 0x4]
	byte ShootMode;//[Offset: 0xeb4, Size: 0x1]
	byte CurShootType;//[Offset: 0xeb5, Size: 0x1]
	byte LastShootType;//[Offset: 0xeb6, Size: 0x1]
	int CurShootTotalType;//[Offset: 0xeb8, Size: 0x4]
	byte SpecialFixShootType;//[Offset: 0xebc, Size: 0x1]
	float voiceCheckDis;//[Offset: 0xec0, Size: 0x4]
	float SilenceVoiceCheckDis;//[Offset: 0xec4, Size: 0x4]
	float nowVoiceCheckDis;//[Offset: 0xec8, Size: 0x4]
	Vector ShootTargetLoc;//[Offset: 0xecc, Size: 0xc]
	int AngledSightID;//[Offset: 0xee4, Size: 0x4]
	byte TraceChannel;//[Offset: 0xee8, Size: 0x1]
	Vector LastImpactEffectLocation;//[Offset: 0xeec, Size: 0xc]
	float LastImpactEffectTime;//[Offset: 0xef8, Size: 0x4]
	int CurBurstShootIndex;//[Offset: 0xf00, Size: 0x4]
	Transform BoltActionTransform;//[Offset: 0xf10, Size: 0x30]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf40, Size: 0x1]
	int ClientShootTimes;//[Offset: 0xf44, Size: 0x4]
	AkAudioEvent* BulletFlySound;//[Offset: 0xf48, Size: 0x8]
	AkAudioEvent* LoadBulletSound;//[Offset: 0xf50, Size: 0x8]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xf58, Size: 0x8]
	AkAudioEvent* MagazineINSound;//[Offset: 0xf60, Size: 0x8]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xf68, Size: 0x8]
	AkAudioEvent* PullBoltSound;//[Offset: 0xf70, Size: 0x8]
	Vector BulletDecalScale;//[Offset: 0xf78, Size: 0xc]
	BulletInClip CurBulletInClipOnSimulatedClients;//[Offset: 0xf88, Size: 0x18]
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa1, Size: 0x1]
	float DropDuration;//[Offset: 0xfa4, Size: 0x4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xfa8, Size: 0x8]
	float AIShootLoudness;//[Offset: 0xfb0, Size: 0x4]
	float AIShootStartAttenuationDis;//[Offset: 0xfb4, Size: 0x4]
	float AIShootMaxDis;//[Offset: 0xfb8, Size: 0x4]
	float AISilenceShootLoudness;//[Offset: 0xfbc, Size: 0x4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0xfc0, Size: 0x4]
	float AISilenceShootMaxDis;//[Offset: 0xfc4, Size: 0x4]
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc8, Size: 0x1]
	FireWeaponState* _FireWeaponState;//[Offset: 0xfd0, Size: 0x8]
	byte CurShootWeaponState;//[Offset: 0xfd9, Size: 0x1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0xfe8, Size: 0x8]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0xff0, Size: 0x8]
	int md_MaxBulletArraySize;//[Offset: 0xff8, Size: 0x4]
	enum CurShootIntervalMode;//[Offset: 0xffc, Size: 0x1]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xffd, Size: 0x1]
	bool IsEquipACCore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xffe, Size: 0x1]
	bool IsEquipBezel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfff, Size: 0x1]
	bool IsTacticalAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1000, Size: 0x1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1001, Size: 0x1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1002, Size: 0x1]
	Vector OffsetFPPLocation;//[Offset: 0x1004, Size: 0xc]
	Rotator OffsetFPPRotation;//[Offset: 0x1010, Size: 0xc]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x101c, Size: 0xc]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x1028, Size: 0xc]
	Vector OffsetFPPProneLocation;//[Offset: 0x1034, Size: 0xc]
	Rotator OffsetFPPProneRotation;//[Offset: 0x1040, Size: 0xc]
	Rotator OffsetFPPScopeRotation;//[Offset: 0x104c, Size: 0xc]
	Vector OffsetAngledFPPLocation;//[Offset: 0x1058, Size: 0xc]
	Rotator OffsetAngledFPPRotation;//[Offset: 0x1064, Size: 0xc]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0x1070, Size: 0xc]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0x107c, Size: 0xc]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0x1088, Size: 0xc]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0x1094, Size: 0xc]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0x10a0, Size: 0xc]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ac, Size: 0x1]
	bool bBezelUnFold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ad, Size: 0x1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0x10b8, Size: 0x10]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0x10c8, Size: 0x8]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0x10d0, Size: 0x10]
	int[] AttachedAttachmentID;//[Offset: 0x10e0, Size: 0x10]
	<int64,int> AttachedAttachmentInstanceID;//[Offset: 0x10f0, Size: 0x50]
	int[] DefaultAttachedAttachmentID;//[Offset: 0x1140, Size: 0x10]
	uint32 ShootID;//[Offset: 0x1150, Size: 0x4]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0x1158, Size: 0x8]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0x1160, Size: 0x10]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1174, Size: 0x1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1175, Size: 0x1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1220, Size: 0x1]
	bool bUnlimitBulletWhenStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1278, Size: 0x1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1280, Size: 0x1]
	bool bPostFireReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1281, Size: 0x1]
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1282, Size: 0x1]
	delegate OnSetRearSightIndexDelegate;//[Offset: 0x1288, Size: 0x10]
	float WeaponDurability;//[Offset: 0x1298, Size: 0x4]
	int8 CurRearSightIndex;//[Offset: 0x129c, Size: 0x1]
	bool bEquipmentModifierOnlyRepOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a4, Size: 0x1]
	int UpgradeInfoID;//[Offset: 0x12a8, Size: 0x4]
	uint32[] UpgradeBModifyIdArray;//[Offset: 0x12b0, Size: 0x10]
	bool bUseNewUploadData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c0, Size: 0x1]
	bool bUseHitDataFlowOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c1, Size: 0x1]
	ReplayStartFireInfo ReplayStartFireInfo;//[Offset: 0x12c4, Size: 0x2c]
	BulletHitInfoUploadDataInReplay[] RepRelpayHitDataArray;//[Offset: 0x1348, Size: 0x10]
	NextFireMinShootDataInReplay[] NextFireMinShootData;//[Offset: 0x1358, Size: 0x10]
	NextFireMinShootDataInReplay[] RepNextFireMinShootData;//[Offset: 0x1368, Size: 0x10]
	SACData[] SACDataArray;//[Offset: 0x1390, Size: 0x10]
	void WeaponPartsRender(int WeaponSlotID);// 0x6209b6c
	bool VerifyCostOneBullet();// 0x6209b2c
	void UpdateComponentTick();// 0x6209b18
	void TimerNetMulticastShootBug();// 0x6209b04
	void SuccessReload();// 0x6209ae8
	bool StopFireFilter();// 0x6209aa8
	void StopFire(byte ToState);// 0x6209a24
	void StopFillGas();// 0x6209a10
	int StartReload();// 0x62099d4
	bool StartFireFilter();// 0x6209994
	void StartFire();// 0x6209978
	void StartFillGas();// 0x6209964
	void StartDoPreBarrel(float HandledTime);// 0x62098e0
	void StartDoBarrel();// 0x62098c4
	void ShowDefaultScope(bool bShow);// 0x6209840
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x6209780
	void ShootIDIsNotValid();// 0x6209764
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable, bool ClientSimulate);// 0x6209628
	void SetUpgradeInfoID(int ID);// 0x62095ac
	void SetSpecialFixShootTypeOnServer(byte InSpecialFixShootType);// 0x6209530
	void SetReloadWithNoCostFromEntity(bool bReloadWithNoCost);// 0x62094ac
	void SetReloadTypeOnServer(byte ReloadType);// 0x6209430
	void SetRearSightIndex(int Index);// 0x62093b4
	void SetLastFireTime(float Time);// 0x6209338
	void SetCurShootType(byte ShootType);// 0x62092bc
	void SetCurrentBulletNumInClipOnServer(BulletInClip InBulletInClip);// 0x620917c
	void SetCurrentBulletNumInClipOnClient(BulletInClip InBulletInClip);// 0x620903c
	void SetCurReloadMethod(byte method);// 0x6208fc0
	void SetBulletInClip(out BulletInWeapon[] InCurBulletList, int Count);// 0x6208ebc
	void SetBaseImpactDamageEntity(float Damage);// 0x6208e40
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x6208d3c
	bool ScopeOut();// 0x6208cfc
	void ScopeInContinue();// 0x6208ce8
	bool ScopeIn();// 0x6208ca8
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x6208c24
	void RPC_ServerStopReload(int InterruptState);// 0x6208b74
	void RPC_ServerSetMaxBulletNum();// 0x6208b14
	void RPC_ServerSetBaseImpactDamageEntity(float Damage);// 0x6208a64
	void RPC_Server_SetRearSightIndex(int Index);// 0x62089b4
	void RPC_ClientSetCurShootType(byte ShootType);// 0x6208904
	void RPC_ClientSetCurReloadMethod(byte method);// 0x6208854
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainReloadTimes);// 0x62087d0
	void RPC_ClientChangeFreshWeaponState_WithParams(byte State, byte Parameter);// 0x62086e0
	void RPC_Client_SetBulletNumInClip(BulletInClip InBulletInClip);// 0x62084d8
	void RPC_Client_DebugShootOtherBlock(Actor* BlockAct, PrimitiveComponent* BlockComp, Vector BlockActWorldVec, Vector BlockCompWorldVec);// 0x6208360
	void RotateCrossHair(Rotator Rot);// 0x62082e4
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x6208260
	void ResetCurBulletNumInBarrel();// 0x620824c
	void ReSetBulletInClip(BulletInClip NewBulletInClip);// 0x620810c
	void RemoveGrenadeLaunchBullet(int RemoveNum);// 0x6208090
	void RemoveBulletInClip(int RemoveNum, bool IsRevert);// 0x6207fc8
	void RefreshCurClip();// 0x6207fb4
	void RefreshBulletInClip(int Count);// 0x6207f38
	void ReduceWeaponDurability(float ReduceAmount);// 0x6207ebc
	void PushSACData(out const SACData SACData);// 0x6207dfc
	void PreSetBulletListInClip(BulletInClip NewBulletInClip);// 0x6207cbc
	byte PopNextSpecialBulletID();// 0x6207c80
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x70644c4
	void OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x70644c4
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x70644c4
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x70644c4
	void OnWeaponShootDelegate__DelegateSignature();// 0x70644c4
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x70644c4
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x70644c4
	void OnWeaponReloadReplayDelegate__DelegateSignature();// 0x70644c4
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x70644c4
	void OnWeaponEquipDelegate__DelegateSignature();// 0x70644c4
	void OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x70644c4
	void OnWeaponDurabilityChangeDelegate__DelegateSignature();// 0x70644c4
	void OnStopFireDelegate__DelegateSignature();// 0x70644c4
	void OnStartFireDelegate__DelegateSignature();// 0x70644c4
	void OnSpawnBulletImpactFX__DelegateSignature(out const BulletHitInfoUploadData ImpactResult, STEShootWeaponBulletImpactEffect* ImpactEffect);// 0x70644c4
	void OnShootWeaponDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x70644c4
	void OnShootWeaponAutoReloadDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x70644c4
	void OnShootWeaponAutoDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x70644c4
	void OnShootIntervalModeChangeDelegate__DelegateSignature();// 0x70644c4
	void OnSetRearSightIndexDelegate__DelegateSignature(int PrevIndex, int PostIndex);// 0x70644c4
	void OnScopeInContinue__DelegateSignature();// 0x70644c4
	void OnRep_WeaponDurability();// 0x6207c6c
	void OnRep_UpgradeInfoID();// 0x6207c58
	void OnRep_SpecialFixShootType(byte OldSpecialFixShootType);// 0x6207bdc
	void OnRep_SimulateHitDataArray();// 0x6207bc8
	void OnRep_RelpayNextFireMinShootData();// 0x6207bb4
	void OnRep_RelpayHitDataArray();// 0x6207ba0
	void OnRep_IsEquipBezel();// 0x6207b8c
	void OnRep_IsEquipACCore();// 0x6207b78
	void OnRep_DynamicReloadType(int OldVal);// 0x6207afc
	void OnRep_CurRearSightIndex(int8 PrevIndex);// 0x6207a80
	void OnRep_CurMaxBulletNumChange();// 0x6207a6c
	void OnRep_CurCurShootIntervalMode();// 0x6207a58
	void OnRep_CurBulletInClipOnSimulatedClients();// 0x6207a44
	void OnReloadScuccess__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x70644c4
	void OnMaxBulletChange__DelegateSignature();// 0x70644c4
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0x70644c4
	void OnCurBulletChange__DelegateSignature();// 0x70644c4
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x70644c4
	void OnChangeShootType__DelegateSignature(STExtraShootWeapon* ShootWeapon, byte ShootType);// 0x70644c4
	void OnBulletNumChangeDelegate__DelegateSignature();// 0x70644c4
	void OnBulletLaunch__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0x70644c4
	void OnBulletImpactFX__DelegateSignature(out const BulletHitInfoUploadData ImpactResult, STEShootWeaponBulletImpactEffect* ImpactEffect);// 0x70644c4
	void OnBulletImpact__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, out const HitResult HitRet);// 0x70644c4
	void NotifyServerNoneShootAction();// 0x62079e4
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainReloadTimes);// 0x6207968
	void NotifyClientNoneShootAction();// 0x6207908
	void LocalSetBulletNumInClip(BulletInClip InBulletInClip);// 0x62077c8
	bool IsWeaponDurabilityLoss();// 0x6207790
	bool IsWeaponAttachmentFullEquiped();// 0x6207758
	bool IsVehicleWeapon();// 0x6207720
	bool IsUsingGrenadeLaunch();// 0x62076e8
	bool IsUseNewUploadData();// 0x62076b0
	bool IsSwallowBulletTarget(Actor* TargetActor);// 0x6207618
	bool IsSupportBolt();// 0x62075d8
	bool IsSupportAutoAim();// 0x62075a0
	bool IsSpecialBulletIDValid(byte SpecialBulletID, int CurShootID);// 0x62074cc
	bool IsShowDisableCrossIcon();// 0x620748c
	bool IsPostFireReloading();// 0x620746c
	bool IsOwnerInGunADS();// 0x6207434
	bool IsInPreFire();// 0x62073fc
	static bool IsGHasInfiniteBullets();// 0x62073c4
	bool IsForbidShootTarget(Actor* TargetActor);// 0x620732c
	bool IsEnableReloadADS();// 0x620730c
	bool IsEnableDropBullet();// 0x62072d4
	bool IsDriverVehicleWeapon();// 0x620729c
	bool IsAutoDrop();// 0x6207264
	void InitWeaponDurability(int NewVal);// 0x62071e8
	bool HasUpgrade();// 0x62071b0
	bool HasMultiBullet();// 0x6207178
	void HandleWeaponScopeUnEquiped(enum Type);// 0x62070fc
	void HandleWeaponScopeEquiped(enum Type);// 0x6207080
	void HandleWeaponAvatarPutOnSlot(int SlotID);// 0x6207004
	void HandleWeaponAvatarLoaded(int SlotID, ItemDefineID DefineID);// 0x6206f38
	void HandleWeaponAvatarClearSlot(int SlotID);// 0x6206ebc
	void HandleScopeOut(bool bIsBegin);// 0x6206e38
	void HandleScopeIn(bool bIsBegin);// 0x6206db4
	void HandlePartsEquipped(int WeaponSlotID, bool IsEquipped);// 0x6206cf4
	void HandleAllWeaponAvatarLoaded();// 0x6206ce0
	byte GetWeaponReloadType();// 0x6206cac
	int GetWeaponIDFromEntity();// 0x6206c78
	int GetWeaponID();// 0x6206c3c
	int GetWeaponDurability();// 0x6206c08
	float GetWeaponBodyLength();// 0x6206bd4
	Vector GetVolleyShootDirection(Vector TargetLoc, Vector OldStartLoc, Vector NewStartLoc, Vector BulletDir);// 0x6206a78
	ParticleSystem* GetVisualBulletTrackFX();// 0x6206a44
	bool GetVisualBulletTrackEnabled();// 0x6206a0c
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x62069d8
	FName GetVerifyScopeSocketNameFromEntity();// 0x62069a4
	bool GetUseSpecificBulletNumOnReloadFromEntity();// 0x620696c
	int GetUpgradeInfoID();// 0x6206938
	float GetTraceDistanceFromEntity();// 0x6206904
	FName GetSilencerSocketNameFromEntity();// 0x62068d0
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x620689c
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x6206868
	byte GetShootTypeFromEntity();// 0x6206834
	float GetShootReduceDurabilityAmount();// 0x6206800
	int GetShootIntervalShowNumberFromEntity();// 0x62067cc
	float GetShootIntervalFromEntity(int BulletIndex);// 0x6206738
	FName GetShellDropSocketNameFromEntity();// 0x6206704
	MeshComponent* GetScopeMeshByType(FName SocketName, enum Type, int SocketIndex);// 0x6206600
	int GetScopeID(bool bIsAngledOpticalSight);// 0x6206564
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x6206450
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x6206344
	int GetRemainReloadTimes();// 0x6206310
	bool GetReloadWithNoCostFromEntity();// 0x62062d8
	float GetReloadTimeMagOutFromEntity();// 0x62062a4
	float GetReloadTimeMagInFromEntity();// 0x6206270
	float GetReloadTimeFromEntity();// 0x620623c
	FString GetReloadTIDPostfixByReloadType(byte ReloadType, bool IsTactical);// 0x6206104
	FName GetReloadTIDNameNew(byte method);// 0x6206078
	FName GetReloadTIDName(byte method);// 0x6205fe4
	float GetReloadTacticalTimeFromEntity();// 0x6205fb0
	int GetReloadSpecificBulletNumFromEntity();// 0x6205f7c
	float GetReloadRateFromEntity();// 0x6205f48
	float GetReloadDurationStartFromEntity();// 0x6205f14
	float GetReloadDurationLoopFromEntity();// 0x6205ee0
	float GetReloadDurationEndFromEntity();// 0x6205eac
	Transform GetRelativeMuzzleTransform();// 0x6205e50
	float GetReferenceDistance();// 0x6205e1c
	FName GetRearSightSocket(int Index);// 0x6205d90
	Rotator GetRearSightRot();// 0x6205d58
	int GetRearSightIndex();// 0x6205d24
	Rotator GetRearSightHandRotOffset();// 0x6205cec
	float GetRangeModifier();// 0x6205cb8
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x6205c14
	float GetPreFireTimeFromEntity();// 0x6205be0
	float GetPreFireAnimScaleFromEntity();// 0x6205bac
	float GetPostReloadTimeFromEntity();// 0x6205b78
	float GetPostFireTimeFromEntity();// 0x6205b44
	float GetPostFillGasTime();// 0x6205b10
	FName GetOverrideScopeAimSocketName();// 0x6205adc
	int GetOnceReloadBulletNumOverride();// 0x6205aa0
	byte GetNextSpecialBulletID();// 0x6205a64
	bool GetNeedMagAnimationWhenReload();// 0x6205a2c
	Transform GetMuzzleTransform();// 0x62059d0
	FName GetMuzzleSocketNameFromEntity();// 0x6205994
	float GetMinShootIntervalFromEntity();// 0x6205958
	float GetMaxVelocityOffsetAddRateFromEntity();// 0x6205924
	float GetMaxValidHitTimeFromEntity();// 0x62058f0
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x62058bc
	int GetMaxBulletNumInOneClipFromEntity();// 0x6205888
	int GetMaxBulletNumInBarrelFromEntity();// 0x6205854
	bool GetIsNeedOffsetVelocityFromEntity();// 0x620581c
	bool GetIsEnableScopeInFromEntity();// 0x62057e4
	float GetImpactEffectSkipDistanceFromEntity();// 0x62057b0
	float GetIgnoreRangeAttenuatDis();// 0x620577c
	WeaponHitPartCoff GetHitPartCoff(Actor* Victim, bool IsGunADS);// 0x6205694
	AkAudioEvent* GetGrenadeLaunchShootSound();// 0x6205660
	WeaponCrossHairPerformData[] GetGrenadeLaunchCrossHairData();// 0x6205530
	float GetGasAddDamageRate();// 0x62054fc
	float GetGameDeviationFactor();// 0x62054c8
	FName GetFiringSuppressorSocketNameFromEntity();// 0x6205494
	float GetFireSensitiveYawRate();// 0x6205460
	float GetFireSensitivePitchRate();// 0x620542c
	int GetExtraShootIntervalShowNumberFromEntity();// 0x62053f8
	float GetExtraShootIntervalFromEntity();// 0x62053c4
	<int,bool> GetEquipAttachSlotMap();// 0x6205248
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x62051bc
	byte GetCurSightVisionType();// 0x6205188
	byte GetCurSightType();// 0x620514c
	enum GetCurShootIntervalMode();// 0x6205130
	int GetCurrentBulletNumInClip();// 0x6205114
	float GetCurReloadTime();// 0x62050e0
	byte GetCurReloadMethod();// 0x62050ac
	float GetCurGasRate();// 0x6205078
	float GetCurGasAngle();// 0x6205044
	int GetCurBulletNumInClipForUI();// 0x6205008
	int GetCurBulletNumInClip();// 0x6204fd4
	float GetCrossHairInitSize();// 0x6204fa0
	float GetCrossHairBurstSpeed();// 0x6204f6c
	float GetCrossHairBurstIncreaseSpeed();// 0x6204f38
	byte GetControllerRole();// 0x6204f04
	int GetConstantWeaponDurabilityFromEntity();// 0x6204ed0
	bool GetClipHasInfiniteBulletsFromEntity();// 0x6204e98
	MeshComponent* GetChildMeshComp(FName compTag);// 0x6204e0c
	bool GetCanRecordHitDetailFromEntity();// 0x6204dd4
	float GetBurstShootIntervalFromEntity();// 0x6204d98
	float GetBurstShootCDFromEntity();// 0x6204d64
	int GetBurstShootBulletsNumFromEntity();// 0x6204d30
	ItemDefineID GetBulletTypeFromEntity();// 0x6204ce4
	BulletTrackComponent* GetBulletTrackComponent();// 0x6204cb0
	float GetBulletRangeEntity();// 0x6204c7c
	int GetBulletNumSingleShotFromEntity();// 0x6204c48
	int GetBulletNumSingleShotAtFire(bool IsGunADS);// 0x6204bac
	int GetBulletNumByBulletID(out const BulletInClip BulletInClip, int BulletID);// 0x6204aa0
	float GetBulletMomentumFromEntity();// 0x6204a6c
	float GetBulletFireSpeedFromEntity();// 0x6204a30
	float GetBaseReloadTime(bool bTactical);// 0x620499c
	float GetBaseImpactDamageEntity();// 0x6204968
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x6204868
	float GetAutoShootCDFromEntity();// 0x620482c
	bool GetAutoReloadFromEntity();// 0x62047f4
	float GetAnimForegripParam();// 0x62047c0
	bool GetADSManualStop();// 0x6204788
	float GetAccessoriesVRecoilFactor();// 0x6204754
	float GetAccessoriesRecoveryFactor();// 0x6204720
	float GetAccessoriesHRecoilFactor();// 0x62046ec
	float GetAccessoriesDeviationFactor();// 0x62046b8
	void ForceSyncAllClientsBulletsNumOnServer();// 0x62046a4
	void FixBulletNumWithValideData();// 0x6204690
	bool EnablePlayBoltAnimation();// 0x6204658
	void EnableInfiniteBullets(bool bEnableInfiniteBullets);// 0x62045d4
	void DoGrenadeLaunchStartReload();// 0x62045c0
	void CostGasByOneShoot();// 0x62045ac
	void ConsumeCacheSACDataArray();// 0x6204598
	bool ConditionForbidShootTarget();// 0x6204558
	void ConditionDrawRelpayHitData(out const BulletHitInfoUploadDataInReplay HitData);// 0x6204414
	void ConditionAddTickPrerequisite();// 0x6204400
	void ClearWeaponAttrModifier();// 0x62043ec
	void ClampBulletInClip(int MinCount, int MaxCount);// 0x6204338
	bool CheckShootInterval();// 0x6204300
	void CheckReloadAttr();// 0x62042ec
	bool CheckNeedClientSetMaxBulletNum();// 0x62042b4
	bool CheckClientBulletInClipIsValid(out const BulletInClip ClientBulletInClip);// 0x62041dc
	bool CanVehicleShoot();// 0x620419c
	bool CanSwitchToGrenade();// 0x6204180
	float CalcReloadAnimRate(AnimMontage* ReloadMontage, byte WeaponReloadMethod);// 0x62040b8
	void BP_OnSyncSimulatedClientsCurBullets();// 0x70644c4
	bool AutoFireCheck();// 0x6204078
	void AttrRemovedCB(out const AttrAffected[] AffectedAttrS);// 0x6203f64
	void AttrModifiedCB(out const AttrAffected[] AffectedAttrS);// 0x6203e50
	void AddWeaponDurability(int AddAmount);// 0x6203dd4
	bool AddWeaponAttrModifierConfig(FString ConfigId, out const WeaponAttrModifyData[] AttrModifiers, int UnquieID);// 0x6203c0c
	void AddOwnerOffsetVelocity(out Vector OrginalVelocity);// 0x6203b84
	void AddFillGas(float AddTime);// 0x6203b08
	void AddBulletInClip(BulletInWeapon[] InCurBulletList, int Count);// 0x6203998
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraWeapon.LuaActor.Actor.Object
	int iRegionWeapon;//[Offset: 0x52c, Size: 0x4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x530, Size: 0x4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 0x1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x535, Size: 0x1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x536, Size: 0x1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x537, Size: 0x1]
	bool GM_EnableCheckReInitSimWeaponOwnerProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x540, Size: 0x18]
	Transform WeaponAttachMeshOffset;//[Offset: 0x560, Size: 0x30]
	Transform FPPWeaponOffset;//[Offset: 0x590, Size: 0x30]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x5c0, Size: 0x30]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x5f0, Size: 0x30]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x620, Size: 0x30]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x650, Size: 0x30]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x680, Size: 0x30]
	int CrossHairType;//[Offset: 0x6b0, Size: 0x4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x6b4, Size: 0x4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x6b8, Size: 0x8]
	PredictLineComponent* PredictLine;//[Offset: 0x6c0, Size: 0x8]
	FName WeaponStaticMeshCompTag;//[Offset: 0x6c8, Size: 0x8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x6d0, Size: 0x8]
	delegate WeaponEffectActionDelegate;//[Offset: 0x6d8, Size: 0x10]
	delegate FireOneShotEffectDelegate;//[Offset: 0x6e8, Size: 0x10]
	delegate OnShootWeaponChangeState;//[Offset: 0x6f8, Size: 0x10]
	delegate OnWeaponChangeStateCommon;//[Offset: 0x708, Size: 0x10]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x718, Size: 0x10]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x728, Size: 0x10]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x738, Size: 0x10]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x748, Size: 0x10]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x758, Size: 0x10]
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x768, Size: 0x10]
	delegate OnWeaponBaseEquipDelegate;//[Offset: 0x778, Size: 0x10]
	delegate OnWeaponBaseUnEquipDelegate;//[Offset: 0x788, Size: 0x10]
	delegate OnEquipOrUnEuipAttachmentDelegate;//[Offset: 0x798, Size: 0x10]
	delegate OnPressingWeaponFuncBtnDelegate;//[Offset: 0x7a8, Size: 0x10]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x7b8, Size: 0x8]
	WeaponSpecificHandler* WeaponSpecHandler;//[Offset: 0x7c0, Size: 0x8]
	byte CurFreshWeaponState;//[Offset: 0x7c8, Size: 0x1]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x7d0, Size: 0x10]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x7e0, Size: 0x1]
	FName WeaponAttachSocketName;//[Offset: 0x7e8, Size: 0x8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 0x1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f1, Size: 0x1]
	float StartReconnectTime;//[Offset: 0x7f4, Size: 0x4]
	int ReconnectOpIndex;//[Offset: 0x7f8, Size: 0x4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x800, Size: 0x80]
	enum WeaponAttachState;//[Offset: 0x888, Size: 0x1]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x890, Size: 0x10]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 0x1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x8a8, Size: 0x68]
	float ServerStartCreateWeaponTime;//[Offset: 0x910, Size: 0x4]
	float ServerFinishCreateWeaponTime;//[Offset: 0x914, Size: 0x4]
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 0x1]
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x920, Size: 0x8]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x930, Size: 0x8]
	byte CurWeaponState;//[Offset: 0x938, Size: 0x1]
	Actor* SimulatedOwnerActor;//[Offset: 0x940, Size: 0x8]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x948, Size: 0x8]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x958, Size: 0x50]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x9b8, Size: 0x8]
	MeshSynData[] synData;//[Offset: 0x9c8, Size: 0x10]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 0x1]
	float MaxWaitMeshInitTime;//[Offset: 0x9dc, Size: 0x4]
	float WaitMeshInitTime;//[Offset: 0x9e0, Size: 0x4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4, Size: 0x1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e5, Size: 0x1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x9e8, Size: 0x10]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa00, Size: 0x1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0xa08, Size: 0x8]
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 0x1]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 0x1]
	delegate ForceHideWeaponWidget;//[Offset: 0xa18, Size: 0x10]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 0x1]
	ActorComponent*[] CrossHairComps;//[Offset: 0xa30, Size: 0x10]
	byte WeaponUIType;//[Offset: 0xa40, Size: 0x1]
	Transform DefaultRelativeTransform;//[Offset: 0xa50, Size: 0x30]
	Rotator RotForSimulate;//[Offset: 0xa80, Size: 0xc]
	int FuncFlag;//[Offset: 0xa8c, Size: 0x4]
	bool bTriggerWeaponEffectWhenAppActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa98, Size: 0x1]
	byte AppActiveWeaponAction;//[Offset: 0xa99, Size: 0x1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> WeaponCompOutOfVisionOptimizationDataMap;//[Offset: 0xaa0, Size: 0x50]
	FString[] ComponentTickWhiteList;//[Offset: 0xaf0, Size: 0x10]
	<ActorComponent*,bool> CompTickStateMap;//[Offset: 0xb00, Size: 0x50]
	bool bIsInValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb50, Size: 0x1]
	bool bForceDisableHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb51, Size: 0x1]
	bool bSkipPostReloadAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb52, Size: 0x1]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x70644c4
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x70644c4
	void UpdateWeaponAvatar(float DeltaTime);// 0x70644c4
	void TriggerWeaponEvent(enum Event);// 0x6249ff0
	bool StartScopeFilter();// 0x6249fb0
	void SpecialResetForWeaponCrosshair();// 0x70644c4
	void SetCharacterAttrModifiers(out const FString[] ModifierNames, bool bNewEnable);// 0x6249e48
	void SetCharacterAttrModifier(FString ModifierName, bool IsEnable);// 0x6249d50
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x6249ca0
	void RPC_ClientChangeFreshWeaponState(byte State);// 0x6249bf0
	void RespawnData();// 0x70644c4
	void ResetData();// 0x70644c4
	void ReceivedUseWeapon();// 0x70644c4
	void ReceivedDisuseWeapon();// 0x70644c4
	void PlayLocalShellDropFX();// 0x70644c4
	void OnWeaponTriggerEventDelegate__DelegateSignature(enum Event);// 0x70644c4
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x70644c4
	void OnWeaponBaseUnEquipDelegate__DelegateSignature();// 0x70644c4
	void OnWeaponBaseEquipDelegate__DelegateSignature();// 0x70644c4
	void OnWeaponAttachToBackDelegate__DelegateSignature(FName SocketName);// 0x70644c4
	void OnShootWeaponChangeStateDelegate__DelegateSignature(byte LastState, byte NewState);// 0x70644c4
	void OnRepReplayData();// 0x6249bdc
	void OnRep_WeaponReconnectReplicateData();// 0x6249bc8
	void OnRep_WeaponAttachSocketName();// 0x6249bb4
	void OnRep_SimulatedOwnerPawn();// 0x6249ba0
	void OnRep_OwnerClientCreateWeaponData();// 0x6249b8c
	void OnRep_bPlayBackpackToIdleAnimWhenGet();// 0x6249b78
	void OnRep_AvatarMeshChanged();// 0x6249b64
	void OnRep_AttachmentReplication();// 0x6249b48
	void OnReleaseTrigger();// 0x6249b2c
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x70644c4
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x70644c4
	void OnPushTrigger();// 0x6249b10
	void OnPressingWeaponFuncBtnDelegate__DelegateSignature();// 0x70644c4
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0x70644c4
	void OnEquipOrUnEuipAttachmentDelegate__DelegateSignature(bool IsEquip, BackpackWeaponAttachHandle* AttachHandle);// 0x70644c4
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x70644c4
	void NotifyServerChangeState(byte State);// 0x6249a94
	void NewInitWeapon();// 0x6249a80
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x62499f0
	bool IsValidToCheckAttach();// 0x62499b0
	bool IsValidSwitchWeaponOPCondition(enum InTriggerType);// 0x6249918
	bool IsUseAttrModify();// 0x62498d8
	bool IsSimulated();// 0x62498a0
	bool IsLocalOrSpectorPlayer();// 0x6249868
	bool IsForceNeedIK();// 0x6249828
	bool IsForceDisableHandIK();// 0x62497f0
	bool IsAutonomous();// 0x62497b8
	void InitWeapon();// 0x62497a4
	void InitProxyBP(Actor* OwnerTarget);// 0x70644c4
	bool HasComponentSlot(byte Slot);// 0x6249714
	void HandleReconnectNew(Actor* WeaponOwner);// 0x6249698
	enum GetWeaponWantsMode();// 0x624965c
	byte GetWeaponTypeNew();// 0x6249628
	byte GetWeaponType();// 0x62495f4
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x62495c0
	byte GetWeaponStateType();// 0x624958c
	byte GetWeaponSlot();// 0x6249558
	int GetWeaponSkillID();// 0x6249524
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x62494f0
	enum GetWeaponOwnerObserverType();// 0x62494bc
	FString GetWeaponName();// 0x6249418
	SceneComponent* GetWeaponMuzzleEffectAttachComp();// 0x62493dc
	MeshComponent* GetWeaponMeshComponent();// 0x62493a0
	int GetWeaponMainAvatarID();// 0x624936c
	int GetWeaponID();// 0x6249330
	byte GetWeaponHoldType();// 0x62492fc
	byte GetWeaponFireMode();// 0x62492c0
	WeaponEntity* GetWeaponEntityComponent();// 0x624928c
	FString GetWeaponDetailInfo();// 0x62491e8
	Transform GetWeaponAttachToBackRelativeTransformByBagLevel(int Level, int SideType);// 0x624910c
	FName GetWeaponAttachSocket();// 0x62490d0
	WeaponSpecificHandler* GetSpecificHandler();// 0x624909c
	float GetSpecialScopeFov();// 0x6249060
	int GetScopeID(bool bIsAngledOpticalSight);// 0x6248fc4
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x6248eb0
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x6248da4
	byte GetOwnerRoleSafety(bool RemoteFlag);// 0x6248d10
	FString GetOwnerPlayerName();// 0x6248c6c
	PlayerController* GetOwnerPlayerController();// 0x6248c30
	Pawn* GetOwnerPawn();// 0x6248bfc
	FString GetOwnerName();// 0x6248b58
	Controller* GetOwnerController();// 0x6248b1c
	Actor* GetOwnerActor();// 0x6248ae0
	ItemDefineID GetItemDefineID();// 0x6248a94
	GrenadeAvatarComponent* GetGrenadeAvatar();// 0x6248a60
	byte GetCurSightType();// 0x6248a24
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x62488f4
	LinearColor GetColorByTeamID(int TeamID);// 0x70644c4
	ItemHandleBase* GetBackpackItemHandle();// 0x62488c0
	void ForceHideWeaponWidget__DelegateSignature(bool bIsBegin);// 0x70644c4
	void DelayHandleAvatarMeshChanged();// 0x62488ac
	void CreateWeaponHandleCallback(ItemDefineID DefineID, BattleItemHandleBase* BattleItemHandle);// 0x62487e4
	void ClientLoadDefaultMesh();// 0x62487d0
	void CheckNeedReInitWeaponOwnerData(Actor* OwnerActor);// 0x6248754
	bool CheckHasFuncByInt(int Func);// 0x62486c4
	bool CheckHasFunc(enum Func);// 0x6248634
	void CheckCurrentMeshInHand(out const FName InAttachSocketName);// 0x62485a0
	void ChangeSequenceStateInner(byte StateType);// 0x624851c
	bool ChangeSequenceState(byte StateType);// 0x6248484
	void CallForceHideWeaponWidgetDel();// 0x6248470
	void AttachSelfToCharacterHand(SkeletalMeshComponent* InParentMesh, out const FName InWeaponAttachSocket);// 0x62483a8
<----------Generated by SSpawner v1.0.4---------->


Class: LuaActor.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x458, Size: 0x50]
	FString LuaFilePath;//[Offset: 0x4a8, Size: 0x10]
	void UnRegistLuaTick();// 0xa02a130
	void RegistLuaTick(float TickInterval);// 0xa02a0b4
<----------Generated by SSpawner v1.0.4---------->


Class: MainWeaponTableStruct
	int KeyID;//[Offset: 0x0, Size: 0x4]
	int[] SkillIDList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 0x1]
	bool SetAutonomousLoadRes();// 0x6359df4
	void SelectWeaponGunOnePart(int WeaponGunPart);// 0x6359d78
	void EnableDIYPatternMirro(bool bMirro, bool bLeftToRight);// 0x6359ca8
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0x630, Size: 0x8]
	bool EnablePhotoShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	delegate OnScopeEquipDelegate;//[Offset: 0x640, Size: 0x10]
	delegate OnScopeUnequipDelegate;//[Offset: 0x650, Size: 0x10]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x660, Size: 0x10]
	delegate OnWeaponAvatarLoaded2;//[Offset: 0x670, Size: 0x10]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x680, Size: 0x10]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x690, Size: 0x10]
	delegate OnWeaponAvatarPutOnSlot;//[Offset: 0x6a0, Size: 0x10]
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]
	delegate OnWeaponPartsEquipped;//[Offset: 0x6b8, Size: 0x10]
	delegate OnWeaponPartsRender;//[Offset: 0x6c8, Size: 0x10]
	delegate OnWeaponEffectParticleCreate;//[Offset: 0x6d8, Size: 0x10]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x700, Size: 0x50]
	<int,HandleMeshPack> DefaultAttachmentMeshOverride;//[Offset: 0x750, Size: 0x50]
	MeshSynData[] DefaultSynData;//[Offset: 0x7a0, Size: 0x10]
	FString OwnerPlayerUID;//[Offset: 0x7b8, Size: 0x10]
	WeaponDIYData WeaponDIYData;//[Offset: 0x7d0, Size: 0x50]
	DIYEnableLevel[] EnableLevelMap;//[Offset: 0x830, Size: 0x10]
	bool bShouldFindItemSkipInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 0x1]
	ItemDefineID WeaponDefineID;//[Offset: 0x848, Size: 0x18]
	bool ShouldDisplayByQuality(int SlotID);// 0x635cbe8
	void SetPendantSocketType(enum SocketType);// 0x635cb6c
	bool SetAutonomousLoadRes();// 0x635cb2c
	void ResponWeaponDIYData(FString InPlayerUID, int WeaponAvatarID);// 0x635c9bc
	void ResetAttachmentSocket();// 0x635c9a8
	void ResetAttachmentParent();// 0x635c994
	void RequestWeaponDIYData(FString InPlayerUID, int WeaponAvatarID, int InDIYPlanID);// 0x635c874
	void RequestDIYPlan(int WeaponAvatarID, int InDIYPlanID);// 0x70644c4
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x635c7b4
	void ReportAvatarInfo(out const int[] RequestItemIDS);// 0x635c6fc
	void RemoveDefaultAttachmentOverride(int SlotID);// 0x635c680
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* InHandle);// 0x635c5f4
	void RefreshAvatarStateChanged();// 0x635c5d8
	void RecreateMeshByHandle(BattleItemHandleBase* PendingRecreateHandle);// 0x635c55c
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* WeaponHandle);// 0x635c4cc
	void PutOnEquipmentDIYData(int WeaponAvatarID, int InDIYPlanID);// 0x635c418
	bool PutOnEquipmentByResID(int resID);// 0x635c380
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle);// 0x635c2f0
	bool PutOffEquimentByResID(int resID);// 0x635c258
	void ProcessWeaponDIYDataAction(out const WeaponDIYData InWeaponDIYData);// 0x635c1a4
	void ProcessLoadAllMesh();// 0x635c188
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData OutSyncData);// 0x635c0a8
	void OnWeaponPartsRenderEvent__DelegateSignature(int WeaponSlotID);// 0x70644c4
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool IsEquipped);// 0x70644c4
	void OnWeaponAvatarPutOnSlot__DelegateSignature(int SlotID);// 0x70644c4
	void OnWeaponAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x70644c4
	void OnWeaponAvatarLoaded2__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x70644c4
	void OnWeaponAvatarClearSlot__DelegateSignature(int SlotID);// 0x70644c4
	void OnWeaponAttachAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x70644c4
	void OnScopeUnequipDelegate__DelegateSignature(enum AttachmentSocketType);// 0x70644c4
	void OnScopeEquipDelegate__DelegateSignature(enum AttachmentSocketTypeD);// 0x70644c4
	void OnRespawned();// 0x635c08c
	void OnRep_NetAvatarDataChanged(out const MeshSynData[] InSyncData);// 0x635bfd4
	void OnRecycled();// 0x635bfb8
	void OnEffectParticleCreate__DelegateSignature();// 0x70644c4
	void OnAsyncLoadBattleHandlesDone(int AsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles, out const ItemDefineID[] DefineIDList);// 0x635be38
	void NetSyncData(int InSlotID, enum InOperationType, BattleItemHandleBase* InHandle);// 0x635bd3c
	bool LoadMeshListAsync(out BattleItemHandleBase*[] InHandleList, bool bNeedDirectLoad);// 0x635bc1c
	bool IsTeammate();// 0x635bbdc
	bool IsSelf();// 0x635bb9c
	void InitMasterComponent();// 0x635bb88
	void InitialAvatarParam();// 0x635bb74
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x635baf8
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x635ba7c
	void InitDefaultAttachment(BattleItemHandleBase* WeaponHandle);// 0x635ba00
	int GetWeaponParentID(int InSlotID, out const ItemDefineID InItemDefineID);// 0x635b924
	Controller* GetWeaponController();// 0x635b8f0
	STExtraWeapon* GetOwnerWeapon();// 0x635b8bc
	STExtraBaseCharacter* GetOwnerCharacter();// 0x635b888
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x635b7ec
	BattleItemHandleBase* GetEquippedHandle(int InSlotID);// 0x635b760
	bool GetEquipmentMeshBySlot(int InSlotID, out MeshData OutMeshPack);// 0x635b664
	AvatarDIYEntityFactory* GetEntityFactory();// 0x635b628
	MeshComponent* GetAttachmentSocketTransform(int InSlotID);// 0x635b59c
	AnimationAsset* GetAttachmentAnim(enum InSlotType, int AnimIdx);// 0x635b4d4
	WeaponAvatarDIYEntity* FindAvatarEntityByMesh(MeshComponent* InMeshComp);// 0x635b448
	void DestroyWeapon();// 0x635b434
	void ClearMeshBySlot(int SlotID, bool putDefault, bool bClearMesh);// 0x635b320
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x635b29c
	bool CheckSlotIsEquipped(int InSlotID, bool bIncludingDefault);// 0x635b1c8
	bool CheckIsAlreadyEquipped(ItemDefineID InDefineID);// 0x635b128
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs);// 0x635b070
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x635ae58
	void ApplyAttachmentOverride(BattleItemHandleBase* InAttachHandle);// 0x635addc
	void ApplyAttachment(BattleItemHandleBase* InAttachHandle);// 0x635ad60
	void AddUnlockWeaponAttachmentAvatarList(int WeaponBPID, out <int,int> OutAttachmentSkinIDList);// 0x635ac3c
	void AddDefaultAttachmentOverride(int AttchmentID);// 0x635abc0
	int AddAction_SampleCurveToMPC(int SlotID, CurveFloat* Curve, MaterialParameterCollection* MPC);// 0x635aac0
	int AddAction_ParticleByName(int SlotID, out const FName ParticleName);// 0x635a9e8
	int AddAction_MatParamModify2(int SlotID, WeaponEffect_TickMatParam* InCfg);// 0x635a920
	int AddAction_MatParamModify(int SlotID, int CfgIndex);// 0x635a85c
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	AvatarDIYEntity*[] EntityTickList;//[Offset: 0x2f8, Size: 0x10]
	<int,AvatarDIYEntity*> AvatarEntityMap;//[Offset: 0x308, Size: 0x50]
	int[] PendingDeleteSlotID;//[Offset: 0x358, Size: 0x10]
	AvatarDIYEntityFactory* EntityFactory;//[Offset: 0x368, Size: 0x8]
	<int,FName> SlotToSocket;//[Offset: 0x370, Size: 0x50]
	int StepCount;//[Offset: 0x3c0, Size: 0x4]
	delegate AsyncLoadAvatarAllMeshDone;//[Offset: 0x3c8, Size: 0x10]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x3d8, Size: 0x10]
	int AsyncLoadReqID;//[Offset: 0x4c0, Size: 0x4]
	int LastAsyncLoadReqID;//[Offset: 0x4c4, Size: 0x4]
	bool bSyncDIYDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	enum DisplayQuality;//[Offset: 0x4d9, Size: 0x1]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x4e0, Size: 0x50]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	<int,bool> OutlineEnableList;//[Offset: 0x560, Size: 0x50]
	bool NeedUpdateTransformOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]
	<int,TextureRenderTarget2D*> DIYRTCacheMap;//[Offset: 0x5b8, Size: 0x50]
	int CurrentDecalBakingRequestID;//[Offset: 0x608, Size: 0x4]
	delegate OnAvatarDIYDecalBakingFinished;//[Offset: 0x610, Size: 0x10]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x620, Size: 0x10]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x5d8d778
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x5d8d6b8
	bool SetMeshVisibleByID(int InSlotID, bool bIsVisible, bool bForceShow);// 0x5d8d598
	void SetMaster(MeshComponent* InComponent, FName InName, enum InType);// 0x5d8d4a8
	void SetDisplayQuality(enum Quality);// 0x5d8d430
	bool SetAutonomousLoadRes();// 0x5d8d3f0
	void RequestSyncLoadMeshes();// 0x5d8d3dc
	void RequestSyncLoadHandles();// 0x5d8d3c8
	void RequestAsyncLoadMeshes();// 0x5d8d3ac
	void RequestAsyncLoadHandles();// 0x5d8d390
	void RemoveDIYRTCacheInBattle(int InSlotID);// 0x5d8d314
	void RemoveAllDIYRTCacheInBattle();// 0x5d8d300
	void RemoveActionByType(int SlotID, enum InActionType, bool bDelayClear);// 0x5d8d204
	void RemoveAction(int SlotID, int ActionInstanceID, bool bDelayClear);// 0x5d8d10c
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x5d8d088
	void RefreshAvatarStateChanged();// 0x5d8d06c
	void ProcessLoadAllMesh();// 0x5d8d050
	void PreProcessBeforeLoadMesh();// 0x5d8d034
	void PostProcessAfterLoadMesh();// 0x5d8d018
	void OnRespawned();// 0x5d8cffc
	void OnRecycled();// 0x5d8cfe0
	void OnEngineDecalBakingFinished(out const DecalBakingRequest InRequestStruct);// 0x5d8cf14
	void OnAvatarDIYDecalBakingFinished__DelegateSignature(int RequestID, TextureRenderTarget2D* RenderTarget);// 0x70644c4
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x70644c4
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x5d8ce90
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x5d8cdd0
	void OnAllAvatarHandleLoadedDone();// 0x5d8cdb4
	void NetSyncData(int SlotID, enum OperationType, BattleItemHandleBase* Handle);// 0x5d8ccb8
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x5d8cbe4
	bool IsAutonomousAvatar();// 0x5d8cbac
	AvatarDIYEntity* GetOrCreateAvatarEntity(int SlotID, int SubSlotID);// 0x5d8cae8
	<int,MeshComponent*> GetMeshComponentList();// 0x5d8c9a0
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x5d8c914
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x5d8c888
	AvatarDIYEntityFactory* GetEntityFactory();// 0x5d8c84c
	TextureRenderTarget2D* GetDIYRTCacheInLobby(int InSlotID);// 0x5d8c7c0
	enum GetDisplayQuality();// 0x5d8c7a4
	void GetCurMeshComponents(out MeshComponent*[] OutMeshComponets);// 0x5d8c6e4
	AvatarDIYEntity* GetAvatarEntity(int SlotID, int SubSlotID);// 0x5d8c620
	void EnableSyncLoadDIYDecal(bool bInSyncDIYDecal, int InMaxDecalProcessPreFrame);// 0x5d8c558
	void EnableSyncLoadAvatar(bool bInSyncAvatar);// 0x5d8c4d4
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x5d8c404
	AvatarDIYEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x5d8c340
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x5d8c280
	void AsyncLoadAvatarAllMeshDone__DelegateSignature(AvatarDIYComponent* AvatarDIYComponent);// 0x70644c4
	void AddDIYRTCacheInBattle(int InSlotID, TextureRenderTarget2D* InTexture2D);// 0x5d8c1c8
	int AddAction_Modle(int SlotID, int ModleID);// 0x5d8c104
	int AddAction_Material(int SlotID, int MaterialID);// 0x5d8c040
	int AddAction_DIYSlotMatParam(out const int[] InSlotMatParam);// 0x5d8bf78
	int AddAction_DIYPattern(int SlotID, out const DIYMergedTexData[] InDIYMergeData);// 0x5d8be1c
	int AddAction_DIYMirroParam(int SlotID, out const int[] InMirroParam);// 0x5d8bd14
	int AddAction_DIYMatParam(int SlotID, out const int[] InMatIDList);// 0x5d8bc0c
	int AddAction(int SlotID, out const AvatarActionBase InActionBase);// 0x5d8bb20
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x258, Size: 0x8]
	bool bIsLobbyAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	bool bIsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	bool bForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 0x1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x263, Size: 0x1]
	FName LightVectorName;//[Offset: 0x268, Size: 0x8]
	DirectionalLight* DirectionalLight;//[Offset: 0x270, Size: 0x8]
	delegate OnItemDownloadDelegate;//[Offset: 0x278, Size: 0x10]
	delegate OnBatchItemDownloadDelegate;//[Offset: 0x288, Size: 0x10]
	<int,int> ItemsRequestDownloadTimes;//[Offset: 0x298, Size: 0x50]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	enum AvatarEnum;//[Offset: 0x2e9, Size: 0x1]
	void RequestDownloadItemInBattle(int InItemID);// 0x5d85fe0
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x5d85f20
	void OnRespawned();// 0x5d85f04
	void OnRecycled();// 0x5d85ee8
	bool IsTeammate();// 0x5d85ea8
	bool IsServerMode();// 0x5d85e70
	bool IsSelf();// 0x5d85e30
	bool IsLogicRunningMode();// 0x5d85df8
	bool IsLobbyAvatar();// 0x5d85ddc
	bool IsLobbyActor();// 0x5d85dc0
	bool IsForceClientMode();// 0x5d85da4
	uint32 GetPlayerKey();// 0x5d85d68
	GameInstance* GetGameInstance();// 0x5d85d2c
	void DownloadItemInBattleCallBack(uint32 ItemId, uint32 ErrorCode);// 0x5d85c70
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x5d85a58
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarDIYEntity.Object
	AvatarDIYComponent* AvatarComponent;//[Offset: 0x28, Size: 0x8]
	MeshComponent* MeshComponent;//[Offset: 0x30, Size: 0x8]
	MeshGroup MeshGroup;//[Offset: 0x38, Size: 0x30]
	ItemDefineID ParentDefineID;//[Offset: 0x68, Size: 0x18]
	<FString,AvatarDIYEntity*> SubEntityMap;//[Offset: 0x80, Size: 0x50]
	int SlotID;//[Offset: 0xf0, Size: 0x4]
	int SubSlotID;//[Offset: 0xf4, Size: 0x4]
	FName SocketName;//[Offset: 0xf8, Size: 0x8]
	enum meshType;//[Offset: 0x100, Size: 0x1]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x108, Size: 0x8]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x110, Size: 0x8]
	MeshData EntityMeshData;//[Offset: 0x118, Size: 0x80]
	MeshData CachedEntityMeshData;//[Offset: 0x198, Size: 0x80]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 0x1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a, Size: 0x1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21b, Size: 0x1]
	bool bHasDeaclTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x220, Size: 0x10]
	SoftObjectPath MeshAssetPath;//[Offset: 0x230, Size: 0x18]
	<FString,AvatarDIYEntity*> SubEntityList;//[Offset: 0x248, Size: 0x50]
	void UpdateVisibility();// 0x5d8f6d0
	void UnRegisterTick();// 0x5d8f6b4
	void TickEntity(float DeltaTime);// 0x5d8f630
	void SetSocketName(FName InName);// 0x5d8f5ac
	void SetParentDefineID(ItemDefineID ParentID);// 0x5d8f51c
	void SetLoadedHandle(BattleItemHandleBase* ItemHandle);// 0x5d8f498
	void SetAvatarVisibility(bool bIsVisible, bool bForce);// 0x5d8f3c0
	void SetAvatarEntityParticleVisibility(bool visibie);// 0x5d8f334
	void RevertEntityMeshData();// 0x5d8f320
	void RenderEntity();// 0x5d8f304
	void RegisterTick();// 0x5d8f2e8
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x5d8f250
	void PutOnDefaultEquipment(int InSlotID);// 0x5d8f1cc
	void PrepareEntity();// 0x5d8f1b0
	void OnPreRender();// 0x5d8f194
	void OnPostRender();// 0x5d8f178
	void MaskActionDirty(bool bFlag);// 0x5d8f0f4
	bool IsEntityAvailable(enum VisibilityType);// 0x5d8f05c
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x5d8ef90
	void Init(int InSlotID, int InSubSlotID, AvatarDIYComponent* InAvatarComponent);// 0x5d8ee98
	bool HasSomeAction(enum InActionType);// 0x5d8ee08
	bool HasMainAction();// 0x5d8edd0
	FName GetSocketName();// 0x5d8ed94
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x5d8ed00
	ItemDefineID GetParentDefineID();// 0x5d8ecac
	MeshData GetMeshData();// 0x5d8ec48
	BattleItemHandleBase* GetLoadedHandle();// 0x5d8ec14
	ItemDefineID GetDefineID();// 0x5d8ebc0
	void EnterRenderPipeline();// 0x5d8eba4
	void EnterLogicPipeline();// 0x5d8eb88
	void DrawOutline(bool bEnable);// 0x5d8eafc
	bool CreateAndApplyResource();// 0x5d8eabc
	void ClearRenderEntity();// 0x5d8eaa0
	void ClearEquipmentRenderData(int CurrSlotID, bool bPutDefault);// 0x5d8e9d8
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x5d8e900
	void ClearEntity(bool ForceClear);// 0x5d8e874
<----------Generated by SSpawner v1.0.4---------->


Class: MeshGroup
	MeshAsset[] MeshAssetList;//[Offset: 0x0, Size: 0x10]
	Object*[] MeshObjectList;//[Offset: 0x10, Size: 0x10]
	MeshComponent*[] MeshCompList;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MeshAsset
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x30, Size: 0x28]
	StaticMesh* StaticMesh;//[Offset: 0x58, Size: 0x28]
	FName AttachSocket;//[Offset: 0x80, Size: 0x8]
	enum meshType;//[Offset: 0x88, Size: 0x1]
	bool bKeepRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	class AnimInstance* animBP;//[Offset: 0x90, Size: 0x8]
	class AnimInstance* animBPClass;//[Offset: 0x98, Size: 0x28]
	bool bAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bUpdateTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemHandleBase.ItemHandleBase.Object
	FString LuaFilePath;//[Offset: 0x108, Size: 0x10]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	enum ItemStoreArea;//[Offset: 0x119, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x120, Size: 0x10]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	float UnitWeight;//[Offset: 0x134, Size: 0x4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	int ItemAttrsFlag;//[Offset: 0x13c, Size: 0x4]
	void UpdateAttributeModify(bool bEnable);// 0x647dcf0
	bool UnEquip();// 0x647dcb8
	bool HanldePickupAssociationData(out const BattleItemAdditionalData[] PickupAdditionalData);// 0x647db8c
	bool HanldeDropAssociationData();// 0x647db4c
	bool HanldeCleared();// 0x647db0c
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x647da10
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x647d75c
	bool HandleEnable(bool bEnable);// 0x647d6bc
	bool HandleDrop(int InCount, enum Reason);// 0x647d5e8
	bool HandleDisuse(enum Reason);// 0x647d550
	bool HandleChangeItemStoreArea(enum InItemStoreArea);// 0x647d4b8
	bool HandleBindToTargetItem();// 0x647d478
	World* GetWorldInternal();// 0x647d43c
	World* GetCurrentWorld();// 0x647d408
	BattleItemData ExtractItemData();// 0x647d39c
	void ClearAdditionalData();// 0x647d388
	bool CheckCanUse(out const interface class ItemContainer, BattleItemUseTarget Target, enum Reason);// 0x647d234
<----------Generated by SSpawner v1.0.4---------->


Class: ItemHandleBase.Object
	int Count;//[Offset: 0x28, Size: 0x4]
	int MaxCount;//[Offset: 0x2c, Size: 0x4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	<int,ItemAssociation> AssociationMap;//[Offset: 0x38, Size: 0x50]
	ItemDefineID DefineID;//[Offset: 0x88, Size: 0x18]
	void SetAssociation(int AssociationType, ItemAssociation Association);// 0x6487dc4
	void RemoveAssociation(int AssociationType);// 0x6487d48
	void Init(ItemDefineID InDefineID);// 0x6487cb4
	ItemDefineID GetDefineID();// 0x6487c64
	<int,ItemAssociation> GetAssociationMap();// 0x6487b24
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x6487a30
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x648797c
	ItemAssociation GetAssociation(int AssociationType);// 0x64878d8
	void Constuct(out const ItemDefineID InDefineID);// 0x6487840
	void AddAssociation(int AssociationType, ItemAssociation Association);// 0x6487748
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemAdditionalData
	enum EDataType;//[Offset: 0x0, Size: 0x1]
	int IntData;//[Offset: 0x4, Size: 0x4]
	FString StringData;//[Offset: 0x8, Size: 0x10]
	float FloatData;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemAssociation
	int AssociationType;//[Offset: 0x0, Size: 0x4]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 0x18]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 0x18]
	int TargetAssociationType;//[Offset: 0x18, Size: 0x4]
	Actor* TargetActor;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 0x8]
	int Count;//[Offset: 0x8, Size: 0x4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x10, Size: 0x10]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x28, Size: 0x28]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemData.ItemData
	int Count;//[Offset: 0x58, Size: 0x4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x60, Size: 0x10]
	int Durability;//[Offset: 0x70, Size: 0x4]
	enum ItemStoreArea;//[Offset: 0x74, Size: 0x1]
	BattleItemFeatureData FeatureData;//[Offset: 0x78, Size: 0x2c]
	ItemAssociation[] Associations;//[Offset: 0xa8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8, Size: 0x18]
	FString Name;//[Offset: 0x20, Size: 0x10]
	FString Desc;//[Offset: 0x30, Size: 0x10]
	FString Icon;//[Offset: 0x40, Size: 0x10]
	ItemHandleBase* ItemHandle;//[Offset: 0x50, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 0x4]
	int MaxCount;//[Offset: 0x4, Size: 0x4]
	int CountLimit;//[Offset: 0x8, Size: 0x4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int ItemAttrsFlag;//[Offset: 0x14, Size: 0x4]
	int SortingPriority;//[Offset: 0x18, Size: 0x4]
	int Worth;//[Offset: 0x1c, Size: 0x4]
	int ItemCapacity;//[Offset: 0x20, Size: 0x4]
	int ItemDurability;//[Offset: 0x24, Size: 0x4]
	int itemType;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 0x8]
	SkeletalMesh* skMesh;//[Offset: 0x8, Size: 0x8]
	MaterialInstance* matIns;//[Offset: 0x10, Size: 0x8]
	MaterialInstance*[] additionalMats;//[Offset: 0x18, Size: 0x10]
	enum meshType;//[Offset: 0x28, Size: 0x1]
	int[] hiddenSlots;//[Offset: 0x30, Size: 0x10]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x40, Size: 0x10]
	HideBoneData[] hideBoneSlots;//[Offset: 0x50, Size: 0x10]
	ItemDefineID definedID;//[Offset: 0x60, Size: 0x18]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ReplacedSlotInfo
<----------Generated by SSpawner v1.0.4---------->


Class: HideBoneData
<----------Generated by SSpawner v1.0.4---------->


Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x900, Size: 0x8]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x908, Size: 0x8]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x910, Size: 0x8]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x918, Size: 0x8]
	void SetupAttachMeshComponent(MeshComponent* MeshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x5e680e0
	Actor* GetBindOwner();// 0x5e680c4
	MeshComponent* GetAttachedMeshComponent();// 0x5e680a8
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* MeshComp, FName SocketName, out const Transform RelativeTrans);// 0x5e67f54
	void BindOwner(Actor* Owner);// 0x5e67edc
	void BindEvent(bool bShowWidget);// 0x5e67e50
<----------Generated by SSpawner v1.0.4---------->


Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAntialiased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x795, Size: 0x1]
	float RTScale;//[Offset: 0x798, Size: 0x4]
	enum Space;//[Offset: 0x79c, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x79d, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x7a0, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x7a8, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b1, Size: 0x1]
	float RedrawTime;//[Offset: 0x7b4, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x7c0, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x7d0, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d9, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x7e0, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x7e8, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x7f8, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x808, Size: 0x4]
	enum BlendMode;//[Offset: 0x80c, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80d, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80e, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x810, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x838, Size: 0x8]
	MaterialInterface* TranslucentMaterialAA;//[Offset: 0x840, Size: 0x8]
	MaterialInterface* TranslucentMaterialAA_OneSided;//[Offset: 0x848, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x850, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x858, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x860, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x868, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x870, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x878, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x880, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x888, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x898, Size: 0x8]
	int LayerZOrder;//[Offset: 0x8a0, Size: 0x4]
	enum GeometryMode;//[Offset: 0x8a4, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x8a8, Size: 0x4]
	void SetWidget(UserWidget* Widget);// 0x805af18
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x805ae9c
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x805ae20
	void SetDrawSize(Vector2D Size);// 0x805ada8
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x805ad2c
	void RequestRedraw();// 0x805ad10
	UserWidget* GetUserWidgetObject();// 0x805acdc
	TextureRenderTarget2D* GetRenderTarget();// 0x805aca8
	LocalPlayer* GetOwnerPlayer();// 0x805ac74
	MaterialInstanceDynamic* GetMaterialInstance();// 0x805ac40
	Vector2D GetDrawSize();// 0x805ac0c
<----------Generated by SSpawner v1.0.4---------->


Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xf0, Size: 0x4]
	int SizeY;//[Offset: 0xf4, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xf8, Size: 0x10]
	byte AddressX;//[Offset: 0x108, Size: 0x1]
	byte AddressY;//[Offset: 0x109, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10a, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10a, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0x10b, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10c, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10c, Size: 0x1]
	byte OverrideFormat;//[Offset: 0x10d, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xe8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarDIYEntityFactory.Object
	AvatarDIYEntity* CreateEntity(int SlotID, int SubSlotID);// 0x5d9030c
<----------Generated by SSpawner v1.0.4---------->


Class: DirectionalLight.Light.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x3f8, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 0x1]
	void ToggleEnabled();// 0x8d824f8
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x8d8247c
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x8d82400
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x8d82384
	void SetLightColor(LinearColor NewLightColor);// 0x8d82308
	void SetEnabled(bool bSetEnabled);// 0x8d82284
	void SetCastShadows(bool bNewValue);// 0x8d82200
	void SetBrightness(float NewBrightness);// 0x8d82184
	void SetAffectTranslucentLighting(bool bNewValue);// 0x8d82100
	void OnRep_bEnabled();// 0x8d820e4
	bool IsEnabled();// 0x8d820ac
	LinearColor GetLightColor();// 0x8d82074
	float GetBrightness();// 0x8d82040
<----------Generated by SSpawner v1.0.4---------->


Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x2f4, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x2f8, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x2fc, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x304, Size: 0x4]
	float MinRoughness;//[Offset: 0x30c, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x310, Size: 0x4]
	int LightPriority;//[Offset: 0x314, Size: 0x4]
	float ShadowBias;//[Offset: 0x318, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x31c, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x320, Size: 0x4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 0x1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x324, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x324, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x324, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x325, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x328, Size: 0x8]
	Vector LightFunctionScale;//[Offset: 0x330, Size: 0xc]
	TextureLightProfile* IESTexture;//[Offset: 0x340, Size: 0x8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x34c, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x350, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x354, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 0x1]
	float BloomScale;//[Offset: 0x35c, Size: 0x4]
	float BloomThreshold;//[Offset: 0x360, Size: 0x4]
	Color BloomTint;//[Offset: 0x364, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x36c, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x8d8339c
	void SetTemperature(float NewTemperature);// 0x8d83320
	void SetShadowBias(float NewValue);// 0x8d832a4
	void SetLightPriority(int Priority);// 0x8d83228
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x8d831ac
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x8d83130
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x8d830b4
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x8d83038
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x8d82f78
	void SetIntensity(float NewIntensity);// 0x8d82efc
	void SetIndirectLightingIntensity(float NewIntensity);// 0x8d82e80
	void SetIESTexture(TextureLightProfile* NewValue);// 0x8d82e04
	void SetEnableLightShaftBloom(bool bNewValue);// 0x8d82d80
	void SetBloomTint(Color NewValue);// 0x8d82d08
	void SetBloomThreshold(float NewValue);// 0x8d82c8c
	void SetBloomScale(float NewValue);// 0x8d82c10
	void SetAffectTranslucentLighting(bool bNewValue);// 0x8d82b8c
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x8d82b08
	void ForceUpdateShadowState();// 0x8d82af4
<----------Generated by SSpawner v1.0.4---------->


Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x2cc, Size: 0x10]
	float Brightness;//[Offset: 0x2dc, Size: 0x4]
	float Intensity;//[Offset: 0x2e0, Size: 0x4]
	Color LightColor;//[Offset: 0x2e4, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e8, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e8, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e8, Size: 0x1]
	float IndirectLightingIntensity;//[Offset: 0x2ec, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x2f0, Size: 0x4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x8d86ad0
	void SetCastShadows(bool bNewValue);// 0x8d86a4c
	LinearColor GetLightColor();// 0x8d86a14
<----------Generated by SSpawner v1.0.4---------->


Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0x138, Size: 0x4]
	float TextureMultiplier;//[Offset: 0x13c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DecalBakingRequest
	Object* Mesh;//[Offset: 0x8, Size: 0x8]
	DecalParameter[] DecalParams;//[Offset: 0x18, Size: 0x10]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DecalParameter
	Texture2D* DecalTexture;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DIYMergedTexData
	DIYOneTexData[] TextureList;//[Offset: 0x0, Size: 0x10]
	int TexPathID;//[Offset: 0x10, Size: 0x4]
	DIYParamData DIYParam;//[Offset: 0x14, Size: 0x30]
	int SlotID;//[Offset: 0x44, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DIYOneTexData
	int TexPathID;//[Offset: 0x0, Size: 0x4]
	DIYParamData DIYParam;//[Offset: 0x4, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: DIYParamData
	int Direction;//[Offset: 0x0, Size: 0x4]
	int ColorID;//[Offset: 0x4, Size: 0x4]
	float Opacity;//[Offset: 0x8, Size: 0x4]
	float Rotation;//[Offset: 0xc, Size: 0x4]
	float ScaleX;//[Offset: 0x10, Size: 0x4]
	float ScaleY;//[Offset: 0x14, Size: 0x4]
	float OffSetX;//[Offset: 0x18, Size: 0x4]
	float OffSetY;//[Offset: 0x1c, Size: 0x4]
	float UClipX;//[Offset: 0x20, Size: 0x4]
	float UClipY;//[Offset: 0x24, Size: 0x4]
	float VClipX;//[Offset: 0x28, Size: 0x4]
	float VClipY;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarActionBase
<----------Generated by SSpawner v1.0.4---------->


Class: HandleMeshPack
	BattleItemHandleBase* Handle;//[Offset: 0x0, Size: 0x8]
	WeaponMeshCfg MeshCfg;//[Offset: 0x8, Size: 0x150]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0, Size: 0x28]
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 0x28]
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 0x28]
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 0x28]
	MaterialInterface* MeshMat;//[Offset: 0xa0, Size: 0x28]
	FName MeshMatSlotName;//[Offset: 0xc8, Size: 0x8]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xd0, Size: 0x28]
	MaterialInterface* baseMat;//[Offset: 0xf8, Size: 0x8]
	MaterialInterface* baseMatClass;//[Offset: 0x100, Size: 0x28]
	ParticleRes[] ParticleEffects;//[Offset: 0x128, Size: 0x10]
	UIWidgetRes[] WidgetList;//[Offset: 0x138, Size: 0x10]
	enum meshType;//[Offset: 0x148, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 0x8]
	FName AttachSocket;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 0x8]
	FName AttachSocket;//[Offset: 0x8, Size: 0x8]
	Transform Trans;//[Offset: 0x10, Size: 0x30]
	Vector2D DrawSize;//[Offset: 0x40, Size: 0x8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	int gender;//[Offset: 0x18, Size: 0x4]
	enum OperationType;//[Offset: 0x1c, Size: 0x1]
	int AdditionalItemID;//[Offset: 0x20, Size: 0x4]
	int DIYPlanID;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponDIYData.ResponResult
	int WeaponId;//[Offset: 0x4, Size: 0x4]
	int PlanID;//[Offset: 0x8, Size: 0x4]
	DIYMergedTexData[] DIYData;//[Offset: 0x10, Size: 0x10]
	int[] MatParam;//[Offset: 0x20, Size: 0x10]
	int[] MirroParam;//[Offset: 0x30, Size: 0x10]
	int[] SlotMatParam;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ResponResult
	bool bResponed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: DIYEnableLevel
	int DeviceLevel;//[Offset: 0x0, Size: 0x4]
	int EnableLevel;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAvatarDIYEntity.AvatarDIYEntity.Object
	void SetWeaponEntityVisibility(bool visibie);// 0x635fefc
	void SetSocketName(FName InName);// 0x635fe78
	void SetLoadedHandle(BattleItemHandleBase* ItemHandle);// 0x635fdf4
	void RenderEntity();// 0x635fdd8
	void RemoveParticleEffect();// 0x635fdbc
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x635fd24
	void PrepareEntity();// 0x635fd08
	void OnPreRender();// 0x635fcec
	void OnPostRender();// 0x635fcd0
	bool IsForceEnableAnim();// 0x635fc90
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x635fbfc
	ItemDefineID GetDefineID();// 0x635fba8
	void EnterLogicPipeline();// 0x635fb8c
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x635fab4
	void BroadcastWeaponRenderEvent();// 0x635faa0
	void BroadcastWeaponEquipEvent(bool IsEquipped);// 0x635fa1c
	void ApplyParticleEffect();// 0x635fa00
	void AddWeaponHandleAction();// 0x635f9ec
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponEffect_TickMatParam.WeaponEffectCfgBase.Object
	MatParamModifyCfg ParamCfg;//[Offset: 0x58, Size: 0xd0]
	void RemoveEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x6361f1c
	bool ApplyEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x6361e84
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponEffectCfgBase.Object
	enum TriggerCondition;//[Offset: 0x28, Size: 0x1]
	int ConditionTriggerNum;//[Offset: 0x2c, Size: 0x4]
	int MaxApplyCount;//[Offset: 0x30, Size: 0x4]
	enum ValidScene;//[Offset: 0x34, Size: 0x1]
	bool EnableAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float LoopInterval;//[Offset: 0x38, Size: 0x4]
	float ApplyTime;//[Offset: 0x3c, Size: 0x4]
	bool EnableLowDeviceOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	void RemoveEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x636261c
	bool ReachedMaxTriggerTime();// 0x63625dc
	void Init();// 0x63625c0
	bool ApplyEffect(WeaponAvatarDIYComponent* InAvatarComp);// 0x6362528
<----------Generated by SSpawner v1.0.4---------->


Class: MatParamModifyCfg
	SoftObjectPath CurveAsset;//[Offset: 0x0, Size: 0x18]
	FName ParamName;//[Offset: 0x18, Size: 0x8]
	FName ParticleTag;//[Offset: 0x20, Size: 0x8]
	float FxWaitTime;//[Offset: 0x28, Size: 0x4]
	int[] RelatedSlots;//[Offset: 0x30, Size: 0x10]
	CurveFloat* CachedCurve;//[Offset: 0x40, Size: 0x8]
	FName ReplaceMatSlotName;//[Offset: 0x48, Size: 0x8]
	SoftObjectPath NormalMat;//[Offset: 0x50, Size: 0x18]
	SoftObjectPath ReplaceMat;//[Offset: 0x68, Size: 0x18]
	<FName,CurveFloat*> AdditionalParams;//[Offset: 0x80, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: PredictLineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bCharacterComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 0x1]
	class Actor* PredictActorTemplate;//[Offset: 0x8c0, Size: 0x8]
	StaticMesh* MeshTemplate;//[Offset: 0x8c8, Size: 0x28]
	ParticleSystem* PredictEndPointFX;//[Offset: 0x8f0, Size: 0x28]
	CurveFloat* PredictEndPointScaleCurve;//[Offset: 0x918, Size: 0x28]
	PredictProjectilePathParams PredictProjectilePathParams;//[Offset: 0x940, Size: 0x88]
	delegate InitNewSplineMeshDelegate;//[Offset: 0x9c8, Size: 0x10]
	PredictLineMaterialParams Param_StartPointLocation;//[Offset: 0x9d8, Size: 0x10]
	PredictLineMaterialParams Param_EndPointLocation;//[Offset: 0x9e8, Size: 0x10]
	PredictLineMaterialParams Param_EndPointFalloff;//[Offset: 0x9f8, Size: 0x10]
	PredictLineMaterialParams Param_PredictLineColor;//[Offset: 0xa08, Size: 0x10]
	LinearColor PredictLineColor;//[Offset: 0xa18, Size: 0x10]
	PredictLineConfigParams PredictLineConfigParams;//[Offset: 0xa28, Size: 0xc]
	PredictProjectilePathResult PredictResult;//[Offset: 0xa48, Size: 0xc8]
	CurveFloat* Curve_PredictEndPointScale;//[Offset: 0xb10, Size: 0x8]
	ParticleSystem* FX_PredictEndPoint;//[Offset: 0xb18, Size: 0x8]
	StaticMesh* SplineMeshTemplate;//[Offset: 0xb20, Size: 0x8]
	SplineMeshComponent*[] CachedSplineMeshes;//[Offset: 0xb30, Size: 0x10]
	int RedrawCounter;//[Offset: 0xb40, Size: 0x4]
	FString LuaFilePath;//[Offset: 0xb48, Size: 0x10]
	void SetPredictParams(out const Vector InStartPoint, out const Vector InVelocity, out const Vector InAcceleration);// 0x600952c
	void SetPredictLineColor(out const LinearColor NewColor);// 0x60094a4
	void SetPredictActorTemplate(class Actor InActorTemplate);// 0x6009428
	void LoadPredictDefaultRes();// 0x6009414
	Actor* GetBindPredictLineTarget();// 0x60093d8
	void EnableRedrawPredictLine();// 0x60093c4
	void BindPredictLineTarget(Actor* InCachedTarget);// 0x6009340
<----------Generated by SSpawner v1.0.4---------->


Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 0xc]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 0xc]
	Vector LaunchAcceleration;//[Offset: 0x18, Size: 0xc]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float ProjectileRadius;//[Offset: 0x28, Size: 0x4]
	float MaxSimTime;//[Offset: 0x2c, Size: 0x4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	byte TraceChannel;//[Offset: 0x31, Size: 0x1]
	byte[] ObjectTypes;//[Offset: 0x38, Size: 0x10]
	Actor*[] ActorsToIgnore;//[Offset: 0x48, Size: 0x10]
	float SimFrequency;//[Offset: 0x58, Size: 0x4]
	float OverrideGravityZ;//[Offset: 0x5c, Size: 0x4]
	float GravityScale;//[Offset: 0x60, Size: 0x4]
	float IgnoreGravityDis;//[Offset: 0x64, Size: 0x4]
	byte DrawDebugType;//[Offset: 0x68, Size: 0x1]
	float DrawDebugTime;//[Offset: 0x6c, Size: 0x4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PredictLineMaterialParams
	MaterialParameterCollection* MaterialParamCollection;//[Offset: 0x0, Size: 0x8]
	FName ParamName;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: PredictLineConfigParams
	bool bShowEndPointEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int ShowSplineCount;//[Offset: 0x4, Size: 0x4]
	float ShowSplineCountPercent;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x1c]
	HitResult HitResult;//[Offset: 0x30, Size: 0x98]
<----------Generated by SSpawner v1.0.4---------->


Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float Time;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x38, Size: 0x8]
	Pawn* OwnerPawn;//[Offset: 0x40, Size: 0x8]
	Controller* OwnerController;//[Offset: 0x48, Size: 0x8]
	STExtraWeapon* BindedWeapon;//[Offset: 0x50, Size: 0x8]
	void OnWeaponStopFireDelegate__DelegateSignature();// 0x70644c4
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x637225c
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x63721a4
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x6372170
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x637213c
	PlayerController* GetOwnerPlayerController();// 0x6372108
	Pawn* GetOwnerPawn();// 0x63720d4
	Controller* GetOwnerController();// 0x63720a0
	Actor* GetOwnerActor();// 0x6372084
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0x1208, Size: 0x4]
	float FreeCameraStartMinPitchMax;//[Offset: 0x120c, Size: 0x4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1210, Size: 0x1]
	<int> TouchIndexSet;//[Offset: 0x1218, Size: 0x50]
	byte OnFireTouchFingerIndex;//[Offset: 0x1268, Size: 0x1]
	int TouchEndTriggerSkillID;//[Offset: 0x126c, Size: 0x4]
	delegate OnPlayerContollerTouchBegin;//[Offset: 0x1270, Size: 0x10]
	delegate OnPlayerControllerTouchEnd;//[Offset: 0x1280, Size: 0x10]
	delegate OnAvatarInfoRep;//[Offset: 0x1290, Size: 0x10]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0x12f8, Size: 0x50]
	float MinOBRelevancyJudgeDissquared;//[Offset: 0x1348, Size: 0x4]
	bool bGhost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134c, Size: 0x1]
	FName FeatureActorName;//[Offset: 0x1350, Size: 0x8]
	ValidTouchMoveFrameConfig[] ValidTouchMoveFrameConfig;//[Offset: 0x1358, Size: 0x10]
	ValidTouchMoveFrameConfig CurValidTouchMoveFrameConfig;//[Offset: 0x1368, Size: 0x20]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0x1388, Size: 0x10]
	byte[] IgnoreCameraMovePendingArray;//[Offset: 0x1398, Size: 0x10]
	byte[] AddTouchMoveFingerArray;//[Offset: 0x13a8, Size: 0x10]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b8, Size: 0x1]
	byte OnFreeCameraFingerIndex;//[Offset: 0x13b9, Size: 0x1]
	float FreeCameraSPL_Hor;//[Offset: 0x13bc, Size: 0x4]
	float FreeCameraSPL_Ver;//[Offset: 0x13c0, Size: 0x4]
	float FreeCamera_FPP_MIN;//[Offset: 0x13c4, Size: 0x4]
	float FreeCamera_FPP_MAX;//[Offset: 0x13c8, Size: 0x4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0x13cc, Size: 0x4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0x13d0, Size: 0x4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0x13d4, Size: 0x4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0x13d8, Size: 0x4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0x13dc, Size: 0x4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0x13e0, Size: 0x4]
	float RecoverLagDelayTime;//[Offset: 0x13e4, Size: 0x4]
	Vector2D StartPosition;//[Offset: 0x13e8, Size: 0x8]
	Vector2D CurFreeCamPosition;//[Offset: 0x13f0, Size: 0x8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0x13f8, Size: 0xc]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0x1404, Size: 0xc]
	FString FollowCandidateName;//[Offset: 0x1418, Size: 0x10]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0x1428, Size: 0x50]
	Rotator FreeCameraStartRotation;//[Offset: 0x1478, Size: 0xc]
	Rotator PCFreeCameraStartRotation;//[Offset: 0x1484, Size: 0xc]
	Transform FPPModeSpringArmTrans;//[Offset: 0x1490, Size: 0x30]
	byte FreeCameraFigerIndex;//[Offset: 0x14c0, Size: 0x1]
	int8 CurrentBuildingIndex;//[Offset: 0x14c1, Size: 0x1]
	int WeaponReconnectOpIndex;//[Offset: 0x14c4, Size: 0x4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c8, Size: 0x1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ca, Size: 0x1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0x14d0, Size: 0x10]
	LinearColor CrossHairColor;//[Offset: 0x14e0, Size: 0x10]
	byte AutoAimType;//[Offset: 0x14f0, Size: 0x1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1500, Size: 0x1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1501, Size: 0x1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1510, Size: 0x1]
	bool bForceHideConcentric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1511, Size: 0x1]
	bool bForceShowBlueCircleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1512, Size: 0x1]
	FString[] ScreenAppearToBeRemovedInResult;//[Offset: 0x1518, Size: 0x10]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0x1528, Size: 0x10]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0x1538, Size: 0x108]
	SensibilityConfig SensibilityConfig;//[Offset: 0x1640, Size: 0x100]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e0, Size: 0x1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e1, Size: 0x1]
	int UseMotionControlType;//[Offset: 0x17e4, Size: 0x4]
	bool IsGyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e8, Size: 0x1]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0x17f0, Size: 0x10]
	delegate OnPlayerEnterFlying;//[Offset: 0x1800, Size: 0x10]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0x1810, Size: 0x10]
	delegate OnPlayerExitFlying;//[Offset: 0x1820, Size: 0x10]
	delegate OnPlayerEnterJumping;//[Offset: 0x1830, Size: 0x10]
	delegate OnPlayerExitJumping;//[Offset: 0x1840, Size: 0x10]
	delegate OnPlayerEnterParachute;//[Offset: 0x1850, Size: 0x10]
	delegate OnPlayerExitParachute;//[Offset: 0x1860, Size: 0x10]
	delegate OnPlayerEnterWater;//[Offset: 0x1870, Size: 0x10]
	delegate OnPlayerExitWater;//[Offset: 0x1880, Size: 0x10]
	delegate OnPlayerEnterFighting;//[Offset: 0x1890, Size: 0x10]
	delegate OnPlayerExitFighting;//[Offset: 0x18a0, Size: 0x10]
	delegate OnPlayerEnterFinished;//[Offset: 0x18b0, Size: 0x10]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x18c0, Size: 0x10]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0x18d0, Size: 0x10]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x18e0, Size: 0x10]
	delegate OnShowHideSelfMarkDelegate;//[Offset: 0x18f0, Size: 0x10]
	delegate OnShowAllTeammatePosDelegate;//[Offset: 0x1900, Size: 0x10]
	delegate OnShowAliasInfoDelegate;//[Offset: 0x1910, Size: 0x10]
	delegate OnCongregationFlagDelegate;//[Offset: 0x1920, Size: 0x10]
	delegate OnTeamFollowStageChangeDelegate;//[Offset: 0x1930, Size: 0x10]
	delegate OnCharacterBreathChange;//[Offset: 0x1940, Size: 0x10]
	delegate OnHideFollowPanelAndBtnDelegate;//[Offset: 0x1950, Size: 0x10]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x1960, Size: 0x10]
	delegate OnRemindTeammateShoot;//[Offset: 0x1970, Size: 0x10]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x1980, Size: 0x10]
	delegate OnCharacterAntidoteChange;//[Offset: 0x1990, Size: 0x10]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x19a0, Size: 0x10]
	delegate OnNightBeggan;//[Offset: 0x19b0, Size: 0x10]
	delegate OnNightEnded;//[Offset: 0x19c0, Size: 0x10]
	delegate OnPlayerHitInfoUpdate;//[Offset: 0x19d0, Size: 0x10]
	delegate OnPlayerSwitchToDeadBox;//[Offset: 0x19e0, Size: 0x10]
	delegate OnShowFollowEmoteDelegate;//[Offset: 0x19f0, Size: 0x10]
	delegate OnCoopEmoteChange;//[Offset: 0x1a00, Size: 0x10]
	delegate OnServerStateTypeChanged;//[Offset: 0x1a10, Size: 0x10]
	int SelectedNightRenderConfig;//[Offset: 0x1a20, Size: 0x4]
	delegate OnInitTaskData;//[Offset: 0x1a28, Size: 0x10]
	delegate OnInitCollectionData;//[Offset: 0x1a38, Size: 0x10]
	delegate OnPlayerDoEmote;//[Offset: 0x1a48, Size: 0x10]
	delegate OnPlayerEnterArea;//[Offset: 0x1a58, Size: 0x10]
	delegate OnPlayerKilling;//[Offset: 0x1a68, Size: 0x10]
	delegate OnPickupItem;//[Offset: 0x1a78, Size: 0x10]
	delegate OnDropItem;//[Offset: 0x1a88, Size: 0x10]
	delegate OnDeathBoxSpawned;//[Offset: 0x1a98, Size: 0x10]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x1ae8, Size: 0xb0]
	delegate OnKillOrPutDownMessage;//[Offset: 0x1b98, Size: 0x10]
	delegate OnStartFireEvent;//[Offset: 0x1ba8, Size: 0x10]
	delegate OnStopFireEvent;//[Offset: 0x1bb8, Size: 0x10]
	delegate OnReleaseFireBtn;//[Offset: 0x1bc8, Size: 0x10]
	delegate OnReleaseScreen;//[Offset: 0x1bd8, Size: 0x10]
	delegate OnFingerMove;//[Offset: 0x1be8, Size: 0x10]
	delegate OnHandleCameraModeChanged;//[Offset: 0x1bf8, Size: 0x10]
	delegate OnSwitchCameraModeStart;//[Offset: 0x1c08, Size: 0x10]
	delegate OnSwitchCameraModeEnd;//[Offset: 0x1c18, Size: 0x10]
	delegate OnPlayerPickUpActor;//[Offset: 0x1c28, Size: 0x10]
	delegate OnPlayerPutDownActor;//[Offset: 0x1c38, Size: 0x10]
	delegate OnPlayerPutDownAllProp;//[Offset: 0x1c48, Size: 0x10]
	delegate OnSwitchWeapon;//[Offset: 0x1c58, Size: 0x10]
	delegate OnEquipWeaponDel;//[Offset: 0x1c68, Size: 0x10]
	delegate OnUnequipWeaponDel;//[Offset: 0x1c78, Size: 0x10]
	delegate OnUseInventoryItem;//[Offset: 0x1c88, Size: 0x10]
	delegate OnChangeBattleOwnerDel;//[Offset: 0x1c98, Size: 0x10]
	delegate OnDamageToOther;//[Offset: 0x1ca8, Size: 0x10]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x1cb8, Size: 0x10]
	delegate DelegatePlayerGoldChange;//[Offset: 0x1cc8, Size: 0x10]
	delegate DelegatePlayerLevelChange;//[Offset: 0x1cd8, Size: 0x10]
	delegate OnGameStartCountDownDelegate;//[Offset: 0x1ce8, Size: 0x10]
	delegate OnRank;//[Offset: 0x1cf8, Size: 0x10]
	delegate OnGameStartDelegate;//[Offset: 0x1d08, Size: 0x10]
	delegate OnPlayerNameChange;//[Offset: 0x1d18, Size: 0x10]
	delegate OnRepPlayerState;//[Offset: 0x1d28, Size: 0x10]
	delegate OnRepTeammateChange;//[Offset: 0x1d38, Size: 0x10]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x1d48, Size: 0x10]
	delegate OnMapMarkChangeDelegate;//[Offset: 0x1d60, Size: 0x10]
	delegate OnShowSkillPrompt;//[Offset: 0x1d70, Size: 0x10]
	delegate OnHideSkillPrompt;//[Offset: 0x1d80, Size: 0x10]
	delegate OnStartAutoSprintCountDown;//[Offset: 0x1d90, Size: 0x10]
	delegate OnShowAutoSprintButton;//[Offset: 0x1da0, Size: 0x10]
	delegate OnPlayerChangeWearingDone;//[Offset: 0x1db0, Size: 0x10]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0x1dc0, Size: 0x10]
	delegate OnPlayerFinalAssistKill;//[Offset: 0x1dd0, Size: 0x10]
	delegate OnConsumableAvatarChange;//[Offset: 0x1de0, Size: 0x10]
	delegate OnEquipmentAvatarChange;//[Offset: 0x1df0, Size: 0x10]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0x1e00, Size: 0x10]
	delegate OnGameStateChange;//[Offset: 0x1e10, Size: 0x10]
	delegate OnPlayerKilledOthersPlayer;//[Offset: 0x1e20, Size: 0x10]
	delegate OnChangeCharacterBeforeDelegate;//[Offset: 0x1e30, Size: 0x10]
	delegate OnChangeCharacterLogicDelegate;//[Offset: 0x1e40, Size: 0x10]
	delegate OnInfectionSelectZombieDelegate;//[Offset: 0x1e50, Size: 0x10]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x1e60, Size: 0x10]
	delegate OnSetViewTarget;//[Offset: 0x1e80, Size: 0x10]
	delegate OnCacheRecvInfectionSelectZombie;//[Offset: 0x1ea0, Size: 0x10]
	delegate OpenSequencerDelegate;//[Offset: 0x1eb0, Size: 0x10]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x1ed0, Size: 0x8]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x1ed8, Size: 0x10]
	delegate OnAutoSprintActive;//[Offset: 0x1ee8, Size: 0x10]
	delegate OnTakeDamagedDelegate;//[Offset: 0x1ef8, Size: 0x10]
	delegate OnPostTakeDamageDelegate;//[Offset: 0x1f08, Size: 0x10]
	delegate OnPostTakeDamageForBP;//[Offset: 0x1f18, Size: 0x10]
	delegate OnLostConnection;//[Offset: 0x1f28, Size: 0x10]
	delegate OnReconnected;//[Offset: 0x1f38, Size: 0x10]
	delegate OnExitGame;//[Offset: 0x1f48, Size: 0x10]
	delegate OnSpectatorChange;//[Offset: 0x1f58, Size: 0x10]
	delegate OnSpectatorToFreeView;//[Offset: 0x1f78, Size: 0x10]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x1f88, Size: 0x10]
	delegate RunOnNextFrameDelegate;//[Offset: 0x1f98, Size: 0x10]
	delegate MoveForwarDelegate;//[Offset: 0x1fa8, Size: 0x10]
	delegate MoveRightDelegate;//[Offset: 0x1fb8, Size: 0x10]
	delegate MoveUpDelegate;//[Offset: 0x1fc8, Size: 0x10]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x1fd8, Size: 0x8]
	int MaternalZombieWeight;//[Offset: 0x1fe0, Size: 0x4]
	PVSComponent* PVSComponent;//[Offset: 0x1fe8, Size: 0x8]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x1ff0, Size: 0x8]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x1ff8, Size: 0x8]
	SpectatorComponent* SpectatorComponent;//[Offset: 0x2000, Size: 0x8]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2008, Size: 0x1]
	delegate NewbieShowCurGuide;//[Offset: 0x2238, Size: 0x10]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x2248, Size: 0x10]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225c, Size: 0x1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225d, Size: 0x1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225e, Size: 0x1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225f, Size: 0x1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2260, Size: 0x1]
	float PC_CameraMoveRateX;//[Offset: 0x2264, Size: 0x4]
	float PC_CameraMoveRateY;//[Offset: 0x2268, Size: 0x4]
	float Mobile_CameraMoveRateX;//[Offset: 0x226c, Size: 0x4]
	float Mobile_CameraMoveRateY;//[Offset: 0x2270, Size: 0x4]
	float GOOGLE_CameraMoveRateX;//[Offset: 0x2274, Size: 0x4]
	float GOOGLE_CameraMoveRateY;//[Offset: 0x2278, Size: 0x4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x2280, Size: 0x8]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x2288, Size: 0x8]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2290, Size: 0x1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x2294, Size: 0x24]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x22b8, Size: 0x24]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x22dc, Size: 0x8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x22e4, Size: 0x8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x22ec, Size: 0x24]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x2310, Size: 0x8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x2318, Size: 0x8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x2320, Size: 0x24]
	<byte,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x2348, Size: 0x50]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x2398, Size: 0x4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x239c, Size: 0x4]
	float MoveCameraMaxDistanceThreshold;//[Offset: 0x23a0, Size: 0x4]
	<byte,int> PlayerClothLODLevel;//[Offset: 0x23a8, Size: 0x50]
	enum[] PlayerClothLODAvatarTypeList;//[Offset: 0x23f8, Size: 0x10]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2408, Size: 0x1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2409, Size: 0x1]
	Actor* BonfireUIAttachedActor;//[Offset: 0x2410, Size: 0x8]
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2418, Size: 0x1]
	byte CurCameraMode;//[Offset: 0x2419, Size: 0x1]
	FString BPClassOverrideTag;//[Offset: 0x2420, Size: 0x10]
	FName AutoScopeAimCompName;//[Offset: 0x2430, Size: 0x8]
	float AutoScopeAimTraceDistance;//[Offset: 0x2438, Size: 0x4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243c, Size: 0x1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243d, Size: 0x1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243e, Size: 0x1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243f, Size: 0x1]
	float MoveableLandHardTime;//[Offset: 0x2440, Size: 0x4]
	float CanMoveCDTime;//[Offset: 0x2444, Size: 0x4]
	float CanSprintCDTime;//[Offset: 0x2448, Size: 0x4]
	float SwitchPoseCDTime;//[Offset: 0x244c, Size: 0x4]
	float MovealbeSwitchPoseTime;//[Offset: 0x2450, Size: 0x4]
	float AutoSprintRequestCD;//[Offset: 0x2454, Size: 0x4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2458, Size: 0x1]
	Vector CurScreenMoveSpeed;//[Offset: 0x245c, Size: 0xc]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x2468, Size: 0x4]
	float SpecialDeviceRate;//[Offset: 0x246c, Size: 0x4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x2470, Size: 0x50]
	bool bAutoEquipMelleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c0, Size: 0x1]
	bool bAutoEquipMelleeWeaponLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c1, Size: 0x1]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c2, Size: 0x1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c3, Size: 0x1]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c4, Size: 0x1]
	bool bMelleeWeaponAutoCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c6, Size: 0x1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x24c8, Size: 0x8]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d0, Size: 0x1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d1, Size: 0x1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x24d8, Size: 0x10]
	bool bDebugShowYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e8, Size: 0x1]
	float AccumulateYawInput;//[Offset: 0x24ec, Size: 0x4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x24f0, Size: 0x4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f4, Size: 0x1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f5, Size: 0x1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f6, Size: 0x1]
	float NoRespondArea;//[Offset: 0x24f8, Size: 0x4]
	float ComfortableSwipeAddition;//[Offset: 0x24fc, Size: 0x4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2500, Size: 0x1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2501, Size: 0x1]
	byte sprintOptType;//[Offset: 0x2502, Size: 0x1]
	float JoystickSprintDisThreshold;//[Offset: 0x2504, Size: 0x4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x2508, Size: 0x4]
	float JoystickSprintBtnHeight;//[Offset: 0x250c, Size: 0x4]
	int JoystickSprintSensitity;//[Offset: 0x2510, Size: 0x4]
	float JoystickSprintAngleThreshold;//[Offset: 0x2514, Size: 0x4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2518, Size: 0x1]
	byte JoystickOperatingMode;//[Offset: 0x2519, Size: 0x1]
	float EasyGoStraightAngle;//[Offset: 0x251c, Size: 0x4]
	float AssistAreaHalfHeight;//[Offset: 0x2520, Size: 0x4]
	float AssistAreaRadius;//[Offset: 0x2524, Size: 0x4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2528, Size: 0x1]
	<byte,float> TouchForceMap;//[Offset: 0x2530, Size: 0x50]
	float TouchForceFireThreshold;//[Offset: 0x2580, Size: 0x4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x2584, Size: 0x4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x2588, Size: 0x4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x258c, Size: 0x4]
	int TouchForceWatchFrame;//[Offset: 0x2590, Size: 0x4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2594, Size: 0x1]
	float InputTouchRepeatLastTime;//[Offset: 0x2598, Size: 0x4]
	byte TouchFireType;//[Offset: 0x259c, Size: 0x1]
	float TestForce;//[Offset: 0x25a0, Size: 0x4]
	delegate On3DTouchForceChange;//[Offset: 0x25a8, Size: 0x10]
	delegate OnDoubleClickCheck;//[Offset: 0x25b8, Size: 0x10]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c8, Size: 0x1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c9, Size: 0x1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25ca, Size: 0x1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25cb, Size: 0x1]
	float AutoSprintBtnTime;//[Offset: 0x25cc, Size: 0x4]
	float AutoSprintWaitingTime;//[Offset: 0x25d0, Size: 0x4]
	float AutoSprintThreshold;//[Offset: 0x25d4, Size: 0x4]
	float JoystickTriggerSprintDuration;//[Offset: 0x25d8, Size: 0x4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x25dc, Size: 0x4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x25e0, Size: 0x4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e4, Size: 0x1]
	float CurrentCameraFOV;//[Offset: 0x25e8, Size: 0x4]
	float MinFovChangeView;//[Offset: 0x25ec, Size: 0x4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x25f0, Size: 0x20]
	int GameTipMsgID;//[Offset: 0x2610, Size: 0x4]
	FString GameTipParam1;//[Offset: 0x2618, Size: 0x10]
	FString GameTipParam2;//[Offset: 0x2628, Size: 0x10]
	float AutoSprintCD;//[Offset: 0x2688, Size: 0x4]
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x2690, Size: 0x50]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x26e0, Size: 0x50]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x2730, Size: 0x50]
	float TeamInfoForceUpdateInterval;//[Offset: 0x2784, Size: 0x4]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x27a0, Size: 0x30]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x2868, Size: 0x8]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x2870, Size: 0x8]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x2878, Size: 0x8]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x2880, Size: 0x8]
	PlayerTombBox* DeadTombBox;//[Offset: 0x28e8, Size: 0x8]
	bool bTempDeadBoxIgnoreTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f0, Size: 0x1]
	FString[] ForbitPickList;//[Offset: 0x28f8, Size: 0x10]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2918, Size: 0x1]
	int pickupPlayerChoice;//[Offset: 0x291c, Size: 0x4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2920, Size: 0x1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2921, Size: 0x1]
	float RescueRemainingSeconds;//[Offset: 0x2924, Size: 0x4]
	float RescueTotalSeconds;//[Offset: 0x2928, Size: 0x4]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x2930, Size: 0x10]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2940, Size: 0x1]
	float FreeViewUpRate;//[Offset: 0x2944, Size: 0x4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x2948, Size: 0x1]
	int MaxCacheInputSpeedNum;//[Offset: 0x294c, Size: 0x4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2950, Size: 0x1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2951, Size: 0x1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x2954, Size: 0xc]
	bool bSyncMLAIStateInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2960, Size: 0x1]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x2964, Size: 0x14]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2978, Size: 0x1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x2979, Size: 0x1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297a, Size: 0x1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x297b, Size: 0x1]
	byte CurSightZoomFingerIndex;//[Offset: 0x29c8, Size: 0x1]
	byte CurAimFireFingerIndex;//[Offset: 0x29c9, Size: 0x1]
	byte ValidTouchMove;//[Offset: 0x2a14, Size: 0x1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x2a40, Size: 0x8]
	BackpackComponent* BackpackComponent;//[Offset: 0x2ad0, Size: 0x8]
	BackpackRepActor* BackpackRepActor;//[Offset: 0x2ad8, Size: 0x8]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x2ae0, Size: 0x8]
	ChatComponent* ChatComponent;//[Offset: 0x2ae8, Size: 0x8]
	GuideComponent* GuideComponent;//[Offset: 0x2af0, Size: 0x8]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x2af8, Size: 0x8]
	BaseTaskComponent* TaskComponent;//[Offset: 0x2b00, Size: 0x8]
	delegate ClientObserveCharacterDelegate;//[Offset: 0x2b10, Size: 0x10]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2d, Size: 0x1]
	int8 bEnableDeathPlaybackDelay;//[Offset: 0x2b2e, Size: 0x1]
	int[] ObserveReplicateItems;//[Offset: 0x2b30, Size: 0x10]
	delegate OnOBPlayerItemChangedDelegate;//[Offset: 0x2b40, Size: 0x10]
	delegate OnOBPlayerWeaponChangedDelegate;//[Offset: 0x2b50, Size: 0x10]
	delegate OnOBPlayerBulletChangedDelegate;//[Offset: 0x2b60, Size: 0x10]
	delegate OnViewTargetAttachedToVehicleDelegate;//[Offset: 0x2b70, Size: 0x10]
	delegate OnViewTargetDetachedFromVehicleDelegate;//[Offset: 0x2b80, Size: 0x10]
	BattleItemSpectatingData[] ObservedItemList;//[Offset: 0x2bb0, Size: 0x10]
	bool bIsSendingObserveReq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc0, Size: 0x1]
	delegate OnViewTargetPoseChangedDelegate;//[Offset: 0x2c18, Size: 0x10]
	delegate OnSetObserveCharacter;//[Offset: 0x2c28, Size: 0x10]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x2c38, Size: 0x10]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x2c48, Size: 0x10]
	delegate OnCharacterStatesChange;//[Offset: 0x2c58, Size: 0x10]
	bool bIsCheckLevelStreamingReturnBeforeFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c68, Size: 0x1]
	bool bIsLevelLoadedSetGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c69, Size: 0x1]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x2c70, Size: 0x10]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c80, Size: 0x1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x2c88, Size: 0x10]
	float GotoSpectatingDelayTime;//[Offset: 0x2c9c, Size: 0x4]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x2ca0, Size: 0x8]
	AIPlayerInfoInOB[] NearAIPlayerList;//[Offset: 0x2ca8, Size: 0x10]
	FString TPPFollowAIPlayerKey;//[Offset: 0x2cc0, Size: 0x10]
	<FString,AllStarReportData> AllStarReportInfoCache;//[Offset: 0x2cd0, Size: 0x50]
	ObservedData ObservedData;//[Offset: 0x2d20, Size: 0x50]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d81, Size: 0x1]
	delegate OnToggleOBMapShowHide;//[Offset: 0x2d88, Size: 0x10]
	delegate OnInterruptGameButtonShow;//[Offset: 0x2d98, Size: 0x10]
	delegate OnToggleOBPlayerList;//[Offset: 0x2db0, Size: 0x10]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x2dc0, Size: 0x10]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x2dd0, Size: 0x10]
	delegate OnToggleOBTeamList;//[Offset: 0x2de0, Size: 0x10]
	delegate WeaponEquipAttachment;//[Offset: 0x2df0, Size: 0x10]
	delegate OnVehicleExitFreeCamera;//[Offset: 0x2e00, Size: 0x10]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x2e10, Size: 0x10]
	delegate OnOBVehicleViewChangedDelegate;//[Offset: 0x2e20, Size: 0x10]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x2e40, Size: 0x4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x2e44, Size: 0x4]
	bool IsSmoothlyVehicleViewSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e54, Size: 0x1]
	bool NeedCheckChangeToVehicleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e55, Size: 0x1]
	CurveVector* OBVehicleViewArmOffset;//[Offset: 0x2e58, Size: 0x8]
	int OBVehicleViewAcceRecordsNum;//[Offset: 0x2e60, Size: 0x4]
	class CameraShake* OnHitCameraShake;//[Offset: 0x2e78, Size: 0x8]
	CurveVector* OBVehicleImpulseClamp;//[Offset: 0x2e88, Size: 0x8]
	CurveFloat* OBVehicleImpulseRollClamp;//[Offset: 0x2e90, Size: 0x8]
	float CurrentOBVehicleViewArmLength;//[Offset: 0x2e98, Size: 0x4]
	float OBVehicleViewArmLengthMax;//[Offset: 0x2e9c, Size: 0x4]
	float OBVehicleViewArmLengthMin;//[Offset: 0x2ea0, Size: 0x4]
	Vector OBVehicleRelativeLocation;//[Offset: 0x2ea4, Size: 0xc]
	float OBVehicleViewFOV;//[Offset: 0x2eb0, Size: 0x4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x2eb8, Size: 0x4]
	byte iPlayerAliasInfoCount;//[Offset: 0x2ebc, Size: 0x1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ebd, Size: 0x1]
	bool IsAutoGetCircleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ebe, Size: 0x1]
	delegate OnCharacterReceiveHealthChangeHistory;//[Offset: 0x2ec0, Size: 0x10]
	delegate OnLiveStateChanged;//[Offset: 0x2ed0, Size: 0x10]
	int FireMode;//[Offset: 0x2ee0, Size: 0x4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee4, Size: 0x1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee5, Size: 0x1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee6, Size: 0x1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee7, Size: 0x1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x2ee8, Size: 0x10]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x2ef8, Size: 0x10]
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x2f08, Size: 0x10]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x2f18, Size: 0x10]
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x2f28, Size: 0x10]
	Actor*[] nowGrenadeList;//[Offset: 0x2f38, Size: 0x10]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f48, Size: 0x1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x2f50, Size: 0x10]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x2f60, Size: 0x10]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x2f70, Size: 0x10]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x2f80, Size: 0x10]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x2f90, Size: 0x10]
	delegate tirggerLandingVoiceCheckDelegate;//[Offset: 0x2fa0, Size: 0x10]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fb0, Size: 0x1]
	delegate OnPlayerCanJump;//[Offset: 0x2fb8, Size: 0x10]
	delegate OnPlayerCannotJump;//[Offset: 0x2fc8, Size: 0x10]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd8, Size: 0x1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x2fe0, Size: 0x10]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x2ff0, Size: 0x10]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3000, Size: 0x1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x3004, Size: 0x4]
	float CanOpenParachuteHeight;//[Offset: 0x3008, Size: 0x4]
	float ForceOpenParachuteHeight;//[Offset: 0x300c, Size: 0x4]
	float CloseParachuteHeight;//[Offset: 0x3010, Size: 0x4]
	float RealTimePawnHeight;//[Offset: 0x3014, Size: 0x4]
	float OB_RotationLagSpeed;//[Offset: 0x3024, Size: 0x4]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x3040, Size: 0x18]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x3058, Size: 0x10]
	Actor* ThePlane;//[Offset: 0x3068, Size: 0x8]
	float GameAssistantJoyStickOpacity;//[Offset: 0x3078, Size: 0x4]
	delegate OnNotifyServerOpenPickUpBox;//[Offset: 0x3080, Size: 0x10]
	delegate OnNotifyServerFirstOpenPickUpBox;//[Offset: 0x3090, Size: 0x10]
	delegate OnNotifyServerOpenAnyPickUpBox;//[Offset: 0x30a0, Size: 0x10]
	bool bClientCheckResetViewTargetToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b0, Size: 0x1]
	float ClientCheckResetViewTargetToCharacterConfigSeconds;//[Offset: 0x30b4, Size: 0x4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x30d0, Size: 0x10]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x30e8, Size: 0x8]
	FString LastBreathMurder;//[Offset: 0x30f8, Size: 0x10]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3108, Size: 0x1]
	uint64 LastBreathMurderUID;//[Offset: 0x3110, Size: 0x8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x3118, Size: 0x8]
	FString murderName;//[Offset: 0x3120, Size: 0x10]
	FString FinalMurderName;//[Offset: 0x3130, Size: 0x10]
	uint64 MurderUID;//[Offset: 0x3140, Size: 0x8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3148, Size: 0x1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3149, Size: 0x1]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314a, Size: 0x1]
	bool bDisableItemOperationSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3193, Size: 0x1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x31a8, Size: 0x50]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x31f8, Size: 0x50]
	float OceanSideDetectDistance;//[Offset: 0x3250, Size: 0x4]
	float OceanSideDetectInterval;//[Offset: 0x3254, Size: 0x4]
	int CurrOBAirDropID;//[Offset: 0x3258, Size: 0x4]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x3260, Size: 0x50]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32b0, Size: 0x1]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x33c0, Size: 0x8]
	AkAudioEvent* HitVehicleSoundFlesh;//[Offset: 0x33c8, Size: 0x8]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d0, Size: 0x1]
	FString ClientActivePlatformProfileName;//[Offset: 0x33d8, Size: 0x10]
	float ZMoveDisCalcThreshold;//[Offset: 0x3438, Size: 0x4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343c, Size: 0x1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x3440, Size: 0x8]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3448, Size: 0x1]
	enum ServerStateType;//[Offset: 0x3449, Size: 0x1]
	enum ClientStateType;//[Offset: 0x344a, Size: 0x1]
	enum GameStateMsgType;//[Offset: 0x344b, Size: 0x1]
	enum LastStateType;//[Offset: 0x344f, Size: 0x1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3453, Size: 0x1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3454, Size: 0x1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3455, Size: 0x1]
	float ObservingTime;//[Offset: 0x3458, Size: 0x4]
	KillerTracker* KillerCameraTracker;//[Offset: 0x3460, Size: 0x8]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347c, Size: 0x1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347d, Size: 0x1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x3490, Size: 0x8]
	FString DefaultHUDClassPath;//[Offset: 0x3498, Size: 0x10]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x34c0, Size: 0x10]
	STExtraPlayerController* DieInstigator;//[Offset: 0x34d0, Size: 0x8]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d8, Size: 0x1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d9, Size: 0x1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x34e0, Size: 0x8]
	int BOptimizeBulletHit;//[Offset: 0x34e8, Size: 0x4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x34f0, Size: 0x50]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x3540, Size: 0x10]
	int MaxTeamFootprintCount;//[Offset: 0x3550, Size: 0x4]
	int MaxOtherFootprintCount;//[Offset: 0x3554, Size: 0x4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x3558, Size: 0x50]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x35a8, Size: 0x50]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x3600, Size: 0x8]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x3608, Size: 0x10]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x3618, Size: 0x50]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x3688, Size: 0x8]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x3690, Size: 0x8]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x3698, Size: 0x8]
	delegate OnPlayerEnterRevivalStateDelegate;//[Offset: 0x36f0, Size: 0x10]
	delegate OnPlayerLeaveRevivalStateDelegate;//[Offset: 0x3700, Size: 0x10]
	delegate SetCaptureIDCardStatusDelegate;//[Offset: 0x3710, Size: 0x10]
	delegate OnPlayerExitGameDelegate;//[Offset: 0x3720, Size: 0x10]
	delegate OnEnterVehicleDelegate;//[Offset: 0x3750, Size: 0x10]
	delegate ClientOnEnterVehicle;//[Offset: 0x3760, Size: 0x10]
	delegate ClientOnLeaveVehicle;//[Offset: 0x3770, Size: 0x10]
	delegate ClientOnChangeVehicleSeatCompletedDelegate;//[Offset: 0x3780, Size: 0x10]
	delegate OnVehicleWeaponIsReadyForFireDelegate;//[Offset: 0x3790, Size: 0x10]
	delegate ClientOnDeathReplayDataWhenFatalDamagedDelegate;//[Offset: 0x37a0, Size: 0x10]
	delegate OnViewTargetChange;//[Offset: 0x37b0, Size: 0x10]
	delegate OnPreViewTargetChange;//[Offset: 0x37c0, Size: 0x10]
	delegate OnImprisonStateChange;//[Offset: 0x37d0, Size: 0x10]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37e0, Size: 0x1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37e1, Size: 0x1]
	float ControllerRelativeYawMin;//[Offset: 0x37e4, Size: 0x4]
	float ControllerRelativeYawMax;//[Offset: 0x37e8, Size: 0x4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x37f4, Size: 0x8]
	int IdCardMarkType;//[Offset: 0x3800, Size: 0x4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380a, Size: 0x1]
	int VehicleControlMode;//[Offset: 0x380c, Size: 0x4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3810, Size: 0x1]
	delegate InfectionShowKillNumDelegate;//[Offset: 0x3818, Size: 0x10]
	delegate InfectionPlayerPawnInitType;//[Offset: 0x3828, Size: 0x10]
	float StreamingDistanceScaleFlying;//[Offset: 0x3838, Size: 0x4]
	bool bClearWeaponRecordOnPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x383c, Size: 0x1]
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x383d, Size: 0x1]
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x3840, Size: 0x10]
	bool bIsPlayerOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3850, Size: 0x1]
	delegate OnPlayerInOutBlueCircleChangedDelegate;//[Offset: 0x3858, Size: 0x10]
	float MoveDistanceThreshold;//[Offset: 0x3868, Size: 0x4]
	float SpeedRecordTime;//[Offset: 0x386c, Size: 0x4]
	float SpeedRecordAccTime;//[Offset: 0x3870, Size: 0x4]
	delegate OnSelfPawnDeathDelegate;//[Offset: 0x3878, Size: 0x10]
	delegate OnChangeToWalkingDead;//[Offset: 0x3888, Size: 0x10]
	bool bCanChangeToWalkingDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3898, Size: 0x1]
	delegate OnNotifyCanChangeToWalkingDead;//[Offset: 0x38a0, Size: 0x10]
	delegate OnChangeToWalkingDeadRes;//[Offset: 0x38b0, Size: 0x10]
	bool GMDisableLeftScreenControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c0, Size: 0x1]
	bool IsJoystickInLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c1, Size: 0x1]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x38c8, Size: 0x10]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x38d8, Size: 0x10]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x38e8, Size: 0x10]
	delegate OnInfectionShowTipMsgDelegate;//[Offset: 0x38f8, Size: 0x10]
	delegate OnInfectionPlaySoundEventDelegate;//[Offset: 0x3908, Size: 0x10]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x3918, Size: 0x8]
	uint32 LastKillerKey;//[Offset: 0x3920, Size: 0x4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3924, Size: 0x1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3925, Size: 0x1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3930, Size: 0x1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3931, Size: 0x1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3932, Size: 0x1]
	float LastReportAntiDataTime;//[Offset: 0x3934, Size: 0x4]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x3938, Size: 0x10]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x3948, Size: 0x10]
	delegate OnSpawnVehicleServerTimeUpdatedDelegate;//[Offset: 0x3958, Size: 0x10]
	bool bDisableTouchMoveInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3968, Size: 0x1]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x3970, Size: 0x10]
	delegate OnPlayerNumOnPlaneChangedDelegate;//[Offset: 0x3980, Size: 0x10]
	delegate OnReconnectResetUIByPlayerControllerStateDelegate;//[Offset: 0x3990, Size: 0x10]
	delegate OnMemberVoiceDelegate;//[Offset: 0x39a0, Size: 0x10]
	delegate HideAllUIAfterDeadTipsShowDelegate;//[Offset: 0x39b0, Size: 0x10]
	delegate OnVehicleWarKilledTrackerStartDelegate;//[Offset: 0x39c0, Size: 0x10]
	delegate OnVehicleWarKilledTrackerFinishDelegate;//[Offset: 0x39d0, Size: 0x10]
	delegate OnVehicleWarVehicleRepawnDelegate;//[Offset: 0x39e0, Size: 0x10]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x39f0, Size: 0x10]
	FloatingTextComponent* FloatingTextComp;//[Offset: 0x3a00, Size: 0x8]
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x3a20, Size: 0x10]
	<byte,ParachuteAnimAssetData> ParachuteAnimAssetCache;//[Offset: 0x3a30, Size: 0x50]
	enum CurrentWeaponFunction;//[Offset: 0x3a80, Size: 0x1]
	float WeaponFunctionChangingInterval;//[Offset: 0x3a84, Size: 0x4]
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a88, Size: 0x1]
	float WeaponFunctionLastChangingTime;//[Offset: 0x3a8c, Size: 0x4]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x3a90, Size: 0x8]
	bool bDstWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa0, Size: 0x1]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab0, Size: 0x1]
	delegate OnIndoorStateChangeDelegate;//[Offset: 0x3ab8, Size: 0x10]
	double LastFlyLeapPlatfromTime;//[Offset: 0x3b18, Size: 0x8]
	bool bEnableDSErrorLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b70, Size: 0x1]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b71, Size: 0x1]
	<int,int> ActivitdedIDMap;//[Offset: 0x3b78, Size: 0x50]
	WeaponHitDetailInfo ShowWeaponHitDetailInfo;//[Offset: 0x3be0, Size: 0x18]
	WeaponHitDetailInfo CacheWeaponHitDetailInfo;//[Offset: 0x3bf8, Size: 0x18]
	LastGameRemainItemData LastGameRemainItemData;//[Offset: 0x3c10, Size: 0x38]
	bool bAddMovementTickInSpect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c48, Size: 0x1]
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4a, Size: 0x1]
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4b, Size: 0x1]
	float FadeGrayInterpSpeed;//[Offset: 0x3c4c, Size: 0x4]
	float ParachuteSlideReportDuration;//[Offset: 0x3c54, Size: 0x4]
	float ParachuteReportLocationDiffSq;//[Offset: 0x3c58, Size: 0x4]
	ParachuteData ParachuteData;//[Offset: 0x3c60, Size: 0x90]
	float TrustClientSinceEnterParachuteJump;//[Offset: 0x3cf8, Size: 0x4]
	float ClientParachuteLandedFinishTimeMax;//[Offset: 0x3d00, Size: 0x4]
	VehicleMoveDragData DragData;//[Offset: 0x3d10, Size: 0x20]
	float ReportSimulatedDragInterval;//[Offset: 0x3d30, Size: 0x4]
	delegate OnTeammateRescueStateChanged;//[Offset: 0x3d40, Size: 0x10]
	TimerHandle LocalRescueEndedTimer;//[Offset: 0x3d50, Size: 0x8]
	delegate OnSwimDistanceChange;//[Offset: 0x3d78, Size: 0x10]
	ScreenAppearanceActor* ScreenAppearanceMgr;//[Offset: 0x3d88, Size: 0x8]
	bool bIsInFreeBuildState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d94, Size: 0x1]
	PlayerPetSpectatorComponent* PetSpectatorComp;//[Offset: 0x3d98, Size: 0x8]
	CacheSACData[] CacheSACDataArray;//[Offset: 0x3db0, Size: 0x10]
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x61e3fd4
	void ViewPlane();// 0x61e3fc0
	void VehicleWarOpenSequencerDelegate__DelegateSignature(out const BattleOpenSequencerInfo SequencerInfo);// 0x70644c4
	void VehicleWarFireTakeDamagedEvent(Vector CauserLocation, Actor* DamageCauser, float Damage);// 0x61e3ecc
	bool UseSharedBagSkin();// 0x61e3e8c
	void UserDropItemOperation(ItemDefineID DefineID);// 0x61e3e00
	void UseItem(int ID);// 0x61e3d84
	void UpdateTeammatesStreaming();// 0x61e3d68
	void UpdateSurfboardUI();// 0x61e3d54
	void UpdateSelfRevivalCountdown(int CurCountdown);// 0x61e3cd0
	void UpdatePoseViewPitchLimit();// 0x61e3cbc
	void UpdatePoseState(byte PoseType);// 0x61e3c40
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x61e3b7c
	void UnPossess();// 0x61e3b60
	void TryReqMoveToTarget(int FollowType, FString FollowUID);// 0x61e39ec
	void TriggerVehicleVoiceCheckFuction(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x61e38f8
	void TriggerShotVoiceCheckFuction(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x61e3774
	void TriggerMoveVoiceCheckFuction(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x61e3680
	void TriggerLandingVoiceCheckFuction(Vector posVector, float showTime);// 0x61e35c8
	void TriggerGlassVoiceCheckFuction(Vector posVector, float showTime);// 0x61e3510
	void TPPFollowAI(FString AIPlayerKey);// 0x61e3468
	void TouchMove(Vector Loc, byte FingerIndex);// 0x61e33b0
	bool TouchEnd(byte PressType);// 0x61e3320
	void TouchBegin(byte PressType);// 0x61e32a4
	void ToggleOBVehicleView();// 0x61e3290
	void ToggleOBTPPFollowFreeView();// 0x61e327c
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x61e31f8
	void TeamMateUAVStateChanged(STExtraPlayerState* STPlayerState, TeamateStateUAVChangedCompressData ChangedCompressedData);// 0x61e3124
	void TeamMateStateChangedZNQ(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, float HealthMax, int VoiceID);// 0x61e2f3c
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, int VoiceID);// 0x61e2d8c
	void SyncSimulateCharacterLocation(STExtraBaseCharacter* TargetCharacter, Vector Location);// 0x61e2ccc
	void SwitchToTeamByNumPressed();// 0x61e2cb8
	void SwitchToPlayerByNumPressed();// 0x61e2ca4
	void SwitchToDeadBox();// 0x61e2c90
	void SwitchShowUI();// 0x61e2c7c
	void SwitchPoseStateWithTransformServer(STExtraBaseCharacter* TargetCharacter, byte PoseState, Vector Position, Rotator Rotation);// 0x61e2b04
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x61e2a14
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState, enum FailReason);// 0x61e28dc
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x61e281c
	void SwitchMouseCursorShowState();// 0x61e2808
	void SwitchGenerateItem();// 0x61e27a8
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x61e26f0
	void SwitchCameraModeByOrder();// 0x61e26dc
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x61e2594
	void SwimDistanceDelegate__DelegateSignature(float Distance);// 0x70644c4
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x61e2498
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x61e23c0
	void StopAbsorb();// 0x61e2360
	void StartLandOnGroundAfterJumpPlane();// 0x61e234c
	void StartGame();// 0x61e2338
	void StartFreeCamera(byte FigerIndex);// 0x61e22bc
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x61e21f8
	void SpawnGameFeatureActor(FString Path);// 0x61e2150
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x61e2060
	void SpawnAIPosi(int ID, int AITeamID, float PosiX, float PosiY, float PosiZ);// 0x61e1ef8
	void SpawnAI(int Num, bool bSpawnAll);// 0x61e1e38
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x61e1dbc
	bool SkipChangeViewTarget();// 0x61e1d7c
	void ShutDownBroadcastFatalDamage(bool IsOpen);// 0x61e1cf8
	void ShowStringMsg(const FString Message, int MsgID, int ItemId, FString PlayerKeyString);// 0x61e1aec
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x61e19c4
	void ShowMovePath(const Vector[] Path);// 0x61e1914
	void ShowGameTips(int TipsID, FString Params);// 0x61e1824
	void ShowFireBtn(bool bShow);// 0x70644c4
	void ShowBulletShoot(Vector StartLoc, Rotator Rot);// 0x61e1764
	void ShowAnimationButton(bool IsShow, int NewUIType);// 0x61e1694
	bool ShouldShowVoiceVisualizationForTrainingMode();// 0x61e1654
	bool ShouldShowVoiceVisualizationForSameTeam(Pawn* Other);// 0x61e15bc
	bool ShouldSendFatalDamageToClient(UAECharacter* Causer, UAECharacter* Victim);// 0x61e14ec
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x61e145c
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x61e13d8
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);// 0x61e1354
	void SetVirtualJoystickWidgetRender(enum Visible);// 0x61e12d8
	void SetViewYawLimit(float YawMin, float YawMax);// 0x61e1224
	void SetViewTargetTest(Actor* NewViewTarget);// 0x61e11a8
	void SetViewPitchLimit(float PitchMin, float PitchMax);// 0x61e10f4
	void SetTouchFingerIndex(bool TouchBegin, byte FingerIndex);// 0x61e102c
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x61e0f28
	void SetSpectatorPawnLotation(out const Vector NewLocation);// 0x61e0ea0
	void SetSkillFingerIndex(byte FingerIndex);// 0x61e0e24
	void SetSingleThreadUpdateAnim(bool InIsSingleThread);// 0x61e0da0
	void SetShoulderFingerIndex(bool TouchBegin, byte FingerIndex);// 0x61e0cd8
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x61e0c10
	void SetPlayerMark(Vector Loc);// 0x61e0b5c
	void SetPlayerMapMultiMark(Vector NewLoc, bool bAdd, int MaxNum, bool bClearAll);// 0x61e09c8
	void SetPlane(Actor* Plane);// 0x61e094c
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x61e0840
	void SetParachuteAnimCached(byte AnimOverrideType, bool InValue);// 0x61e0780
	void SetOBVehicleView(bool IsActive);// 0x61e06fc
	void SetObservingTime(float Time);// 0x61e0680
	void SetMovable(bool IsMovable);// 0x61e05fc
	void SetLocalUnPossesTest(bool bControllerSide, bool bPawnSide);// 0x61e052c
	void SetLaunchFlyStateOnServer(enum StateType);// 0x61e04b0
	void SetLaunchFlyState(enum StateType);// 0x61e0434
	void SetJoyStickScale(float JSScale);// 0x61e03b8
	void SetJoyStickPtrFireMode(int FireMode);// 0x61e033c
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x61e0284
	void SetJoyStickOpacityNotUpdate(float JSOpacity);// 0x61e0208
	void SetJoyStickOpacity(float JSOpacity);// 0x61e018c
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x61e0114
	void SetJoyStickCenter(Vector2D JSCenter);// 0x61e009c
	void SetIsSnowy(bool bSnowy);// 0x61e0018
	void SetIsShowBlood(bool InIsShowBlood);// 0x61dff94
	void SetIsRainy(bool bRainy);// 0x61dff10
	void SetIsCacheReceiveRespawnZombie(bool isReceive);// 0x61dfe8c
	void SetIsBlizzard(bool bBlizzard);// 0x61dfe08
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x61dfd7c
	void SetHasResultState(bool InState);// 0x61dfcf8
	void SetGhostValue(bool OutValue);// 0x61dfc74
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x61dfb00
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x61dfa40
	void SetDisableTouchMoveInput(bool bDisable);// 0x61df9bc
	void SetCustomSensibility(int WeaponId, int AttrIndex, float Value);// 0x61df8cc
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x61df7a4
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x61df6b4
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x61df5ac
	void SetClientSpawnAndBackpackWeaponReplicatedDataArray(uint32 CharacterGUID, const ItemDefineID[] DataList, int WeaponSyncTicket);// 0x61df44c
	void SetCircleInfoToClient(GetCircleInfo ReConnectInfo);// 0x61df300
	void SetCaptureIDCardStatusDelegate__DelegateSignature(bool IsCapture);// 0x70644c4
	void SetCanJump(bool CanJump);// 0x61df27c
	void SetCanGotoExPlane(bool bFlag);// 0x61df1f8
	void SetCanDropItem(bool bCanDrop);// 0x61df174
	void SetBeKickedPlayerName(FString InPlayerName);// 0x61df040
	void SetAngledSightFingerIndex(bool TouchBegin, byte FingerIndex);// 0x61def78
	void SetAllStarReportDataByOpenID(FString InPlayerOpenID, out AllStarReportData InReportData);// 0x61dee7c
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x61decec
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x61debb4
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x61deb04
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x61dea54
	void ServerTriggerCharacterSkillWithID(int SkillID, bool bEnable);// 0x61de950
	void ServerTriggerCharacterCustomEvent(byte SkillEvent, int SkillID);// 0x61de860
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x61de6f4
	void ServerStopFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x61de404
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x61de114
	void ServerStopFillGas(STExtraShootWeapon* TargetWeapon);// 0x61de064
	void ServerStateTypeChanged__DelegateSignature(enum ServerStateType);// 0x70644c4
	void ServerStartPreBarrel(STExtraBaseCharacter* TargetCharacter, float HandledTime);// 0x61ddf74
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x61ddd34
	void ServerStartFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo, float MaxAimDistance, Vector2D ScreenAimRect);// 0x61ddb8c
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x61dda58
	void ServerStartFillGas(STExtraShootWeapon* TargetWeapon);// 0x61dd9a8
	void ServerStartBarrelNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* ShootWeapon);// 0x61dd8c0
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x61dd810
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte ShootType);// 0x61dd720
	void ServerSetReloadMethod(Actor* TargetActor, byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x61dd5f0
	void ServerSetObsverLocation(const Vector locat);// 0x61dd544
	void ServerSetIsFreeView(bool isFreeView);// 0x61dd480
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x61dd378
	void ServerSetFreeCamera(Rotator InRotation);// 0x61dd2c4
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x61dd1bc
	void ServerSetControlRotation(const Rotator NewRotation);// 0x61dd110
	void ServerSendLogToLobby(FString ErrorLog);// 0x61dd068
	void ServerReportWatchGamePlayerInfoButtonClick(uint64 WatchPlayer_UID, uint64 WatchedPlayer_UID, float Duration);// 0x61dcf40
	void ServerReportVehicleDrag(const VehicleMoveDragData InDragData);// 0x61dce58
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x61dcc78
	void ServerRemoteDestroyAllActor();// 0x61dcc64
	void ServerRemoteDestroyActor(int SingleId);// 0x61dcbe8
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x61dcaa8
	void ServerReceiveThePlane(int64 TimeStamp);// 0x61dc9f8
	void ServerQuitSpectating();// 0x61dc998
	void ServerPickItem(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x61dc708
	void ServerOpenParachute();// 0x61dc6a8
	void ServerObserveKiller();// 0x61dc648
	void ServerObserveCharacter(uint32 InPlayerKey);// 0x61dc598
	void ServerObserveAirDropBox(int boxId);// 0x61dc4e8
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x61dc3e4
	void ServerKickPlayerFromGame(uint32 InPlayerKey);// 0x61dc334
	void ServerJumpFromPlane();// 0x61dc2d4
	void ServerInterruptGame();// 0x61dc274
	void ServerInternalSetTeammateForbidPick(bool bIsForbid, int TLogIndex);// 0x61dc1ac
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x61dc0c0
	void ServerHandleMsg(enum Msg);// 0x61dc010
	void ServerHandleHitDataArrayFlowOpt(STExtraShootWeapon* TargetWeapon, SACData AntiCheatData, const BulletHitInfoWithoutDamage[] HitInfoWithoutDamageArray);// 0x61dbe2c
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x61dbd08
	void ServerHandleExtraHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData, const HitTargetExtraData[] HitExtraDataArray);// 0x61dbb78
	void ServerGetTotalPlayers();// 0x61dbb18
	void ServerGetPlayerAliasInfoList();// 0x61dbab8
	void ServerGetCircleInfo();// 0x61dba58
	void ServerFight();// 0x61db9f8
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x61db948
	void ServerExitFromFlyingVehicle(STExtraVehicleBase* ExitVehicle, float NewOpenParachuteHeight, float NewCanOpenParachuteHeight, float NewForceOpenParachuteHeight, float NewCloseParachuteHeight, bool bIsInSkipOpenParachuteHeight);// 0x61db754
	void ServerExitFreeCamera();// 0x61db6f4
	void ServerDropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x61db5a8
	void ServerDriveFireBalloon(STExtraFireBalloon* FireBalloon, bool bNewDrive);// 0x61db4a4
	void ServerDoPickupRevivalFlag();// 0x61db444
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x61db338
	void ServerControlFireBalloonMoveEx(STExtraFireBalloon* FireBalloon, float MoveUpValue, float MoveForwardValue, float MoveRightValue);// 0x61db1d0
	void ServerControlFireBalloonMove(STExtraFireBalloon* FireBalloon, float MoveUpValue);// 0x61db0e0
	void ServerCMD_RPC(FString Cmd);// 0x61db004
	void ServerCMD(FString Cmd);// 0x61daf5c
	void ServerClearTeammatesCache();// 0x61daefc
	void ServerChangeWeaponScheme(int Index);// 0x61dae4c
	void ServerChangeWeaponFunction(enum NewWeaponFunction);// 0x61dad9c
	void ServerChangeVehicleAvatar(const int AvatarID);// 0x61dacec
	void ServerChangeStatePC(enum TargetStateType);// 0x61dac70
	void ServerChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x61dab24
	void ServerAutoSwitchSameSlotWeapon(byte CurrentSlot);// 0x61daaa8
	void SendWeaponInfoToOB(out OBPlayerWeaponRecord[] WeaponReport);// 0x61da990
	void SendStringWithMsgID(FString Message, int MsgID, FString PlayerKeyString);// 0x61da844
	void SendStringMsgWithTransform(FString Message, int MsgID, int ItemId, FString PlayerKeyString, int MsgExtraParam, byte CheckSetting, bool bIncludeTeammates);// 0x61da600
	void SendStringMsg(FString Message, int MsgID, int ItemId, FString PlayerKeyString, int MsgExtraParam, byte CheckSetting, bool bIncludeTeammates);// 0x61da3bc
	void SendStringDirect(FString Message);// 0x61da314
	void SendLogToLobbyOnece(byte LogType);// 0x61da298
	void SendGameStateInitOK();// 0x61da238
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x61da180
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x61da040
	void SendCustomMsg(FString Message, int MsgExtraParam, bool bSTTMsg);// 0x61d9f14
	void S2C_ResponseSkillPrompt(int PromptID, float PastTime);// 0x61d9e24
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x61d9ce0
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x61d9b9c
	void RunOnNextFrameEvent();// 0x61d9b88
	void RunOnNextFrame__DelegateSignature();// 0x70644c4
	void RspGetVehiclePos(STExtraVehicleBase* SimVehicle, Vector pos);// 0x61d9ac8
	void RPC_ServerRefreshMaxBulletNum(STExtraShootWeapon* TargetWeapon);// 0x61d9a18
	void RPC_Server_VehicleWarSetPlayerHasLogin();// 0x61d99b8
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x61d9890
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x61d9600
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf);// 0x61d93b4
	void RPC_Server_ShootMultiEnergyAccumulateProjectileBulletsSimulate(STExtraShootWeapon* TargetWeapon, const ShootMultiBulletsParam[] LaunchParams, float CurAccEnergyPercent);// 0x61d9254
	void RPC_Server_ShootGrenadeBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf);// 0x61d9008
	void RPC_Server_SetRemainBoxIsSearched(PlayerRemainTombBox* RemainBox);// 0x61d8f58
	void RPC_Server_SetPlayerStateChoose(int choose);// 0x61d8ea8
	void RPC_Server_SetMicphoneTLogToServer(const TLog_Micphone MicphoneTlog);// 0x61d8df4
	void RPC_Server_SendLog(FString ErrorLog);// 0x61d8d18
	void RPC_Server_RequestRefreshOwnerPawnHealth();// 0x61d8cb8
	void RPC_Server_ReqHealth();// 0x61d8c58
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x61d8b7c
	void RPC_Server_RemovePhotonDestructibleFragment(const HitResult Hit);// 0x61d8a88
	void RPC_Server_RemoveFracturedMeshFragment(Actor* ImpactActor, Actor* OtherActor, Vector NormalImpulse, const HitResult Hit);// 0x61d88d8
	void RPC_Server_PrintHP();// 0x61d8878
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x61d8788
	void RPC_Server_NotifyServerUseSpot(SupplySpot* InSupplySpot);// 0x61d86d8
	void RPC_Server_NotifyServerUseEnhancerSpot(EnhancerSpot* InEnhancerSpot);// 0x61d8628
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x61d852c
	void RPC_Server_NotifyServerPetNotDownload(int PetId);// 0x61d847c
	void RPC_Server_NotifyServerOpenAnyPickUpBox(PlayerTombBox* TombBox);// 0x61d83cc
	void RPC_Server_NotifyServerLaserProjectileBulletAutoExplode(ProjectileBulletBase* Bullet, const ExplosionProjectileHitInfo InExpProjectileInfo);// 0x61d82d0
	void RPC_Server_NotifyServerEnemyStep(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x61d819c
	void RPC_Server_NotifyServerEnemyShoot(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x61d8014
	void RPC_Server_NotifyServerAddOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x61d7f38
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window, bool bIsSelfInstigator);// 0x61d7c38
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x61d7bd8
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr(const ItemDefineID[] WeaponIDArray, WeaponManagerComponent* WeaponMgr);// 0x61d7ab8
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(const ItemDefineID[] WeaponIDArray);// 0x61d79dc
	void RPC_Server_NorifyServerAddFirstOpenedTreasureBoxes(const int[] TreasureBoxIDArray);// 0x61d7900
	void RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes(const int[] PlayerTombBoxIDArray);// 0x61d7824
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x61d7748
	void RPC_Server_EquipWeaponBullet(STExtraShootWeapon* TargetWeapon, int BulletID);// 0x61d7658
	void RPC_Server_ConfirmMisKill(uint32 bConfirm, const GameBaseInfo ClientBaseInfo);// 0x61d7540
	void RPC_Server_ClientHasReactivated();// 0x61d74e0
	void RPC_Server_ClientHasFinishedRecoverWeapon_New(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x61d739c
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x61d7258
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x61d7168
	void RPC_Server_BattleStateTime(float InBattleStateTime);// 0x61d70b8
	void RPC_ReviveState_GiveUpRevive();// 0x61d7058
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x61d6fa8
	void RPC_RemoteCustomEventWithObjects(FString EventTag, FString CustomParam, Object* TObject01, Object* TObject02);// 0x61d6de8
	void RPC_RemoteCustomEventWithObject(FString EventTag, FString CustomParam, Object* TObject);// 0x61d6c60
	void RPC_RemoteCustomEvent(FString EventTag, FString CustomParam);// 0x61d6b18
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x61d6a38
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x61d6988
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x61d6844
	void RPC_OwnerClient_SetTeammatesYouAttackFirstToClient(const FString[] ListOnServer);// 0x61d670c
	void RPC_OwnerClient_SetMurderInfo(FString murderName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x61d654c
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x61d638c
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x61d62c8
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x61d612c
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int Count);// 0x61d6038
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x61d5f48
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x61d5e58
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x61d5d10
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector_NetQuantize10 BulletStart, Vector_NetQuantize10 BulletEnd);// 0x61d5c18
	void RPC_OwnerClient_FlushPlayerHealthChangeHistory(const float[] ChangeHistory, STExtraBaseCharacter* TargetPlayer);// 0x61d5af8
	void RPC_OwnerClient_ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x61d59c8
	void RPC_GiveUpGame();// 0x61d5968
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x61d5838
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime);// 0x61d570c
	void RPC_DrawDebug_Box(const Vector Center, const Vector Extent, const Color Color, float LifeTime);// 0x61d55e0
	void RPC_ClientSetVehicleSpawnServerTime(float STime);// 0x61d555c
	void RPC_Client_UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x61d546c
	void RPC_Client_UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x61d52b4
	void RPC_Client_UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x61d5138
	void RPC_Client_UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x61d4fbc
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x61d4e18
	void RPC_Client_ShowNewCommonCountDown(float TotalTime, int StringId, int TypeId);// 0x61d4d20
	void RPC_Client_SetSpectatorPawnLotation(const Vector NewLocation);// 0x61d4c74
	void RPC_Client_RemoteDestroyAllActor();// 0x61d4c58
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x61d4bd4
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x61d4a64
	void RPC_Client_PreSetBulletListInClip(STExtraShootWeapon* TargetWeapon, BulletInClip CurBulletInClip);// 0x61d480c
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator Rot, byte SurfaceType);// 0x61d46d4
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x61d4490
	void RPC_Client_NotifyHealth(float Health);// 0x61d43e0
	void RPC_Client_InfectionShowKillNum(int ShowKillNum);// 0x61d435c
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x61d4214
	void RPC_Client_ClientDisplayScoreChangeTips(WarPlayerStateScore ScoreStruct);// 0x61d4138
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x61d4050
	void RPC_Client_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x61d3f60
	void RPC_Client_AirAttack(const AirAttackOrder airAttackOrderSrc, const Vector AirAttackArea);// 0x61d3e10
	void RevivalTemateSuccess();// 0x61d3df4
	void RevivalTemateFailImpl(FString Reason);// 0x61d3d44
	void RevivalTemateFail(FString Reason);// 0x61d3c94
	float RetriveMobileContentScaleFactor();// 0x61d3c60
	void RestoreDefaultInteractionSize(int JSIndex);// 0x61d3be4
	void RespawnRecoverData(UAEPlayerController* PC);// 0x61d3b68
	bool ResetValidTouchMoveFrame();// 0x61d3b30
	void ResetMissingUIUpdate();// 0x70644c4
	void ResetIgnoreMoveInput();// 0x61d3b14
	void RequireNetCullingDistanceByDevice();// 0x61d3ab4
	void RequireDeviceInfo();// 0x61d3a98
	void RequestPlayerNewbieInfo();// 0x61d3a84
	bool RequestChangeWearInPhoto(int NewIndex);// 0x61d39f4
	bool RequestChangeWearInBattle(int NewIndex);// 0x61d3964
	bool RequestChangeWear(int NewIndex);// 0x61d38d4
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x61d3810
	void ReqRecordEnterIceMountain();// 0x61d37b0
	void ReqGetVehiclePos(STExtraVehicleBase* SimVehicle);// 0x61d3700
	void ReportWatchGamePlayerInfoButtonClick(float DuriationTime);// 0x61d3684
	void ReportVehicleMoveFlow(const VehicleMoveFlow VehicleMoveFlow);// 0x61d3558
	void ReportPlayerPositionFlow(const PlayerPositionFlow PlayerPositionFlow);// 0x61d342c
	void ReportClientParachuteData(ParachuteData InParachuteData);// 0x61d31f8
	void ReportAntiCheatInfo();// 0x61d31e4
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x61d3168
	void RemoveCustomSensibility(int WeaponId);// 0x61d30ec
	void RemoveClientSpawnAndBackpackWeaponReplicatedData(const ItemDefineID WeaponData);// 0x61d3038
	void ReleaseFire();// 0x70644c4
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x61d2fbc
	void ReInitParachuteItem();// 0x61d2fa8
	void RefreshTopMostUIPanel(byte Type);// 0x70644c4
	void RefreshShootDetailInfo();// 0x61d2f94
	void RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x70644c4
	void RecoverStatusAfterReconnecting();// 0x61d2f78
	void RecoverJoystick(int FingerIndex);// 0x61d2efc
	void RecordPathPoint();// 0x61d2ee8
	void ReceiveClientRestart();// 0x70644c4
	void ReceiveBackpackComponent();// 0x61d2ecc
	void QuitSpectatingReSetData();// 0x61d2eb8
	void QuitSpectating();// 0x61d2ea4
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x61d2d80
	void PreViewTargetChangeDelegate__DelegateSignature(Actor* NewTarget, Actor* PrevTarget);// 0x70644c4
	void PressGrenade(bool isThrow);// 0x70644c4
	void PressFire(int FingerIndex);// 0x70644c4
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x61d2cc8
	void PlayerKillingDelegate__DelegateSignature();// 0x70644c4
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0x70644c4
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0x70644c4
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0x70644c4
	void PlayerControllerSelfPawnDeathDelegate__DelegateSignature();// 0x70644c4
	void PlayerControllerNotifyChangeToWalkingDead__DelegateSignature(bool bCanChange, bool bIsWalkingDeadFinish);// 0x70644c4
	void PlayerControllerChangeToWalkingDeadRes__DelegateSignature(bool bSucc);// 0x70644c4
	void PlayerControllerChangeToWalkingDead__DelegateSignature();// 0x70644c4
	void PlayBattleSound(FString BankName, FString SoundName);// 0x61d2bb8
	void PickupInitialItemListForRobustness();// 0x61d2ba4
	void PerRespawnClearOtherPawn();// 0x70644c4
	void OpenParachute();// 0x61d2b90
	void OnWeaponEquipAttachmentDelegate__DelegateSignature(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x70644c4
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x70644c4
	void OnWeakGuidEventDelegate__DelegateSignature(int GuidID, Actor* GuidActor);// 0x70644c4
	void OnWallFeedBack(bool _WallFeedBack);// 0x61d2b0c
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x61d2a54
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x61d29d8
	void OnViewTargetChangeVehicleSeat();// 0x61d29c4
	void OnViewTargetChangePoseDelegate__DelegateSignature(byte LastPose, byte NewPose);// 0x70644c4
	void OnViewTargetChange__DelegateSignature(STExtraBaseCharacter* ViewTarget, STExtraBaseCharacter* LastViewTarget, bool bIsOnPlane);// 0x70644c4
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x61d2948
	void OnVehicleWeaponIsReadyForFireDelegate__DelegateSignature();// 0x70644c4
	void OnVehicleWarVehicleRepawnDelegate__DelegateSignature();// 0x70644c4
	void OnVehicleWarKilledTrackerStartDelegate__DelegateSignature();// 0x70644c4
	void OnVehicleWarKilledTrackerFinishDelegate__DelegateSignature();// 0x70644c4
	void OnVehicleExitFreeCameraDelegate__DelegateSignature(bool bExit);// 0x70644c4
	void OnUseVehicleWarWeapon();// 0x61d2934
	void OnUseVehicleWarItem();// 0x61d2920
	void OnUseVehicleWarEyes();// 0x61d290c
	void OnUseInventoryItemDelegate__DelegateSignature();// 0x70644c4
	void OnUnequipWeaponDelegate__DelegateSignature();// 0x70644c4
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0x70644c4
	static void OnTryReqMoveToTarget(const Object* WorldContextObject, int FollowType, FString FollowUID);// 0x61d2760
	void OnTouchInterfaceChangedDelegate__DelegateSignature();// 0x70644c4
	void OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0x70644c4
	void OnTeammatesAllDie();// 0x61d274c
	void OnTeammateLogin(int InTeamID);// 0x61d26d0
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0x70644c4
	void OnTeamFollowStageChangeDelegate__DelegateSignature();// 0x70644c4
	void OnTakeDamaged__DelegateSignature(float DamageAngel, Actor* DamageCauser, float Damage);// 0x70644c4
	void OnSwitchWeaponDelegate__DelegateSignature();// 0x70644c4
	void OnSwitchToTeamByNumPressed__DelegateSignature();// 0x70644c4
	void OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x70644c4
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x70644c4
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x70644c4
	void OnStopWeakGuidDelegate__DelegateSignature();// 0x70644c4
	void OnStopFireDelegate__DelegateSignature();// 0x70644c4
	void OnStartFireDelegate__DelegateSignature();// 0x70644c4
	void OnStartAutoSprintCountDown__DelegateSignature();// 0x70644c4
	void OnSpectatorToFreeView__DelegateSignature();// 0x70644c4
	void OnSpectatorChangeFunc();// 0x61d26bc
	void OnSpectatorChange__DelegateSignature();// 0x70644c4
	void OnSpectatorCameraChange(bool bDie);// 0x70644c4
	void OnSpawnVehicleServerTimeUpdatedDelegate__DelegateSignature();// 0x70644c4
	void OnShowSkillPromptDelegate__DelegateSignature(int PromptID, float RemainTime);// 0x70644c4
	void OnShowHideSelfMarkDelegate__DelegateSignature();// 0x70644c4
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x70644c4
	void OnShowAutoSprintButton__DelegateSignature(bool Visible, Vector2D showPos, bool IsInside);// 0x70644c4
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x61d25ec
	void OnShowAllTeammatePosDelegate__DelegateSignature(bool bShow);// 0x70644c4
	void OnShowAliasInfoDelegate__DelegateSignature();// 0x70644c4
	void OnSetViewTarget__DelegateSignature(Actor* Target);// 0x70644c4
	void OnSetChangeCharacterState__DelegateSignature(byte ChangeState);// 0x70644c4
	void OnServerFinishPickupRevivalFlag();// 0x61d25d0
	void OnRevivalAndEnterAirplane__DelegateSignature();// 0x70644c4
	void OnRescuedStateChanged__DelegateSignature(bool bBeingRescued);// 0x70644c4
	void OnRepTeammateChange__DelegateSignature();// 0x70644c4
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x70644c4
	void OnRepPlayerState__DelegateSignature();// 0x70644c4
	void OnRepNotify_SetBattleOwner();// 0x61d25bc
	void OnRepNotify_ServerHitEnemyReplicatedData();// 0x61d25a8
	void OnRep_WeatherFog();// 0x61d2594
	void OnRep_WeaponSystemReconnectReplicateData();// 0x61d2580
	void OnRep_WeaponFunctionChanged();// 0x61d256c
	void OnRep_WeaponAvatarDataList();// 0x61d2550
	void OnRep_UsedSimulation();// 0x61d2534
	void OnRep_SwitchWeather();// 0x61d2520
	void OnRep_STExtraBaseCharacter();// 0x61d250c
	void OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x61d24f8
	void OnRep_ShowWeaponHitDetailInfo();// 0x61d24e4
	void OnRep_ServerStateType();// 0x61d24d0
	void OnRep_Plane();// 0x61d24bc
	void OnRep_ObservedItemList();// 0x61d24a8
	void OnRep_InWateringRangeBP();// 0x70644c4
	void OnRep_InWateringCRange();// 0x61d2444
	void OnRep_InitialEquipmentAvatar();// 0x61d2428
	void OnRep_InitialConsumableAvatar();// 0x61d240c
	void OnRep_ImprisonmentTeammateSucess();// 0x61d23f8
	void OnRep_GameStateMsgType();// 0x61d23e4
	void OnRep_ForbitPickEffect();// 0x61d23d0
	void OnRep_ForbitPick();// 0x61d23bc
	void OnRep_EnableDeathPlaybackDelay();// 0x61d23a8
	void OnRep_DeadTombBox();// 0x61d2394
	void OnRep_CanOpenParachute();// 0x61d2380
	void OnRep_CanJump();// 0x61d236c
	void OnRep_CanImprisonmentTeammate();// 0x61d2358
	void OnRep_bGhost();// 0x61d233c
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x61d2328
	void OnRep_BackpackRepActor();// 0x61d2314
	void OnRep_BackpackComponent();// 0x61d2300
	void OnRep_AutoAimType();// 0x61d22ec
	void OnRemindTeammateShoot__DelegateSignature(FString sPlayerKey, bool bShow, float nDist);// 0x70644c4
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0x70644c4
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0x70644c4
	void OnReleaseFire();// 0x61d22d8
	void OnReconnectResetUIByPlayerControllerStateDelegate__DelegateSignature();// 0x70644c4
	void OnReconnected__DelegateSignature();// 0x70644c4
	void OnRank__DelegateSignature(int Kills, int Rank);// 0x70644c4
	void OnPressVehicleWarMatchData();// 0x61d22c4
	void OnPressTurnplateQuickMsgBtn();// 0x61d22b0
	void OnPressTriggerEntireMapBtn();// 0x61d229c
	void OnPressShowTagVehileSeatListBtn();// 0x61d2288
	void OnPressRolewearChangeBtn(int Index);// 0x61d220c
	void OnPressItemSKillBtn();// 0x61d21f8
	void OnPressFire();// 0x61d21e4
	void OnPressBackpackBtn();// 0x61d21d0
	void OnPostTakeDamageForBP__DelegateSignature(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* DamageCauser);// 0x70644c4
	void OnPlayerUseRecoverItem();// 0x61d21bc
	void OnPlayerStateChanged();// 0x61d21a8
	void OnPlayerReConnected(int LostPlayerKey);// 0x61d20f8
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x70644c4
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x70644c4
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0x70644c4
	void OnPlayerNumOnPlaneChangedDelegate__DelegateSignature();// 0x70644c4
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0x70644c4
	void OnPlayerLostConnection(int LostPlayerKey);// 0x61d2048
	void OnPlayerLeaveRevivalStateDelegate__DelegateSignature();// 0x70644c4
	void OnPlayerKilledOthersPlayer__DelegateSignature(out const FatalDamageParameter FatalDamageParameter);// 0x70644c4
	void OnPlayerInOutWhiteCircleChangedDelegate__DelegateSignature(bool bIsInWhiteCircle);// 0x70644c4
	void OnPlayerInOutBlueCircleChangedDelegate__DelegateSignature(bool bIsInBlueCircle);// 0x70644c4
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x61d1fc4
	void OnPlayerFinalAssistKill__DelegateSignature();// 0x70644c4
	void OnPlayerExitGameDelegate__DelegateSignature(FName ParamState);// 0x70644c4
	void OnPlayerEnterRevivalStateDelegate__DelegateSignature();// 0x70644c4
	void OnPlayerControllerStateChangedDelegate__DelegateSignature(enum StateType);// 0x70644c4
	void OnPlayerControllerStateChangedCurrentType(enum CurrentType);// 0x61d1f48
	void OnPlayerClickDriveBtn();// 0x61d1f34
	void OnPlayerChangeWearingDone__DelegateSignature(int Index, float LastTime);// 0x70644c4
	void OnPlayerChangeWearingAnimFinished__DelegateSignature(int Reason);// 0x70644c4
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x61d1dd4
	void OnPickupItemDelegate__DelegateSignature(int ItemId, int Count, STExtraPlayerController* PC);// 0x70644c4
	void OnPickUpExpand();// 0x61d1d70
	void OnPickUpCollapsed(bool isCollapsed);// 0x61d1cec
	void OnPickUpActor(int Guid, int PickupCount, int TotalCount);// 0x61d1bfc
	void OnOneTeamPlayerHPChangeDelegate__DelegateSignature(int Index);// 0x70644c4
	void OnOccupyNewbieGuide(int inGuideID);// 0x61d1b80
	void OnOBVehicleHitActor(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x61d1a00
	void OnObserverLevelLoaded();// 0x61d19ec
	void OnObservedWeaponDataChanged(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x61d1948
	void OnObservedUsingWeaponChanged();// 0x61d1934
	void OnObservedPoisonFogStageChanged();// 0x61d1920
	void OnObservedItemsChanged();// 0x61d190c
	void OnObservedBulletNumChanged();// 0x61d18f8
	void OnOBPawnExitVehicle(STExtraVehicleBase* InTargetVehicle);// 0x61d187c
	void OnNightStateChangedDelegate__DelegateSignature();// 0x70644c4
	void OnNewbieGuideHandlePickUp(int inPickUpID);// 0x61d1800
	void OnMemberVoiceDelegate__DelegateSignature(int member, int Status);// 0x70644c4
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0x70644c4
	void OnLostConnection__DelegateSignature();// 0x70644c4
	void OnLocalCharacterTemperatureChangeDelegate__DelegateSignature(float currentTP, float ratioHP);// 0x70644c4
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x70644c4
	void OnLiveStateChanged__DelegateSignature(enum LiveState);// 0x70644c4
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x70644c4
	void OnKillerNotify(Actor* Killer);// 0x61d1784
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int Count);// 0x61d1680
	void OnItemOperationInfo(BackpackComponent* Sender, out const ItemOperationInfo ItemOperationInfo);// 0x61d15a8
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x61d14a4
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0x70644c4
	void OnInfectionShowTipMsgDelegate__DelegateSignature(int MsgID, int IconID, float showTime, float DelayTime);// 0x70644c4
	void OnInfectionPlaySoundEvent__DelegateSignature(int SoundID);// 0x70644c4
	void OnIndoorStateChangeDelegate__DelegateSignature();// 0x70644c4
	void OnImprisonStateChange__DelegateSignature(bool bEnterImprison);// 0x70644c4
	void OnHideSkillPromptDelegate__DelegateSignature(bool bForce, int PromptID);// 0x70644c4
	void OnHideFollowPanelAndBtnDelegate__DelegateSignature();// 0x70644c4
	void OnHandleCameraModeChangedDelegate__DelegateSignature(byte CameraMode);// 0x70644c4
	void OnGameStateChange__DelegateSignature(FName GameState);// 0x70644c4
	void OnGameStartDelegate__DelegateSignature();// 0x70644c4
	void OnGameStartCountDownDelegate__DelegateSignature(float CountDownTime);// 0x70644c4
	void OnGameModeStateChanged();// 0x70644c4
	void OnFingerMove__DelegateSignature(byte FingerIndex, Vector Loc);// 0x70644c4
	void OnExitGame__DelegateSignature();// 0x70644c4
	void OnEquipWeaponDelegate__DelegateSignature();// 0x70644c4
	void OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x70644c4
	void OnEquipmentAvatarChange__DelegateSignature();// 0x70644c4
	void OnEnterBattleResultStep();// 0x61d1490
	void OnDropItemOnPlane();// 0x61d147c
	void OnDropItemDelegate__DelegateSignature(int ItemId, int Count, STExtraPlayerController* PC);// 0x70644c4
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0x70644c4
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0x70644c4
	void OnDeadBoxExpand();// 0x61d1468
	void OnDeadBoxCollapsed(bool isCollpased);// 0x61d13e4
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);// 0x70644c4
	void OnCoopEmoteChangeDelegate__DelegateSignature(bool bShow, EmotePlayer EmotePlayer);// 0x70644c4
	void OnConsumableAvatarChange__DelegateSignature();// 0x70644c4
	void OnCongregationFlagDelegate__DelegateSignature();// 0x70644c4
	void OnClientWillGotoSpectating();// 0x61d13d0
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CamID, Actor*[] PeerVisualFieldActorList);// 0x70644c4
	void OnClickVehicleWarBuff();// 0x61d13bc
	void OnClickToggleOBVehicleView();// 0x61d13a8
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x70644c4
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x70644c4
	void OnCharacterRecoveryHealthEvent();// 0x61d1394
	void OnCharacterRecoveryHealth__DelegateSignature();// 0x70644c4
	void OnCharacterReceiveHealthChangeHistory__DelegateSignature(out const float[] HealthChangeHistory);// 0x70644c4
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0x70644c4
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x70644c4
	void OnCharacterLandingCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x70644c4
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x70644c4
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x61d1310
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0x70644c4
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0x70644c4
	void OnCharacterAntidoteChangeDelegate__DelegateSignature(float FAntidoteExeTime, float FAntidoteMaxTime);// 0x70644c4
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0x70644c4
	void OnBuyRevivalTeammate(int TeammateIndex);// 0x61d128c
	void OnBuyRevivalSign();// 0x61d1270
	void OnAvatarInfoRep__DelegateSignature(int[] ItemIdList, FString PlayerUID, FString AvatarType);// 0x70644c4
	void OnAutoSprintActive__DelegateSignature();// 0x70644c4
	void OnAssociationOperation(ItemDefineID DefineID, ItemDefineID TargetDefineID, enum OperationType, byte Reason);// 0x61d1120
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0x70644c4
	void ObserveWhoKilledMe();// 0x61d110c
	void ObserveClientSetPoisonSmogStage(int SmogStage);// 0x61d105c
	void ObserveCharacter(FString InPlayerName);// 0x61d0f28
	void ObserveAirDropBox(int boxId);// 0x61d0eac
	void OBCameraTurnSlower();// 0x61d0e98
	void OBCameraTurnFaster();// 0x61d0e84
	void OBCameraMoveSlower();// 0x61d0e70
	void OBCameraMoveNear();// 0x61d0e5c
	void OBCameraMoveFaster();// 0x61d0e48
	void OBCameraMoveFar();// 0x61d0e34
	void NotifyOpenSequencer(BattleOpenSequencerInfo Info);// 0x61d0c98
	void NotifyIsInResultView(bool isInResultView);// 0x61d0c14
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0x70644c4
	void NotifyEnterBattle();// 0x61d0bf8
	void NotifyDeadBoxExpand();// 0x70644c4
	void NotifyDeadBoxCollapsed(bool isCollpased);// 0x70644c4
	void MoveUpDelegate__DelegateSignature(float rate);// 0x70644c4
	void MoveUp(float rate);// 0x61d0b7c
	void MoveToAIWithClassName(FString AIClassName, float XOffset, float YOffset, float ZOffset);// 0x61d0a20
	void MoveToAI();// 0x61d0a0c
	void MoveRightDelegate__DelegateSignature(float rate);// 0x70644c4
	void MoveForwarDelegate__DelegateSignature(float rate);// 0x70644c4
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x61d0954
	void ModifyCameraViewPitchLimitWithPose(byte Pose, float PitchMin, float PitchMax);// 0x61d0864
	void MemberVoice(int member, int Status);// 0x70644c4
	void MarkStartFireFrame();// 0x61d0850
	void LocalMoveTo(out const Vector targetPos);// 0x61d07c8
	void LocalGetGameStateReconnectInfo();// 0x61d07b4
	void LerpFPPCamera();// 0x61d07a0
	void KickPlayerFromGame();// 0x61d078c
	void K2_SetPawn(Pawn* InPawn);// 0x61d0710
	void JumpPlanDell(STExtraBaseCharacter* dellPawn);// 0x70644c4
	void JumpFromPlane();// 0x61d06fc
	void JoystickTriggerSprint(bool bIsSprint);// 0x70644c4
	bool IsVirtualJoystickValid();// 0x61d06c4
	bool IsViewTarget(const Actor* pActor);// 0x61d062c
	bool IsUse3DTouch();// 0x61d05f4
	bool IsTouchToRotControl();// 0x61d05b4
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x61d0524
	bool IsToggleOBBulletTrackEffect();// 0x61d04ec
	bool IsTeammate(const STExtraBaseCharacter* InCharacter);// 0x61d045c
	bool IsStandalone();// 0x61d0420
	bool IsShowBlood();// 0x61d0400
	bool IsSameTeam(Pawn* Other);// 0x61d0370
	bool IsRevivalMode();// 0x61d0330
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x61d0298
	bool IsRecentlyCalledServerCMD(const float MarginSeconds);// 0x61d0208
	bool IsParachuteAnimCached(byte AnimOverrideType);// 0x61d0178
	bool IsMurderSelfDefense(FString InformMurderName);// 0x61d00bc
	bool IsMoveable_DontConsiderFollowingState();// 0x61d0084
	bool IsMoveable();// 0x61d004c
	bool IsLastBreathOrRescueingOther();// 0x61d0014
	bool IsInRevival();// 0x61cffdc
	bool IsInPlane();// 0x61cffa4
	bool IsInParachuteOpen();// 0x61cff6c
	bool IsInParachuteJump();// 0x61cff34
	bool IsInParachute();// 0x61cfefc
	bool IsInObservingPlayback();// 0x61cfec4
	bool IsInNormalPlane();// 0x61cfe8c
	bool IsInInitial();// 0x61cfe54
	bool IsInFreeCameraView();// 0x61cfe34
	bool IsInFreeBuildState();// 0x61cfe14
	bool IsInFinish();// 0x61cfddc
	bool IsInFight();// 0x61cfda4
	bool IsInDeathReplay();// 0x61cfd6c
	bool IsInDead();// 0x61cfd34
	bool IsGhost();// 0x61cfcfc
	bool IsForbitPickMakeEffect();// 0x61cfcc4
	bool IsForbitPick(out const FName TombName);// 0x61cfc24
	bool IsCharacterCanEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x61cfb50
	bool IsCanViewEnemy();// 0x61cfb18
	bool IsCanSpectateTeammate();// 0x61cfae0
	bool IsCanImprisonmentTeammate();// 0x61cfaa8
	bool IsCacheReceiveRespawnZombie();// 0x61cfa70
	bool IsAutoParachuteEnable();// 0x61cfa38
	bool IsAllowBackpackReplayData(out const ItemDefineID DefineID, out const BattleItemData ItemData);// 0x61cf914
	bool IsAllowActorTouchMove();// 0x61cf8dc
	bool IsAGMPlayer();// 0x61cf8a4
	void InitVehicleAvatarSkinList();// 0x61cf888
	void InitVehicleAvatarList();// 0x61cf86c
	void InitTaskDatas(uint32 InPlayerKey);// 0x61cf7f0
	void InitTaskDataDelegate__DelegateSignature(int TaskId, int process, FString ext_info);// 0x70644c4
	void InitTaskData(int TaskId, int process, FString ext_info);// 0x61cf638
	void InitTaskComponent();// 0x61cf624
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x70644c4
	void InitJoyStickAfterActivation();// 0x70644c4
	void InitCollectionDataDelegate__DelegateSignature(int ItemId, int CurrentCount, int TotalCount);// 0x70644c4
	void InitCollectionData(int ItemId, int CurrentCount, int TotalCount);// 0x61cf534
	void InfectionSelectZombieDelegate__DelegateSignature(enum TargetPawnType);// 0x70644c4
	void HideGameTipForLowFPSWarning();// 0x61cf520
	void HideAllUIAfterDeadTipsShowDelegate__DelegateSignature();// 0x70644c4
	FString HawkEyesLocalize(int InPlayerKey);// 0x61cf424
	bool HasAnySpectatorReplayFlag(uint32 InFlag);// 0x61cf38c
	void HandleVirtualJoystickInput(out const Geometry Geometry, out const Vector2D ScreenPosition, int PointerIndex, bool MouseDown);// 0x61cf224
	void HandleVirtualJoystickActive(Vector2D NormalizedOffset, Vector2D VisualSize);// 0x61cf16c
	void HandleUpdateShovelingRelease();// 0x61cf158
	void HandleUpdateShovelingPressed();// 0x61cf144
	void HandleUpdateShoveling();// 0x61cf130
	void HandleTogglePlayerListInOB();// 0x61cf11c
	void HandleToggleOBTeamList(bool InShow);// 0x61cf098
	void HandleToggleMapInOB();// 0x61cf084
	void HandleToggleHitDamageDisplay();// 0x61cf070
	void HandleToggleBulletTrack();// 0x61cf05c
	void HandleTipInfo(FString FullMsg);// 0x61cefb4
	void HandleSwitchToTeammatePrev();// 0x61cefa0
	void HandleSwitchToTeammateNext();// 0x61cef8c
	void HandleSwitchToTeam(int InTeamID);// 0x61cef10
	void HandleSwitchToPlayerIndex(int InPlayerIndex);// 0x61cee94
	void HandleMsg(enum Msg);// 0x61cee18
	void HandleLeaveFreeViewInOB();// 0x61cee04
	void HandleLandOnGroundEnd();// 0x61cedf0
	void HandleHitDataArray(STExtraShootWeapon* TargetWeapon, out const SACData InAntiCheatData);// 0x61cecf4
	void HandleFlyLeapPlatform();// 0x61cec94
	void HandleEnterFreeViewInOB();// 0x61cec80
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x61cebb4
	void HandleClientHasReactivated();// 0x61ceba0
	void HandleChangeRolewearDone();// 0x70644c4
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x61ceae8
	int GotoSpectating(int TeammatePlayerid);// 0x61cea54
	void GotoFlying();// 0x61cea40
	void GMTeleport(FName Teleporter);// 0x61ce9c4
	int GetWriteCircleDistance();// 0x61ce990
	WeaponHitDisanceSectionArray GetWeaponHitDistanceSectionByID(int ID);// 0x61ce8b8
	int GetWeaponDIYPlanID(int WeaponId);// 0x61ce82c
	int GetWeaponAvatarItemId(int BPID);// 0x61ce798
	int GetWeaponAvatarID(int WeaponId, bool isGrenade);// 0x61ce6c8
	float GetViewPortDPIScale();// 0x61ce68c
	VehicleUserComponent* GetVehicleUserComp();// 0x61ce658
	bool GetUseMotionControlLog();// 0x61ce620
	bool GetUseMotionControlEnable();// 0x61ce5e8
	int GetUnlockWearCount();// 0x61ce5b4
	float GetTouchSensibilityRate();// 0x61ce578
	float GetTouchForce(byte FingerIndex);// 0x61ce4ec
	Actor* GetThePlane();// 0x61ce4d0
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x61ce444
	SpringArmComponent* GetTargetedSpringArm();// 0x61ce410
	int GetStatTriangles();// 0x61ce3dc
	FString GetStatMemory();// 0x61ce338
	StateMachineComponent* GetStateMachineCompent();// 0x61ce304
	int GetStatDrawCalls();// 0x61ce2d0
	STExtraPlayerState* GetSpecOrDemoPlayerState();// 0x61ce29c
	Pawn* GetSpecOrDemoPawn();// 0x61ce268
	BattleItemData[] GetSpecialClothingInAllBackpack(int Index);// 0x61ce108
	int[] GetSpecialClothingCountInAllBackpack(int Index);// 0x61ce014
	int[] GetSpecialAreaList();// 0x61cdf70
	int GetSpecialAreaID();// 0x61cdf3c
	SIslandInactiveClearComponent* GetSIslandInactiveClearComponent();// 0x61cdf08
	byte GetSightTypeForSensibility(STExtraShootWeapon* ShootWeapon);// 0x61cde74
	byte GetShakeCameraMode();// 0x61cde38
	Rotator GetSensibilityRate(float YawInput, float PitchInput, bool bIsMotionControl);// 0x61cdd2c
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x61cdc04
	ScreenAppearanceActor* GetScreenAppearanceMgr();// 0x61cdbd0
	FString GetRHIThreadTime();// 0x61cdb2c
	int GetRevivalCountDownTime();// 0x61cdaf8
	FString GetRenderThreadTime();// 0x61cda54
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0x70644c4
	QuickSignComponent* GetQuickSignComponent();// 0x61cda20
	FString GetPresentTime();// 0x61cd97c
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x61cd948
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x61cd86c
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x61cd838
	PlayerPetSpectatorComponent* GetPetSpectatorComp();// 0x61cd804
	CharacterParachuteComponent* GetParachuteComponent();// 0x61cd7d0
	AnimationAsset* GetParachuteAnimAsset(byte AnimType, byte AnimOverrideType);// 0x61cd708
	Transform GetPaintDecalTargetTransform();// 0x61cd6b4
	ObservingReplay* GetObservingPlayback();// 0x61cd680
	Vector GetNewestAirDropBoxPos();// 0x61cd648
	FString GetMurderUIDStr();// 0x61cd590
	FString GetMurderName();// 0x61cd4ec
	bool GetMurderIsAI();// 0x61cd4b4
	BattleItemSpectatingData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x61cd318
	uint32 GetMoyaTime();// 0x61cd2e4
	byte GetMaxTouchForceFinger();// 0x61cd2a0
	enum GetLastStateType();// 0x61cd26c
	Vector2D GetJoyStickVisualSize();// 0x61cd238
	float GetJoyStickOpacity();// 0x61cd204
	Vector2D GetJoyStickCenter();// 0x61cd1d0
	int GetItemUseSpecialAreaID(int ItemId);// 0x61cd144
	bool GetIsRespawn();// 0x61cd124
	bool GetIsMurderSameTeam();// 0x61cd0ec
	bool GetIsFreeCamera();// 0x61cd0cc
	enum GetInfectionPawnSubType();// 0x61cd098
	enum GetInfectionPawnMainType();// 0x61cd064
	IdeaDecalManager* GetIdeaDecalManager();// 0x61cd030
	uint32 GetHokyTime();// 0x61ccffc
	FString GetGameThreadTime();// 0x61ccf58
	void GetGameStateReconnectInfoOnServer();// 0x61ccef8
	LastGameRemainItemData GetGameRemainItems();// 0x61cce20
	int GetFriendDistance();// 0x61ccdec
	Vector GetFocalLocation();// 0x61ccdac
	FString GetFinalMurderName();// 0x61cccac
	WeaponHitDetailInfo GetDetailHitInfo();// 0x61ccb94
	void GetDailyTaskReportData(out DailyTaskReportInfo ResultData);// 0x61cca50
	enum GetCurrentStateType();// 0x61cca1c
	Vector GetCurrentLevelOffset();// 0x61cc9e4
	STExtraPlayerState* GetCurPlayerState();// 0x61cc9b0
	int GetCurPlayerId();// 0x61cc97c
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x61cc948
	Vector GetCurPawnLocation();// 0x61cc910
	Pawn* GetCurPawn();// 0x61cc8dc
	float GetCurFPS();// 0x61cc8a8
	Rotator GetControlLookRotation();// 0x61cc868
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x61cc784
	BattleItemData[] GetClothingInAllBackpack(int Index);// 0x61cc624
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x61cc598
	ChatComponent* GetChatComponent();// 0x61cc564
	byte GetCameraModeForSensibility();// 0x61cc528
	uint32 GetBeKickedPlayerKey();// 0x61cc4f4
	BackpackComponent* GetBackpackComponent();// 0x61cc4c0
	AllStarReportData GetAllStarReportDataByOpenID(FString InPlayerOpenID);// 0x61cc408
	void GenerateIdCardMark(out const Vector Loc);// 0x61cc378
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int boxId);// 0x61cc214
	void GameModeGotoFightingState();// 0x61cc200
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x61cc148
	void ForceServerSetControlRotationOnVehicle();// 0x61cc134
	void ForceReleaseCurTouchMoveFinger();// 0x61cc120
	void ForceDropItemsWithTypeList(out const int[] TypeList);// 0x61cc068
	void ForceDropItemsWithType(int TypeItem);// 0x61cbfec
	void ForceDropItemsWithoutTypeList(out const int[] IgnoreTypeList);// 0x61cbf34
	void ForceDropItems(out const int[] ItemTableList);// 0x61cbe7c
	void ForceDropAllItem();// 0x61cbe68
	bool ForbidSpectateTeamMateOnPlane();// 0x61cbe28
	void FollowEmoteDelegate__DelegateSignature(bool bIsVisible);// 0x70644c4
	void FlushItem(int onlyStatic);// 0x61cbdac
	void FireTakeDamagedEvent(Vector CauserLocation, Actor* DamageCauser, float Damage);// 0x61cbcb8
	void FireOrGrenade();// 0x61cbca4
	void Fight();// 0x61cbc90
	void FadeSceneToGrayOnDeath(bool bSet);// 0x61cbc0c
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x61cba94
	void ExitNightState();// 0x61cba80
	void ExitFreeCamera(bool IsForceReset);// 0x61cb9fc
	void ExecDSCommand(const FString DSCommand);// 0x61cb94c
	void EquipIceDrinkItems(out const int[] ItemList);// 0x61cb894
	void EnterVehicleDelegate__DelegateSignature(bool IsEnter, Actor* Vehicle);// 0x70644c4
	void EnterNightState();// 0x61cb880
	void EndTouchScreen(Vector Loc, byte FingerIndex, bool UseOldEndFireJudge);// 0x61cb784
	void EndForceTouchFire(Vector Loc);// 0x61cb708
	void EnablePlayerInHouse(bool bIsIn);// 0x61cb684
	void EnableNetUpdateGroupID(byte NetGroupID);// 0x61cb608
	void EnableGuidActorDelegate__DelegateSignature(int GuidID, bool bNewEnable);// 0x70644c4
	void EnableAutoParachute(bool bEnable);// 0x61cb584
	void DynamicCreateComponents();// 0x61cb570
	void DropItemsWithType(int TypeItem);// 0x61cb4f4
	void DropItem(int ID);// 0x61cb478
	void DropAllItem();// 0x61cb464
	void DoUITouchMove(Vector Loc);// 0x70644c4
	void DoubleClickCancel(const byte FingerIndex);// 0x61cb3e8
	void DoTouchMove(float Yaw, float Pitch);// 0x70644c4
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x61cb338
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x61cb288
	void DoAfterCanNotPickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x70644c4
	void DisplayLuaGameTipsWithTime(FString FunctionName, int ID, FString Param1, FString Param2, float ControlTime);// 0x61cb09c
	void DisplayLuaGameTips(FString FunctionName, int ID, FString Param1, FString Param2);// 0x61caeec
	void DisplayLowFPSCountingDown();// 0x61caed8
	void DisplayGameWarningTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x61cac88
	void DisplayGameTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x61caa38
	void DisplayGameTipWithMsgID(int ID);// 0x61ca9bc
	void DisplayGameTipForLowFPSWarning(int ID, FString Param1, FString Param2);// 0x61ca76c
	void DisplayCustomLuaGameTips(FString FunctionName, int ID, out const byte[] ExpandDataContent);// 0x61ca610
	void DisplayBattleGeneralTip(int ID, FString Param1, FString Param2);// 0x61ca3c0
	void DispatchPlayerRespawnedEvent(UAEPlayerController* PlayerController);// 0x61ca344
	void DispatchPlayerReconnectedEvent();// 0x61ca330
	void DispatchPlayerLostEvent();// 0x61ca31c
	void DispatchPlayerExitEvent();// 0x61ca308
	void DispatchPlayerAboutToRespawnEvent(UAEPlayerController* PlayerController);// 0x61ca28c
	void DisableNetUpdateGroupID(byte NetGroupID);// 0x61ca210
	void DelegatePlayerLevelChange__DelegateSignature(int Level);// 0x70644c4
	void DelegatePlayerGoldChange__DelegateSignature(int Gold);// 0x70644c4
	void DelayGotoSpectating();// 0x61ca1fc
	void DelayForceExitFreeCamera();// 0x61ca1e8
	void DebugSetUIVisibility(bool bUIVisibility);// 0x70644c4
	void DealGetAllNearShotWeapon(float disRate);// 0x61ca16c
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x61ca0b8
	void DealGetAllNearMoveCharacter(float checkDis);// 0x61ca03c
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x61c9e9c
	void ConsumeRevivalSign();// 0x61c9e80
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x61c9d88
	void ClientStopShoveling();// 0x61c9d28
	void ClientStartOnlineGame();// 0x61c9d0c
	void ClientShowInfectAreaWarning();// 0x61c9cac
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers);// 0x61c9ba4
	void ClientSetPoisonSmogStage(int SmogStage);// 0x61c9af4
	void ClientSetOBData(uint32 InPlayerKey, int InTeamID, STExtraBaseCharacter* CurViewChar);// 0x61c99fc
	void ClientSetControlRotation(const Rotator NewRotation);// 0x61c997c
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x61c9894
	void ClientSetAIPosToTarget(Vector StartPos, Vector targetPos);// 0x61c97d4
	void ClientSetAIPos(uint32 KeyID, Vector pos, bool isStart);// 0x61c96d0
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x61c9600
	void ClientRPC_TeamMateStateChanged(const TeamMateStateInfo TeamMateInfo);// 0x61c9564
	void ClientRequestPullInstanceData(uint32 Seq, out uint32[] InstanceIDs);// 0x61c946c
	void ClientRealPlayItemOperationSound(FString BankName, FString SoundName, Actor* TargetActor);// 0x61c9318
	void ClientQuitViewEnemy();// 0x61c92fc
	void ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x61c9208
	void ClientOnLeaveVehicleDelegate__DelegateSignature();// 0x70644c4
	void ClientOnHurt();// 0x61c91ec
	void ClientOnEnterVehicleDelegate__DelegateSignature(int SeatType);// 0x70644c4
	void ClientOnDeathReplayDataWhenFatalDamaged__DelegateSignature(bool bIsDead, bool bIsValidDeathReplay, bool bIsSuicide, FString InPlayerName, FString PlayerUID, bool bIsPlayerAI, enum AIType, int DamageType, FString MLAIUID);// 0x70644c4
	void ClientOnDamageToOther(float _DamageToOther);// 0x61c9168
	void ClientOnChangeVehicleSeatCompletedDelegate__DelegateSignature(enum SeatType);// 0x70644c4
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, enum InServerStateType);// 0x61c905c
	void ClientInterruptGame();// 0x61c8ffc
	void ClientInitIngameUIAfterRespawn();// 0x61c8f9c
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x61c8ee0
	void ClientHandleMsg(enum Msg, int64 TimeStamp);// 0x61c8e20
	void ClientGotoSpectating();// 0x61c8e04
	void ClientGiveUpRevivalTemmates();// 0x61c8de8
	void ClientGameStarted();// 0x61c8dcc
	void ClientFriendBattleEnd(bool bIsShowWatchFriendBattleEndTips);// 0x61c8d40
	void ClientForbidLoadParahuteAnim(bool bCanForbid);// 0x61c8cb4
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x61c8c28
	void ClientEnterViewBox(int boxId);// 0x61c8ba4
	void ClientEndOnlineGame();// 0x61c8b88
	void ClientDisplayNormalTips(FString Content);// 0x61c8ad8
	void ClientDisplayLuaGameTipsWithTime(FString FunctionName, int ID, FString Param1, FString Param2, float ControlTime);// 0x61c88e4
	void ClientDisplayLuaGameTips(FString FunctionName, int ID, FString Param1, FString Param2);// 0x61c872c
	void ClientDisplayGameTipWithMsgIDAndString(int ID, FString Param1, FString Param2);// 0x61c85a4
	void ClientDisplayGameTipWithMsgID(int ID);// 0x61c84f4
	void ClientDisplayCustomLuaGameTips(FString FunctionName, int ID, const byte[] ExpandDataContent);// 0x61c83a0
	void ClientCheckStartShovelingFail();// 0x61c8340
	void ClientChangeWeaponFunction(enum NewWeaponFunction);// 0x61c8290
	void ClientChangeStatePC(enum TargetStateType);// 0x61c820c
	void ClearParachuteAnimAssetCache();// 0x61c81f8
	void ClearDeadTombBox();// 0x61c81e4
	void ClearAllConstructedBuilding();// 0x61c81d0
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x61c8130
	bool CientRevivalTemmates();// 0x61c80f8
	void CheckServerStateIgnoreTouch();// 0x61c80dc
	void CheckQuitSpectatingInClientRestart(Pawn* NewPawn);// 0x61c8058
	void CheckParachuteLandedFinish();// 0x61c8044
	bool CheckNeedReport(out const SACData InAntiCheatData);// 0x61c7f70
	void CheckDeadBoxIgnoreTouch();// 0x61c7f54
	void CheckConsumeGlideItem();// 0x61c7f40
	bool CheckAllVehicleWeaponIsReadyForFire(bool WithBroadEvent);// 0x61c7ea8
	bool ChecCanChangeWeaponScheme();// 0x61c7e68
	bool ChangeWeaponSchemeIndex(int NewIndex);// 0x61c7dd8
	void ChangeWeaponFunction(enum NewWeaponFunction);// 0x61c7d5c
	void ChangeToWalkingDead();// 0x61c7d48
	void ChangeStatePC(enum TargetStateType);// 0x61c7ccc
	void ChangeSpectatorStateToFreeView();// 0x61c7cb8
	bool ChangeRolewearIndex(int NewIndex, bool bIgnoreVault);// 0x61c7be4
	void ChangeCharacterLogicDelegate__DelegateSignature(enum TargetPawnType);// 0x70644c4
	void ChangeCharacterBeforeDelegate__DelegateSignature(enum TargetPawnType);// 0x70644c4
	bool ChangeActorRelevantTime(Actor* pActor, float Timeout);// 0x61c7b18
	void CanSeeAllUI(bool bUIVisibility);// 0x61c7a94
	bool CanCombineShootHitData();// 0x61c7a5c
	bool CanBePickUpByItemID(out const ItemDefineID DefineID);// 0x61c79b0
	bool CanBePickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x61c78a4
	bool CanAutoSwitchGrenade(int GrenadeID);// 0x61c780c
	void CallTeamMateUAVStateChanged(TeamMateStateInfo TeamMateInfo);// 0x61c7764
	void CallTeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector Location, Rotator Rotation, float Health, int VoiceID, float Temperature);// 0x61c75bc
	void CallShowTouchInterface(bool InShow);// 0x61c7530
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, float MotionAimRate_Pitch, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, float MotionRate_Yaw_Threshold, float Left, float Right, bool bLandScapeOrientation);// 0x61c700c
	Vector2D CalcAttactBtnPos(float LocX, float LocY, float SizeX, float SizeY);// 0x61c6ed4
	void CacheShootDetailInfoShootNum(int ShootNum);// 0x61c6e58
	void CacheShootDetailInfoHitPos(byte HitPos);// 0x61c6ddc
	void CacheRecvInfectionSelectZombie__DelegateSignature(bool bRecv);// 0x70644c4
	void C2S_RequestSkillPrompt();// 0x61c6d7c
	void C2S_RequestBeingRescuedRemainingTime();// 0x61c6d1c
	void BroadcastFatalDamageToClientWithStructNew(const FatalDamageParameterCompress FatalDamageParameter);// 0x61c6c3c
	void BroadcastFatalDamageToClientWithStruct(const FatalDamageParameter FatalDamageParameter);// 0x61c6b38
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x61c6958
	SpringArmComponent* BPGetTargetedSpringArm();// 0x61c691c
	bool BPGetIsAndroidSimulator();// 0x61c68e4
	void BPCastUIMsgWithTwoParam(FString Func, FString module, FString Param1, FString Param2);// 0x61c670c
	void BPCastUIMsgWithParam(FString Func, FString module, FString Param1);// 0x61c6598
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x70644c4
	void BP_BeginSpectatingState();// 0x70644c4
	void BluePrintSetViewTarget(STExtraBaseCharacter* pCharacter);// 0x61c651c
	void BindVoiceCheckFunction();// 0x61c6508
	void BindVirtualJoystickInputDelegates(bool bBind);// 0x61c6484
	void BindVirtualJoystickActiveDelegates(bool bBind);// 0x61c6400
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x61c6348
	void BeginAbsorb();// 0x61c62e8
	void BecomeAGhost(bool Flag);// 0x61c625c
	void BackToGameDataRefresh();// 0x61c6248
	bool AutoSelectViewTarget();// 0x61c6210
	void AutoSelectTeammateToView();// 0x61c61fc
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x61c60fc
	void AddParachuteAnimAssetCache(byte AnimType, AnimationAsset* AnimAsset, byte AnimOverrideType);// 0x61c6008
	void AddItemAttachList(int BaseItemID);// 0x61c5f8c
	void AddItem(int ID, int Count, int PickupType);// 0x61c5e9c
	void AddCharacterVirtualItemToBackpack();// 0x61c5e88
	void AddAvatarItem(int ID, int Color, int Pattern, int Num);// 0x61c5d60
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x61c5cdc
<----------Generated by SSpawner v1.0.4---------->


Class: UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x830, Size: 0x8]
	FString PlayerName;//[Offset: 0x838, Size: 0x10]
	uint32 PlayerKey;//[Offset: 0x848, Size: 0x4]
	uint64 UID;//[Offset: 0x850, Size: 0x8]
	FString PlayerOpenID;//[Offset: 0x858, Size: 0x10]
	int TeamID;//[Offset: 0x868, Size: 0x4]
	int64 IdxInTeam;//[Offset: 0x870, Size: 0x8]
	int CampID;//[Offset: 0x878, Size: 0x4]
	Vector CharacterLocation;//[Offset: 0x87c, Size: 0xc]
	int RoomMode;//[Offset: 0x888, Size: 0x4]
	WeatherInfo WeatherInfo;//[Offset: 0x890, Size: 0x18]
	int planeAvatarId;//[Offset: 0x8a8, Size: 0x4]
	int DyeDebugFlag;//[Offset: 0x8ac, Size: 0x4]
	int PlayerStartID;//[Offset: 0x8b0, Size: 0x4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b4, Size: 0x1]
	PlayerNetStats NetStats;//[Offset: 0x8b8, Size: 0x40]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 0x1]
	FString PlanetailResLink;//[Offset: 0x900, Size: 0x10]
	int InPacketLossRate;//[Offset: 0x910, Size: 0x4]
	int OutPacketLossRate;//[Offset: 0x914, Size: 0x4]
	int ClientNetworkType;//[Offset: 0x918, Size: 0x4]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 0x1]
	bool bIsGlobalObserverForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x941, Size: 0x1]
	int GameReplayType;//[Offset: 0x944, Size: 0x4]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x948, Size: 0x38]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x980, Size: 0x10]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x990, Size: 0x10]
	int LobbyShowWeaponID;//[Offset: 0x9a0, Size: 0x4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]
	FString Nation;//[Offset: 0x9a8, Size: 0x10]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 0x1]
	enum DefaultCharacterGender;//[Offset: 0x9c0, Size: 0x1]
	int DefaultCharacterHeadID;//[Offset: 0x9c4, Size: 0x4]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x9c8, Size: 0x10]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x9d8, Size: 0x10]
	int RolewearIndex;//[Offset: 0x9e8, Size: 0x4]
	int[] equip_plating_list;//[Offset: 0x9f0, Size: 0x10]
	GameModePlayerItem[] InitialSharedSkin;//[Offset: 0xa00, Size: 0x10]
	GameModePlayerKnapsackSingleInfo InitialSharedKnapsack;//[Offset: 0xa10, Size: 0x60]
	bool bSharedSkinOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 0x1]
	bool bUsingSharedSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa71, Size: 0x1]
	bool bSubscribeBagOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa72, Size: 0x1]
	int FashionBagStartIndex;//[Offset: 0xa74, Size: 0x4]
	int VehicleSkinInReady;//[Offset: 0xa78, Size: 0x4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7c, Size: 0x1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0xa80, Size: 0x10]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0xa90, Size: 0x20]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0xab0, Size: 0x10]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0xac0, Size: 0x10]
	delegate OnInitialWeaponScheme;//[Offset: 0xad0, Size: 0x10]
	int CurWeaponSchemeIndex;//[Offset: 0xae0, Size: 0x4]
	int PveLevel;//[Offset: 0xae4, Size: 0x4]
	int[] InitialCharSkillList;//[Offset: 0xae8, Size: 0x10]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0xaf8, Size: 0x10]
	GameModePlayerItems[] InitialVehicleAvatarSkinList;//[Offset: 0xb08, Size: 0x10]
	int ShowVehicleSkin;//[Offset: 0xb18, Size: 0x4]
	GameModePlayerItem[] InitialBackPackPendantList;//[Offset: 0xb20, Size: 0x10]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0xb30, Size: 0x10]
	GameModePlayerItem[] InitialVehicleMusicList;//[Offset: 0xb40, Size: 0x10]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0xb50, Size: 0x10]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0xb60, Size: 0xc]
	<int,int> WeaponAvatarItemList;//[Offset: 0xb70, Size: 0x50]
	<int,int> GrenadeAvatarItemList;//[Offset: 0xc10, Size: 0x50]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0xc60, Size: 0x10]
	<int,int> VehicleAvatarList;//[Offset: 0xc70, Size: 0x50]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0xcc0, Size: 0x50]
	<int,VehicleAvatarSkinList> VehicleAvatarSkinList;//[Offset: 0xd10, Size: 0x50]
	int[] VehicleMusicList;//[Offset: 0xd60, Size: 0x10]
	int[] DefaultVehicleMusic;//[Offset: 0xd70, Size: 0x10]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0xd80, Size: 0x10]
	GameModeWeaponDIYPlanData[] InitialWeaponDIYPlanData;//[Offset: 0xd90, Size: 0x10]
	<int,int> WeaponDIYPlanDataMap;//[Offset: 0xda0, Size: 0x50]
	<int,int> InitialWeaponPendantList;//[Offset: 0xdf0, Size: 0x50]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0xe40, Size: 0x10]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0xe50, Size: 0x10]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0xe60, Size: 0x10]
	uint32 TaskSyncToDsTs;//[Offset: 0xe70, Size: 0x4]
	int AnchorPlatResID;//[Offset: 0xe74, Size: 0x4]
	int AnchorPlatColorID;//[Offset: 0xe78, Size: 0x4]
	delegate OnPlayerGotoSpectatingDelegate;//[Offset: 0xe80, Size: 0x10]
	delegate OnReceiveUIMessage;//[Offset: 0xea0, Size: 0x10]
	int64 LastGameResultTime;//[Offset: 0xeb0, Size: 0x8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 0x1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb9, Size: 0x1]
	FString IpCountryStr;//[Offset: 0xec0, Size: 0x10]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 0x1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed1, Size: 0x1]
	uint32 ObserverFlags;//[Offset: 0xed4, Size: 0x4]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed8, Size: 0x1]
	LobbyWatchInfo LobbyWatchInfo;//[Offset: 0xedc, Size: 0x8]
	int HawkEyeSpectateMaxMatchCount;//[Offset: 0xee4, Size: 0x4]
	int HawkEyeSpectateUsedMatchCount;//[Offset: 0xee8, Size: 0x4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeec, Size: 0x1]
	float UpdateOBCircleCounter;//[Offset: 0xef0, Size: 0x4]
	float UpdateOBCircleInterval;//[Offset: 0xef4, Size: 0x4]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 0x1]
	bool bWaitRetryGotoSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef9, Size: 0x1]
	FString[] FriendObservers;//[Offset: 0xf00, Size: 0x10]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf11, Size: 0x1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf18, Size: 0x1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0xf78, Size: 0x8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf84, Size: 0x1]
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf85, Size: 0x1]
	delegate PlayerControllerLostDelegate;//[Offset: 0xf98, Size: 0x10]
	delegate SyncDailyTaskInfoDelegate;//[Offset: 0xfa8, Size: 0x10]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xfb8, Size: 0x10]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xfc8, Size: 0x10]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xfd8, Size: 0x10]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0xfe8, Size: 0x10]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0xff8, Size: 0x10]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0x1008, Size: 0x10]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0x1018, Size: 0x10]
	delegate OnPlayerControllerBattleBeginPlay;//[Offset: 0x1028, Size: 0x10]
	bool bCanWatchEnemyInRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1058, Size: 0x1]
	Object*[] SecurityObjs;//[Offset: 0x1100, Size: 0x10]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x1110, Size: 0x10]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1120, Size: 0x1]
	float NotifyTimeOut;//[Offset: 0x1124, Size: 0x4]
	float DelayCloseLoadingTime;//[Offset: 0x1128, Size: 0x4]
	FString NeedLoadLevelName;//[Offset: 0x1130, Size: 0x10]
	FString NeedLoadedLevelFullName;//[Offset: 0x1140, Size: 0x10]
	bool IsTickHouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1150, Size: 0x1]
	int AntiDataCD;//[Offset: 0x1160, Size: 0x4]
	int ModeID;//[Offset: 0x1164, Size: 0x4]
	bool bOpenReconnectUseCharViewPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1168, Size: 0x1]
	float ClientToDSFlowLimitTime;//[Offset: 0x1194, Size: 0x4]
	float ClientToDSFlowLimit;//[Offset: 0x1198, Size: 0x4]
	FString UsingNetObjectPathNameMappingCSV;//[Offset: 0x11c0, Size: 0x10]
	NetworkReportActor* NetworkReportActor;//[Offset: 0x11d0, Size: 0x8]
	bool UseingWeaponScheme();// 0x692dadc
	void TestShowLongTimeNoOperation();// 0x692da9c
	void TestShowConfirmDialogOfMisKill();// 0x692da88
	void TestCastUIMsgWithPara(FString strMsg, FString module, int TestID);// 0x692d93c
	void SyncDailyTaskStoreInfo(DailyTaskStoreInfo[] NewDailyTaskStoreList);// 0x692d804
	void SetUsedSimulationCVar(bool Value);// 0x692d780
	static void SetTargetMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x692d6b0
	void SetPanels(out const UAEUserWidget*[] panels);// 0x692d5f0
	void SetIsInPetSpectator(bool inIsInPetSpectator);// 0x692d56c
	static void SetDSMsgReceiveDelegate(delegate InDelegate);// 0x692d4d8
	static void SetClientMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x692d408
	void ServerSetVoiceId(int VoiceID);// 0x692d358
	void ServerKickSelf();// 0x692d2f8
	void ServerGotoSpectating(Pawn* ViewTarget);// 0x692d248
	void ServerExitGame();// 0x692d1e8
	void ServerAcknowledgeReconnection(uint32 Token);// 0x692d138
	void SendNetObjectPathNameMappingHashToServer(uint32 VersionHash);// 0x692d088
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x692cf90
	void SendLuaClientToDS(int ID, out const byte[] Content);// 0x692ce98
	void RPC_Server_SyncClientNetInfo(int InLoss, int OutLoss, int InNetworkType);// 0x692cd70
	void RPC_Server_ReportClientNetInfo(int AvgPing, int MaxPing, int MinPing, int LostPackRate, int AvgNoOutlier, int StdNoOutlier, int NumNoOutlier, int InLoss, int OutLoss);// 0x692cad0
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x692c9b0
	void RPC_LuaClientToDS(int ID, const byte[] Content);// 0x692c890
	void Respawn();// 0x692c874
	void ResetUsedSimulationCVar();// 0x692c860
	void ReleaseInGameUI();// 0x692c844
	void ReceivePostLoginInit();// 0x70644c4
	void PrintStatistics();// 0x692c830
	void PlayerStartIDReceived();// 0x692c81c
	void OnRep_WeaponAvatarDataList();// 0x692c800
	void OnRep_UsingNetObjectPathNameMappingCSV();// 0x692c7ec
	void OnRep_UsedSimulation();// 0x692c7d0
	void OnRep_PveLevel();// 0x692c7b4
	void OnRep_PlayerOBInfoList();// 0x692c7a0
	void OnRep_LobbyWatchInfo();// 0x692c784
	void OnRep_LastGameResultTime();// 0x692c768
	void OnRep_IsSpectatingEnemy();// 0x692c74c
	void OnRep_IsSpectating();// 0x692c730
	void OnRep_IsObserver();// 0x692c714
	void OnRep_InitialWeaponSchemeInfo();// 0x692c700
	void OnRep_InitialEquipmentAvatar();// 0x692c6e4
	void OnRep_InitialConsumableAvatar();// 0x692c6c8
	void OnRep_FriendObservers();// 0x692c6ac
	void OnRep_CurWeaponSchemeIndex();// 0x692c698
	void OnRep_bRoomOwner();// 0x692c67c
	void OnNetObjectPathNameMappingTableAsyncLoad();// 0x692c668
	void NotifyEnterBattle();// 0x692c64c
	void KickSelf();// 0x692c638
	bool IsTeammateSpectator();// 0x692c600
	bool IsSpectatorOrDemoPlayer();// 0x692c5c8
	bool IsSpectator();// 0x692c590
	bool IsRoomMode();// 0x692c56c
	bool IsPureSpectator();// 0x692c534
	bool IsObserver();// 0x692c4fc
	bool IsInSpectatingEnemy();// 0x692c4c4
	bool IsInSpectating();// 0x692c48c
	bool IsInPetSpectator();// 0x692c454
	bool IsHawkEyeSpectator();// 0x692c41c
	bool IsFriendOrEnemySpectator();// 0x692c3e4
	bool IsFriendObserver();// 0x692c3ac
	bool IsFriendNotHawkEyeObserver();// 0x692c374
	bool IsExited();// 0x692c33c
	bool IsDemoRecSpectator();// 0x692c304
	bool IsDemoPlaySpectator();// 0x692c2cc
	bool IsDemoPlayGlobalObserver();// 0x692c294
	bool IsDeathSpectator();// 0x692c25c
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x692c1a8
	void InitWeaponAvatarItems();// 0x692c18c
	void InitVehicleMusicList();// 0x692c170
	void InitVehicleAvatarSkinList();// 0x692c154
	void InitVehicleAvatarList();// 0x692c138
	void InitVehicleAdvanceAvatarList();// 0x692c11c
	void InitIngameUI();// 0x692c100
	void InitGrenadeAvatarList(bool ReInitial);// 0x692c074
	bool HasAnySpectatorReplayFlag(uint32 InFlag);// 0x692bfdc
	int GotoSpectating(int PlayerID);// 0x692bf48
	bool GetWeaponPandentReflect(int wraponID, out int pendantID);// 0x692be6c
	int GetWeaponAvatarItemId(int ID);// 0x692bdd8
	void GetVisibleLevelsLoadedName(out FString[] VisibleLevels);// 0x692bcc4
	FString GetLobbyWatchedPlayerKeyAsString();// 0x692bc20
	DailyTaskStoreInfo GetDailyTaskStoreInfoByTaskId(int TaskId);// 0x692bb90
	int GetCurrentWeaponSchemeMainSlotItemId();// 0x692bb5c
	uint32 GetCurrentOBPlayerKey();// 0x692bb20
	int GetCurrentOBPlayerInfoIndex();// 0x692baec
	int GenerateKillBroadcastItemID(int ClothAvatarID, int PlayerUID);// 0x70644c4
	void ForceNetReady();// 0x692bad8
	void ExitGame();// 0x692bac4
	void ExhaustCPU();// 0x692bab0
	void ExecDSCommand(const FString DSCommand);// 0x692ba00
	void ExcuteIntRecord(FString Key, int Count);// 0x692b890
	void ExcuteIntCounterRecord(FString Key, int Count);// 0x692b720
	void EnableInGameUI();// 0x692b70c
	void DumpUAENetActors();// 0x692b6f8
	void DumpRegions();// 0x692b6e4
	void DumpNetActors();// 0x692b6d0
	void DumpCharacters();// 0x692b6bc
	void DumpAllUI();// 0x692b6a8
	void DumpAllObjects();// 0x692b694
	void DumpAllActors();// 0x692b680
	void DoCrash();// 0x692b66c
	void DisableInGameUI();// 0x692b658
	void DelayEnterBattleCheck();// 0x692b63c
	void DealWithPickUpFailed(ItemDefineID DefineID);// 0x692b5a8
	void ClientShowTeammateEscapeNotice();// 0x692b58c
	void ClientRPC_CastUIMsgWithStrings(FString strMsg, FString module, const int TipsID, FString Param1, FString Param2);// 0x692b370
	void ClientRPC_CastUIMsgParams(FString strMsg, FString module, const int Type);// 0x692b21c
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x692b104
	void ClientInitPlayerOBInfoButton();// 0x692b0e8
	void ClientBroadcastRespawnComplete();// 0x692b0cc
	void ClientBroadcastReconnectionSuccessful();// 0x692b0b0
	void ClientAcknowledgeReconnection(uint32 Token);// 0x692b02c
	void CheckPlayerOBInfoButtonInit();// 0x692b010
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x692af78
	void CastUIMsg(FString strMsg, FString module);// 0x692ae60
	enum CanPickUpItem(ItemDefineID DefineID);// 0x692adbc
	void BroadcastUIMessage(FString MessageName, const int TipsIDOrType, FString Param1, FString Param2);// 0x692ac0c
	void BroadcastRespawnComplete();// 0x692abf8
<----------Generated by SSpawner v1.0.4---------->


Class: LuaPlayerController.PlayerController.Controller.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x7c0, Size: 0x50]
	FString LuaFilePath;//[Offset: 0x810, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0, Size: 0x10]
	int WeatherID;//[Offset: 0x10, Size: 0x4]
	float WeatherTime;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 0x10]
	FString LocalAddr;//[Offset: 0x10, Size: 0x10]
	float AvgPing;//[Offset: 0x20, Size: 0x4]
	float MaxPing;//[Offset: 0x24, Size: 0x4]
	float HighPingPercent;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerUpassInfo
	int updateTime;//[Offset: 0x0, Size: 0x4]
	int upassLevel;//[Offset: 0x4, Size: 0x4]
	int upassScore;//[Offset: 0x8, Size: 0x4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	FString iconUrl;//[Offset: 0x10, Size: 0x10]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int upassKeepBuy;//[Offset: 0x24, Size: 0x4]
	int upassCurValue;//[Offset: 0x28, Size: 0x4]
	int pass_type;//[Offset: 0x2c, Size: 0x4]
	int nUpassPrimePlusCard;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	uint64 UID;//[Offset: 0x8, Size: 0x8]
	int ZoneID;//[Offset: 0x10, Size: 0x4]
	uint32 PlayerKey;//[Offset: 0x14, Size: 0x4]
	int BattleMode;//[Offset: 0x18, Size: 0x4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int GameCount;//[Offset: 0x20, Size: 0x4]
	int WinCount;//[Offset: 0x24, Size: 0x4]
	int TopTenCount;//[Offset: 0x28, Size: 0x4]
	int KillNum;//[Offset: 0x2c, Size: 0x4]
	float KDNum;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	int[] AdditionIntData;//[Offset: 0x8, Size: 0x10]
	bool bDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerRolewearInfo
	GameModePlayerItem[] RolewearInfo;//[Offset: 0x0, Size: 0x10]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerKnapsackSingleInfo
	int Parachute;//[Offset: 0x0, Size: 0x4]
	int BagSkin;//[Offset: 0x4, Size: 0x4]
	int HelmetSkin;//[Offset: 0x8, Size: 0x4]
	int FlySkin;//[Offset: 0xc, Size: 0x4]
	int GrenadeSkin;//[Offset: 0x10, Size: 0x4]
	GameModePlayerConsumableAvatar ConsumableAvatarList;//[Offset: 0x14, Size: 0x10]
	GameModePlayerItem[] WeaponList;//[Offset: 0x28, Size: 0x10]
	GameModePlayerItem[] VehicleSkinList;//[Offset: 0x38, Size: 0x10]
	GameModePlayerItem[] BackPackPendantList;//[Offset: 0x48, Size: 0x10]
	int ShowVehicleSkin;//[Offset: 0x58, Size: 0x4]
	int WingmanSkin;//[Offset: 0x5c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerConsumableAvatar
	int GrenadeAvatarShoulei;//[Offset: 0x0, Size: 0x4]
	int GrenadeAvatarSmoke;//[Offset: 0x4, Size: 0x4]
	int GrenadeAvatarStun;//[Offset: 0x8, Size: 0x4]
	int GrenadeAvatarBurn;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerPetInfo
	int PetId;//[Offset: 0x0, Size: 0x4]
	int PetLevel;//[Offset: 0x4, Size: 0x4]
	int PetCfgId;//[Offset: 0x8, Size: 0x4]
	int PetColor;//[Offset: 0xc, Size: 0x4]
	int[] PetAvatarList;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerKnapsackExtInfo
	GameModePlayerKnapsackSingleInfo KnapsackExtInfo;//[Offset: 0x0, Size: 0x60]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int WearIndex;//[Offset: 0x64, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayeWeaponSchemeInfo
	int SchemeIndex;//[Offset: 0x0, Size: 0x4]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	GameModePlayeWeaponSchemeSlotInfo[] SlotList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayeWeaponSchemeSlotInfo
	int SlotIndex;//[Offset: 0x0, Size: 0x4]
	int ItemId;//[Offset: 0x4, Size: 0x4]
	int Count;//[Offset: 0x8, Size: 0x4]
	int[] AttachList;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerItems
	GameModePlayerItem[] Items;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAvatarData
	int VehicleSkinID;//[Offset: 0x0, Size: 0x4]
	int[] VehicleStyleIDList;//[Offset: 0x8, Size: 0x10]
	VehicleAvatarStyle[] VehicleAvatarStyle;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAvatarStyle
	int ModelID;//[Offset: 0x0, Size: 0x4]
	int ColorID;//[Offset: 0x4, Size: 0x4]
	int PatternID;//[Offset: 0x8, Size: 0x4]
	int ParticleID;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerEquipmentAvatar
	int BagAvatar;//[Offset: 0x0, Size: 0x4]
	int HelmetAvatar;//[Offset: 0x4, Size: 0x4]
	int ArmorAvatar;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeWeaponAvatarData
	int ParentID;//[Offset: 0x0, Size: 0x4]
	int AvatarSpecificID;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAvatarSkinList
	int[] SkinList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerExpressionItem.GameModePlayerItem
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeWeaponDIYPlanData
	int WeaponAvatarID;//[Offset: 0x0, Size: 0x4]
	int PlanID;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0, Size: 0x4]
	int process;//[Offset: 0x4, Size: 0x4]
	FString ext_info;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SpecialPickItem
	int item_id;//[Offset: 0x0, Size: 0x4]
	int cur_count;//[Offset: 0x4, Size: 0x4]
	int total_count;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DailyTaskStoreInfo
	int TaskId;//[Offset: 0x0, Size: 0x4]
	int State;//[Offset: 0x4, Size: 0x4]
	int Progress;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: LobbyWatchInfo
	uint32 WatchedPlayerKey;//[Offset: 0x0, Size: 0x4]
	bool bIsHawkEyeSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x260, Size: 0x8]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x268, Size: 0x8]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x270, Size: 0x8]
	UAEUserWidget* ParentWidget;//[Offset: 0x278, Size: 0x8]
	Property*[] Params;//[Offset: 0x320, Size: 0x10]
	delegate widgetSizeNofity;//[Offset: 0x340, Size: 0x10]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x350, Size: 0x28]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x378, Size: 0x28]
	float TickRate;//[Offset: 0x3a0, Size: 0x4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 0x1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 0x1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a7, Size: 0x1]
	Vector2D ScreenPos;//[Offset: 0x3a8, Size: 0x8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x3b0, Size: 0x8]
	enum FadingStatus;//[Offset: 0x3c0, Size: 0x1]
	float CurrentOpacity;//[Offset: 0x3c4, Size: 0x4]
	float FadingInTime;//[Offset: 0x3c8, Size: 0x4]
	float FadingOutTime;//[Offset: 0x3cc, Size: 0x4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 0x1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d2, Size: 0x1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d3, Size: 0x1]
	FString UIMsgPrefix;//[Offset: 0x3d8, Size: 0x10]
	FString[] UIMsgFunctionList;//[Offset: 0x3e8, Size: 0x10]
	bool bRegistedUIMsgToMoudle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	FString MoudleToRegisted;//[Offset: 0x400, Size: 0x10]
	bool Visible();// 0x8f82be8
	void UnRegistFromGameFrontendHUD();// 0x8f82bd4
	void SynchronizeBlueprintProperties();// 0x70644c4
	void Show();// 0x8f82bc0
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x8f82b44
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x8f82ac8
	static void SetOnWidgetShow(delegate onShow);// 0x8f82a34
	static void SetOnWidgetHide(delegate OnHide);// 0x8f829a0
	static void SetOnClearUIStack(delegate onClear);// 0x8f8290c
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x8f827e0
	void RegistToGameFrontendHUD(FrontendHUD* GameFrontHUD);// 0x8f82764
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x8f826a4
	void ReceiveShow();// 0x70644c4
	void ReceiveHide();// 0x70644c4
	void ReceivedMountWidget();// 0x8f82688
	void ReceivedInitWidget();// 0x70644c4
	void ReCachedUIMsgFunction();// 0x8f82674
	static void PushOpenedUIStack(FString Name);// 0x8f825d4
	static void PopOpenedUIStack(FString curOpen);// 0x8f82534
	void OnWidgetShow__DelegateSignature(FString ClassName);// 0x70644c4
	void OnWidgetHide__DelegateSignature(FString ClassName);// 0x70644c4
	void OnRightClicked(Vector2D TempScreenPos);// 0x70644c4
	void OnFadeOutFinished();// 0x8f82518
	void OnFadeInFinished();// 0x8f824fc
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x70644c4
	void OnClicked(Vector2D TempScreenPos);// 0x70644c4
	void OnClearUIStack__DelegateSignature();// 0x70644c4
	bool IntCompare(int A, int B, enum CompareType);// 0x8f823f8
	void InitWidget(bool Recursive);// 0x8f82374
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x8f822b8
	void Hide();// 0x8f822a4
	void HandleUIMessageBattle(FString UIMessage);// 0x8f821fc
	void HandleUIMessage(FString UIMessage);// 0x8f82154
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains);// 0x8f81ff0
	Widget* GetWidgetContainsName(FString Name);// 0x8f81f38
	UAEUserWidget* GetParentWidget();// 0x8f81f04
	PlayerController* GetOwningPlayer();// 0x8f81ec8
	LogicManagerBase* GetOwningLogicManager();// 0x8f81e94
	FrontendHUD* GetOwningFrontendHUD();// 0x8f81e60
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x8f81dd4
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x8f81ca0
	UserWidget* GetChildWidget(FString WName);// 0x8f81be8
	Margin GetAdapation();// 0x8f81bc4
	bool FloatCompare(float A, float B, enum CompareType);// 0x8f81ac0
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget);// 0x8f81a44
	void DestroyWidget();// 0x8f81a30
	static void ClearOpenedUIStack();// 0x8f81a1c
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x8f81974
	void ClearFunctionCache();// 0x8f81960
	void ClearClassWidgetTree();// 0x8f8194c
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x8f81890
<----------Generated by SSpawner v1.0.4---------->


Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x40, Size: 0x8]
	FString FrontendUtilsClassName;//[Offset: 0x50, Size: 0x10]
	FrontendUtils* Utils;//[Offset: 0x60, Size: 0x8]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x68, Size: 0x10]
	<FString,LogicManagerBase*> LogicManagerMap;//[Offset: 0x78, Size: 0x50]
	int UnusedWidgetMinCount;//[Offset: 0xd8, Size: 0x4]
	int UnusedWidgetMaxCount;//[Offset: 0xdc, Size: 0x4]
	int UnusedWidgetKeepTime;//[Offset: 0xe0, Size: 0x4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xe4, Size: 0x4]
	float MaxMiddleMemoryLimit;//[Offset: 0xe8, Size: 0x4]
	float MaxGCArrayObjectSize;//[Offset: 0xec, Size: 0x4]
	FName CurrentGameStatus;//[Offset: 0xf0, Size: 0x8]
	FName LastGameStatus;//[Offset: 0xf8, Size: 0x8]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	FName PendingGameStatus;//[Offset: 0x108, Size: 0x8]
	FString LatestGameStatusURL;//[Offset: 0x110, Size: 0x10]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0x120, Size: 0x10]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0x130, Size: 0x10]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0x140, Size: 0x10]
	delegate OnGameStatusSwitchTerminate;//[Offset: 0x160, Size: 0x10]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x170, Size: 0x10]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x180, Size: 0x10]
	delegate OnSetGameStatusEvent;//[Offset: 0x190, Size: 0x10]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x1a0, Size: 0x10]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x1b0, Size: 0x10]
	World* CurrentGameStatusWorld;//[Offset: 0x1c0, Size: 0x8]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x8f7ace4
	void StandAloneSwitchGameStatus(FName InGameStatus, FString Options);// 0x8f7ab60
	void OnPreLoadMap(FString MapName);// 0x8f7aab0
	void OnPostLoadMapWithWorld(World* World);// 0x8f7aa2c
	void OnGameViewportClientCreated();// 0x8f7aa18
	World* GetWorld();// 0x8f7a9dc
	FrontendUtils* GetUtils();// 0x8f7a9a8
	PlayerController* GetPlayerController();// 0x8f7a974
	LogicManagerBase* GetLogicManagerByName(FString LogicManagerTagName);// 0x8f7a838
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x8f7a7ac
	GameViewportClient* GetGameViewportClient();// 0x8f7a778
	GameMode* GetGameMode();// 0x8f7a744
	GameInstance* GetGameInstance();// 0x8f7a710
	Object*[] FindRegistedUIFunctionList(FString strMsg, FString moduleMsg);// 0x8f7a590
	void EnableGuiTest(bool bEnable);// 0x8f7a50c
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget, FString module);// 0x8f7a424
	void ClearLogicManagerListByStatus(FName PendingStatus, bool bIsForceDelete);// 0x8f7a364
	void ClearLogicManagerByName(FString managerName);// 0x8f7a230
<----------Generated by SSpawner v1.0.4---------->


Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 0x8]
	delegate SceneCameraSwitchedDelegate;//[Offset: 0x30, Size: 0x10]
	FName CurrentSceneCameraName;//[Offset: 0x40, Size: 0x8]
	CameraActor*[] SceneCameraList;//[Offset: 0x48, Size: 0x10]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x58, Size: 0x50]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0xa8, Size: 0x10]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0xb8, Size: 0x50]
	PointLight*[] ScenePointLightList;//[Offset: 0x108, Size: 0x10]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0x118, Size: 0x50]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x168, Size: 0x50]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x220, Size: 0x10]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x230, Size: 0x8]
	Object* GlobalUIEventDispatcher;//[Offset: 0x238, Size: 0x8]
	FString GlobalUIContainerClassName;//[Offset: 0x240, Size: 0x10]
	FName[] GlobalUIContainerNames;//[Offset: 0x250, Size: 0x10]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x260, Size: 0x50]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x2b0, Size: 0x10]
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x2c0, Size: 0x50]
	<UAEWidgetContainer*,bool> UIShowStatusMap;//[Offset: 0x348, Size: 0x50]
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float blendTime, bool bForce, bool bAutoFixAspect);// 0x8f7c540
	void SwitchSceneCamera(FName SceneCameraName, float blendTime, bool bForce);// 0x8f7c444
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x8f7c2ec
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x8f7c11c
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x8f7bf84
	void SetAutoFixFovByAspectRatio(CameraActor* CameraActor, bool bInAutoFixFov);// 0x8f7bec4
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x8f7be10
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x8f7bd5c
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x8f7bca8
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x8f7bbf4
	void PopAllPushedUI();// 0x8f7bbe0
	void OnAllSceneCamerasRegistered();// 0x8f7bbc4
	bool IsPushedPanel(out const FName managerName);// 0x8f7bb24
	bool IsNoRenderClient();// 0x8f7baec
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x8f7b9ac
	FString GetUIStackTopSrcTag();// 0x8f7b908
	FString GetUIStackTopDstTag();// 0x8f7b864
	FString GetUIStackTop();// 0x8f7b7c0
	CameraActor* GetSceneCamera();// 0x8f7b78c
	FrontendHUD* GetOwningFrontendHUD();// 0x8f7b758
	Object* GetGlobalUIEventDispatcher();// 0x8f7b724
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x8f7b698
	void EnableLobbyMainLight(bool NewEnable);// 0x8f7b614
	void ClearAllSceneCameras();// 0x8f7b600
<----------Generated by SSpawner v1.0.4---------->


Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x408, Size: 0x8]
	void SetRadius(float NewRadius);// 0x8e0b124
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x8e0b0a8
<----------Generated by SSpawner v1.0.4---------->


Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x3fc, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x400, Size: 0x4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x404, Size: 0x1]
	float LightFalloffExponent;//[Offset: 0x408, Size: 0x4]
	float SourceRadius;//[Offset: 0x40c, Size: 0x4]
	float SoftSourceRadius;//[Offset: 0x410, Size: 0x4]
	float SourceLength;//[Offset: 0x414, Size: 0x4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 0x1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x418, Size: 0x1]
	float RectLightSourceWidth;//[Offset: 0x41c, Size: 0x4]
	float RectLightSourceHeight;//[Offset: 0x420, Size: 0x4]
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 0x1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x428, Size: 0xc]
	void SetSourceRadius(float bNewValue);// 0x8e0b914
	void SetSourceLength(float NewValue);// 0x8e0b898
	void SetSoftSourceRadius(float bNewValue);// 0x8e0b81c
	void SetSimulateRectLight(bool NewValue);// 0x8e0b798
	void SetSimulatePortalLight(bool NewValue);// 0x8e0b714
	void SetRectLightSourceWidth(float NewValue);// 0x8e0b698
	void SetRectLightSourceHeight(float NewValue);// 0x8e0b61c
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x8e0b5a0
	void SetAttenuationRadius(float NewRadius);// 0x8e0b524
<----------Generated by SSpawner v1.0.4---------->


Class: LightmassPointLightSettings.LightmassLightSettings
<----------Generated by SSpawner v1.0.4---------->


Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x3f8, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 0x1]
	void OnRep_bEnabled();// 0x8e415ec
<----------Generated by SSpawner v1.0.4---------->


Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x2f4, Size: 0x1]
	TextureCube* Cubemap;//[Offset: 0x2f8, Size: 0x8]
	TextureCube* ProcessedCubemap;//[Offset: 0x300, Size: 0x8]
	float SourceCubemapAngle;//[Offset: 0x308, Size: 0x4]
	int CubemapResolution;//[Offset: 0x30c, Size: 0x4]
	float SkyDistanceThreshold;//[Offset: 0x310, Size: 0x4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1]
	LinearColor LowerHemisphereColor;//[Offset: 0x318, Size: 0x10]
	float OcclusionMaxDistance;//[Offset: 0x328, Size: 0x4]
	float Contrast;//[Offset: 0x32c, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x330, Size: 0x4]
	float MinOcclusion;//[Offset: 0x334, Size: 0x4]
	Color OcclusionTint;//[Offset: 0x338, Size: 0x4]
	byte OcclusionCombineMode;//[Offset: 0x33c, Size: 0x1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x3e8, Size: 0x8]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x8e41fb8
	void SetOcclusionTint(out const Color InTint);// 0x8e41f30
	void SetOcclusionExponent(float InOcclusionExponent);// 0x8e41eb4
	void SetOcclusionContrast(float InOcclusionContrast);// 0x8e41e38
	void SetMinOcclusion(float InMinOcclusion);// 0x8e41dbc
	void SetLightColor(LinearColor NewLightColor);// 0x8e41d40
	void SetIntensity(float NewIntensity);// 0x8e41cc4
	void SetIndirectLightingIntensity(float NewIntensity);// 0x8e41c48
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x8e41b58
	void SetCubemap(TextureCube* NewCubemap);// 0x8e41adc
	void RecaptureSky();// 0x8e41ac8
<----------Generated by SSpawner v1.0.4---------->


Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UserWidget*[] WidgetList;//[Offset: 0x418, Size: 0x10]
	void RemoveWidgetInternal(UserWidget* Widget);// 0x8f84800
	void RemoveWidget(UserWidget* Widget);// 0x8f84784
	void AddWidgetWithZOrderInternal(UserWidget* Widget, int ZOrder);// 0x8f846c4
	void AddWidgetWithZOrder(UserWidget* Widget, int ZOrder);// 0x8f8460c
	void AddWidgetInternal(UserWidget* Widget);// 0x8f84588
	void AddWidget(UserWidget* Widget);// 0x8f8450c
<----------Generated by SSpawner v1.0.4---------->


Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x38, Size: 0x8]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	int iUIControlState;//[Offset: 0x54, Size: 0x4]
	int DefaultSceneCameraIndex;//[Offset: 0x58, Size: 0x4]
	FName[] GameStatusList;//[Offset: 0x70, Size: 0x10]
	class Object[] WidgetUClassList;//[Offset: 0xb0, Size: 0x10]
	UAEUserWidget*[] WidgetList;//[Offset: 0xc0, Size: 0x10]
	Object*[] DelayMessage_Obj;//[Offset: 0xe8, Size: 0x10]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x8f7dec4
	bool IsEnableRemoveDynamicWidgets();// 0x8f7de8c
	UAEUserWidget*[] GetWidgetList();// 0x8f7dde8
	UAEUserWidget* GetWidgetByName(FString InName);// 0x8f7dd30
	UAEUserWidget* GetWidgetByClass(class Object InClass);// 0x8f7dca4
	FrontendHUD* GetOwningFrontendHUD();// 0x8f7dc70
	int GetDefaultSceneCamera();// 0x8f7dc3c
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x8f7da94
<----------Generated by SSpawner v1.0.4---------->


Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x488, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x490, Size: 0x1]
	int NumSpectators;//[Offset: 0x494, Size: 0x4]
	int NumPlayers;//[Offset: 0x498, Size: 0x4]
	int NumBots;//[Offset: 0x49c, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x4a0, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x4a4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x4a8, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x4b0, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x4c0, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 0x1]
	void StartMatch();// 0x8cf82dc
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x8cf8258
	void Say(FString Msg);// 0x8cf81a8
	void RestartGame();// 0x8cf818c
	bool ReadyToStartMatch();// 0x8cf814c
	bool ReadyToEndMatch();// 0x8cf810c
	void K2_OnSetMatchState(FName NewState);// 0x70644c4
	bool IsMatchInProgress();// 0x8cf80cc
	bool HasMatchEnded();// 0x8cf808c
	FName GetMatchState();// 0x8cf8070
	void EndMatch();// 0x8cf8054
	void AbortMatch();// 0x8cf8038
<----------Generated by SSpawner v1.0.4---------->


Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 0x10]
	FName ContainerName;//[Offset: 0x10, Size: 0x8]
	int ZOrder;//[Offset: 0x18, Size: 0x4]
	UAEUserWidget* Widget;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Image.Widget.Visual.Object
	bool bIsEnhancedImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	SlateBrush Brush;//[Offset: 0x108, Size: 0xb8]
	delegate BrushDelegate;//[Offset: 0x1c0, Size: 0x10]
	delegate OnSetBrushAsyncComplete;//[Offset: 0x1d0, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x1e0, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1f0, Size: 0x10]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	bool bVersionImg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1]
	FString imageSrcPath;//[Offset: 0x208, Size: 0x10]
	float HitTestAreaRadius;//[Offset: 0x218, Size: 0x4]
	bool bFixOverScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1]
	Vector2D ScalePivot;//[Offset: 0x220, Size: 0x8]
	delegate OnMouseButtonDownEvent;//[Offset: 0x228, Size: 0x10]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	bool bDontPaintWhenColorZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]
	bool bAsyncLoadImageAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a, Size: 0x1]
	SoftObjectPath AsyncLoadResourcePath;//[Offset: 0x240, Size: 0x18]
	void SetOpacity(float InOpacity);// 0x802f564
	void SetDontPaintWhenColorZero(bool Enable);// 0x802f4e0
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x802f45c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x802f3e0
	void SetBrushResourceFromPathSync(FString ResourcePath);// 0x802f338
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x802f278
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x802f1b8
	void SetBrushFromPathAsync(FString ResourcePath, bool bMatchSize);// 0x802f0c8
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x802f04c
	void SetBrushFromAtlasInterface(interface class AtlasRegion, bool bMatchSize);// 0x802ef60
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x802eee4
	void SetBrush(out const SlateBrush InBrush);// 0x802edb4
	void SeFixOverScale(bool Enable);// 0x802ed30
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x802ecfc
	bool GetDontPaintWhenColorZero();// 0x802ecc4
	bool GetDontPaintWhenAlphaZero();// 0x802ec8c
<----------Generated by SSpawner v1.0.4---------->


Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xf0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0xb8]
<----------Generated by SSpawner v1.0.4---------->


Class: ValidTouchMoveFrameConfig
	FString DeviceName;//[Offset: 0x0, Size: 0x10]
	int Enable;//[Offset: 0x10, Size: 0x4]
	int Frame;//[Offset: 0x14, Size: 0x4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	FString PlayerUIDStr;//[Offset: 0x10, Size: 0x10]
	int PlayerGender;//[Offset: 0x20, Size: 0x4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	int[] EquipedAvatarList;//[Offset: 0x28, Size: 0x10]
	int[] EquipedWeaponList;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ClientFatalDamageRecordData
	FString Causer;//[Offset: 0x0, Size: 0x10]
	FString CauserNation;//[Offset: 0x10, Size: 0x10]
	FString VictimName;//[Offset: 0x20, Size: 0x10]
	FString VictimNation;//[Offset: 0x30, Size: 0x10]
	FString FuzzyCauserName;//[Offset: 0x40, Size: 0x10]
	FString FuzzyVictimName;//[Offset: 0x50, Size: 0x10]
	int DamageType;//[Offset: 0x60, Size: 0x4]
	int AdditionalParam;//[Offset: 0x64, Size: 0x4]
	int CauserWeaponAvatarID;//[Offset: 0x68, Size: 0x4]
	int CauserClothAvatarID;//[Offset: 0x6c, Size: 0x4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int ResultHealthStatus;//[Offset: 0x74, Size: 0x4]
	byte RecordRelationShip;//[Offset: 0x78, Size: 0x1]
	int PreviousHealthStatus;//[Offset: 0x7c, Size: 0x4]
	int causerAnchorPlatformResID;//[Offset: 0x80, Size: 0x4]
	int causerAnchorPlatformColorID;//[Offset: 0x84, Size: 0x4]
	int realKillerAnchorPlatformResID;//[Offset: 0x88, Size: 0x4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x8c, Size: 0x4]
	int victimAnchorPlatformResID;//[Offset: 0x90, Size: 0x4]
	int victimAnchorPlatformColorID;//[Offset: 0x94, Size: 0x4]
	FString CauserPicURL;//[Offset: 0x98, Size: 0x10]
	FString VictimPicURL;//[Offset: 0xa8, Size: 0x10]
	FString RealKillerName;//[Offset: 0xb8, Size: 0x10]
	int RealKillNum;//[Offset: 0xc8, Size: 0x4]
	byte CauserType;//[Offset: 0xcc, Size: 0x1]
	byte VictimType;//[Offset: 0xcd, Size: 0x1]
	int CauserTeamID;//[Offset: 0xd0, Size: 0x4]
	int VictimTeamID;//[Offset: 0xd4, Size: 0x4]
	bool IsUseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	LinearColor UseColor;//[Offset: 0xdc, Size: 0x10]
	byte[] ExpandDataContent;//[Offset: 0xf0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 0x28]
	SensibilityMode FireMode;//[Offset: 0x28, Size: 0x28]
	SensibilityMode MotionMode;//[Offset: 0x50, Size: 0x28]
	SensibilityMode MotionFireMode;//[Offset: 0x78, Size: 0x28]
	float VehicleEye;//[Offset: 0xa0, Size: 0x4]
	float ParachuteEye;//[Offset: 0xa4, Size: 0x4]
	float FPPEye;//[Offset: 0xa8, Size: 0x4]
	int SideMirrorModeC;//[Offset: 0xac, Size: 0x4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0xb0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 0x4]
	float Sight1X;//[Offset: 0x4, Size: 0x4]
	float Sight2X;//[Offset: 0x8, Size: 0x4]
	float Sight3X;//[Offset: 0xc, Size: 0x4]
	float Sight4X;//[Offset: 0x10, Size: 0x4]
	float Sight6X;//[Offset: 0x14, Size: 0x4]
	float Sight8X;//[Offset: 0x18, Size: 0x4]
	float FPPNoAim;//[Offset: 0x1c, Size: 0x4]
	float Shoulder;//[Offset: 0x20, Size: 0x4]
	float ShoulderFPP;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SightMaterialConfig
	int Color;//[Offset: 0x0, Size: 0x4]
	int Type;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0, Size: 0x1]
	FString AttackActionName;//[Offset: 0x8, Size: 0x10]
	FString AttackName;//[Offset: 0x18, Size: 0x10]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int KillNum;//[Offset: 0x2c, Size: 0x4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bHideKillIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	FString FullMsg;//[Offset: 0x38, Size: 0x10]
	int victimAnchorPlatformResID;//[Offset: 0x48, Size: 0x4]
	FString VictimPlayerName;//[Offset: 0x50, Size: 0x10]
	FString CauserPlayerName;//[Offset: 0x60, Size: 0x10]
	FString CauserRealPlayerName;//[Offset: 0x70, Size: 0x10]
	bool bIsCauserTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bIsVictimTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool bIamCauser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	bool bIamVictim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 0x1]
	int ResultHealthStatus;//[Offset: 0x84, Size: 0x4]
	int CauserType;//[Offset: 0x88, Size: 0x4]
	int DamageType;//[Offset: 0x8c, Size: 0x4]
	int AdditionalParam;//[Offset: 0x90, Size: 0x4]
	int PreviousHealthStatus;//[Offset: 0x94, Size: 0x4]
	byte[] ExpandDataContent;//[Offset: 0x98, Size: 0x10]
	int AssistNum;//[Offset: 0xa8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0x110, Size: 0x4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 0x1]
	float GuideInterval;//[Offset: 0x118, Size: 0x4]
	int MaxGuideLevel;//[Offset: 0x11c, Size: 0x4]
	class STNewBieGuideConfig* uBRNewGuideConfig;//[Offset: 0x120, Size: 0x28]
	class Object[] tGuideConfigClassArray;//[Offset: 0x148, Size: 0x10]
	STNewBieGuideConfig*[] tGuideConfigArray;//[Offset: 0x158, Size: 0x10]
	class STNewBieGuideConfig* uModNewGuideConfig;//[Offset: 0x168, Size: 0x28]
	NewbieGuideItem[] tItems;//[Offset: 0x190, Size: 0x10]
	STExtraPlayerController* OwnerController;//[Offset: 0x1a0, Size: 0x8]
	int[] FinishedTips;//[Offset: 0x1a8, Size: 0x10]
	int[] FinishedCounts;//[Offset: 0x1b8, Size: 0x10]
	int PlayerLevel;//[Offset: 0x1c8, Size: 0x4]
	byte curPlayerCategory;//[Offset: 0x1cc, Size: 0x1]
	void TriggerNewbieEvent(FString NewbieEvent);// 0x5f97d70
	void ShowHideGuide(int TipsID, bool bShow);// 0x5f97cb0
	void SendNewbieMsg(int TipsID, bool isStart, int tipsIndex);// 0x5f97bac
	void OnUIAssetLoadFinsh(LoadGuideUIFinishRet inFinishRet);// 0x5f97b30
	void OnNewbieEventMapUpdate__DelegateSignature();// 0x70644c4
	void OnLoadGuideConfigFinish(LoadGuideConfig inFinishRet);// 0x5f979f0
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte _curPlayerCategory, int _PlayerLevel);// 0x5f97728
	void HandleNewbieGuideEnd(FString GuideID, FString EndType);// 0x5f97618
	void HandleNewbieGuideBegin(FString GuideID);// 0x5f97570
	bool GetIsAllowNewGuide();// 0x5f97538
	bool GetIsAllowLuaNewGuide();// 0x5f97500
	void AddGuidItem(class STNewBieGuideConfig Config);// 0x5f973c0
<----------Generated by SSpawner v1.0.4---------->


Class: STNewBieGuideConfig.Object
	NewbieGuideItem[] tItems;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: NewbieGuideItem
	int ID;//[Offset: 0x0, Size: 0x4]
	FString Name;//[Offset: 0x8, Size: 0x10]
	byte Type;//[Offset: 0x18, Size: 0x1]
	int MaxGuideCounts;//[Offset: 0x1c, Size: 0x4]
	int MaxGuideLevel;//[Offset: 0x20, Size: 0x4]
	byte[] SubjectPlayerTypes;//[Offset: 0x28, Size: 0x10]
	int Priority;//[Offset: 0x38, Size: 0x4]
	int MuteFlag;//[Offset: 0x3c, Size: 0x4]
	int PreconditionID;//[Offset: 0x40, Size: 0x4]
	float PreconditionTipTimeGap;//[Offset: 0x44, Size: 0x4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x48, Size: 0x10]
	STNewbieGuideSuccessListenerBase* QuickFinishedListener;//[Offset: 0x58, Size: 0x8]
	STNewbieGuideSuccessListenerBase*[] QuickFinishedListenerList;//[Offset: 0x60, Size: 0x10]
	float Duration;//[Offset: 0x70, Size: 0x4]
	NewbieGuideUIInfo[] UIInfos;//[Offset: 0x78, Size: 0x10]
	bool UseNewEdition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x88, Size: 0x8]
	FString LuaFilePath;//[Offset: 0x90, Size: 0x10]
	bool ReconnectRecover();// 0x5f96bb0
	bool IsOK();// 0x5f96b70
<----------Generated by SSpawner v1.0.4---------->


Class: STNewbieGuideSuccessListenerBase.GSListenerBase.Object
	bool GuideFinishedByPlayer();// 0x5f96de8
<----------Generated by SSpawner v1.0.4---------->


Class: GSListenerBase.Object
	delegate OnGSListenerBaseTrigger;//[Offset: 0x28, Size: 0x10]
	Controller* OwnerController;//[Offset: 0x38, Size: 0x8]
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float DelayTime;//[Offset: 0x44, Size: 0x4]
	bool ReconnectRecover();// 0x5f1accc
	void OnEventTrigger();// 0x5f1acb0
	Actor* GetCurrentEventOwnerActor();// 0x5f1ac74
	bool EnableListener();// 0x5f1ac34
	bool DisableListener();// 0x5f1abf4
<----------Generated by SSpawner v1.0.4---------->


Class: NewbieGuideUIInfo
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x0, Size: 0x28]
	bool isMountUIDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FString MountName;//[Offset: 0x30, Size: 0x10]
	FString MountOuterName;//[Offset: 0x40, Size: 0x10]
	AnchorData LayoutData;//[Offset: 0x50, Size: 0x28]
	FString LogicManagerNames;//[Offset: 0x78, Size: 0x10]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	int ZOrder;//[Offset: 0x8c, Size: 0x4]
	Widget* UIWidget;//[Offset: 0x90, Size: 0x8]
	class Object* UIWidgetClass;//[Offset: 0x98, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	Vector2D Alignment;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: LoadGuideUIFinishRet
<----------Generated by SSpawner v1.0.4---------->


Class: LoadGuideConfig
<----------Generated by SSpawner v1.0.4---------->


Class: PVSComponent.ActorComponent.Object
	void SyncVoiceLODSector(STExtraBaseCharacter* PtrChar, float InVoice1, float InVoice2, float InVoice3, const int Index);// 0x602965c
	void SyncVoiceCellInfo(STExtraBaseCharacter* PtrChar, const int InVoice1, const int InVoice2, const float InVoice3);// 0x6029530
	void SyncVisibilityFor(STExtraBaseCharacter* PtrChar, const bool bVisible);// 0x6029470
	void SyncPosition(STExtraBaseCharacter* PtrChar, const Vector Position);// 0x60293bc
	void SyncFootVoice(STExtraBaseCharacter* PtrChar, const byte FootStepState, const Vector_NetQuantize100 VoiceCheckVector);// 0x60292cc
	void ReportPVSException(const Vector OwnPos, const Vector OtherPos, const Vector Vel, const Vector OuterLoc);// 0x602917c
	void ForceSyncPosition(STExtraBaseCharacter* PtrChar, const RepMovement RepMovement);// 0x60290c0
	void AlertPopInDev(FString Message, FString SimulateProxyUID);// 0x6028f88
<----------Generated by SSpawner v1.0.4---------->


Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	float TimeStartDelay;//[Offset: 0x114, Size: 0x4]
	float SyncInterval;//[Offset: 0x118, Size: 0x4]
	void RPC_SrvSyncTimeLine(float InSrvSendTime, float InClientTime);// 0x62737c4
	void RPC_ClientSyncTimeLine(float InServerTime);// 0x6273740
	void OnTimeInspectorColdMove_Vehicle();// 0x627372c
	void OnTimeInspectorColdMove_Own();// 0x6273718
	void OnServerAboutToReconnect();// 0x6273704
	void CheckTimeLine();// 0x62736f0
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch CheatStateData2TotalCheatTimes;//[Offset: 0x120, Size: 0x28]
	VerifySwitch MoveCheatAntiStrategy3TotalCheatTimes;//[Offset: 0x150, Size: 0x28]
	VerifySwitch VsNoHitDetail;//[Offset: 0x190, Size: 0x28]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x1b8, Size: 0x28]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x1e0, Size: 0x28]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x208, Size: 0x28]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x230, Size: 0x28]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x258, Size: 0x28]
	VerifySwitch VsBoneScale;//[Offset: 0x280, Size: 0x28]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x2a8, Size: 0x28]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x2d0, Size: 0x28]
	VerifySwitch VsBulletID;//[Offset: 0x2f8, Size: 0x28]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x320, Size: 0x28]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x348, Size: 0x28]
	int MaxShootPointPassWall;//[Offset: 0x370, Size: 0x4]
	int MaxMuzzleHeightTime;//[Offset: 0x374, Size: 0x4]
	int MaxLocusFailTime;//[Offset: 0x378, Size: 0x4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x37c, Size: 0x4]
	int MaxGunPosErrorTimes;//[Offset: 0x380, Size: 0x4]
	float MaxSkeletonLength;//[Offset: 0x384, Size: 0x4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x388, Size: 0x4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x38c, Size: 0x4]
	int MaxAllowVehicleAccTime;//[Offset: 0x390, Size: 0x4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x394, Size: 0x4]
	VerifySwitch VsBoneInfo;//[Offset: 0x398, Size: 0x28]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x3c0, Size: 0x28]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x3e8, Size: 0x28]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x410, Size: 0x28]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x438, Size: 0x28]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x460, Size: 0x28]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x488, Size: 0x28]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x4b0, Size: 0x28]
	int MaxMergedStrategy1;//[Offset: 0x4d8, Size: 0x4]
	int MaxMergedStrategy2;//[Offset: 0x4dc, Size: 0x4]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x4e0, Size: 0x28]
	VerifySwitch VsClientNotConnectShoot;//[Offset: 0x508, Size: 0x28]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x530, Size: 0x28]
	VerifySwitch VsShootRpgShootIntervalVerify;//[Offset: 0x558, Size: 0x28]
	float MaxFuelConsume;//[Offset: 0x580, Size: 0x4]
	VerifySwitch VsImpactPointAndBulletDisBig;//[Offset: 0x600, Size: 0x28]
	VerifySwitch VsShootVerifyInvalid;//[Offset: 0x628, Size: 0x28]
	bool bOpenDetailDataCollect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]
	bool bOpenSocialIslandJump2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 0x1]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x658, Size: 0x28]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x680, Size: 0x28]
	VerifySwitch VsClientBulletDir;//[Offset: 0x6a8, Size: 0x28]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x6d0, Size: 0x28]
	VerifySwitch VsClientDownShoot;//[Offset: 0x6f8, Size: 0x28]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x720, Size: 0x28]
	VerifySwitch FarJump;//[Offset: 0x748, Size: 0x28]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x770, Size: 0x28]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x798, Size: 0x28]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x7c0, Size: 0x28]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x7e8, Size: 0x28]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x810, Size: 0x28]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x838, Size: 0x28]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x860, Size: 0x28]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x888, Size: 0x28]
	AntiCheatDetailData CatchReportAntiCheatDetailData;//[Offset: 0x8b0, Size: 0x28]
	int MaxCatchWeaponAntiDataNLength;//[Offset: 0x8d8, Size: 0x4]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x8e0, Size: 0x28]
	float ServerAccumulateErrors;//[Offset: 0x910, Size: 0x4]
	float ServerAvgErrors;//[Offset: 0x914, Size: 0x4]
	VerifySwitch DSSpeedOver10FailedCnt;//[Offset: 0x920, Size: 0x28]
	VerifySwitch DSSpeedOver15FailedCnt;//[Offset: 0x948, Size: 0x28]
	VerifySwitch DSSpeedOver20FailedCnt;//[Offset: 0x970, Size: 0x28]
	VerifySwitch SpeedQuickCheck;//[Offset: 0x998, Size: 0x28]
	VerifySwitch BulletDirError;//[Offset: 0x9c0, Size: 0x28]
	VerifySwitch MuzzleAndOwnerDisOpti;//[Offset: 0x9e8, Size: 0x28]
	VerifySwitch ImpactAndEnemyDisOpti;//[Offset: 0xa10, Size: 0x28]
	VerifySwitch SwitchMuzzleImpactDirError1;//[Offset: 0xa38, Size: 0x28]
	VerifySwitch SwitchMuzzleImpactDirError2;//[Offset: 0xa60, Size: 0x28]
	VerifySwitch SwitchShootPosHistoryLocusError2;//[Offset: 0xa88, Size: 0x28]
	VerifySwitch SwitchShootPosHistoryLocusError3;//[Offset: 0xab0, Size: 0x28]
	VerifySwitch SwitchMuzzleLocusError;//[Offset: 0xad8, Size: 0x28]
	VerifySwitch SwitchMuzzleLocusErrorX;//[Offset: 0xb00, Size: 0x28]
	VerifySwitch SwitchMuzzleLocusErrorY;//[Offset: 0xb28, Size: 0x28]
	VerifySwitch SwitchMuzzleLocusErrorZ;//[Offset: 0xb50, Size: 0x28]
	VerifySwitch SwitchMuzzleLocusErrorLength;//[Offset: 0xb78, Size: 0x28]
	VerifySwitch SwitchShooterMovementError1;//[Offset: 0xba0, Size: 0x28]
	VerifySwitch SwitchShooterMovementError2;//[Offset: 0xbc8, Size: 0x28]
	VerifySwitch SwitchHeadLocusError3;//[Offset: 0xbf0, Size: 0x28]
	VerifySwitch SwitchHeadLocusError4;//[Offset: 0xc18, Size: 0x28]
	VerifySwitch Gun2ShooterPosError1;//[Offset: 0xc40, Size: 0x28]
	VerifySwitch Gun2ShooterPosError2;//[Offset: 0xc68, Size: 0x28]
	VerifySwitch ShooterHead2PosBlock;//[Offset: 0xc90, Size: 0x28]
	float MaxUseOptiArguPing;//[Offset: 0xcb8, Size: 0x4]
	int ShootVerifyTimes;//[Offset: 0xcbc, Size: 0x4]
	float VehicleSpeedZDeltaTotal;//[Offset: 0xd18, Size: 0x4]
	int VehicleSpeedZDeltaOver10Times;//[Offset: 0xd1c, Size: 0x4]
	VerifySwitch VehicleSpeedZDeltaOver10TimesWhenNoXY;//[Offset: 0xd20, Size: 0x28]
	VerifySwitch VehicleVelZCheck1;//[Offset: 0xd48, Size: 0x28]
	VerifySwitch VehicleVelZCheck2;//[Offset: 0xd70, Size: 0x28]
	VerifySwitch VehicleHitMuzzleCheck;//[Offset: 0xd98, Size: 0x28]
	VerifySwitch VehicleHitImpactPointCheck;//[Offset: 0xdc0, Size: 0x28]
	VerifySwitch VehicleHitBlockWall;//[Offset: 0xde8, Size: 0x28]
	VerifySwitch FarShootInMidAirVehicleExceedThreshold;//[Offset: 0xe10, Size: 0x28]
	VerifySwitch FarShootInMidAirVehicleEnemyDistanceTrial;//[Offset: 0xe38, Size: 0x28]
	VerifySwitch FarShootInMidAirVehicleEnemyDistanceFurtherTrial;//[Offset: 0xe60, Size: 0x28]
	VerifySwitch FarShootInMidAirVehicleHeightTrial;//[Offset: 0xe88, Size: 0x28]
	VerifySwitch FarShootInMidAirVehicleHeightFurtherTrial;//[Offset: 0xeb0, Size: 0x28]
	VerifySwitch FarShootInMidAirPawnExceedThreshold;//[Offset: 0xed8, Size: 0x28]
	VerifySwitch FarShootInMidAirPawnEnemyDistanceTrial;//[Offset: 0xf00, Size: 0x28]
	VerifySwitch FarShootInMidAirPawnEnemyDistanceFurtherTrial;//[Offset: 0xf28, Size: 0x28]
	VerifySwitch FarShootInMidAirPawnHeightTrial;//[Offset: 0xf50, Size: 0x28]
	VerifySwitch FarShootInMidAirPawnHeightFurtherTrial;//[Offset: 0xf78, Size: 0x28]
	VerifySwitch DSLongTimeMoveDistanceExceedThresholdCount;//[Offset: 0xfa0, Size: 0x28]
	VerifySwitch DSRunning2DSpeedExceededCount;//[Offset: 0xfc8, Size: 0x28]
	VerifySwitch DSRunning2DSpeedTrial;//[Offset: 0xff0, Size: 0x28]
	VerifySwitch DSRunning2DSpeedFurtherTrial;//[Offset: 0x1018, Size: 0x28]
	VerifySwitch DSIgnoreNetworkDying2DSpeedExceededCount;//[Offset: 0x1040, Size: 0x28]
	VerifySwitch DSProneMoveSpeedExceedCount;//[Offset: 0x1068, Size: 0x28]
	VerifySwitch DSDyingMoveSpeedExceedCount;//[Offset: 0x1090, Size: 0x28]
	VerifySwitch DSSprintCrouchMoveSpeedExceedCount;//[Offset: 0x10b8, Size: 0x28]
	VerifySwitch DSAimCrouchMoveSpeedExceedCount;//[Offset: 0x10e0, Size: 0x28]
	VerifySwitch DSNonSprintNonAimCrouchMoveSpeedExceedCount;//[Offset: 0x1108, Size: 0x28]
	VerifySwitch NonGunADSFarShootCount;//[Offset: 0x1130, Size: 0x28]
	VerifySwitch NonGunADSFarShootFromClientBulletDataCount;//[Offset: 0x1158, Size: 0x28]
	VerifySwitch NonGunADSFarShootFromClientBulletDataEnemyDistanceTrialCount;//[Offset: 0x1180, Size: 0x28]
	VerifySwitch NonGunADSFarShootFromClientBulletDataEnemyDistanceFurtherTrialCount;//[Offset: 0x11a8, Size: 0x28]
	VerifySwitch ClientUploadFuzzyObjectVerifyFail;//[Offset: 0x11d0, Size: 0x28]
	VerifySwitch ClientMoveTimeStampResetFrequencyExceedThreshold;//[Offset: 0x11f8, Size: 0x28]
	VerifySwitch ShootBirdNonGunADSExceedThreshold;//[Offset: 0x1220, Size: 0x28]
	VerifySwitch ShootBirdNonGunADSDistanceTrial;//[Offset: 0x1248, Size: 0x28]
	VerifySwitch ShootBirdNonGunADSDistanceFurtherTrial;//[Offset: 0x1270, Size: 0x28]
	VerifySwitch FarShootInHighTangentMoveSpeedExceedThreshold;//[Offset: 0x1298, Size: 0x28]
	VerifySwitch FarShootInHighTangentMoveSpeedEnemyDistanceTrial;//[Offset: 0x12c0, Size: 0x28]
	VerifySwitch FarShootInHighTangentMoveSpeedEnemyDistanceFurtherTrial;//[Offset: 0x12e8, Size: 0x28]
	VerifySwitch FarShootInHighTangentMoveSpeedSpeedTrial;//[Offset: 0x1310, Size: 0x28]
	VerifySwitch FarShootInHighTangentMoveSpeedSpeedFurtherTrial;//[Offset: 0x1338, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKill;//[Offset: 0x1360, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillDistanceTrial;//[Offset: 0x1388, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillTimeTrial;//[Offset: 0x13b0, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireAfterKillMaxTime;//[Offset: 0x13d8, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItem;//[Offset: 0x1400, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemDistanceTrial;//[Offset: 0x1428, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemTimeTrial;//[Offset: 0x1450, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFirePickUpItemMaxTime;//[Offset: 0x1478, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKill;//[Offset: 0x14a0, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillDistanceTrial;//[Offset: 0x14c8, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillTimeTrial;//[Offset: 0x14f0, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireNotKillMaxTime;//[Offset: 0x1518, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicle;//[Offset: 0x1540, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleDistanceTrial;//[Offset: 0x1568, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleTimeTrial;//[Offset: 0x1590, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireOnVehicleMaxTime;//[Offset: 0x15b8, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicle;//[Offset: 0x15e0, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicleTimeTrial;//[Offset: 0x1608, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireSameVehicleMaxTime;//[Offset: 0x1630, Size: 0x28]
	VerifySwitch IllegalTeamUpUseObjectTogether;//[Offset: 0x1658, Size: 0x28]
	VerifySwitch IllegalTeamUpGetOnEnemyVehicleCount;//[Offset: 0x1680, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireOneSideHasWeaponOnFoot;//[Offset: 0x16a8, Size: 0x28]
	VerifySwitch IllegalTeamUpNearbyButNoFireOneSideHasWeaponOnFootDistanceTrial;//[Offset: 0x16d0, Size: 0x28]
	VerifySwitch IllegalTeamUpStayOnEnemyVehicle;//[Offset: 0x16f8, Size: 0x28]
	VerifySwitch KillBird;//[Offset: 0x1720, Size: 0x28]
	VerifySwitch ParachuteLandingSecondsExceedThreshold;//[Offset: 0x1748, Size: 0x28]
	VerifySwitch ParachuteObliqueLandingSecondsExceedThreshold;//[Offset: 0x1770, Size: 0x28]
	VerifySwitch ShootBird;//[Offset: 0x17a0, Size: 0x28]
	float ClientBattleMovedDistance;//[Offset: 0x17c8, Size: 0x4]
	float ClientBattlePlayTime;//[Offset: 0x17cc, Size: 0x4]
	VerifySwitch DSFallingSpeedFailCount;//[Offset: 0x17d0, Size: 0x28]
	VerifySwitch DSFallingHeightFailCount;//[Offset: 0x17f8, Size: 0x28]
	int PVSInCityKillCount;//[Offset: 0x1820, Size: 0x4]
	int PVSNotInCityKillCount;//[Offset: 0x1824, Size: 0x4]
	float PVSInCityKillTotalTime;//[Offset: 0x1828, Size: 0x4]
	float PVSNotInCityKillTotalTime;//[Offset: 0x182c, Size: 0x4]
	float PVSInCityKillerTotalMoveDistance;//[Offset: 0x1830, Size: 0x4]
	float PVSNotInCityKillerTotalMoveDistance;//[Offset: 0x1834, Size: 0x4]
	int PVSRayUseTimeRatio;//[Offset: 0x1838, Size: 0x4]
	int PVSRayTaskFinishPercent;//[Offset: 0x183c, Size: 0x4]
	int PVSRayHidePercent;//[Offset: 0x1840, Size: 0x4]
	int PVSCellHidePercent;//[Offset: 0x1844, Size: 0x4]
	int PVSTotalHidePercent;//[Offset: 0x1848, Size: 0x4]
	VerifySwitch ShootDirectionDeviation;//[Offset: 0x1858, Size: 0x28]
	VerifySwitch ShootDirectionDeviationTrial;//[Offset: 0x1880, Size: 0x28]
	VerifySwitch ShootDirectionDeviationFurther;//[Offset: 0x18a8, Size: 0x28]
	VerifySwitch ShooterCapsuleCollided;//[Offset: 0x18d0, Size: 0x28]
	VerifySwitch JumpReviewHighJumpExceed;//[Offset: 0x18f8, Size: 0x28]
	VerifySwitch JumpReviewFarJumpExceed;//[Offset: 0x1920, Size: 0x28]
	float ActorTimeDilation;//[Offset: 0x1948, Size: 0x4]
	VerifySwitch SmallActorTimeDilationCount;//[Offset: 0x1950, Size: 0x28]
	VerifySwitch DistantRifleStrafe;//[Offset: 0x1978, Size: 0x28]
	VerifySwitch JumpUpStrafe;//[Offset: 0x19a0, Size: 0x28]
	VerifySwitch LargeRotateLockShooting;//[Offset: 0x19c8, Size: 0x28]
	VerifySwitch SmallRotateLockShooting;//[Offset: 0x19f0, Size: 0x28]
	VerifySwitch NonGunADSShootHighSpeedEnemy;//[Offset: 0x1a18, Size: 0x28]
	VerifySwitch LockInvisibleMovingEnemy;//[Offset: 0x1a40, Size: 0x28]
	VerifySwitch LockInvisibleFallingEnemy;//[Offset: 0x1a68, Size: 0x28]
	VerifySwitch OneClipShootCount;//[Offset: 0x1a90, Size: 0x28]
	VerifySwitch ClientWeaponFastReload;//[Offset: 0x1ab8, Size: 0x28]
	VerifySwitch WalkSpeedFailedCnt;//[Offset: 0x1ae0, Size: 0x28]
	VerifySwitch DSCheckClientTimeMoveDistance2D;//[Offset: 0x1c70, Size: 0x28]
	VerifySwitch DSCheckClientTimeMoveDistance2DTrial;//[Offset: 0x1c98, Size: 0x28]
	VerifySwitch DSCheckClientTimeMoveDistance2DFurther;//[Offset: 0x1cc0, Size: 0x28]
	VerifySwitch DSCheckClientTimeMoveDistanceZ;//[Offset: 0x1ce8, Size: 0x28]
	VerifySwitch DSCheckClientTimeMoveDistanceZTrial;//[Offset: 0x1d10, Size: 0x28]
	VerifySwitch DSCheckClientTimeMoveDistanceZFurther;//[Offset: 0x1d38, Size: 0x28]
	float MaxFallingSustainTime;//[Offset: 0x1d60, Size: 0x4]
	VerifySwitch ReplayMaxFallingSustainTime;//[Offset: 0x1d68, Size: 0x28]
	float MaxCustomMoveModeSustainTime;//[Offset: 0x1d90, Size: 0x4]
	VerifySwitch ReplayMaxCustomMoveModeSustainTime;//[Offset: 0x1d98, Size: 0x28]
	float MaxMoveDistance2DPerSecond;//[Offset: 0x1dc0, Size: 0x4]
	float MaxDistanceToGround;//[Offset: 0x1dc4, Size: 0x4]
	float MaxSingleShotDamage;//[Offset: 0x1dc8, Size: 0x4]
	VerifySwitch ReplayMaxSingleShotDamage;//[Offset: 0x1dd0, Size: 0x28]
	VerifySwitch UndergroundCount;//[Offset: 0x1df8, Size: 0x28]
	VerifySwitch MoveDistance2DPerSecondAnomaly;//[Offset: 0x1e20, Size: 0x28]
	VerifySwitch DistanceToGroundAnomaly;//[Offset: 0x1e48, Size: 0x28]
	VerifySwitch SingleShotDamageAnomaly;//[Offset: 0x1e70, Size: 0x28]
	BurstVerifySwitch DSSpeedOver10BurstCount;//[Offset: 0x1e98, Size: 0x80]
	float ParachuteStartTime;//[Offset: 0x1fbc, Size: 0x4]
	float ParachuteOpenTime;//[Offset: 0x1fc0, Size: 0x4]
	float ParachuteCloseTime;//[Offset: 0x1fc4, Size: 0x4]
	float ParachuteStartHight;//[Offset: 0x1fc8, Size: 0x4]
	float ParachuteOpenHight;//[Offset: 0x1fcc, Size: 0x4]
	float ParachuteCloseHight;//[Offset: 0x1fd0, Size: 0x4]
	int PlayerBadPingTimes;//[Offset: 0x2078, Size: 0x4]
	VerifySwitch VsPetJumpHeightLimiter;//[Offset: 0x2080, Size: 0x28]
	VerifySwitch VsPetMoveSpeedLimiter;//[Offset: 0x20a8, Size: 0x28]
	VerifySwitch VsBioVehicleMoveSpeedLimiter;//[Offset: 0x20d0, Size: 0x28]
	VerifySwitch ServerMoveCacheCountOver;//[Offset: 0x20f8, Size: 0x28]
	VerifySwitch KillOtherAfterBurst;//[Offset: 0x2120, Size: 0x28]
	void ReportAntiCheatDetailData();// 0x5fd9694
	void PushWeaponAntiData(out WeaponAntiData NewWeaponAntiData);// 0x5fd9604
	void OnRecoverOnServer();// 0x5fd95f0
	void OnPreReconnectOnServer();// 0x5fd95dc
	FString GetWHCString(int StartInclusive, int EndInclusive);// 0x5fd94b0
	int GetWHCountByID(const int ID);// 0x5fd9424
	FString GetAACString(int StartInclusive, int EndInclusive);// 0x5fd92f8
	int GetAACCountByID(const int ID);// 0x5fd926c
	void ExitParachute();// 0x5fd9258
	void EnterParachute();// 0x5fd9244
	void EnterJumping();// 0x5fd9230
<----------Generated by SSpawner v1.0.4---------->


Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x8, Size: 0x4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	int VerifyFailedCnt;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AntiCheatDetailData
	uint16 AreaID;//[Offset: 0x0, Size: 0x2]
	int8 PlatID;//[Offset: 0x2, Size: 0x1]
	FString ZoneID;//[Offset: 0x8, Size: 0x10]
	WeaponAntiData[] WeaponAntiDataList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAntiData
	uint16 MuzzleFloorHeight;//[Offset: 0x0, Size: 0x2]
	int16 MuzzleActorHeadHeight;//[Offset: 0x2, Size: 0x2]
	uint16 ImplactPointAndActorDis;//[Offset: 0x4, Size: 0x2]
	uint16 ImplactPointAndBulletDis;//[Offset: 0x6, Size: 0x2]
	uint16 ImplactPoinPosChange;//[Offset: 0x8, Size: 0x2]
	uint16 BulletAndGunAngle;//[Offset: 0xa, Size: 0x2]
	uint16 NetDelay;//[Offset: 0xc, Size: 0x2]
	uint32 ShooterPosDis;//[Offset: 0x10, Size: 0x4]
	uint32 VictmPosDis;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BurstVerifySwitch.VerifySwitch
	float BurstTime;//[Offset: 0x78, Size: 0x4]
	int BurstCount;//[Offset: 0x7c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SpectatorComponent.LuaActorComponent.ActorComponent.Object
	void ServerRPC_HawkBroadcast();// 0x9f84450
	bool bCheckNetSaturate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	float CheckNetSaturateInterval;//[Offset: 0x1d4, Size: 0x4]
	float ReportNetSaturateInterval;//[Offset: 0x1d8, Size: 0x4]
	delegate OnServerSpectatorChange;//[Offset: 0x208, Size: 0x10]
	int MinExtraLocDeviceLevel;//[Offset: 0x218, Size: 0x4]
	uint32 MinTotalMemInGB;//[Offset: 0x21c, Size: 0x4]
	float ExtraRadius;//[Offset: 0x220, Size: 0x4]
	float MinDisFromMyLoc;//[Offset: 0x224, Size: 0x4]
	float MinDisFromExtraLoc;//[Offset: 0x228, Size: 0x4]
	float SpectatorMaxDeltaLength;//[Offset: 0x290, Size: 0x4]
	float SpectatorMinDeltaLength;//[Offset: 0x294, Size: 0x4]
	Vector FreeCamVehicleRelativeLocation;//[Offset: 0x298, Size: 0xc]
	Vector FreeCamCharacterRelativeLocation;//[Offset: 0x2a4, Size: 0xc]
	void SpectatorExitFreeView();// 0x6093c70
	void SpectatorEnterFreeView();// 0x6093c5c
	void NotifyObserversSetViewTarget(Actor* NewViewTarget);// 0x6093be0
	bool IsOwnerBeSpectated();// 0x6093ba8
	FString GetOwnerPlayerName();// 0x6093b04
	STExtraPlayerController*[] GetOwnerObservers();// 0x6093a80
	enum GetObserverType();// 0x6093a4c
	void AddSpectatorFreeCamArmLength(float DefaultLength);// 0x60939d0
<----------Generated by SSpawner v1.0.4---------->


Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 0x24]
<----------Generated by SSpawner v1.0.4---------->


Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 0x4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 0x4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 0x4]
	float CameraSwitchTime;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CameraData
	float CameraFOV;//[Offset: 0x0, Size: 0x4]
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 0xc]
	float SpringArmLength;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 0x24]
<----------Generated by SSpawner v1.0.4---------->


Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ServerHitEnemyReplicatedData
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0, Size: 0x8]
	uint32 EventId;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0, Size: 0x8]
	FName LastUseLogicSlot;//[Offset: 0x8, Size: 0x8]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: TeamMateStateInfo
	byte DirtyFlags;//[Offset: 0x0, Size: 0x1]
	STExtraPlayerState* PlayerState;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize10 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	float PlayerHealth;//[Offset: 0x28, Size: 0x4]
	float PlayerHealthMax;//[Offset: 0x2c, Size: 0x4]
	int MemberIdInVoiceRoom;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0x1274, Size: 0x4]
	enum LiveState;//[Offset: 0x1278, Size: 0x1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0x1280, Size: 0x10]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x1290, Size: 0x8]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0x1298, Size: 0x8]
	STExtraPetSpectatorCharacter* PetSpectatingCharacterOwner;//[Offset: 0x12a0, Size: 0x8]
	bool bIsRespawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a8, Size: 0x1]
	float PlayerHealth;//[Offset: 0x12ac, Size: 0x4]
	float PlayerHealthMax;//[Offset: 0x12b0, Size: 0x4]
	float PlayerTemperature;//[Offset: 0x12b4, Size: 0x4]
	float PlayerTemperatureMax;//[Offset: 0x12b8, Size: 0x4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0x12bc, Size: 0x18]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0x12d4, Size: 0x18]
	enum EUAVUseType;//[Offset: 0x12ec, Size: 0x1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ed, Size: 0x1]
	enum eCurVehicleType;//[Offset: 0x12ee, Size: 0x1]
	enum EUAVCharacterMsgType;//[Offset: 0x12ef, Size: 0x1]
	Vector PlayerDeadLocation;//[Offset: 0x12f0, Size: 0xc]
	Vector PlayerBoxLocation;//[Offset: 0x12fc, Size: 0xc]
	Vector MapMark;//[Offset: 0x1308, Size: 0xc]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1314, Size: 0x1]
	Vector RestartLocation;//[Offset: 0x1318, Size: 0xc]
	Rotator RestartRotate;//[Offset: 0x1324, Size: 0xc]
	<int,int> UseQuickMsgMap;//[Offset: 0x1330, Size: 0x50]
	<int,int> UseWheelMsgMap;//[Offset: 0x1380, Size: 0x50]
	byte PlayerUseQuickSight;//[Offset: 0x13d0, Size: 0x1]
	byte PlayerUseShoulderCnt;//[Offset: 0x13d1, Size: 0x1]
	byte ShowMsgCnt;//[Offset: 0x13d2, Size: 0x1]
	byte UserConfirmCnt;//[Offset: 0x13d3, Size: 0x1]
	byte UserCancelCnt;//[Offset: 0x13d4, Size: 0x1]
	byte UserDoNothingCnt;//[Offset: 0x13d5, Size: 0x1]
	float FPSBeforeAdapt;//[Offset: 0x13d8, Size: 0x4]
	float FPSAfterAdapt;//[Offset: 0x13dc, Size: 0x4]
	RescueTime RescueTime;//[Offset: 0x13e0, Size: 0xc]
	int AirDropBoxFirstPickUpNum;//[Offset: 0x1410, Size: 0x4]
	SyncTeamMatePlayerState[] TeamMatePlayerStateList;//[Offset: 0x1418, Size: 0x10]
	byte InTeamIndex;//[Offset: 0x1428, Size: 0x1]
	HistoricalTeammateInfo[] HistoricalTeammateInfoArray;//[Offset: 0x1430, Size: 0x10]
	HistoricalTeammateInfo[] CurrentNotInTeamHistoricalTeammateInfoArray;//[Offset: 0x1440, Size: 0x10]
	int PlayerLayerID;//[Offset: 0x14a0, Size: 0x4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0x14a8, Size: 0x18]
	int Breath;//[Offset: 0x14c0, Size: 0x4]
	DriveCarNotify DriveCarNotify;//[Offset: 0x14c8, Size: 0x18]
	float EnegyBuffStage1;//[Offset: 0x14e0, Size: 0x4]
	float EnegyBuffStage2;//[Offset: 0x14e4, Size: 0x4]
	float EnegyBuffStage3;//[Offset: 0x14e8, Size: 0x4]
	float EnegyBuffStage4;//[Offset: 0x14ec, Size: 0x4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0x14f0, Size: 0x4]
	float CurEnegyBuff;//[Offset: 0x14f4, Size: 0x4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0x14f8, Size: 0x4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0x14fc, Size: 0x4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0x1500, Size: 0x4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0x1504, Size: 0x4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0x1508, Size: 0x4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0x150c, Size: 0x4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0x1510, Size: 0x4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0x1514, Size: 0x4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x1518, Size: 0x10]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0x1528, Size: 0x10]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1539, Size: 0x1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155c, Size: 0x1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155d, Size: 0x1]
	int[] TeamMatesExitState;//[Offset: 0x1560, Size: 0x10]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1570, Size: 0x1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1571, Size: 0x1]
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1572, Size: 0x1]
	uint32 LastInstigatorEnemyKey;//[Offset: 0x1578, Size: 0x4]
	int PlayersCountOnPlane;//[Offset: 0x157c, Size: 0x4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0x1580, Size: 0x10]
	float SingleRoundTotalDamage;//[Offset: 0x1590, Size: 0x4]
	int ContinuousKillsNum;//[Offset: 0x1594, Size: 0x4]
	delegate OnInfectionRoundDamageChange;//[Offset: 0x1598, Size: 0x10]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0x15a8, Size: 0x10]
	int MonsterTreasureBoxGetNum;//[Offset: 0x15b8, Size: 0x4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0x15bc, Size: 0x4]
	int OpnedMosnterBoxNum;//[Offset: 0x15c0, Size: 0x4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c4, Size: 0x1]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0x15c8, Size: 0x10]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0x15d8, Size: 0x10]
	int MaxDecalCount;//[Offset: 0x1608, Size: 0x4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0x1610, Size: 0x10]
	float LeanOutL_AimAngle;//[Offset: 0x1690, Size: 0x4]
	float LeanOutR_AimAngle;//[Offset: 0x1694, Size: 0x4]
	CharacterBuffRecord[] CharacterBuffRecords;//[Offset: 0x1698, Size: 0x10]
	int RemainingRevivalTime;//[Offset: 0x16a8, Size: 0x4]
	int RemainingRevivalCount;//[Offset: 0x16ac, Size: 0x4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b0, Size: 0x1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b1, Size: 0x1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b2, Size: 0x1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b3, Size: 0x1]
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b4, Size: 0x1]
	int SelfRevivalCountdown;//[Offset: 0x16b8, Size: 0x4]
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16bc, Size: 0x1]
	int64 RevivalCardCreateTime;//[Offset: 0x16c0, Size: 0x8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0x16c8, Size: 0x10]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0x16d8, Size: 0x10]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x16e8, Size: 0x10]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x16f8, Size: 0x10]
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0x1708, Size: 0x10]
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0x1718, Size: 0x10]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0x1728, Size: 0x10]
	<int> LastMarkInstanceID;//[Offset: 0x1738, Size: 0x50]
	<int> CurrentMarkInstanceID;//[Offset: 0x1788, Size: 0x50]
	<int,MarkSyncData> CurrentMarkInstanceIDMap;//[Offset: 0x17d8, Size: 0x50]
	<int,MarkSyncData> LastMarkInstanceIDMap;//[Offset: 0x1828, Size: 0x50]
	float KdValue;//[Offset: 0x1878, Size: 0x4]
	Vector LastVehicleLocation;//[Offset: 0x1890, Size: 0xc]
	delegate OnMapMultiMarkChange;//[Offset: 0x18a8, Size: 0x10]
	delegate OnPlayerUnderAttack;//[Offset: 0x18b8, Size: 0x10]
	delegate OnSetPlane;//[Offset: 0x18c8, Size: 0x10]
	Vector[] MapMultiMark;//[Offset: 0x18d8, Size: 0x10]
	bool bForceHideTeamatePositionItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1938, Size: 0x1]
	Vector AirplaneStartLoc;//[Offset: 0x193c, Size: 0xc]
	Vector AirplaneStopLoc;//[Offset: 0x1948, Size: 0xc]
	Vector AirplaneCanJumpLoc;//[Offset: 0x1954, Size: 0xc]
	Vector AirplaneForceJumpLoc;//[Offset: 0x1960, Size: 0xc]
	Vector LastValidAirplaneCanJumpLoc;//[Offset: 0x196c, Size: 0xc]
	Vector LastValidAirplaneForceJumpLoc;//[Offset: 0x1978, Size: 0xc]
	Actor* Plane;//[Offset: 0x1988, Size: 0x8]
	int FlightNo;//[Offset: 0x1990, Size: 0x4]
	bool IsAIShouldIgnoreSenseEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1994, Size: 0x1]
	FName[] CurMapTags;//[Offset: 0x1998, Size: 0x10]
	FName[] ShowingMapTags;//[Offset: 0x19a8, Size: 0x10]
	delegate OnMapTagsChangedDelegate;//[Offset: 0x19b8, Size: 0x10]
	<uint64> TeammateKillUIDSet;//[Offset: 0x19c8, Size: 0x50]
	uint64 LastKnockOutPlayerUID;//[Offset: 0x1a18, Size: 0x8]
	void UpdateSelfHealthDataOnServer();// 0x61fc024
	void UpdateDeliveryData(uint32 InDeliverPlayerKey, byte DeliveryAIType);// 0x61fbf64
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x61fbe24
	void SetPlayerMapMultiMark(Vector Loc, bool bAdd, int MaxNum, bool bClearAll);// 0x61fbcdc
	void SetPlayerGiveUp(bool InGiveUp);// 0x61fbc58
	void SetLastValidAirplaneInfo();// 0x61fbc44
	void SetInTeamIndex(int Index);// 0x61fbbc8
	void SetForceSyncTeammateData(bool IsForCE);// 0x61fbb44
	void SetCurMapTags(const FName[] mapTags);// 0x61fba68
	void SetCharacterIntProperty_Replay(uint32 InPlayerKey, FString KeyName, int InValue);// 0x61fb93c
	void SetAirplaneStopLoc(Vector StopLoc);// 0x61fb8bc
	void SetAirplaneStartLoc(Vector StarLoc);// 0x61fb83c
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x61fb7bc
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x61fb73c
	void SaveBuffData();// 0x61fb720
	void RPC_OnPlayerUnderAttack();// 0x61fb704
	void RestoreBuffData();// 0x61fb6e8
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper);// 0x61fb568
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x61fb470
	void RespondToPawnCanCarryOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x61fb378
	void RespondToPawnCanCaptivateOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool bIsBegged);// 0x61fb280
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* Param2);// 0x61fb18c
	void RemovePaintDecal(IdeaDecalActor* DecalActor);// 0x61fb110
	void RefreshRevivalState();// 0x61fb0fc
	void RefreshFollowMark();// 0x61fb0e8
	void RefreshAirplaneRoute();// 0x61fb0d4
	void QuickSignClientReceiveMsgForReplay(const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey);// 0x61faf60
	void QuickSignClientDelMsgForReplay(FString MsgID);// 0x61faeb0
	void PlayerStateSetPlane__DelegateSignature(Actor* Plane);// 0x70644c4
	int PlayersCountOnMyPlane();// 0x61fae7c
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x70644c4
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0x70644c4
	void OnRep_VisualFieldInfo();// 0x61fae68
	void OnRep_UpdateKillMonsterNum();// 0x61fae4c
	void OnRep_UID();// 0x61fae30
	void OnRep_TeamMatePlayerStateList();// 0x61fae1c
	void OnRep_SingleRoundTotalDamage();// 0x61fae08
	void OnRep_RescueTime();// 0x61fadf4
	void OnRep_RemainingRevivalTime();// 0x61fade0
	void OnRep_RemainingRevivalCount();// 0x70644c4
	void OnRep_RankNotify();// 0x61fadcc
	void OnRep_PlayerTemperatureChanged();// 0x61fadb8
	void OnRep_PlayersCountOnPlane();// 0x61fada4
	void OnRep_PlayerReconnectEvent();// 0x61fad90
	void OnRep_PlayerName();// 0x61fad74
	void OnRep_PlayerLostConnectionEvent();// 0x61fad60
	void OnRep_PlayerLiveStateInternal();// 0x61fad4c
	void OnRep_PlayerLiveState();// 0x61fad30
	void OnRep_PlayerKillsChange();// 0x61fad14
	void OnRep_PlayerIsFollowing();// 0x61fad00
	void OnRep_PlayerGiveUp();// 0x61face4
	void OnRep_PlayerGameOver();// 0x61facd0
	void OnRep_PlayerExitGameEvent();// 0x61facbc
	void OnRep_PlayerAliasShowInfoList();// 0x61faca8
	void OnRep_Plane();// 0x61fac94
	void OnRep_PetSpectatingCharacterOwner();// 0x61fac80
	void OnRep_MarkSyncData();// 0x61fac6c
	void OnRep_MarkSelfSyncData();// 0x61fac58
	void OnRep_MapMarkNotify();// 0x61fac44
	void OnRep_LastVehicleLocation();// 0x61fac30
	void OnRep_IsIDCardCaptured();// 0x61fac1c
	void OnRep_InTeamIndex();// 0x61fac08
	void OnRep_HPChanged();// 0x61fabf4
	void OnRep_HasRevivalSign();// 0x61fabd8
	void OnRep_HasEscaped();// 0x61fabc4
	void OnRep_CurMapTags();// 0x61fabb0
	void OnRep_ChangeRevivalState();// 0x61fab94
	void OnRep_ChangeInRevivingState();// 0x61fab80
	void OnRep_BreathChanged();// 0x61fab6c
	void OnRep_BPS();// 0x61fab58
	void OnRep_AirplaneStopLoc();// 0x61fab44
	void OnRep_AirplaneStartLoc();// 0x61fab30
	void OnRep_AirplaneForceJumpLoc();// 0x61fab1c
	void OnRep_AirplaneCanJumpLoc();// 0x61fab08
	void OnPlayerUnderAttack__DelegateSignature(FString PUID);// 0x70644c4
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0x70644c4
	void OnNewRound();// 0x61faaec
	void OnMapTagsChangedDelegate__DelegateSignature(STExtraPlayerState* CurPlayerState);// 0x70644c4
	void OnMapMultiMarkChange__DelegateSignature(Vector[] MapMultiMark);// 0x70644c4
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x70644c4
	void OnClientVeteranRecruitIndexUpdated();// 0x61faad0
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x61fa9d8
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x61fa8e0
	void LuaReceiveBeginPlay();// 0x61fa8c4
	void LocalNotifyRescueStateChanged(bool bRescued);// 0x61fa840
	void Kill(int ScoreNum, Character* VictimPawn);// 0x61fa780
	bool IsTeamMateListContainsPlayer(STExtraPlayerState* InPlayState);// 0x61fa6f0
	bool IsSinglePlayer();// 0x61fa6b8
	bool IsLocalPlayerState();// 0x61fa680
	bool IsInGame();// 0x61fa640
	bool IsInBetrayState();// 0x61fa600
	bool IsAlive();// 0x61fa5c8
	void HandleSetCharacterIntProperty(FString StrPlayerKey, FString KeyName, int InValue);// 0x61fa474
	void HandleRescueStateChanged();// 0x61fa458
	uint32 GetUserIDByMemberID(int memberID);// 0x61fa3c4
	void GetTeamMatePlayerUIDList(out FString[] OutList, bool bIsExcludeMyself);// 0x61fa25c
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x61fa148
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x61fa0bc
	STExtraPlayerState* GetTeammatePlayerState(int TeammateIndex);// 0x61fa030
	int GetTeamMateIndexByName(FString TeammateName);// 0x61f9f78
	int GetTeamMateIndex(STExtraPlayerState* Teammate);// 0x61f9eec
	int GetTeammateCount();// 0x61f9eb8
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x61f9e00
	FString GetStringPlayerKey();// 0x61f9d5c
	float GetPlayerTemperature();// 0x61f9d28
	int GetPlayerTeamIndex();// 0x61f9cf4
	STExtraPlayerState* GetPlayerStateByInTeamIndex(const int Index);// 0x61f9c68
	float GetPlayerMaxTemperature();// 0x61f9c34
	float GetPlayerMaxHealth();// 0x61f9c00
	byte GetPlayerInTeamIndexByPlayerState(STExtraPlayerState* TeammatePlayerState);// 0x61f9b74
	byte GetPlayerInTeamIndex();// 0x61f9b40
	int GetPlayerIndexInTeam();// 0x61f9b0c
	float GetPlayerHealthPercent();// 0x61f9ad8
	float GetPlayerHealth();// 0x61f9aa4
	Vector GetPlayerCurLoc();// 0x61f9a6c
	STExtraBaseCharacter* GetPlayerCharacter();// 0x61f9a38
	void GetPlayerAliasInfoList(out GameModePlayerAliasShowInfo[] OutList);// 0x61f9994
	STExtraPetSpectatorCharacter* GetPetSpectatingPawn();// 0x61f9960
	float GetMaxEnegyBuff();// 0x61f992c
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x61f97c8
	Vector GetMapMark3DLocation();// 0x61f9790
	Vector GetLastValidAirplaneForceJumpLoc();// 0x61f9768
	Vector GetLastValidAirplaneCanJumpLoc();// 0x61f9740
	int GetHelpRevivalCount();// 0x61f9704
	Vector GetForceJumpLoc();// 0x61f96dc
	Vector GetCanJumpLoc();// 0x61f96b4
	void GetCampMatePlayerList(out STExtraBaseCharacter*[] playerList, bool includeTeammate);// 0x61f95a8
	float GetBreathPercentage();// 0x61f9574
	int GetBountyGold();// 0x70644c4
	Vector2D GetAutoParachuteJumpPlaneLoc();// 0x61f9540
	MarkSyncData[] GetAllSelfMarkData();// 0x61f94dc
	void GetAllPlayerStates(out STExtraPlayerState*[] OutList);// 0x61f9424
	void GetAllPlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x61f9310
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x61f925c
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x61f9098
	Vector GetAirplaneStopLoc();// 0x61f9070
	Vector GetAirplaneStartLoc();// 0x61f9048
	Vector2D GetAirplaneForward2D();// 0x61f9014
	void ForceNotifyAlertUpdate();// 0x61f9000
	bool FollowInitialTeamParachuteLeaderAndShowTips(FString LeaderName);// 0x61f8ec0
	void FadeTeammatesMapMark();// 0x61f8eac
	void DispatchPlayerExitEvent();// 0x61f8e90
	Vector2D ConverMapMarkTo2D(out const Vector MapMark3D);// 0x61f8df8
	void ClientSyncRoute(Vector StartLoc, Vector StopLoc);// 0x61f8d38
	void ClientDisplayGameTipWithMsgID(int ID, FString Param1, FString Param2);// 0x61f8bb0
	void ChangeFadeMapMarkDist(float NewDist);// 0x61f8b30
	bool CanSelfRevive();// 0x61f8af0
	bool CanRevivalTeammate();// 0x61f8ab8
	bool CanBeRevival();// 0x61f8a78
	byte CalculateEnegyStage();// 0x61f8a44
	void BPKill(Character* VictimPawn);// 0x61f89c0
	void AppendTeamMatePlayerStateList(out STExtraPlayerState*[] InTeamMatePlayerStateList);// 0x61f8908
	void AddOneAssist(int VictimKey);// 0x61f8884
	void AddInDamageAmount(Actor* Causor, float FinalDamage);// 0x61f87c4
	void AddEnegySafety(float AddVal);// 0x61f8748
	void AddDamager(STExtraBaseCharacter* Damager, int DamageType);// 0x61f8688
	void AddDamageAmount(Character* VictimPawn, float FinalDamage, bool bHitHead);// 0x61f8584
<----------Generated by SSpawner v1.0.4---------->


Class: UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	bool IsForcedNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	float surviveTime;//[Offset: 0x54c, Size: 0x4]
	float surviveTimeFromPlane;//[Offset: 0x550, Size: 0x4]
	float Pronetime;//[Offset: 0x554, Size: 0x4]
	int MovingCount;//[Offset: 0x560, Size: 0x4]
	float marchDistance;//[Offset: 0x564, Size: 0x4]
	float travelDistance;//[Offset: 0x568, Size: 0x4]
	float DriveDistance;//[Offset: 0x56c, Size: 0x4]
	float MonsterCatchupDistance;//[Offset: 0x570, Size: 0x4]
	int destroyVehicleNum;//[Offset: 0x574, Size: 0x4]
	int rescueTimes;//[Offset: 0x578, Size: 0x4]
	uint64[] RescueTeammatesList;//[Offset: 0x580, Size: 0x10]
	int NormalItemsNum;//[Offset: 0x590, Size: 0x4]
	int SeniorItemsNum;//[Offset: 0x594, Size: 0x4]
	int GVMemberID;//[Offset: 0x598, Size: 0x4]
	FName PlayerType;//[Offset: 0x5a0, Size: 0x8]
	uint64 FinalTeamleaderUID;//[Offset: 0x5a8, Size: 0x8]
	uint32 PlayerKey;//[Offset: 0x5b0, Size: 0x4]
	FString PlayerUID;//[Offset: 0x5b8, Size: 0x10]
	FString MLAIStringUID;//[Offset: 0x5c8, Size: 0x10]
	bool bPSEnsure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	FString iconUrl;//[Offset: 0x5e0, Size: 0x10]
	int gender;//[Offset: 0x5f0, Size: 0x4]
	int PlayerLevel;//[Offset: 0x5f4, Size: 0x4]
	int SegmentLevel;//[Offset: 0x5f8, Size: 0x4]
	int AceImprintShowId;//[Offset: 0x5fc, Size: 0x4]
	int AceImprintBaseId;//[Offset: 0x600, Size: 0x4]
	int AvatarBoxId;//[Offset: 0x604, Size: 0x4]
	int planeAvatarId;//[Offset: 0x608, Size: 0x4]
	int CampID;//[Offset: 0x60c, Size: 0x4]
	int resID;//[Offset: 0x610, Size: 0x4]
	uint64 UID;//[Offset: 0x618, Size: 0x8]
	uint64 MLAIDisplayUID;//[Offset: 0x620, Size: 0x8]
	FString OpenID;//[Offset: 0x628, Size: 0x10]
	int ZoneID;//[Offset: 0x638, Size: 0x4]
	FString Nation;//[Offset: 0x640, Size: 0x10]
	int TeamID;//[Offset: 0x650, Size: 0x4]
	int64 IdxInTeam;//[Offset: 0x658, Size: 0x8]
	uint64 PreTeamID;//[Offset: 0x660, Size: 0x8]
	int PreTeamChatState;//[Offset: 0x668, Size: 0x4]
	int PlayerBornPointID;//[Offset: 0x66c, Size: 0x4]
	int Kills;//[Offset: 0x670, Size: 0x4]
	int KillsBeforeDie;//[Offset: 0x674, Size: 0x4]
	int Knockouts;//[Offset: 0x678, Size: 0x4]
	int AIKills;//[Offset: 0x67c, Size: 0x4]
	int MlAIDeliverNum;//[Offset: 0x684, Size: 0x4]
	int OriginalMlAIDeliverNum;//[Offset: 0x688, Size: 0x4]
	int Assists;//[Offset: 0x68c, Size: 0x4]
	uint64[] AssistTeammatesList;//[Offset: 0x690, Size: 0x10]
	int[] OvertimeAssistsTime;//[Offset: 0x6f0, Size: 0x10]
	byte PlatformGender;//[Offset: 0x700, Size: 0x1]
	int MatchStrategyLabel;//[Offset: 0x704, Size: 0x4]
	int MatchLabel;//[Offset: 0x708, Size: 0x4]
	uint32 Killer;//[Offset: 0x70c, Size: 0x4]
	uint32 KillerIGPlayerKey;//[Offset: 0x710, Size: 0x4]
	FString BeKilledOpenID;//[Offset: 0x718, Size: 0x10]
	FString KillerName;//[Offset: 0x728, Size: 0x10]
	uint32 KillerType;//[Offset: 0x738, Size: 0x4]
	int KillerWeaponID;//[Offset: 0x73c, Size: 0x4]
	uint32 KillerDeliveryType;//[Offset: 0x740, Size: 0x4]
	uint32 DeadCircleIndex;//[Offset: 0x744, Size: 0x4]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x748, Size: 0x8]
	int ShootWeaponShotNum;//[Offset: 0x750, Size: 0x4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x754, Size: 0x4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x758, Size: 0x4]
	int ShootWeaponShotHeadNum;//[Offset: 0x75c, Size: 0x4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x760, Size: 0x4]
	int HeadShotNum;//[Offset: 0x764, Size: 0x4]
	int HeadShotNumNoAI;//[Offset: 0x768, Size: 0x4]
	int KillNumByGrende;//[Offset: 0x76c, Size: 0x4]
	int UseFragGrenadeNum;//[Offset: 0x770, Size: 0x4]
	int UseSmokeGrenadeNum;//[Offset: 0x774, Size: 0x4]
	int UseFlashGrenadeNum;//[Offset: 0x778, Size: 0x4]
	int UseBurnGrenadeNum;//[Offset: 0x77c, Size: 0x4]
	int MaxKillDistance;//[Offset: 0x780, Size: 0x4]
	int HealTimes;//[Offset: 0x784, Size: 0x4]
	float DamageAmount;//[Offset: 0x788, Size: 0x4]
	float RealPlayerDamageAmount;//[Offset: 0x78c, Size: 0x4]
	int MeleeKillTimes;//[Offset: 0x790, Size: 0x4]
	float MeleeDamageAmount;//[Offset: 0x794, Size: 0x4]
	float RangedDamagedAmount;//[Offset: 0x798, Size: 0x4]
	float VehicleDamageAmount;//[Offset: 0x79c, Size: 0x4]
	float HealAmount;//[Offset: 0x7a0, Size: 0x4]
	FString[] KillFlow;//[Offset: 0x7a8, Size: 0x10]
	FString[] KnockOutFlow;//[Offset: 0x7b8, Size: 0x10]
	KnockOutData[] KnockOutList;//[Offset: 0x7c8, Size: 0x10]
	float InDamageAmount;//[Offset: 0x7d8, Size: 0x4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x7f0, Size: 0x10]
	int PickUpItemTimes;//[Offset: 0x800, Size: 0x4]
	bool bIsForbidItemFlowMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x804, Size: 0x1]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x808, Size: 0x50]
	AIDeliveryTlogData TLog_AIDeliveryTlogData;//[Offset: 0x858, Size: 0x58]
	bool bHasSendAIDeliverData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 0x1]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x8b8, Size: 0x50]
	GameModeLikeResultData[] Like;//[Offset: 0x908, Size: 0x10]
	uint32 Switch;//[Offset: 0x918, Size: 0x4]
	uint32[] Self;//[Offset: 0x920, Size: 0x10]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x930, Size: 0x10]
	UseItemFlow[] UseItemFlow;//[Offset: 0x940, Size: 0x10]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x950, Size: 0x10]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x960, Size: 0x10]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x970, Size: 0x10]
	<int,int> TLog_BulletCount;//[Offset: 0x980, Size: 0x50]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x9d0, Size: 0x8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 0x1]
	float OutsideBlueCircleTime;//[Offset: 0x9dc, Size: 0x4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x9e0, Size: 0x10]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x9f0, Size: 0x4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x9f4, Size: 0x4]
	int FirstOpenedTreasureBoxNum;//[Offset: 0x9f8, Size: 0x4]
	float HitEnemyHeadAmount;//[Offset: 0x9fc, Size: 0x4]
	int[] BuildFlow;//[Offset: 0xa00, Size: 0x10]
	int[] DestroyShelterFlow;//[Offset: 0xa10, Size: 0x10]
	float ShelterTakeDamage;//[Offset: 0xa20, Size: 0x4]
	float HitShelterDamage;//[Offset: 0xa24, Size: 0x4]
	Vector LandLocation;//[Offset: 0xa28, Size: 0xc]
	Vector ParachuteLocation;//[Offset: 0xa34, Size: 0xc]
	int LandTime;//[Offset: 0xa40, Size: 0x4]
	Vector DeadLocation;//[Offset: 0xa44, Size: 0xc]
	FString DeadDamangeType;//[Offset: 0xa50, Size: 0x10]
	int PveDeadAttacker;//[Offset: 0xa60, Size: 0x4]
	int PveStageId;//[Offset: 0xa64, Size: 0x4]
	FString DeadTimeStr;//[Offset: 0xa68, Size: 0x10]
	int NearDeathDamageType;//[Offset: 0xa78, Size: 0x4]
	uint32 NearDeathCauserId;//[Offset: 0xa7c, Size: 0x4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa80, Size: 0x1]
	int BeDownTimes;//[Offset: 0xa84, Size: 0x4]
	int BeSavedTimes;//[Offset: 0xa88, Size: 0x4]
	EquipmentData EquipmentData;//[Offset: 0xa90, Size: 0x70]
	int PersonalRank;//[Offset: 0xb00, Size: 0x4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0c, Size: 0x1]
	int GamePlayingTime;//[Offset: 0xb10, Size: 0x4]
	int ObserverTime;//[Offset: 0xb14, Size: 0x4]
	int TouchDownAreaID;//[Offset: 0xb18, Size: 0x4]
	int TouchDownLocTypeID;//[Offset: 0xb1c, Size: 0x4]
	int[] TouchDownAreaList;//[Offset: 0xb20, Size: 0x10]
	bool bHasTouchDownAreaList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb30, Size: 0x1]
	float ReportTouchDownHeight;//[Offset: 0xb34, Size: 0x4]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0xb38, Size: 0x10]
	ReportCollection[] SpecialCollectionList;//[Offset: 0xb48, Size: 0x10]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0xb58, Size: 0x10]
	int[] SecretAreaIDList;//[Offset: 0xb68, Size: 0x10]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0xb78, Size: 0x10]
	float DrivingHelicopterTime;//[Offset: 0xb88, Size: 0x4]
	float InHelicopterTime;//[Offset: 0xb8c, Size: 0x4]
	int RevivalNum;//[Offset: 0xb90, Size: 0x4]
	int BeRevivedNum;//[Offset: 0xb94, Size: 0x4]
	int KillNumInVehicle;//[Offset: 0xb98, Size: 0x4]
	float MaxVehicleToLandHeight;//[Offset: 0xb9c, Size: 0x4]
	float MaxVehicleInAirInterval;//[Offset: 0xba0, Size: 0x4]
	int KillPlayerNum;//[Offset: 0xba4, Size: 0x4]
	int KillAINum;//[Offset: 0xba8, Size: 0x4]
	float TotalSprintDistance;//[Offset: 0xbac, Size: 0x4]
	float TotalBeenDamageAmount;//[Offset: 0xbb0, Size: 0x4]
	float DestroyVehicleWheelNum;//[Offset: 0xbb4, Size: 0x4]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0xbb8, Size: 0x10]
	int ProneTimes;//[Offset: 0xbc8, Size: 0x4]
	int CrouchTimes;//[Offset: 0xbcc, Size: 0x4]
	int JumpTimes;//[Offset: 0xbd0, Size: 0x4]
	int KillMonsterNum;//[Offset: 0xbd4, Size: 0x4]
	<int,int> MonsterID2KillNum;//[Offset: 0xbd8, Size: 0x50]
	float TotalDamageAmountToMonsters;//[Offset: 0xc28, Size: 0x4]
	float TotalDamageAmountFromMonsters;//[Offset: 0xc2c, Size: 0x4]
	<int,float> DamageAmountToMonsters;//[Offset: 0xc30, Size: 0x50]
	<int,float> DamageAmountFromMonsters;//[Offset: 0xc80, Size: 0x50]
	int MonsterHeadShotKilledTimes;//[Offset: 0xcd0, Size: 0x4]
	int BeMonsterDownTimes;//[Offset: 0xcd4, Size: 0x4]
	int LightCandleNum;//[Offset: 0xcd8, Size: 0x4]
	<int,int> ActivityButtonCount;//[Offset: 0xce0, Size: 0x50]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0xd30, Size: 0x10]
	float BattleStateTime;//[Offset: 0xd40, Size: 0x4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44, Size: 0x1]
	float DriveWithTeammateDistance;//[Offset: 0xd48, Size: 0x4]
	int FistKillingCount;//[Offset: 0xd4c, Size: 0x4]
	int OpenedAirDropBoxNum;//[Offset: 0xd50, Size: 0x4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0xd58, Size: 0x50]
	FString[] DestroyVehicleFlow;//[Offset: 0xda8, Size: 0x10]
	int UseHelicoperNum;//[Offset: 0xdb8, Size: 0x4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0xdc0, Size: 0x10]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0xdd0, Size: 0x10]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0xde0, Size: 0x28]
	float UseHelicoperDistance;//[Offset: 0xe08, Size: 0x4]
	byte CharmRankIndex;//[Offset: 0xe0c, Size: 0x1]
	<uint32> UseHelicoperRecord;//[Offset: 0xe10, Size: 0x50]
	int FollowState;//[Offset: 0xe60, Size: 0x4]
	int SnowBoardJumpActionCount;//[Offset: 0xe64, Size: 0x4]
	int EmoteOnTelpherCount;//[Offset: 0xe68, Size: 0x4]
	int KillMagicWalkAI;//[Offset: 0xe6c, Size: 0x4]
	int SendMagicWalkAI;//[Offset: 0xe70, Size: 0x4]
	int[] FindBlackMonsterIDs;//[Offset: 0xe78, Size: 0x10]
	int KillSnowManCount;//[Offset: 0xe88, Size: 0x4]
	uint64 LuckmateUID;//[Offset: 0xe90, Size: 0x8]
	<enum,int> EventCounterMap;//[Offset: 0xe98, Size: 0x50]
	<int,int> GeneralCounterMap;//[Offset: 0xee8, Size: 0x50]
	delegate OnGenerelCountChanged;//[Offset: 0xf40, Size: 0x10]
	int VeteranRecruitIndex;//[Offset: 0xf50, Size: 0x4]
	delegate PlayerStateTeamChanged;//[Offset: 0xf58, Size: 0x10]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xf68, Size: 0x10]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xf78, Size: 0x48]
	int MemberIdInVoiceRoom;//[Offset: 0xfc0, Size: 0x4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc4, Size: 0x1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0xfc8, Size: 0x38]
	int UpassShow;//[Offset: 0x1000, Size: 0x4]
	int upassKeepBuy;//[Offset: 0x1004, Size: 0x4]
	int upassCurValue;//[Offset: 0x1008, Size: 0x4]
	int pass_type;//[Offset: 0x100c, Size: 0x4]
	bool UpassIsBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1010, Size: 0x1]
	TLog_Micphone MicphoneTlog;//[Offset: 0x1014, Size: 0x18]
	float TeammateMicrophoneTime;//[Offset: 0x102c, Size: 0x4]
	float TeammateSpeakerTime;//[Offset: 0x1030, Size: 0x4]
	float EnemyMicrophoneTime;//[Offset: 0x1034, Size: 0x4]
	float EnemySpeakerTime;//[Offset: 0x1038, Size: 0x4]
	float TeammateInterphoneTime;//[Offset: 0x103c, Size: 0x4]
	float EnemyInterphoneTime;//[Offset: 0x1040, Size: 0x4]
	float MicrophoneUseTimeStamp;//[Offset: 0x1044, Size: 0x4]
	float SpeakerUseTimeStamp;//[Offset: 0x1048, Size: 0x4]
	DamageInfo LuaNearDeathDamageInfo;//[Offset: 0x1080, Size: 0x90]
	DamageInfo LuaDeathDamageInfo;//[Offset: 0x1110, Size: 0x90]
	FName RepPropertyCategory;//[Offset: 0x11a0, Size: 0x8]
	bool IsOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a8, Size: 0x1]
	GameBaseInfo GameBaseInfo;//[Offset: 0x11c8, Size: 0x90]
	FString RealPlayerName;//[Offset: 0x1260, Size: 0x10]
	int CollectedEventType;//[Offset: 0x1270, Size: 0x4]
	void SetRankAndPersonalRank(int TempRank, int TempPersonalRank);// 0x69371b8
	void SetGVMemberIDServerCall(int memberID);// 0x6937108
	void SetGVMemberID(int memberID);// 0x693708c
	void SetDeliveryResult(uint32 InDeliverPlayerKey, bool bInSuccess, int EventTypeId);// 0x6936f88
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x6936e90
	void RPC_ServerAddGeneralCount(int ID, int InCount, bool bReset);// 0x6936d54
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x6936c34
	void RPC_ChangeOnlyTeamChat(int NewPreTeamChatState);// 0x6936b84
	void ReportTaskExtInfo(int TaskId, FString ExtInfo);// 0x6936a10
	void ReportTaskData(int TaskId, int process);// 0x693695c
	void ReportSpecialCollection(int ItemId, int Count);// 0x69368a8
	void ReportSecretAreaID(int SecretAreaID);// 0x693682c
	void ReportLikeTeammate(int64 BeLikeUID, int LikeType);// 0x6936774
	void ReportLikeSwitch(int SwitchSetting);// 0x69366f8
	void ReportLikeSelf(int LikeType);// 0x693667c
	void ReportLandLocType(int TouchDownLocType);// 0x6936600
	void ReportLandAreaList(out int[] TouchDownAreaIDs);// 0x6936548
	void ReportLandArea(int TouchDownArea);// 0x69364cc
	void ReportLabelCheck(int TeammateUID, int Result);// 0x6936418
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x693639c
	void OnRepCampIDBP();// 0x70644c4
	void OnRep_VeteranRecruitIndex();// 0x6936388
	void OnRep_UpdateKillMonsterNum();// 0x693636c
	void OnRep_UID();// 0x6936350
	void OnRep_TeamID();// 0x693633c
	void OnRep_RescueTimesChange();// 0x6936320
	void OnRep_PreTeamID();// 0x693630c
	void OnRep_PlayerKillsChange();// 0x69362f0
	void OnRep_PlayerKey();// 0x69362d4
	void OnRep_MLAIDisplayUID();// 0x69362c0
	void OnRep_MatchLabel();// 0x69362ac
	void OnRep_CollectItemRecord();// 0x6936298
	void OnRep_CampID();// 0x6936284
	void OnRep_bOnlyPreTeamChat();// 0x6936270
	void OnRep_AliasInfo();// 0x693625c
	void OnClientVeteranRecruitIndexUpdated();// 0x6936240
	bool IsSpecialPickItemCollectionCompleted(int ItemId);// 0x69361b0
	bool IsSpecialPickItem(int ItemId);// 0x6936120
	bool IsNearDeathDamageInfoValid();// 0x69360e8
	bool IsItemForbidMerge(int ItemResId);// 0x6936050
	bool IsDeathDamageInfoValid();// 0x6936018
	void GetWeaponRecordData(out OnePlayerWeapon OutWeaponInfo);// 0x6935f40
	int GetVeteranPlayerLevel();// 0x6935f04
	uint32 GetUserIDByMemberID(int memberID);// 0x6935e70
	FString GetUIDString();// 0x6935dcc
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x6935d60
	int GetTeamId();// 0x6935d44
	int GetRank();// 0x6935d10
	int GetPlayerTotalShootNum();// 0x6935cdc
	uint32 GetPlayerKey();// 0x6935ca8
	GameModePlayerBattleResultData_SuperCold GetPlayerBattleResultData_SuperCold();// 0x6935be4
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x6935b78
	enum GetMentorPlayerType();// 0x6935b3c
	void ForceUpdateCampCharacterList();// 0x6935b20
	void CopyNearDeathDamageInfo();// 0x6935b0c
	void CopyDeathDamageInfo();// 0x6935af8
	void ClearTlogData();// 0x6935adc
	void ClearKillNum();// 0x6935ac4
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x6935a04
	void AddGeneralTLogJustForDelegate(int ID, int DeltaCnt, int CurrValue);// 0x6935914
	void AddGeneralCount(int ID, int InCount, bool bReset);// 0x693581c
	void AddEventCount(byte EventId, int InCount, bool bReset);// 0x6935720
<----------Generated by SSpawner v1.0.4---------->


Class: LuaPlayerState.PlayerState.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x4e8, Size: 0x50]
	FString LuaFilePath;//[Offset: 0x538, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: KnockOutData
	uint64 AttackerID;//[Offset: 0x0, Size: 0x8]
	int Times;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	Vector Location;//[Offset: 0x8, Size: 0xc]
	int SourceType;//[Offset: 0x14, Size: 0x4]
	int AdditionalParam;//[Offset: 0x18, Size: 0x4]
	FString TimeStr;//[Offset: 0x20, Size: 0x10]
	uint64 InstanceID;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: TLog_BornLandGrenadeData
	int PickupCount;//[Offset: 0x0, Size: 0x4]
	int ThrowCount;//[Offset: 0x4, Size: 0x4]
	int HitOthersCount;//[Offset: 0x8, Size: 0x4]
	int HitedByOthersCount;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIDeliveryTlogData
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	<uint32,AIDeliveryInfo> DeliveryMap;//[Offset: 0x8, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: AIDeliveryInfo
	int DeliveryStartTime;//[Offset: 0x0, Size: 0x4]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	int DeliveryArrivalTime;//[Offset: 0x8, Size: 0x4]
	int EventTypeId;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeLikeResultData
	uint32[] Like;//[Offset: 0x0, Size: 0x10]
	uint64 UID;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeTeammateLableCheckData
	uint32 Mask;//[Offset: 0x0, Size: 0x4]
	uint64 UID;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 0x4]
	int UseCount;//[Offset: 0x4, Size: 0x4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: UseBuffFlow
	int BuffID;//[Offset: 0x0, Size: 0x4]
	int UseCount;//[Offset: 0x4, Size: 0x4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: BuildingEnterFlow
	int BuildingID;//[Offset: 0x0, Size: 0x4]
	int EnterCount;//[Offset: 0x4, Size: 0x4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 0x4]
	enum SlotType;//[Offset: 0x4, Size: 0x1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	FString TimeStr;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: TLog_SpecialStats
	float MonsterDamageInNight1;//[Offset: 0x0, Size: 0x4]
	float MonsterDamageInNight2;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleDriveDisData
	uint64 DriverID;//[Offset: 0x0, Size: 0x8]
	int VehicleType;//[Offset: 0x8, Size: 0x4]
	int AvatarID;//[Offset: 0xc, Size: 0x4]
	float DriveDistance;//[Offset: 0x10, Size: 0x4]
	float DriveTime;//[Offset: 0x14, Size: 0x4]
	float VehicleJumpDistanceMax;//[Offset: 0x18, Size: 0x4]
	uint64[] PeopleInCar;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: EquipmentData
	int HelmetID;//[Offset: 0x0, Size: 0x4]
	int ArmorID;//[Offset: 0x4, Size: 0x4]
	int BackPackID;//[Offset: 0x8, Size: 0x4]
	int MainWeapon1ID;//[Offset: 0xc, Size: 0x4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 0x10]
	int MainWeapon2ID;//[Offset: 0x20, Size: 0x4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x28, Size: 0x10]
	int ViceWeaponID;//[Offset: 0x38, Size: 0x4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x40, Size: 0x10]
	int CloseWeaponID;//[Offset: 0x50, Size: 0x4]
	int[] ThrowWeaponsID;//[Offset: 0x58, Size: 0x10]
	int8 IsLuckyClothing;//[Offset: 0x68, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ReportCollection
	int item_id;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponDamageRecord
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	float TotalDamage;//[Offset: 0x4, Size: 0x4]
	int FireCount;//[Offset: 0x8, Size: 0x4]
	int HeadShootCount;//[Offset: 0xc, Size: 0x4]
	int LimbsShootCount;//[Offset: 0x10, Size: 0x4]
	int BodyShootCount;//[Offset: 0x14, Size: 0x4]
	int HandShootCount;//[Offset: 0x18, Size: 0x4]
	int FootShootCount;//[Offset: 0x1c, Size: 0x4]
	int UniqueHitCount;//[Offset: 0x20, Size: 0x4]
	int[] HitDistanceArray;//[Offset: 0x28, Size: 0x10]
	int TotalUseTime;//[Offset: 0x38, Size: 0x4]
	int TotalOwnTime;//[Offset: 0x3c, Size: 0x4]
	int KillCount;//[Offset: 0x40, Size: 0x4]
	int KnockNumber;//[Offset: 0x44, Size: 0x4]
	int[] Associations;//[Offset: 0x48, Size: 0x10]
	int AvatarID;//[Offset: 0x58, Size: 0x4]
	int DIYPlanID;//[Offset: 0x5c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SpecialPickItemState
	int item_id;//[Offset: 0x0, Size: 0x4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: DestroyVehicleWheelFlow
	int AreaID;//[Offset: 0x0, Size: 0x4]
	int UseCount;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ActivityEventReportData
	byte EventId;//[Offset: 0x0, Size: 0x1]
	int Count;//[Offset: 0x4, Size: 0x4]
	Vector Location;//[Offset: 0x8, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: TLog_KillInfo
	int FakePlayerID;//[Offset: 0x0, Size: 0x4]
	int DeadTime;//[Offset: 0x4, Size: 0x4]
	int AILastFightTime;//[Offset: 0x8, Size: 0x4]
	int[] PlayerAreas;//[Offset: 0x10, Size: 0x10]
	int ArmorID;//[Offset: 0x20, Size: 0x4]
	int HelmetID;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayEmoteData
	int EmoteIndex;//[Offset: 0x0, Size: 0x4]
	int AreaID;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerAliasInfo
	int AliasID;//[Offset: 0x0, Size: 0x4]
	FString AliasTitle;//[Offset: 0x8, Size: 0x10]
	FString AliasNation;//[Offset: 0x18, Size: 0x10]
	int AliasRank;//[Offset: 0x28, Size: 0x4]
	FString AliasPartnerName;//[Offset: 0x30, Size: 0x10]
	int AliasPartnerRelation;//[Offset: 0x40, Size: 0x4]
	int AliasRankID;//[Offset: 0x44, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TLog_Micphone
	float TeammateMicrophoneTime;//[Offset: 0x0, Size: 0x4]
	float TeammateSpeakerTime;//[Offset: 0x4, Size: 0x4]
	float EnemyMicrophoneTime;//[Offset: 0x8, Size: 0x4]
	float EnemySpeakerTime;//[Offset: 0xc, Size: 0x4]
	float TeammateInterphoneTime;//[Offset: 0x10, Size: 0x4]
	float EnemyInterphoneTime;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DamageInfo
	uint32 DamageType;//[Offset: 0x0, Size: 0x4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float Distance;//[Offset: 0x8, Size: 0x4]
	uint32 Time;//[Offset: 0xc, Size: 0x4]
	uint32 DamageValue;//[Offset: 0x10, Size: 0x4]
	uint32 AttackerID;//[Offset: 0x14, Size: 0x4]
	Vector AttackerLoc;//[Offset: 0x18, Size: 0xc]
	uint32 AttackerBulletNumInClip;//[Offset: 0x24, Size: 0x4]
	uint32 AttackerSightType;//[Offset: 0x28, Size: 0x4]
	uint32 AttackerWeaponType;//[Offset: 0x2c, Size: 0x4]
	uint32 AttackerWeaponScopeID;//[Offset: 0x30, Size: 0x4]
	uint32 AttackerShotTimes;//[Offset: 0x34, Size: 0x4]
	uint64 AttackerState;//[Offset: 0x38, Size: 0x8]
	bool bAttackerMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	uint64 VictimID;//[Offset: 0x48, Size: 0x8]
	uint32 VictimType;//[Offset: 0x50, Size: 0x4]
	uint32 VictimDeliveryType;//[Offset: 0x54, Size: 0x4]
	uint32 CircleIndex;//[Offset: 0x58, Size: 0x4]
	Vector VictimLoc;//[Offset: 0x5c, Size: 0xc]
	uint32 VictimState;//[Offset: 0x68, Size: 0x4]
	bool bVictimInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	int VictimVehicleType;//[Offset: 0x70, Size: 0x4]
	float VictimVelocity;//[Offset: 0x74, Size: 0x4]
	uint32 AttackerAreaID;//[Offset: 0x78, Size: 0x4]
	uint32 AlivePlayerNum;//[Offset: 0x7c, Size: 0x4]
	uint32 VictimTeamID;//[Offset: 0x80, Size: 0x4]
	int FloorType;//[Offset: 0x84, Size: 0x4]
	uint32 AttackerWeaponAvatarID;//[Offset: 0x88, Size: 0x4]
	uint32 AttackerVehicleShapeType;//[Offset: 0x8c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0, Size: 0x10]
	FString GameAppID;//[Offset: 0x10, Size: 0x10]
	FString OpenID;//[Offset: 0x20, Size: 0x10]
	uint16 AreaID;//[Offset: 0x30, Size: 0x2]
	int8 PlatID;//[Offset: 0x32, Size: 0x1]
	FString ZoneID;//[Offset: 0x38, Size: 0x10]
	uint64 BattleID;//[Offset: 0x48, Size: 0x8]
	FString UserName;//[Offset: 0x50, Size: 0x10]
	uint64 RoleID;//[Offset: 0x60, Size: 0x8]
	int8 RoleType;//[Offset: 0x68, Size: 0x1]
	FString PicUrl;//[Offset: 0x70, Size: 0x10]
	FString GameAPPIDFromDS;//[Offset: 0x80, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: OnePlayerWeapon
	FString PlayerID;//[Offset: 0x0, Size: 0x10]
	WeaponReport[] Weapons;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponReport
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	int FireCount;//[Offset: 0x4, Size: 0x4]
	int AdsFireCount;//[Offset: 0x8, Size: 0x4]
	int HitCount;//[Offset: 0xc, Size: 0x4]
	int UniqueHitCount;//[Offset: 0x10, Size: 0x4]
	int KillCount;//[Offset: 0x14, Size: 0x4]
	float TotalDamage;//[Offset: 0x18, Size: 0x4]
	float TotalMonsterDamage;//[Offset: 0x1c, Size: 0x4]
	float TotalRealPlayerDamage;//[Offset: 0x20, Size: 0x4]
	float TotalNormalAIDamage;//[Offset: 0x24, Size: 0x4]
	float TotalMLAIDamage;//[Offset: 0x28, Size: 0x4]
	int TotalOwnTime;//[Offset: 0x2c, Size: 0x4]
	int TotalUseTime;//[Offset: 0x30, Size: 0x4]
	int KnockDownCount;//[Offset: 0x34, Size: 0x4]
	int HeadShootCount;//[Offset: 0x38, Size: 0x4]
	int KillAICount;//[Offset: 0x3c, Size: 0x4]
	int KnockDownAICount;//[Offset: 0x40, Size: 0x4]
	int HeadShootAICount;//[Offset: 0x44, Size: 0x4]
	int HitAICount;//[Offset: 0x48, Size: 0x4]
	int UniqueHitAICount;//[Offset: 0x4c, Size: 0x4]
	int UseCount;//[Offset: 0x50, Size: 0x4]
	HitFlow[] HitFlow;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: HitFlow
	int AimType;//[Offset: 0x0, Size: 0x4]
	int Distance;//[Offset: 0x4, Size: 0x4]
	int IsKill;//[Offset: 0x8, Size: 0x4]
	float Damage;//[Offset: 0xc, Size: 0x4]
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	byte[] PlayerStates;//[Offset: 0x18, Size: 0x10]
	byte HitPos;//[Offset: 0x28, Size: 0x1]
	bool IsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0, Size: 0x10]
	uint64 UID;//[Offset: 0x10, Size: 0x8]
	int Kill;//[Offset: 0x18, Size: 0x4]
	int AIKills;//[Offset: 0x1c, Size: 0x4]
	FString State;//[Offset: 0x20, Size: 0x10]
	float travelDistance;//[Offset: 0x30, Size: 0x4]
	float marchDistance;//[Offset: 0x34, Size: 0x4]
	float DriveDistance;//[Offset: 0x38, Size: 0x4]
	float MonsterCatchupDistance;//[Offset: 0x3c, Size: 0x4]
	float DamageAmount;//[Offset: 0x40, Size: 0x4]
	float RealPlayerDamageAmount;//[Offset: 0x44, Size: 0x4]
	float HealAmount;//[Offset: 0x48, Size: 0x4]
	int AssistNum;//[Offset: 0x4c, Size: 0x4]
	uint64[] AssistTeammatesList;//[Offset: 0x50, Size: 0x10]
	int HeadShotNum;//[Offset: 0x60, Size: 0x4]
	int HeadShotNumNoAI;//[Offset: 0x64, Size: 0x4]
	float surviveTime;//[Offset: 0x68, Size: 0x4]
	float surviveTimeFromPlane;//[Offset: 0x6c, Size: 0x4]
	int rescueTimes;//[Offset: 0x70, Size: 0x4]
	uint64[] RescueTeammatesList;//[Offset: 0x78, Size: 0x10]
	int DestroyVehicles;//[Offset: 0x88, Size: 0x4]
	FString[] KillFlow;//[Offset: 0x90, Size: 0x10]
	FString[] KnockOutFlow;//[Offset: 0xa0, Size: 0x10]
	float OutsideBlueCircleTime;//[Offset: 0xb0, Size: 0x4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0xb8, Size: 0x10]
	int FirstOpenedAirDropBoxNum;//[Offset: 0xc8, Size: 0x4]
	float HitEnemyHeadAmount;//[Offset: 0xcc, Size: 0x4]
	float TotalBeenDamageAmount;//[Offset: 0xd0, Size: 0x4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xd8, Size: 0x10]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0xe8, Size: 0x4]
	float InDamageAmount;//[Offset: 0xec, Size: 0x4]
	int ProneTimes;//[Offset: 0xf0, Size: 0x4]
	int CrouchTimes;//[Offset: 0xf4, Size: 0x4]
	int JumpTimes;//[Offset: 0xf8, Size: 0x4]
	int KillMonsterNum;//[Offset: 0xfc, Size: 0x4]
	<int,int> MonsterID2KillNum;//[Offset: 0x100, Size: 0x50]
	int LightCandleNum;//[Offset: 0x150, Size: 0x4]
	<int,int> ActivityButtonCount;//[Offset: 0x158, Size: 0x50]
	float TotalDamageAmountToMonsters;//[Offset: 0x1a8, Size: 0x4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x1ac, Size: 0x4]
	int MonsterHeadShotKilledTimes;//[Offset: 0x1b0, Size: 0x4]
	int BeMonsterDownTimes;//[Offset: 0x1b4, Size: 0x4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	int mainWeaponID;//[Offset: 0x1bc, Size: 0x4]
	float MaxWeaponAccurate;//[Offset: 0x1c0, Size: 0x4]
	float MaxWeaponHeadShotRate;//[Offset: 0x1c4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerBattleResultData_SuperCold
	int MakeFiresNum;//[Offset: 0x0, Size: 0x4]
	int DeerBBQNum;//[Offset: 0x4, Size: 0x4]
	int ChichenBBQNum;//[Offset: 0x8, Size: 0x4]
	int UseKFNum;//[Offset: 0xc, Size: 0x4]
	int UseUAVNum;//[Offset: 0x10, Size: 0x4]
	int KFUsingTime;//[Offset: 0x14, Size: 0x4]
	int UAVUsingTime;//[Offset: 0x18, Size: 0x4]
	int SkateboardUsingCount;//[Offset: 0x1c, Size: 0x4]
	int SkateboardUsingTime;//[Offset: 0x20, Size: 0x4]
	int SkateboardUsingDistance;//[Offset: 0x24, Size: 0x4]
	KillAnimalData[] AnimalKillFlow;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: KillAnimalData
	byte AnimalType;//[Offset: 0x0, Size: 0x1]
	int KillNum;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0, Size: 0x10]
	int RemainingPlayerCount;//[Offset: 0x10, Size: 0x4]
	int TotalPlayerCount;//[Offset: 0x14, Size: 0x4]
	int RemainingTeamCount;//[Offset: 0x18, Size: 0x4]
	int TotalTeamCount;//[Offset: 0x1c, Size: 0x4]
	float OnlineTime;//[Offset: 0x20, Size: 0x4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	uint64 Killer;//[Offset: 0x28, Size: 0x8]
	uint64 killer_ig_uid;//[Offset: 0x30, Size: 0x8]
	uint64 KillerAIDisplayUID;//[Offset: 0x38, Size: 0x8]
	FString KillerName;//[Offset: 0x40, Size: 0x10]
	FString BeKilledOpenID;//[Offset: 0x50, Size: 0x10]
	uint32 KillerType;//[Offset: 0x60, Size: 0x4]
	uint32 KillerDeliveryType;//[Offset: 0x64, Size: 0x4]
	int KillerWeaponID;//[Offset: 0x68, Size: 0x4]
	uint32 DeadCircleIndex;//[Offset: 0x6c, Size: 0x4]
	int ShootWeaponShotNum;//[Offset: 0x70, Size: 0x4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x74, Size: 0x4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x78, Size: 0x4]
	int ShootWeaponShotHeadNum;//[Offset: 0x7c, Size: 0x4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x80, Size: 0x4]
	int HealTimes;//[Offset: 0x84, Size: 0x4]
	FString[] KillFlow;//[Offset: 0x88, Size: 0x10]
	FString[] KnockOutFlow;//[Offset: 0x98, Size: 0x10]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0xa8, Size: 0x10]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0xb8, Size: 0x50]
	int PickUpItemTimes;//[Offset: 0x108, Size: 0x4]
	<int,int> TLog_BulletCount;//[Offset: 0x110, Size: 0x50]
	uint64 parachute_leader_uid;//[Offset: 0x160, Size: 0x8]
	UseItemFlow[] UseItemFlow;//[Offset: 0x168, Size: 0x10]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x178, Size: 0x10]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x188, Size: 0x10]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x198, Size: 0x10]
	int destroyVehicleNum;//[Offset: 0x1a8, Size: 0x4]
	int is_escape;//[Offset: 0x1ac, Size: 0x4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0x1b0, Size: 0x10]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0x1c0, Size: 0x10]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0x1d0, Size: 0x28]
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0x1f8, Size: 0x10]
	GameModeLikeResultData[] Like;//[Offset: 0x208, Size: 0x10]
	uint64[] BeLiked;//[Offset: 0x218, Size: 0x10]
	uint32 Switch;//[Offset: 0x228, Size: 0x4]
	uint32[] Self;//[Offset: 0x230, Size: 0x10]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x240, Size: 0x10]
	Vector LandLocation;//[Offset: 0x250, Size: 0xc]
	int LandTime;//[Offset: 0x25c, Size: 0x4]
	Vector ParachuteLocation;//[Offset: 0x260, Size: 0xc]
	Vector DeadLocation;//[Offset: 0x26c, Size: 0xc]
	FString DeadDamangeType;//[Offset: 0x278, Size: 0x10]
	int PveDeadAttacker;//[Offset: 0x288, Size: 0x4]
	int PveStageId;//[Offset: 0x28c, Size: 0x4]
	FString DeadTimeStr;//[Offset: 0x290, Size: 0x10]
	FString logoutime;//[Offset: 0x2a0, Size: 0x10]
	float Pronetime;//[Offset: 0x2b0, Size: 0x4]
	float BeInWaterTime;//[Offset: 0x2b4, Size: 0x4]
	float SwimmingDistance;//[Offset: 0x2b8, Size: 0x4]
	int BeDownTimes;//[Offset: 0x2bc, Size: 0x4]
	int BeSavedTimes;//[Offset: 0x2c0, Size: 0x4]
	int PickUpAirDrops;//[Offset: 0x2c4, Size: 0x4]
	EquipmentData EquipmentData;//[Offset: 0x2c8, Size: 0x70]
	int Rank;//[Offset: 0x338, Size: 0x4]
	int TotalScore;//[Offset: 0x33c, Size: 0x4]
	int ProneTimes;//[Offset: 0x340, Size: 0x4]
	int CrouchTimes;//[Offset: 0x344, Size: 0x4]
	int JumpTimes;//[Offset: 0x348, Size: 0x4]
	int TouchDownAreaID;//[Offset: 0x34c, Size: 0x4]
	int TouchDownLocTypeID;//[Offset: 0x350, Size: 0x4]
	int[] TouchDownAreaList;//[Offset: 0x358, Size: 0x10]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x368, Size: 0x10]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x378, Size: 0x10]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x388, Size: 0x10]
	GrenadeDamageRecord GrenadeDamageRecord;//[Offset: 0x398, Size: 0x28]
	KniveDamageRecord KniveDamageRecord;//[Offset: 0x3c0, Size: 0x28]
	int[] SecretAreaIDList;//[Offset: 0x3e8, Size: 0x10]
	int KillNumInVehicle;//[Offset: 0x3f8, Size: 0x4]
	float TotalSprintDistance;//[Offset: 0x3fc, Size: 0x4]
	float TotalBeenDamageAmount;//[Offset: 0x400, Size: 0x4]
	float DestroyVehicleWheelNum;//[Offset: 0x404, Size: 0x4]
	int[] BuildFlow;//[Offset: 0x408, Size: 0x10]
	int[] DestroyShelterFlow;//[Offset: 0x418, Size: 0x10]
	float ShelterTakeDamage;//[Offset: 0x428, Size: 0x4]
	float HitShelterDamage;//[Offset: 0x42c, Size: 0x4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x430, Size: 0x10]
	KnockOutData[] KnockOutList;//[Offset: 0x440, Size: 0x10]
	bool IsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	int KillMonsterNum;//[Offset: 0x454, Size: 0x4]
	int LightCandleNum;//[Offset: 0x458, Size: 0x4]
	int KillMagicWalkAI;//[Offset: 0x45c, Size: 0x4]
	int SendMagicWalkAI;//[Offset: 0x460, Size: 0x4]
	float BattleStateTime;//[Offset: 0x464, Size: 0x4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	<int,int> ActivityButtonCount;//[Offset: 0x470, Size: 0x50]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x4c0, Size: 0x8]
	float TotalDamage;//[Offset: 0x4c8, Size: 0x4]
	int MeleeKillTimes;//[Offset: 0x4cc, Size: 0x4]
	float MeleeDamageAmount;//[Offset: 0x4d0, Size: 0x4]
	float RangedDamagedAmount;//[Offset: 0x4d4, Size: 0x4]
	float VehicleDamageAmount;//[Offset: 0x4d8, Size: 0x4]
	int OpenAirDropBoxesNum;//[Offset: 0x4dc, Size: 0x4]
	int FollowState;//[Offset: 0x4e0, Size: 0x4]
	FString[] DestroyVehicleFlow;//[Offset: 0x4e8, Size: 0x10]
	int UseHelicoperNum;//[Offset: 0x4f8, Size: 0x4]
	float UseHelicoperDistance;//[Offset: 0x4fc, Size: 0x4]
	int RevivalNum;//[Offset: 0x500, Size: 0x4]
	int BeRevivedNum;//[Offset: 0x504, Size: 0x4]
	int DrivingHelicopterTime;//[Offset: 0x508, Size: 0x4]
	int InHelicopterTime;//[Offset: 0x50c, Size: 0x4]
	int SnowBoardJumpActionCount;//[Offset: 0x510, Size: 0x4]
	int EmoteOnTelpherCount;//[Offset: 0x514, Size: 0x4]
	int[] FindBlackMonsterIDs;//[Offset: 0x518, Size: 0x10]
	int KillSnowManCount;//[Offset: 0x528, Size: 0x4]
	<enum,int> EventCounterMap;//[Offset: 0x530, Size: 0x50]
	<int,int> GeneralCounterMap;//[Offset: 0x580, Size: 0x50]
	TLog_Micphone MicphoneTlog;//[Offset: 0x5d0, Size: 0x18]
	int NormalItemNum;//[Offset: 0x5e8, Size: 0x4]
	int SeniorItemNum;//[Offset: 0x5ec, Size: 0x4]
	SpecialWeaponRecord[] SpecicalWeaponRecordList;//[Offset: 0x5f0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GrenadeDamageRecord
	int HitCount;//[Offset: 0x0, Size: 0x4]
	int[] HitDistanceArray;//[Offset: 0x8, Size: 0x10]
	GrenadeDamageRecordItem[] Grenades;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GrenadeDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	float TotalDamage;//[Offset: 0x4, Size: 0x4]
	int FireCount;//[Offset: 0x8, Size: 0x4]
	int KillCount;//[Offset: 0xc, Size: 0x4]
	int KnockNumber;//[Offset: 0x10, Size: 0x4]
	int AvatarID;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: KniveDamageRecord
	int HeadShootCount;//[Offset: 0x0, Size: 0x4]
	int LimbsShootCount;//[Offset: 0x4, Size: 0x4]
	int BodyShootCount;//[Offset: 0x8, Size: 0x4]
	int HandShootCount;//[Offset: 0xc, Size: 0x4]
	int FootShootCount;//[Offset: 0x10, Size: 0x4]
	KniveDamageRecordItem[] Knives;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: KniveDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	float TotalDamage;//[Offset: 0x4, Size: 0x4]
	int KillCount;//[Offset: 0x8, Size: 0x4]
	int KnockNumber;//[Offset: 0xc, Size: 0x4]
	int AvatarID;//[Offset: 0x10, Size: 0x4]
	int TotalUseTime;//[Offset: 0x14, Size: 0x4]
	int TotalOwnTime;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SpecialWeaponRecord
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	int FireCount;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	STExtraBaseCharacter* Target;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraPetSpectatorCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnMovementBaseChanged;//[Offset: 0x1100, Size: 0x10]
	PetLevelInfo PetLevelInfo;//[Offset: 0x1110, Size: 0x8]
	delegate PetSpectatorStateChangeDelegate;//[Offset: 0x1130, Size: 0x10]
	SpectatorPetStateInfo CurrentStateInfo;//[Offset: 0x1140, Size: 0x8]
	FName FeatureActorName;//[Offset: 0x1148, Size: 0x8]
	float BornMaxHight;//[Offset: 0x1150, Size: 0x4]
	float BornMinHight;//[Offset: 0x1154, Size: 0x4]
	float BornCamerHight;//[Offset: 0x1158, Size: 0x4]
	float BornMaxForwardDis;//[Offset: 0x115c, Size: 0x4]
	float BornMinForwardDis;//[Offset: 0x1160, Size: 0x4]
	float WarterBornMoreHight;//[Offset: 0x1164, Size: 0x4]
	PlayerPetMovementComponent* PetMovementComponent;//[Offset: 0x1168, Size: 0x8]
	float MaxSpecDistance;//[Offset: 0x1170, Size: 0x4]
	STExtraPetSpectatorAnimInstance* PetAnimInstance;//[Offset: 0x1178, Size: 0x8]
	delegate OnSwimStateChange;//[Offset: 0x1180, Size: 0x10]
	bool TeleportToPointSafety(Vector Location, Rotator Rotation);// 0x61ad854
	bool SpectatorPetLeaveState(enum State);// 0x61ad7bc
	bool SpectatorPetHasState(enum State);// 0x61ad724
	bool SpectatorPetEnterState(enum State, int Params);// 0x61ad650
	bool SpectatorPetBornRightPostion(STExtraPlayerCharacter* SpectatorPawn, out const ResolvePenetrationParams ResolveParams, out Vector backLocation);// 0x61ad470
	void ServerHandleSpectatorPetStateMsg(enum MsgType, int Params);// 0x61ad380
	void OnRep_PetLevelInfo();// 0x61ad364
	void OnRep_CurrentStateInfo();// 0x61ad348
	bool LocalHandleSpectatorPetStateMsg(enum MsgType, int Params);// 0x70644c4
	void ClientOnPossessedBy();// 0x61ad32c
	void BPOnRespawned();// 0x70644c4
	void BPOnRecycled();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: PetLevelInfo
	int PetId;//[Offset: 0x0, Size: 0x4]
	int PetLevel;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SpectatorPetStateInfo
	enum CurrentState;//[Offset: 0x0, Size: 0x1]
	int Param;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerPetMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float ClearIgnoredActorsTime;//[Offset: 0x7a8, Size: 0x4]
	STExtraPetSpectatorCharacter* PetOwner;//[Offset: 0x7b0, Size: 0x8]
	bool bFollowMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 0x1]
	bool bEnableSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b9, Size: 0x1]
	float TraceWaterHalfHeight;//[Offset: 0x7bc, Size: 0x4]
	float TraceWaterMaxHalfHeight;//[Offset: 0x7c0, Size: 0x4]
	bool bEnableServerAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c4, Size: 0x1]
	float SecurityAllowedMoveSpeedRatio;//[Offset: 0x7c8, Size: 0x4]
	float SecurityAllowedJumpHeightRatio;//[Offset: 0x7cc, Size: 0x4]
	bool ShouldRecordPosition();// 0x5fed7d0
	STExtraPetSpectatorCharacter* GetPetOwner();// 0x5fed79c
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraPetSpectatorAnimInstance.AnimInstance.Object
	STExtraPetSpectatorCharacter* C_PetCharacter;//[Offset: 0x3c0, Size: 0x8]
	int C_DeviceLevel;//[Offset: 0x3c8, Size: 0x4]
	bool bIsPetAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 0x1]
	Vector Velocity;//[Offset: 0x3d0, Size: 0xc]
	float PetMoveSpeed;//[Offset: 0x3dc, Size: 0x4]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool bIsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 0x1]
	float SwimmingAnimRate;//[Offset: 0x3e4, Size: 0x4]
	AnimSequenceBase* C_AppearAnim;//[Offset: 0x3e8, Size: 0x8]
	AnimSequenceBase* C_DisppearAnim;//[Offset: 0x3f0, Size: 0x8]
	AnimSequenceBase* C_IdleAnim;//[Offset: 0x3f8, Size: 0x8]
	AnimSequenceBase* C_FreeFallAnim;//[Offset: 0x400, Size: 0x8]
	AnimSequenceBase* C_FastFreeFallAnim;//[Offset: 0x408, Size: 0x8]
	AnimSequenceBase* C_FollowAnim;//[Offset: 0x410, Size: 0x8]
	AnimSequenceBase* C_FlyAroundAnim;//[Offset: 0x418, Size: 0x8]
	AnimSequenceBase* C_SwimmingAnim;//[Offset: 0x420, Size: 0x8]
	BlendSpaceBase* C_SwimmingBS;//[Offset: 0x428, Size: 0x8]
	BlendSpaceBase* C_MovementBS;//[Offset: 0x430, Size: 0x8]
	AnimSequence* C_JumpAnim;//[Offset: 0x438, Size: 0x8]
	AnimSequence* C_InAirAnim;//[Offset: 0x440, Size: 0x8]
	AnimSequence* C_LandingAnim;//[Offset: 0x448, Size: 0x8]
	void ResetJump();// 0x61ac9e4
	void OnPetSpectatorStateChange(enum State, FString Param);// 0x61ac8f4
	void OnPetMontageStarted(AnimMontage* InMontage);// 0x61ac870
	void OnPetMontageEnded(AnimMontage* InMontage, bool bInterrupted);// 0x61ac7a8
	void OnJumped();// 0x61ac794
	void DestroySubAnimations();// 0x61ac780
<----------Generated by SSpawner v1.0.4---------->


Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	float AnimLength;//[Offset: 0x84, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x88, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa0, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xa4, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xa8, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xb8, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc0, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd0, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe0, Size: 0x20]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x18]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x3878, Size: 0x10]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x3888, Size: 0x10]
	delegate OnSkillFinishedDelegate;//[Offset: 0x3898, Size: 0x10]
	delegate OnScopeOutDelegate;//[Offset: 0x38a8, Size: 0x10]
	delegate OnScopeInDelegate;//[Offset: 0x38b8, Size: 0x10]
	delegate OnNewWeaponDelegate;//[Offset: 0x38c8, Size: 0x10]
	delegate OnGetOnVehicleDelegate;//[Offset: 0x38d8, Size: 0x10]
	delegate OnRepParachuteStateDelegate;//[Offset: 0x38e8, Size: 0x10]
	delegate OnParachuteStateChanged;//[Offset: 0x38f8, Size: 0x10]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x3908, Size: 0x8]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x3910, Size: 0x8]
	BoxComponent* BoxEar;//[Offset: 0x3918, Size: 0x8]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x3920, Size: 0x8]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x3928, Size: 0x8]
	float IndoorCheckDistance;//[Offset: 0x3930, Size: 0x4]
	float IndoorCheckTime;//[Offset: 0x3934, Size: 0x4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x3938, Size: 0x4]
	float IndoorLowerCameraHeight;//[Offset: 0x393c, Size: 0x4]
	class CameraShake* VehicleHitSimpleCharacterShaker;//[Offset: 0x3940, Size: 0x8]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3948, Size: 0x1]
	float IndoorBodyAreaDistance;//[Offset: 0x394c, Size: 0x4]
	float fTickDuration;//[Offset: 0x3950, Size: 0x4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x3958, Size: 0x18]
	bool ShouldVaultOnBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3970, Size: 0x1]
	bool IgnoreGliderOneTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3971, Size: 0x1]
	enum ParachuteState;//[Offset: 0x3980, Size: 0x1]
	bool bClientParachuteLandedFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a0, Size: 0x1]
	float LandDistanceCanAjustWhenParachuteLanded;//[Offset: 0x39a4, Size: 0x4]
	float CheckCanLandMaxSeconds;//[Offset: 0x39c8, Size: 0x4]
	byte MoveUploadTimeout;//[Offset: 0x39d0, Size: 0x1]
	float DSParachuteLandedFinishTimeMax;//[Offset: 0x39e0, Size: 0x4]
	bool bIsPendingCaptived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e4, Size: 0x1]
	enum LastParachuteState;//[Offset: 0x39e5, Size: 0x1]
	float HaveToOpenHeightToGround;//[Offset: 0x39e8, Size: 0x4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39ec, Size: 0x1]
	float SwimZDir;//[Offset: 0x39f0, Size: 0x4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f4, Size: 0x1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f5, Size: 0x1]
	float SwimRotateX_Ex;//[Offset: 0x39f8, Size: 0x4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x3a00, Size: 0x8]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x3a08, Size: 0x8]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x3a10, Size: 0x8]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x3a18, Size: 0x8]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x3a20, Size: 0x8]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x3a28, Size: 0x8]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x3a30, Size: 0x8]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x3a38, Size: 0x8]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x3a40, Size: 0x8]
	AkAudioEvent* AK_ParachuteLocalOverride;//[Offset: 0x3a48, Size: 0x8]
	AkAudioEvent* AK_ParachuteRemoteOverride;//[Offset: 0x3a50, Size: 0x8]
	AkAudioEvent* AK_LandingLocalOverride;//[Offset: 0x3a58, Size: 0x8]
	AkAudioEvent* AK_LandingRemotelOverride;//[Offset: 0x3a60, Size: 0x8]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x3a68, Size: 0x50]
	SpringArmParams FreeFallSpringArmParamForVehicleParachute;//[Offset: 0x3ab8, Size: 0x50]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x3b08, Size: 0x50]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x3b58, Size: 0x50]
	class CameraShake* FreeFallCamShake;//[Offset: 0x3bc0, Size: 0x8]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc8, Size: 0x1]
	bool bEnableParachuteFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc9, Size: 0x1]
	float VehicleForwardInputRate;//[Offset: 0x3bcc, Size: 0x4]
	float VehicleRightInputRate;//[Offset: 0x3bd0, Size: 0x4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd4, Size: 0x1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x3be8, Size: 0x8]
	MinimalViewInfo CameraInfoAdditive;//[Offset: 0x3bf0, Size: 0x5a0]
	float CameraInfoAdditiveWeight;//[Offset: 0x4190, Size: 0x4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x41e8, Size: 0x8]
	bool bUsingVehicleParachuteProp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4203, Size: 0x1]
	bool EnableGoldenSuitCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4204, Size: 0x1]
	bool IsGoldenSuitStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4205, Size: 0x1]
	float GoldenSuitCheckAccDelta;//[Offset: 0x4208, Size: 0x4]
	bool EnableGoldenSuitATK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420c, Size: 0x1]
	enum GoldenSuitSlot;//[Offset: 0x420d, Size: 0x1]
	int GoldenSuitReplaceSkillId;//[Offset: 0x4210, Size: 0x4]
	float GoldenSuitCheckDelta;//[Offset: 0x4214, Size: 0x4]
	float GoldenSuitTestFistDamage;//[Offset: 0x4218, Size: 0x4]
	FanPickerConfigData FistFanPickerData;//[Offset: 0x4220, Size: 0x50]
	FName FeatureActorName;//[Offset: 0x4290, Size: 0x8]
	bool bSprintUseConsumableNotStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4298, Size: 0x1]
	bool bLockUpdateAroundAfterRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4299, Size: 0x1]
	bool bIsLockingUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429a, Size: 0x1]
	float LockUpdateAroundPickupTime;//[Offset: 0x429c, Size: 0x4]
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x42a8, Size: 0x8]
	InteractiveComponentBase*[] InteractiveComponentList;//[Offset: 0x42b8, Size: 0x10]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c8, Size: 0x1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c9, Size: 0x1]
	AngledSightRepData AngledSightRepData;//[Offset: 0x42ca, Size: 0x2]
	float SpecifiedItemLastConsumeTime;//[Offset: 0x42cc, Size: 0x4]
	int TrySightCorrectionTime;//[Offset: 0x42d8, Size: 0x4]
	float SightCorrectionDelay;//[Offset: 0x42dc, Size: 0x4]
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42e0, Size: 0x1]
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42e1, Size: 0x1]
	int CurrentSightCorrectionTimes;//[Offset: 0x42e4, Size: 0x4]
	bool ForceSyncControllerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42f0, Size: 0x1]
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42f8, Size: 0x1]
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x4300, Size: 0x10]
	int CurrentActivityID;//[Offset: 0x4310, Size: 0x4]
	int CurrentActivityIndex;//[Offset: 0x4314, Size: 0x4]
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x4318, Size: 0x8]
	bool bEnableSecurity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4320, Size: 0x1]
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x4328, Size: 0x10]
	int[] InjuryFreeData;//[Offset: 0x4338, Size: 0x10]
	float RecentlyGunADSOrProneTimeThresholdInSeconds;//[Offset: 0x43b4, Size: 0x4]
	void UseCameraParamForVehicleParachute(bool InEnable);// 0x61b5da4
	void UpdateRecentAutonomousAttackTime();// 0x61b5d90
	void UpdateParachuteState(out const Rotator Rotation, float FallingSpeed);// 0x61b5cc0
	void UpdateParachuteFallingCameraDistance(float Alpha);// 0x61b5c44
	void UpdateIndoorState(bool IsInDoor);// 0x61b5b80
	void UpdateEnableGoldenSuitCheck();// 0x61b5b64
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x61b5aa0
	void TriggerParachuteLandVoice();// 0x61b5a84
	void TriggerAutoAimCheck(float DeltaTime);// 0x61b5a08
	void TouchCancelSkillLock();// 0x61b59f4
	void SyncLatestPlayerStatus(enum LatestParachuteState);// 0x61b5944
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x61b58c0
	void SwitchSightAngledServer(byte InAngledSightType, bool IsOnlyTurn);// 0x61b57bc
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x61b56f4
	void SwitchSightAngled(byte Type, bool IsOnlyTurn);// 0x61b5634
	void SwitchCameraToParachuteOpening();// 0x61b5618
	void SwitchCameraToParachuteFalling();// 0x61b55fc
	void SwitchCameraToNormal();// 0x61b55e0
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float Alpha);// 0x61b5564
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x70644c4
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x61b5550
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x70644c4
	void StopCamShake();// 0x61b5534
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x61b54b8
	void StartSwitchColdDown(float SwitchColdDownTime);// 0x61b543c
	void StartCamShake();// 0x61b5420
	void ShowNightVisionFrame();// 0x61b5404
	void ShowConfirmDialogOfMisKill();// 0x61b53e8
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x61b533c
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x61b52c0
	void SetSpecifiedItemConsumed(int ItemId);// 0x70644c4
	void SetSelfAndVehicleShadow(bool IsShow);// 0x61b523c
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x61b5184
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x61b5080
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x61b4fc4
	void SetParachuteState(enum State);// 0x61b4f40
	void SetInjuryFreeRateData(out const int[] InInjuryFreeData);// 0x61b4e88
	void SetIgnoreGliderOneTime(bool bFlag);// 0x61b4dfc
	void SetFPPDeafultFov(float InFov);// 0x61b4d80
	void SetFovInTPPSpringArm(float FieldOfView);// 0x61b4d04
	void SetEnableStandalonePickUpTick(bool bEnableTick);// 0x61b4c80
	void SetBodyIndoor(bool IsInDoor);// 0x61b4bfc
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x61b49bc
	void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd);// 0x61b47ec
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x61b46c0
	void ServerRPCOnClickInteractiveButton(InteractiveComponentBase* pComponent, int Flag);// 0x61b45d0
	void ServerOnApplicationactivated(bool bAppActive);// 0x61b450c
	void ResetCharacter();// 0x61b44f0
	void RequestLoadParachuteAnim(bool bHasNewChildComponent);// 0x61b4464
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x61b43a0
	void RemoveParachuteAnim();// 0x61b438c
	void ReleaseTrigger(enum Hand);// 0x61b4308
	void ReinitAbilitySystemComponentAvatar();// 0x61b42f4
	void RefreshParachuteAnim();// 0x61b42d8
	void RefreshBearerFramingTick();// 0x61b42c4
	void PushTrigger(enum Hand);// 0x61b4240
	void ProneWithTerrain(Rotator CharacterRotation, bool isMoving, float Offset, float deap);// 0x61b4104
	void PostPawnClientRestart();// 0x61b40e8
	void PlayVehicleHitSimpleCharacterCameraShake();// 0x61b40cc
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x70644c4
	void OnTakeDamage(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* Causer, out const ExtraDamageInfo ExtraDamageInfo);// 0x61b3f1c
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0x70644c4
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0x70644c4
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0x70644c4
	void OnRepParachuteStateDelegate__DelegateSignature();// 0x70644c4
	void OnRep_STPlayerController();// 0x61b3f08
	void OnRep_ParachuteState(enum State);// 0x61b3e7c
	void OnRep_MoveUploadTimeout();// 0x61b3e68
	void OnRep_InteractiveComponentList();// 0x61b3e54
	void OnRep_InjuryFreeData();// 0x61b3e40
	void OnRep_IgnoreGliderOneTime();// 0x61b3e24
	void OnRep_CurrentActivityID();// 0x61b3e10
	void OnRep_bIsPendingCaptived();// 0x61b3dfc
	void OnRep_AngleSightStateChanged();// 0x61b3de8
	void OnRep_ActivityAnimationRepData();// 0x61b3dd4
	void OnRank(int Kills, int Rank);// 0x61b3d20
	void OnPlayerCurrentWeaponChange(byte CurSlot);// 0x61b3ca4
	void OnParachuteStateChangedDelegate__DelegateSignature(enum LastParachuteState, enum NewParachuteState);// 0x70644c4
	void OnNewWeaponDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x70644c4
	void OnMiniTreeTriggerServerLogicCPP();// 0x61b3c88
	void OnLockUpdateAroundPickupEnd();// 0x61b3c74
	void OnLoadParachuteAnimCompleted();// 0x61b3c60
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x70644c4
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x70644c4
	void OnBPStateCheckIn();// 0x70644c4
	void OnAvatarEquippedSucc(enum SlotType, bool IsEquipped, int InItemID);// 0x61b3b5c
	void OnAllAvatarEquippedSucc();// 0x61b3b48
	void NotifyClientParachuteLanded(bool bOK);// 0x61b3a84
	bool NeedResetFlyDeviceParachuteAnim();// 0x61b3a44
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x61b39b8
	void MiniTreeTriggerServerLogic();// 0x61b3958
	bool IsSwitchCoolingDownFinish();// 0x61b3930
	bool IsSpecifiedItemInCD(int ItemId);// 0x61b3898
	bool IsLandedWithClientPos();// 0x61b3860
	bool IsInLaunchSeat();// 0x61b3820
	bool IsGrenadeEmpty();// 0x61b37e8
	bool IsBodyIndoorFuc();// 0x61b37c8
	bool IsBodyIndoorCheck();// 0x61b3790
	bool IsAllowSyncControllerRotationInActived();// 0x61b3758
	bool IsAllowPickupActor();// 0x61b3720
	void InitAirAttackLocatorComponent();// 0x61b370c
	void HideNightVisionFrame();// 0x61b36f0
	bool HasParachuteAnimLoaded();// 0x61b36b8
	void HandleParachuteStateChanged(enum NewState);// 0x61b3634
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x61b3450
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x61b326c
	SpringArmComponent* GetThirdPersonSpringArm();// 0x70644c4
	CameraComponent* GetThirdPersonCamera();// 0x70644c4
	float GetSwimRotateX_Ex();// 0x61b3238
	int GetSkillIndexByActivityID();// 0x70644c4
	SpringArmComponent* GetScopeSpringArm();// 0x70644c4
	CameraComponent* GetScopeCamera();// 0x70644c4
	bool GetPlayerVisibile();// 0x61b3200
	AnimationAsset* GetPlayerParachuteAnimByAnimType(byte AnimType);// 0x61b3174
	STExtraPlayerController* GetPlayerControllerSafety();// 0x61b3138
	void GetOnVehicleDelegate__DelegateSignature();// 0x70644c4
	SceneComponent* GetMoveableComp();// 0x61b3104
	bool GetIsInDoor();// 0x61b30c4
	bool GetIsGunADS();// 0x61b3084
	InteractiveComponentBase*[] GetInteractiveComponentList();// 0x61b2ff8
	float GetInjuryFreeRate(int BodyPart);// 0x61b2f64
	SpringArmComponent* GetFPPSpringArm();// 0x70644c4
	float GetFPPDeafultFov();// 0x61b2f30
	CameraComponent* GetFPPCamera();// 0x70644c4
	SpringArmComponent* GetFirstPersonSpringArm();// 0x70644c4
	CameraComponent* GetFirstPersonCamera();// 0x70644c4
	enum[] GetDisallowedStates(int ActivityID);// 0x70644c4
	int GetBuildingAvatarID(int BuildingID);// 0x70644c4
	Vector GetBonePos(FName BoneName, Vector OffsetPos);// 0x61b2e64
	void FreeFallShakeCam();// 0x61b2e50
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x61b2dd4
	void EnableRegionBaseNetConsideration();// 0x61b2dc0
	void EnablePet(bool Enable);// 0x61b2d34
	void DynamicCreateComponents();// 0x61b2d20
	void DisableSimulateAnimUpdateRateOptimization(bool bDisable, float LessThanDistanceSquareCanDisable);// 0x61b2c58
	void DelayStopLandState();// 0x61b2c44
	void DelayRemoveParachuteAnim();// 0x61b2c30
	void ClientUserMoveCmdAck(int Sequence);// 0x61b2bac
	void ClientRPCOnOverlapInteractiveComponent(InteractiveComponentBase* pComponent, bool isBeginOverlap);// 0x61b2ae4
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x61b29f0
	void ClientInitParachuteLaunchStatus(Vector Vel);// 0x61b296c
	void ClientCheckCancleFollow(enum InLastState, enum InNewState);// 0x61b28b4
	void ClientAckGoodMove(float TimeStamp);// 0x61b2830
	void ClearHPUI();// 0x61b2814
	bool CheckServerCanLanded();// 0x61b27dc
	void CheckAttachedOrDetachedVehicle();// 0x61b27c8
	bool CanAnimInstanceCacheParachuteAnim(STExtraAnimInstance* MyAnimInstance);// 0x61b2738
	void CallRefreshBPStateCheckIn();// 0x61b2724
	void AsyncLoadGunCollisionFinish(SoftClassPath GunCollisionPath);// 0x61b25e8
	void AnimInstanceCacheParachuteAnimVars(bool bForceRefreshAnim);// 0x61b2564
	bool AllowTriggerActivities(bool bCheckCanReceive);// 0x61b24cc
	void AdjustServerParachuteLanded(float ClientTimeStamp, int RespawnCount, const Vector Position, const Rotator Rotation);// 0x61b2364
	void AdjustClientParachuteTime(float NeedAdjustTimeconst, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x61b2200
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAutoAimingComponent.ActorComponent.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0x128, Size: 0x20]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0x148, Size: 0x20]
	Vector2D AimTargetScreenPos;//[Offset: 0x168, Size: 0x8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	STExtraPlayerController* ExtraPlayerController;//[Offset: 0x178, Size: 0x8]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x180, Size: 0x8]
	float LastSelectAimEnemyTime;//[Offset: 0x188, Size: 0x4]
	float LastFindAimEnemyTime;//[Offset: 0x18c, Size: 0x4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x190, Size: 0x4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x194, Size: 0x4]
	float DEFAULT_CD_TIME;//[Offset: 0x198, Size: 0x4]
	float SCOPE_AUTO_AIM_TIME;//[Offset: 0x19c, Size: 0x4]
	float OPEN_COLLISION_TIME;//[Offset: 0x1a0, Size: 0x4]
	float AIM_CROSSHAIR_CHECK_DELTA;//[Offset: 0x1a4, Size: 0x4]
	float LOCK_TARGET_TOLERANCE;//[Offset: 0x1a8, Size: 0x4]
	float RANGE_SCALE;//[Offset: 0x1ac, Size: 0x4]
	float RANGE_SCALE_MAX;//[Offset: 0x1b0, Size: 0x4]
	float AC_AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x1f0, Size: 0x4]
	float AC_AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x1f4, Size: 0x4]
	float AC_DEFAULT_CD_TIME;//[Offset: 0x1f8, Size: 0x4]
	float AC_SCOPE_AUTO_AIM_TIME;//[Offset: 0x1fc, Size: 0x4]
	float AC_RANGE_SCALE;//[Offset: 0x200, Size: 0x4]
	float AC_RANGE_SCALE_MAX;//[Offset: 0x204, Size: 0x4]
	float AC_AutoAimBreakThroughRatio;//[Offset: 0x208, Size: 0x4]
	FName[] AC_Bones;//[Offset: 0x210, Size: 0x10]
	FName[] Bones;//[Offset: 0x220, Size: 0x10]
	<FName,Vector> BonesOffset;//[Offset: 0x230, Size: 0x50]
	float TargetScreenWidth;//[Offset: 0x280, Size: 0x4]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]
	float AutoAimSensitiveScreenRatio;//[Offset: 0x288, Size: 0x4]
	bool bEnableAimSensitiveOnlyInGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	float AutoAimSensitiveAngle;//[Offset: 0x290, Size: 0x4]
	float AutoAimBreakThroughAngle;//[Offset: 0x294, Size: 0x4]
	float AutoAimBreakThroughRatio;//[Offset: 0x298, Size: 0x4]
	float AutoAimBreakThroughStart;//[Offset: 0x29c, Size: 0x4]
	float AutoAimBreakThroughSensitiveScale;//[Offset: 0x2a0, Size: 0x4]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	bool bModifyCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 0x1]
	WeaponCrossHairPerformData[] CrossHairDataRifle;//[Offset: 0x5e8, Size: 0x10]
	WeaponCrossHairPerformData[] CrossHairDataPistol;//[Offset: 0x5f8, Size: 0x10]
	WeaponCrossHairPerformData[] CrossHairDataShotGun;//[Offset: 0x608, Size: 0x10]
	void OnUnEquipWeapon();// 0x635949c
	void OnShoot(STExtraWeapon* Weapon);// 0x6359420
	void OnEquipWeapon();// 0x635940c
	void OnCharacterLeaveState(enum ChangedState);// 0x6359390
	void OnCharacterEnterState(enum ChangedState);// 0x6359314
	bool IsTriggerBeforeFire();// 0x63592dc
	bool IsCurrentWeaponSupportAutoAim();// 0x63592a4
	void Init(Controller* Controller);// 0x6359228
	bool HasEnemyInAutoAimRange(float DeltaTime);// 0x6359198
	void GetDataFromWeaponEntity();// 0x6359184
	AutoAimEnemyInfo FindEnemyNearScreenCenter(out const Vector RayStart, float Radius, out const FName BoneName, float CollisionTime, bool HitMatchBone);// 0x6358fc4
	bool CheckSmoke(out const Vector StartPoint, out const Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName);// 0x6358e40
	bool CheckInAngle(STExtraBaseCharacter* EnemyPawn, float MaxAngle);// 0x6358d6c
	bool CheckBuffStun();// 0x6358d34
	bool CanEnemeyRaycastReach(out const Vector StartPoint, out const Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName);// 0x6358bb0
	bool CanAsynCalcuAimRange();// 0x6358b78
	void BPDrawDebugInfo(out const float[] AutoAimParams);// 0x6358ab8
<----------Generated by SSpawner v1.0.4---------->


Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 0x10]
	enum SpreadType;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 0x18]
	float Offset;//[Offset: 0x18, Size: 0x4]
	Vector2D IconOffset;//[Offset: 0x1c, Size: 0x8]
	float Alpha;//[Offset: 0x24, Size: 0x4]
	float Scale;//[Offset: 0x28, Size: 0x4]
	float IconRotate;//[Offset: 0x2c, Size: 0x4]
	float LogicRotate;//[Offset: 0x30, Size: 0x4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float BlendInOutRatePerSec;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 0x8]
	float U;//[Offset: 0x8, Size: 0x4]
	float V;//[Offset: 0xc, Size: 0x4]
	float UL;//[Offset: 0x10, Size: 0x4]
	float VL;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0x158, Size: 0x8]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0x160, Size: 0x10]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x170, Size: 0x8]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x178, Size: 0x10]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x188, Size: 0x10]
	FName ScreenPlane;//[Offset: 0x198, Size: 0x8]
	bool FollwCameraManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0x1a8, Size: 0x10]
	delegate OnPlayScreenAppearance;//[Offset: 0x1b8, Size: 0x10]
	delegate OnStopScreenAppearance;//[Offset: 0x1c8, Size: 0x10]
	delegate OnPlayScreenParticle;//[Offset: 0x1d8, Size: 0x10]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x1e8, Size: 0x10]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x1f8, Size: 0x8]
	MultiAppearanceMeshData[] MultiAppearanceMeshData;//[Offset: 0x210, Size: 0x10]
	void UpdateMultiAppearancePresentList(float DeltaTime);// 0x6259544
	void StopScreenParticleEffectByName(FString ScreenParticleName);// 0x625949c
	void StopScreenParticleEffect(byte EffectType);// 0x6259420
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x6259330
	void StopAllScreenParticleEffect();// 0x625931c
	void StopAllScreenAppearance();// 0x6259308
	void SetTextureParameterValue(FString AppearanceName, FName ParamName, Texture* Tex);// 0x62591e8
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x6259130
	bool SetScalarParam(FString AppearanceName, FName ParamName, float ParamValue);// 0x6258ff8
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x6258ed8
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x6258e08
	void SetAllAppearanceMeshHiddenInGame(bool bNewHid);// 0x6258d84
	void PlayScreenParticleWhenCharacterHideInGame(ParticleSystem* PS, out const Transform RelativeTransform, float LifeSeconds);// 0x6258c5c
	void PlayScreenParticleEffectByName(FString ScreenParticleName, float InEffectValue);// 0x6258b74
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x6258abc
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x6258980
	void PlayGraduallyShowOut(FString AppearanceKey, float Frag, float DelayTime);// 0x62587d8
	void PlayGraduallyShowIn(FString AppearanceKey, float Frag, float DelayTime, float BeginAlpha);// 0x62585f4
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI, FName InMatInstParamName, CurveFloat* InParamCurve);// 0x6258408
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x625838c
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x62582d0
	void HandleEffectLoadFinishByName(FString ScreenParticleName);// 0x625819c
	void HandleEffectLoadFinish(byte EffectType);// 0x6258120
	bool GetScalarParam(FString AppearanceName, FName ParamName, out float ParamValue);// 0x6257fd8
<----------Generated by SSpawner v1.0.4---------->


Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 0x10]
	float LifeSpan;//[Offset: 0x10, Size: 0x4]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	MaterialInterface* ParentMaterial;//[Offset: 0x18, Size: 0x28]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x40, Size: 0x8]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x48, Size: 0x8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x60, Size: 0x30]
	FName MatInstParamName;//[Offset: 0x90, Size: 0x8]
	CurveFloat* ParamCurve;//[Offset: 0x98, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0, Size: 0x1]
	FString ScreenParticleEffectName;//[Offset: 0x8, Size: 0x10]
	ParticleSystem* ParticleEffect;//[Offset: 0x18, Size: 0x28]
	FName ParticleParamName;//[Offset: 0x40, Size: 0x8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x48, Size: 0x10]
	Vector ScreenParticleEffectLoc;//[Offset: 0x58, Size: 0xc]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x68, Size: 0x8]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bNeedReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	float CurrentParamValue;//[Offset: 0x74, Size: 0x4]
	byte DisableDeviceLevel;//[Offset: 0x78, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MltAppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 0x10]
	FName AppearanceTag;//[Offset: 0x10, Size: 0x8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x20, Size: 0x30]
	MaterialInterface* ParentMaterial;//[Offset: 0x50, Size: 0x8]
	float MatialAlpha;//[Offset: 0x58, Size: 0x4]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x60, Size: 0x8]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x68, Size: 0x8]
	bool IsLogicShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool IsShowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IsShowIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	float GradualFrag;//[Offset: 0x74, Size: 0x4]
	float DelayTime;//[Offset: 0x78, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MultiAppearanceMeshData
	StaticMeshComponent* MultiAppearanceMesh;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x790, Size: 0xc]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x8ca9eac
	Vector GetUnscaledBoxExtent();// 0x8ca9e84
	Vector GetScaledBoxExtent();// 0x8ca9e4c
<----------Generated by SSpawner v1.0.4---------->


Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x900, Size: 0x30]
	Transform FPPRelativeTransform;//[Offset: 0x930, Size: 0x30]
	Transform ScopeRelativeTransform;//[Offset: 0x960, Size: 0x30]
	void SetActivate(bool _IsActivate);// 0x5fa5424
<----------Generated by SSpawner v1.0.4---------->


Class: CustomParticleSystemComponent.ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0xa30, Size: 0x10]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa40, Size: 0x1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x5e6184c
<----------Generated by SSpawner v1.0.4---------->


Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0, Size: 0x8]
	SceneComponent* ParentComp;//[Offset: 0x8, Size: 0x8]
	FName ParentSocketName;//[Offset: 0x10, Size: 0x8]
	float TargetArmALength;//[Offset: 0x18, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x1c, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x28, Size: 0xc]
	Vector RelativeLocation;//[Offset: 0x34, Size: 0xc]
	float ProbeSize;//[Offset: 0x40, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x44, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x48, Size: 0x4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CameraParams
	float FieldOfView;//[Offset: 0x0, Size: 0x4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0x110, Size: 0x4]
	float AALOpenSensibility;//[Offset: 0x114, Size: 0x4]
	float OpenAALFOV;//[Offset: 0x118, Size: 0x4]
	int MaxDist;//[Offset: 0x11c, Size: 0x4]
	int minDist;//[Offset: 0x120, Size: 0x4]
	int DangerDist;//[Offset: 0x124, Size: 0x4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0x128, Size: 0x28]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x150, Size: 0x28]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x178, Size: 0x8]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x180, Size: 0x8]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x188, Size: 0x8]
	float FixArrowScaleDistance;//[Offset: 0x194, Size: 0x4]
	float ArrowScaleFactor1;//[Offset: 0x198, Size: 0x4]
	float ArrowScalePlus1;//[Offset: 0x19c, Size: 0x4]
	float ArrowScaleFactor2;//[Offset: 0x1a0, Size: 0x4]
	float ArrowScalePlus2;//[Offset: 0x1a4, Size: 0x4]
	float ShortDis;//[Offset: 0x1a8, Size: 0x4]
	byte ChannelType;//[Offset: 0x1ac, Size: 0x1]
	Vector TargetLocation;//[Offset: 0x1b0, Size: 0xc]
	void SetItemExsist(bool bExsist);// 0x5d4993c
	void SetFinalLocation();// 0x5d49928
	void SetAALFov(bool bOpen);// 0x5d498a4
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x5d497ac
	void OnFreeArrowLoadFinsh();// 0x5d49798
	void OnCalledActorLoadFinsh(Vector Location);// 0x5d4971c
	float GetTargetDistance();// 0x5d496e8
	bool GetAALAvaliable();// 0x5d496b0
<----------Generated by SSpawner v1.0.4---------->


Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x458, Size: 0x4]
	float AirAttackDelayTime;//[Offset: 0x45c, Size: 0x4]
	int SkillID;//[Offset: 0x460, Size: 0x4]
	int IconID;//[Offset: 0x464, Size: 0x4]
	float AttackAreaRadius;//[Offset: 0x468, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: FanPickerConfigData
	float Radius;//[Offset: 0x0, Size: 0x4]
	float Angle;//[Offset: 0x4, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x8, Size: 0x4]
	Vector Offset;//[Offset: 0xc, Size: 0xc]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool IsCheckHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool IsHeadJudgeWithoutOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bPickUpMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	class Actor[] IgnoredActors;//[Offset: 0x20, Size: 0x10]
	bool bForwardHitAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	enum PickerType;//[Offset: 0x31, Size: 0x1]
	enum PickerTargetType;//[Offset: 0x32, Size: 0x1]
	int PickerMaxCount;//[Offset: 0x34, Size: 0x4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	Actor*[] IgnoreTargets;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ActivityAnimationRepData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: InteractiveComponentBase.LuaActorComponent.ActorComponent.Object
	delegate OnAllowToInteract;//[Offset: 0x1e0, Size: 0x10]
	delegate OnAllowToClickButton;//[Offset: 0x1f0, Size: 0x10]
	delegate OnInteractionEffective;//[Offset: 0x200, Size: 0x10]
	delegate OnClientShowInteractiveUI;//[Offset: 0x210, Size: 0x10]
	delegate OnServerAddOrDeleteComponent;//[Offset: 0x220, Size: 0x10]
	delegate OnServerClickInteractiveButton;//[Offset: 0x230, Size: 0x10]
	delegate OnServerRPCSetOccupied;//[Offset: 0x240, Size: 0x10]
	delegate OnStartCoolDown;//[Offset: 0x250, Size: 0x10]
	delegate OnRepOccupied;//[Offset: 0x260, Size: 0x10]
	delegate OnRepCoolDown;//[Offset: 0x270, Size: 0x10]
	delegate OnRepCurrentCharacter;//[Offset: 0x280, Size: 0x10]
	delegate OnRepCurrentCharacterArray;//[Offset: 0x290, Size: 0x10]
	delegate OnRepEnabled;//[Offset: 0x2a0, Size: 0x10]
	delegate OnResetSkillAction;//[Offset: 0x2b0, Size: 0x10]
	delegate OnStartedSkillAction;//[Offset: 0x2c0, Size: 0x10]
	delegate OnFinishedSkillAction;//[Offset: 0x2d0, Size: 0x10]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x2e0, Size: 0x8]
	PrimitiveComponent*[] PrimitiveComponentArray;//[Offset: 0x2e8, Size: 0x10]
	Character* OccupyingCharacter;//[Offset: 0x2f8, Size: 0x8]
	Character*[] OccupyingCharacterArray;//[Offset: 0x300, Size: 0x10]
	bool bIsCooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	int CoolDownLeftTimeForShow;//[Offset: 0x314, Size: 0x4]
	bool bOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 0x1]
	FName PrimitiveComponentTag;//[Offset: 0x320, Size: 0x8]
	int CollisionsNum;//[Offset: 0x328, Size: 0x4]
	bool bCanInteractMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	bool bShowedMultiplayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 0x1]
	bool bOnlyInFightingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 0x1]
	bool bCheckBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32f, Size: 0x1]
	int CheckBlockCharacterIncrement;//[Offset: 0x330, Size: 0x4]
	int CheckBlockActorIncrement;//[Offset: 0x334, Size: 0x4]
	bool bCanInteractInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	bool bCanInteractWhenNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1]
	bool bCanInteractInCarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a, Size: 0x1]
	bool bCanInteractInBeCarriedBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33b, Size: 0x1]
	bool bCanAIInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 0x1]
	bool bAllowWhenCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 0x1]
	int TipsIdWhenClickedInCoolDown;//[Offset: 0x340, Size: 0x4]
	float CoolDownTime;//[Offset: 0x344, Size: 0x4]
	float MaxOccupyingTime;//[Offset: 0x348, Size: 0x4]
	int MaxOccupyingCharacterNum;//[Offset: 0x34c, Size: 0x4]
	int TLogKey;//[Offset: 0x350, Size: 0x4]
	bool bTLogCountReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1]
	Volume* CustomTriggerVolume;//[Offset: 0x358, Size: 0x8]
	int DebugParameter;//[Offset: 0x360, Size: 0x4]
	int SkillID;//[Offset: 0x364, Size: 0x4]
	bool bResetSkillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	float LoadingDuration;//[Offset: 0x36c, Size: 0x4]
	SoftObjectPath LoadingIcon;//[Offset: 0x370, Size: 0x18]
	AnimMontage* FPS_AnimMontage_Stand;//[Offset: 0x388, Size: 0x28]
	AnimMontage* FPS_AnimMontage_Crouch;//[Offset: 0x3b0, Size: 0x28]
	AnimMontage* FPS_AnimMontage_Prone;//[Offset: 0x3d8, Size: 0x28]
	AnimMontage* FPS_AnimMontage_Vehicle;//[Offset: 0x400, Size: 0x28]
	AnimMontage* TPS_AnimMontage_Stand;//[Offset: 0x428, Size: 0x28]
	AnimMontage* TPS_AnimMontage_Crouch;//[Offset: 0x450, Size: 0x28]
	AnimMontage* TPS_AnimMontage_Prone;//[Offset: 0x478, Size: 0x28]
	AnimMontage* TPS_AnimMontage_Vehicle;//[Offset: 0x4a0, Size: 0x28]
	void StartCoolDown();// 0x5f2cea0
	void SetOccupied(Character* Character, bool bOccupied);// 0x5f2cde0
	void SetEnable(bool bIsEnable);// 0x5f2cd5c
	void ServerAddOrDeleteInteractiveComponent(Character* Character, bool bAdd);// 0x5f2cc9c
	void RegisterCollisionsEvent();// 0x5f2cc88
	void OnRep_Occupied();// 0x5f2cc74
	void OnRep_Enabled();// 0x5f2cc60
	void OnRep_CurrentCharacterArray();// 0x5f2cc4c
	void OnRep_CurrentCharacter();// 0x5f2cc38
	void OnRep_CoolDown();// 0x5f2cc24
	void OnEndOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex);// 0x5f2caf8
	void OnBeginOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5f2c8f0
	bool IsOverlappingByCharacter(Character* Character);// 0x5f2c860
	bool IsOccupied();// 0x5f2c828
	bool IsInteractionEffective(Character* Character, out enum Reason);// 0x5f2c74c
	bool IsEnabled();// 0x5f2c714
	bool IsCoolingDown();// 0x5f2c6dc
	int GetInteractiveCharacterNum();// 0x5f2c6a8
	void GetCurrentOccupyingCharacterArray(out Character*[] OutActors);// 0x5f2c5f0
	Character* GetCurrentOccupyingCharacter();// 0x5f2c5bc
	int GetCoolDownLeftTimeForShow();// 0x5f2c588
	void GetAllInteractiveCharacters(out Character*[] OutActors);// 0x5f2c4d0
	bool AllowToInteract(Character* Character, out enum Reason);// 0x5f2c3f4
	bool AllowToClickButton(Character* Character, out enum Reason);// 0x5f2c318
<----------Generated by SSpawner v1.0.4---------->


Class: AngledSightRepData
	byte AngledSightType;//[Offset: 0x0, Size: 0x1]
	bool IsOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ActicityDisallowedData
	enum[] DisallowedStates;//[Offset: 0x0, Size: 0x10]
	int ActivityID;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WarteringAreaCPP.UAERegionActor.LuaActor.Actor.Object
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x540, Size: 0x10]
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x550, Size: 0x10]
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x560, Size: 0x10]
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1]
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 0x1]
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x572, Size: 0x1]
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x573, Size: 0x1]
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x574, Size: 0xc]
	float CurrentScale;//[Offset: 0x580, Size: 0x4]
	int CurActTime;//[Offset: 0x584, Size: 0x4]
	PlayerController*[] PlayerCDTable;//[Offset: 0x588, Size: 0x10]
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	FName SocketBaseTags;//[Offset: 0x5a0, Size: 0x8]
	float CurrentCarouselRotationAccel;//[Offset: 0x5a8, Size: 0x4]
	float CurrentCarouselRotation;//[Offset: 0x5ac, Size: 0x4]
	int CurrentInteractingPlayerCount;//[Offset: 0x5b0, Size: 0x4]
	int PlayerNumberForTriggerEvent;//[Offset: 0x5b4, Size: 0x4]
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x5b8, Size: 0x10]
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x5c8, Size: 0x10]
	int AttachedNumber;//[Offset: 0x5dc, Size: 0x4]
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x5e0, Size: 0x50]
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x630, Size: 0x10]
	Vector[] DropOffLocations;//[Offset: 0x650, Size: 0x10]
	enum DropOffLocationType;//[Offset: 0x660, Size: 0x1]
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x661, Size: 0x1]
	int AssociatedSkillIndex;//[Offset: 0x664, Size: 0x4]
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x668, Size: 0x10]
	byte IsDayTime;//[Offset: 0x678, Size: 0x1]
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 0x1]
	Pawn*[] PawnDoneList;//[Offset: 0x680, Size: 0x10]
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	enum FixedDropOffLocationType;//[Offset: 0x691, Size: 0x1]
	Vector[] FixedRelativeDropPositions;//[Offset: 0x698, Size: 0x10]
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1]
	bool UseDropFixedPosition();// 0x6350b5c
	void StopDancing_Multicast(const Actor*[] Players);// 0x6350a80
	void StartDancing_Multicast(int MontageIndex, const Actor*[] Players);// 0x6350960
	void SpawnTreeParticleCPP_Multicast(PlayerController* PlayerController);// 0x63508b0
	static void SetupMinimapDisplay(UAEPlayerController* PController, out const LoveTreeData[] treeData);// 0x63507c0
	void SetCDFlagByPC(PlayerController* PlayerController);// 0x6350744
	void ServerDoWaterLogic(PlayerController* PlayerController, FString ExMsg);// 0x70644c4
	void ResetPCByTime(PlayerController* PlayerController, float cdTime);// 0x635068c
	void OnTimeStampRep(out const BunnyDanceSyncData SyncData);// 0x63505ec
	void OnStopDancing(out const Actor*[] Players);// 0x635052c
	void OnStartDancing(int MontageIndex, out const Actor*[] Players);// 0x635042c
	void OnSpawnTreeParticleCPP(PlayerController* PlayerController);// 0x63503a8
	void OnSkeletalAnimationSyncData(out const SkeletalAnimationSyncData InSkeletalAnimationSyncData);// 0x70644c4
	void OnSkeletalAnimationStateChanged(SceneComponent* AttachedComponent, bool bShouldStartAnimation);// 0x70644c4
	void OnRep_TimeStamp(out const BunnyDanceSyncData SyncData);// 0x6350310
	void OnRep_SkeletalAnimationSyncData();// 0x63502fc
	void OnRep_ShowRabbitAnim();// 0x63502e0
	void OnRep_PawnDoneList();// 0x63502c4
	void OnRep_IsDayTime();// 0x63502a8
	void OnRep_CurrentScaleCPP();// 0x6350294
	void OnRep_CurrentScaleBP();// 0x70644c4
	void OnRep_CurrentInteractingPlayerCount();// 0x6350230
	void OnRep_CurActTimeCPP();// 0x63501cc
	void OnRep_CurActTimeBP();// 0x70644c4
	void OnRep_AttachedNumber();// 0x6350168
	void OnPlayersDance(out const Actor*[] Players, int MontageIndex, float JoinTime);// 0x6350020
	void OnPlayerNumberChanged(int Number);// 0x70644c4
	void OnPlayerDetached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x70644c4
	void OnPlayerAttached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x70644c4
	void OnPCCDCleared(PlayerController* PlayerController);// 0x70644c4
	void OnClientCurrentInteractingPlayerCountChanged();// 0x70644c4
	bool IsDropFixedRelativePositionSetUp();// 0x634ffe0
	bool GetIsPCInCD(PlayerController* PlayerController);// 0x634ff50
	Vector GetDropFixedRelativePosition(Actor* DropOwner);// 0x634feb8
	void DispatchPlayerDance_Multicast(const Actor*[] Players, int MontageIndex, float JoinTime);// 0x634fd58
	bool CanTriggertEvent(Pawn* CurPawn);// 0x70644c4
	int CacheAssociatedSkillIndex();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: UAERegionActor.LuaActor.Actor.Object
	byte AutoDormancyType;//[Offset: 0x4c8, Size: 0x1]
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 0x1]
	enum RegionSize;//[Offset: 0x4ca, Size: 0x1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cb, Size: 0x1]
	void ReceivedPlayerActiveRegionsChanged(bool bEnter);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: BunnyDanceSyncData
	int CurrentIndex;//[Offset: 0x0, Size: 0x4]
	bool bIsDancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float TimeStamp;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SocketAttachmentInternalData
	FName SocketName;//[Offset: 0x0, Size: 0x8]
	SceneComponent* SocketBase;//[Offset: 0x8, Size: 0x8]
	Actor* AttachedPlayer;//[Offset: 0x10, Size: 0x8]
	Vector OffsetLoc;//[Offset: 0x18, Size: 0xc]
	Rotator OffsetRot;//[Offset: 0x24, Size: 0xc]
	AnimMontage* AnimMontage;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SocketAttachmentNameTable
	FName SocketName;//[Offset: 0x0, Size: 0x8]
	Vector OffsetLoc;//[Offset: 0x8, Size: 0xc]
	Rotator OffsetRot;//[Offset: 0x14, Size: 0xc]
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SkeletalAnimationSyncData
	SceneComponent* SocketBase;//[Offset: 0x0, Size: 0x8]
	bool Status;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: LoveTreeData
	int ID;//[Offset: 0x0, Size: 0x4]
	Vector Loc;//[Offset: 0x4, Size: 0xc]
	float minRate;//[Offset: 0x10, Size: 0x4]
	float maxRate;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerRoleCacheFrameData
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerTombBox.LuaActor.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x518, Size: 0x10]
	FName TombName;//[Offset: 0x528, Size: 0x8]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x538, Size: 0x8]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x540, Size: 0x8]
	ItemDefineID KillByItemDefineID;//[Offset: 0x548, Size: 0x18]
	int DeadTime;//[Offset: 0x560, Size: 0x4]
	int BoxLifeSpan;//[Offset: 0x564, Size: 0x4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	Vector AttachedRelLoc;//[Offset: 0x56c, Size: 0xc]
	byte AttackRules;//[Offset: 0x578, Size: 0x1]
	Actor* AttachedActor;//[Offset: 0x580, Size: 0x8]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	enum BoxType;//[Offset: 0x589, Size: 0x1]
	ItemTombParticle[] TombBoxItemEffect;//[Offset: 0x590, Size: 0x10]
	uint32 OwnerUniqueID;//[Offset: 0x5a0, Size: 0x4]
	int TargetPlayerKey;//[Offset: 0x5a4, Size: 0x4]
	bool bAutoShowItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 0x1]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x5ac, Size: 0x4]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]
	bool bDropEffectVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 0x1]
	bool bAirDropWrapperDynamicRegionNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b2, Size: 0x1]
	int AvatarID;//[Offset: 0x5b4, Size: 0x4]
	Character* BoxOwner;//[Offset: 0x5b8, Size: 0x8]
	ProjectileMovementComponent* CacheComp;//[Offset: 0x5c0, Size: 0x8]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x5c8, Size: 0x8]
	PickUpListWrapperActor* ItemEffectBoxPickupWrapperActor;//[Offset: 0x5d0, Size: 0x8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x5e0, Size: 0x8]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]
	int DropGroupID;//[Offset: 0x5ec, Size: 0x4]
	Vector DropStartLocation;//[Offset: 0x5f0, Size: 0xc]
	void SwitchToDeadTombBox();// 0x5ff4268
	void SetVisible(bool IsVisible);// 0x5ff41e8
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x5ff40a0
	void RegisterToPlayerPickUpList();// 0x5ff408c
	void RegisterToCurveAnimComponent();// 0x5ff4070
	void OpenListenUIEvent(bool bOpen);// 0x70644c4
	void OnRep_VisibilityChange();// 0x5ff405c
	void OnRep_ItemEffectBoxPickupWrapperActor();// 0x5ff4048
	void OnRep_ChangeBoxMesh();// 0x5ff4034
	void OnRep_BoxLifeSpan();// 0x5ff4020
	void OnRep_AvatarId();// 0x5ff4004
	void OnRep_AttachmentReplication();// 0x5ff3fe8
	void OnRep_AttachedActor();// 0x5ff3fd4
	void OnRefreshItemEffect();// 0x5ff3fc0
	void HideDeadTombApparence();// 0x5ff3fa4
	int GetUniqueInstanceID();// 0x5ff3f70
	int GetTombboxLifespan();// 0x5ff3f3c
	PickUpListWrapperActor* GetPickupWrapperActor();// 0x5ff3f20
	void GetDropItemListFromPlayer(out PickUpItemData[] ItemDataList);// 0x5ff3e7c
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x5ff3e44
	int GetAvatarId();// 0x5ff3e10
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x5ff3d04
	void GeneratePlayerBackpackWrappers();// 0x5ff3cf0
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x5ff3b78
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x5ff3a80
	void GenerateBoxWrappersByItemDataList(out const PickUpItemData[] DataList, FName BoxName, bool IsInAirDropBox);// 0x5ff394c
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirDropBoxId);// 0x5ff3804
	int DellGeneratePlayerBackpackWrappers(PickUpListWrapperActor* Wrapper, int MaxItemQuality);// 0x5ff3734
	bool CanPickByPawn(Pawn* Pawn);// 0x5ff369c
	void AddToAIList(PickUpListWrapperActor* Wrapper);// 0x5ff3620
<----------Generated by SSpawner v1.0.4---------->


Class: ItemTombParticle
	ParticleSystem* SoftPS;//[Offset: 0x0, Size: 0x28]
	ParticleSystemComponent* PS;//[Offset: 0x28, Size: 0x8]
	<int> ItemSpecificIDArray;//[Offset: 0x30, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x150, Size: 0x4]
	float MaxSpeed;//[Offset: 0x154, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x158, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x158, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x158, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x158, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x158, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x158, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x15c, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x160, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x16c, Size: 0x4]
	float Buoyancy;//[Offset: 0x170, Size: 0x4]
	float Bounciness;//[Offset: 0x174, Size: 0x4]
	float Friction;//[Offset: 0x178, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x17c, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x180, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x190, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x1a0, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x1a4, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x1ac, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x1b0, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x1b4, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x8e1b4f4
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x8e1b470
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x70644c4
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x70644c4
	Vector LimitVelocity(Vector NewVelocity);// 0x8e1b3e0
<----------Generated by SSpawner v1.0.4---------->


Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x858, Size: 0x10]
	enum BoxType;//[Offset: 0x878, Size: 0x1]
	delegate OnSomeonePickItem;//[Offset: 0x8a0, Size: 0x10]
	float PickUpListDataRelevancyDistanceSqrt;//[Offset: 0x8b4, Size: 0x4]
	PickUpDataComponent* PickUpDataComponent;//[Offset: 0x8b8, Size: 0x8]
	void SetPickUpDataList(out PickUpItemData[] PickUpItemDatas);// 0x5fcac14
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x5fcab2c
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x5fcaa64
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x70644c4
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey, int TypeSpecificID);// 0x70644c4
	void OnRep_PickUpDataList();// 0x5fcaa50
	void OnRep_PickUpDataComponent();// 0x5fcaa3c
	void OnPickUpDataListChangedDelegate__DelegateSignature();// 0x70644c4
	void OnBoxEmptyDelegate__DelegateSignature(int boxId);// 0x70644c4
	PickUpItemData[] GetPickUpDataList();// 0x5fcaa04
	PickUpItemData[] GetDataList();// 0x5fca998
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x5fca864
<----------Generated by SSpawner v1.0.4---------->


Class: PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x530, Size: 0x4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 0x1]
	ItemDefineID DefineID;//[Offset: 0x538, Size: 0x18]
	int Count;//[Offset: 0x550, Size: 0x4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1]
	bool bAlwaysPickAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x555, Size: 0x1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x556, Size: 0x1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x557, Size: 0x1]
	FString[] ForbitPickPlayerNameList;//[Offset: 0x558, Size: 0x10]
	bool bForceDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 0x1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56a, Size: 0x1]
	FName OwnerName;//[Offset: 0x570, Size: 0x8]
	uint32 OwnerUniqueID;//[Offset: 0x578, Size: 0x4]
	float OwnerTime;//[Offset: 0x57c, Size: 0x4]
	bool bUseAttachedRelLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	Vector AttachedRelLoc;//[Offset: 0x584, Size: 0xc]
	Actor* AttachedActor;//[Offset: 0x590, Size: 0x8]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x598, Size: 0x10]
	bool bForceRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 0x1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a9, Size: 0x1]
	float TrainingModePickUpColdCD;//[Offset: 0x5ac, Size: 0x4]
	float PickUpColdCountDown;//[Offset: 0x5b0, Size: 0x4]
	float TrainingModeDropLifeTime;//[Offset: 0x5d8, Size: 0x4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 0x1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x5e0, Size: 0x4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x5e8, Size: 0x8]
	FString ItemValue;//[Offset: 0x5f0, Size: 0x10]
	FString ItemCategory;//[Offset: 0x600, Size: 0x10]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 0x1]
	int OverridePickupRule;//[Offset: 0x614, Size: 0x4]
	delegate OnWrapperPickedUp;//[Offset: 0x620, Size: 0x10]
	StaticMeshComponent* PickupMesh;//[Offset: 0x638, Size: 0x8]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x640, Size: 0x8]
	int ObjectPoolSize;//[Offset: 0x648, Size: 0x4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 0x1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64d, Size: 0x1]
	int InBoxEffectDurationTime;//[Offset: 0x650, Size: 0x4]
	FString EffectPath;//[Offset: 0x658, Size: 0x10]
	FString DurationTime;//[Offset: 0x668, Size: 0x10]
	int ItemId;//[Offset: 0x678, Size: 0x4]
	Color DefaultColor;//[Offset: 0x67c, Size: 0x4]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1]
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x690, Size: 0x80]
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x710, Size: 0x80]
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x790, Size: 0x8]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x7e0, Size: 0x8]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x7f0, Size: 0x18]
	UAENetDriver* NetDriver;//[Offset: 0x808, Size: 0x8]
	int SpotDataIndex;//[Offset: 0x820, Size: 0x4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 0x1]
	int DropGroupID;//[Offset: 0x83c, Size: 0x4]
	Vector DropStartLocation;//[Offset: 0x840, Size: 0xc]
	void UpdateAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x5fcff70
	FString ToDetailString();// 0x5fcfec4
	void ShowMesh(bool bShow);// 0x5fcfe40
	void ShowActor();// 0x5fcfe2c
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x5fcfce4
	void SetDefineIDWhenDroped(out const ItemDefineID DID);// 0x5fcfc54
	void SetDefineID(out const ItemDefineID DID);// 0x5fcfbc4
	void SetCountOnServerAfterSpawn(int _Count);// 0x5fcfb48
	void SetActorToGround(Actor* IgnoreActor);// 0x5fcfa98
	void ServerResetShowActor();// 0x5fcfa84
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x5fcf948
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);// 0x5fcf898
	void RegisterToCurveAnimComponent();// 0x5fcf884
	void PickUpWrapperShow__DelegateSignature();// 0x70644c4
	void PickUpWrapperHide__DelegateSignature(float InRefreshTimeStamp);// 0x70644c4
	void OnWrapperPickedDelegate__DelegateSignature();// 0x70644c4
	void OnSpawned();// 0x5fcf868
	void OnRespawnedEvent();// 0x5fcf84c
	void OnRep_PickUpColdCountDown();// 0x5fcf838
	void OnRep_OwnerUniqueID();// 0x5fcf824
	void OnRep_Owner();// 0x5fcf808
	void OnRep_DropGroundEffectInfo();// 0x5fcf7f4
	void OnRep_DefindID();// 0x5fcf7e0
	void OnRep_Count();// 0x5fcf7c4
	void OnRep_AttachmentReplication();// 0x5fcf7a8
	void OnRep_AttachedActor();// 0x5fcf794
	void OnLoadDropEffectFinish(DropGroundEffectInfo effectInfo);// 0x5fcf608
	void OnHideActor(bool bHide);// 0x5fcf57c
	void OnDestroyed();// 0x5fcf560
	void OnActorDestroyed();// 0x5fcf544
	int MoveWrapperContainsAttachment(enum AttachmentAdditionalDataType);// 0x5fcf4b0
	void ModifyData(int _Count);// 0x5fcf434
	void MarkPlayerPlayerInfoByDropped(STExtraBaseCharacter* InDroppedPlayer);// 0x5fcf3b8
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget);// 0x5fcf2f0
	bool LoadDynamicMeshInst(StaticMesh* InStaticMesh);// 0x5fcf260
	bool LoadDynamicMesh(FString MeshPath);// 0x5fcf1a4
	bool LoadDynamicMaterialInst(MaterialInstance* InMaterialInst);// 0x5fcf114
	bool LoadDynamicMaterial(FString MaterialPath);// 0x5fcf058
	bool IsCanPickup(out const ItemDefineID InItemID, STExtraBaseCharacter* InFirstPlayer);// 0x5fcef6c
	void InitData(ItemSpotSceneComponent* Component, int ItemCount, FString Value, FString Category, bool RepeatGenerateItem);// 0x5fcec80
	int HasWrapperContainsAttachment(enum AttachmentAdditionalDataType);// 0x5fcebec
	StaticMeshComponent* GetPickupMesh();// 0x5fcebb8
	int GetNetGUIDOffsetValue();// 0x5fceb84
	int GetItemType();// 0x5fceb48
	uint64 GetItemInstanceId();// 0x5fceb14
	int GetItemId();// 0x5fcead8
	bool GetHasBeenPickedUp();// 0x5fcea98
	PickUpItemData[] GetDataList();// 0x5fcea2c
	void ForceNetUpdate();// 0x5fcea10
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x5fce8dc
	void ColdTimeCountDown();// 0x5fce8c8
	void ClientResetShowActor();// 0x5fce8b4
	bool CheckPickUpDataIsWeapon();// 0x5fce87c
	bool CanBePickedUp(STExtraBaseCharacter* InTryPickUpPlayer);// 0x5fce7e4
	void BroadcastResetShowActor();// 0x5fce784
	void BroadcastDataToAllClients(int Count_New);// 0x5fce6d4
	void AsyncLoadPickUpEffectDone(bool bFirstCreate);// 0x5fce650
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x5fce47c
<----------Generated by SSpawner v1.0.4---------->


Class: UAENetActor.LuaActor.Actor.Object
	int iRegionActor;//[Offset: 0x4c8, Size: 0x4]
	bool bStaticAddNetworkActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ce, Size: 0x1]
	byte AutoDormancyType;//[Offset: 0x4cf, Size: 0x1]
	void ReceivedPlayerActiveRegionsChanged(bool bEnter);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 0x18]
	int Count;//[Offset: 0x18, Size: 0x4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x20, Size: 0x10]
	int InstanceID;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PickUpDataComponent.ActorComponent.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x118, Size: 0x10]
	void OnRep_PickUpDataList();// 0x5fc9ba0
<----------Generated by SSpawner v1.0.4---------->


Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x2e4, Size: 0x4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	byte SpotGroupType;//[Offset: 0x2ea, Size: 0x1]
	float RepeatGenerateItemCD;//[Offset: 0x2ec, Size: 0x4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2f0, Size: 0x8]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x2f8, Size: 0x10]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x308, Size: 0x8]
	<FString,int> CacheItemValeCategory;//[Offset: 0x310, Size: 0x50]
	Actor*[] CacheItems;//[Offset: 0x360, Size: 0x10]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x68f4dfc
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x68f4d50
	bool GenerateSpot();// 0x68f4d10
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x68f4c0c
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x68f49fc
	int CountCacheItemValeCategory();// 0x68f49c8
	void ClearCacheItems();// 0x68f49b4
<----------Generated by SSpawner v1.0.4---------->


Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x2c9, Size: 0x1]
	int ID;//[Offset: 0x2cc, Size: 0x4]
	int WorldCompositionID;//[Offset: 0x2d0, Size: 0x4]
	float HalfHeight;//[Offset: 0x2d4, Size: 0x4]
	int SpotProbability;//[Offset: 0x2d8, Size: 0x4]
	float LineOffsetZ;//[Offset: 0x2dc, Size: 0x4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1]
	void SetSpotValid(bool Valid);// 0x6908104
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x6907e4c
	bool IsSpotValid();// 0x6907e0c
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x6907c80
	bool GenerateSpot();// 0x6907c40
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod);// 0x6907ad0
<----------Generated by SSpawner v1.0.4---------->


Class: ItemSceneComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x2d8, Size: 0xc]
	byte BornIslandGroupType;//[Offset: 0x2e4, Size: 0x1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x2e8, Size: 0x110]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x3f8, Size: 0x50]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x448, Size: 0x10]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 0x1]
	FString[] AreaIDList;//[Offset: 0x460, Size: 0x10]
	ItemRegionCircle[] ReplacedGeneratorRegionMap;//[Offset: 0x470, Size: 0x10]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x480, Size: 0x10]
	ExtraItemSpawn[] ExtraSpawnItemsList;//[Offset: 0x490, Size: 0x10]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x4a0, Size: 0x50]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x4f0, Size: 0x28]
	CurveFloat* SpotRateCurve;//[Offset: 0x518, Size: 0x8]
	CurveFloat* ItemRateCurve;//[Offset: 0x520, Size: 0x8]
	<FString,float> CategoryRates;//[Offset: 0x528, Size: 0x50]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x578, Size: 0x50]
	Actor*[] BornIslandItems;//[Offset: 0x5c8, Size: 0x10]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x5d8, Size: 0x10]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 0x1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e9, Size: 0x1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ea, Size: 0x1]
	DateTime GenerateBornIslandTime;//[Offset: 0x5f0, Size: 0x8]
	DateTime GenerateMainlandTime;//[Offset: 0x5f8, Size: 0x8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x658, Size: 0x10]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x678, Size: 0x10]
	FString CookedBandFilePath;//[Offset: 0x6d8, Size: 0x10]
	bool bIsAreaItemLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 0x1]
	AreaItemsLimitEdit[] AreaItemsLimit;//[Offset: 0x740, Size: 0x10]
	<RegionID,AreaItemsLimit> AreaItemsLimitMaps;//[Offset: 0x750, Size: 0x50]
	int DSSwitchSyncLoadId;//[Offset: 0x7a0, Size: 0x4]
	bool bUseDynamicSpotConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 0x1]
	DynamicSpotConfig[] DynamicSpotConfigs;//[Offset: 0x7a8, Size: 0x10]
	bool bEnablePreCalculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 0x1]
	int RandomSpotCountPerTick;//[Offset: 0x80c, Size: 0x4]
	delegate PreCalculateCompleted;//[Offset: 0x860, Size: 0x10]
	bool bCheckPreCalculateComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	bool bEnablePrimeItemCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x871, Size: 0x1]
	PrimeItemCircleConfig[] PrimeItemCircleConfigs;//[Offset: 0x878, Size: 0x10]
	<Vector,UAESpotGroupObject*> SpotGroupObjectsMapByLoc;//[Offset: 0x8b8, Size: 0x50]
	bool bRemovableMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a9, Size: 0x1]
	int RemoveGeneratedItemPerTick;//[Offset: 0x9ac, Size: 0x4]
	int RemoveDropGroundItemPerTick;//[Offset: 0x9b0, Size: 0x4]
	bool bAddHouseActorSerializeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 0x1]
	void WriteItemSpotStatisticsDatas();// 0x68edbc8
	void WriteItemClassStatisticsDatas_V15();// 0x68edbb4
	void WriteItemClassStatisticsDatas();// 0x68edba0
	void WriteGroupStatisticsDatas();// 0x68edb8c
	void WriteBuildingStatisticsDatas();// 0x68edb78
	void WriteAreaItemStatisticsDatas();// 0x68edb64
	void WriteAllStatisticsDatasToLog();// 0x68edb48
	void WriteAllStatisticsDatas();// 0x68edb2c
	void SetRandomSeed(int Seed);// 0x68edab0
	void SetCatetoryRate(<FString,float> Rates);// 0x68ed958
	bool RemoveSpotInfo(bool bFirstEnterState);// 0x68ed8c0
	void RemoveItemOnTick();// 0x68ed8ac
	bool RemoveDropGround(bool bFirstEnterState);// 0x68ed814
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x68ed74c
	void RegisterBornIslandItem(Actor* Item);// 0x68ed6c8
	UAEDataTable* ReadItemGenerateTable(FString TablePath);// 0x68ed58c
	void ReAddAllSpot();// 0x68ed578
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x68ed3e8
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x68ed2d8
	void RandomBornIslandGroups();// 0x68ed2bc
	void OnAsyncLoadItemClassFinish(class Actor ActorClassPtr, ItemGenerateSpawnClass SpawnClass);// 0x68ed0bc
	void LuaCustomFunctionAfterGenerate(out ItemGenerateSpawnClass SpawnClass, Actor* ItemActor);// 0x68ecf7c
	bool LuaAddRandomItemClassArray(ItemGenerateSpawnClass SpawnClass);// 0x68ece60
	void LoadItemGenerateTable();// 0x68ece44
	bool IsCatetoryEnabled();// 0x68ece0c
	void InitCatetorys();// 0x68ecdf8
	void InitCategoryEx();// 0x68ecde4
	Vector[] GMTrackGroundCheck(class Object CheckClass, float FloatUp, float FloatDown, float SinkUp, float SinkTop, bool bCheckBounds);// 0x68ecbc4
	bool GMGenerateAllSpot(FString ItemPath);// 0x68eca84
	void GMEnableRefreshAllSpotWithSeed(int Seed);// 0x68eca08
	FString[] GetSpotTags();// 0x68ec8d8
	Vector[] GetSpotLocsByTag(FString ExTag);// 0x68ec7bc
	int GetSpotLocInPolygon(Vector[] Anchors, out Vector[] OutLocs, int RandomNum);// 0x68ec5c0
	int GetSpotLocInCircle(Vector Center, int Radius, out Vector[] OutLocs, int RandomNum);// 0x68ec43c
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x68ec2f0
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem, ItemSpotSceneComponent* SpotComponent);// 0x68ec058
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x68ebecc
	int GetItemDefineID(class Object PickUpClass);// 0x70644c4
	float GetCatetoryRate(FString Catetory);// 0x68ebe14
	void GenerateSpotOnTick(float DeltaTime);// 0x68ebd90
	void GenerateNewRandomSeed();// 0x68ebd7c
	Vector FindASpawnLoc(World* InWorld, const Vector TraceStart);// 0x68ebcb0
	void EnableRemoveItem();// 0x68ebc9c
	void EnableRefreshAllSpot();// 0x68ebc88
	void EnablePrimeItemPolygon(Vector[] Anchors, int PrimeConfigIndex);// 0x68ebb14
	void EnablePrimeItemCircle(Vector Center, int Radius, int PrimeConfigIndex);// 0x68eba24
	void EnableDynamicSpotConfigByIndex(int DynamicIndex);// 0x68eb9a8
	void DoPickUp(int ItemSpotDataIndex, FString Value, FString Category);// 0x68eb854
	void DeleteBornIslandItems();// 0x68eb840
	bool CheckShouldGenerateItem(int ItemId);// 0x68eb7a8
	void CheckRecoverItems();// 0x68eb794
	bool CheckInPolygon(out const Vector pos, out const Vector[] Anchors);// 0x68eb678
	bool CheckInCircle(out const Vector pos, out const Vector Center, out int Radius);// 0x68eb538
	void AddIgnoreItemClassPath(out const FString[] IgnoreItemClassList);// 0x68eb424
	void AddDropGround(Actor* InActor);// 0x68eb3a8
<----------Generated by SSpawner v1.0.4---------->


Class: BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 0x1]
	int GenerateSpotCountPerTick;//[Offset: 0x1d4, Size: 0x4]
	FString ItemTableName;//[Offset: 0x1d8, Size: 0x10]
	FString[] ItemSpawnTableList;//[Offset: 0x1e8, Size: 0x10]
	UAEDataTable* ItemTable;//[Offset: 0x1f8, Size: 0x8]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0x208, Size: 0x50]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x258, Size: 0x10]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x268, Size: 0x50]
	FString CookedFilePath;//[Offset: 0x2b8, Size: 0x10]
	FString[] CookedFileAddPathArray;//[Offset: 0x2c8, Size: 0x10]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x68bc5f8
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x68bc574
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x68bc4f0
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x68bc364
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x68bc2a8
	void GenerateSpots();// 0x68bc28c
	void GenerateSpotOnTick(float DeltaTime);// 0x68bc208
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x68bbfd0
	void CheckTileLevelsVisible();// 0x68bbfbc
<----------Generated by SSpawner v1.0.4---------->


Class: ItemActorComponent.LuaActorComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: UAEDataTable.DataTable.Object
	<FString,Property*> NameToProperty;//[Offset: 0xb0, Size: 0x50]
	bool SetTableData_String(FString KeyValue, FString TagName, FString Value);// 0x8f7fe84
	bool SetTableData_Int32(FString KeyValue, FString TagName, int Value);// 0x8f7fd24
	bool SetTableData_Float(FString KeyValue, FString TagName, float Value);// 0x8f7fbc4
	FString GetTableName();// 0x8f7fb20
	FString GetRealTableName(FString tableName);// 0x8f7fa04
	bool ConditionAddEmptyRow(out const FName RowName);// 0x8f7f964
<----------Generated by SSpawner v1.0.4---------->


Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ScriptStruct.Struct.Field.Object
<----------Generated by SSpawner v1.0.4---------->


Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0, Size: 0x1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x2c9, Size: 0x1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca, Size: 0x1]
	int WorldCompositionID;//[Offset: 0x2cc, Size: 0x4]
	float LastGenerateItemTime;//[Offset: 0x2d0, Size: 0x4]
	float GenerateItemTimeCD;//[Offset: 0x2d4, Size: 0x4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	void SetGroupValid(bool Valid);// 0x68e7eb8
	bool IsValidGroup();// 0x68e7e78
	int FindWorldCompositionID();// 0x68e7e44
	void DoPickUp();// 0x68e7e30
<----------Generated by SSpawner v1.0.4---------->


Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0, Size: 0x4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SpotWeight
	FString Name;//[Offset: 0x0, Size: 0x10]
	int Weight;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0, Size: 0x4]
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 0x4]
	int AllSpotCount;//[Offset: 0x8, Size: 0x4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 0x4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 0x50]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x60, Size: 0x50]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0xb0, Size: 0x50]
	AreaItemStatisticsData[] AreaItemStatisticsData;//[Offset: 0x100, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x8, Size: 0x1]
	int AllGroupSpotCount;//[Offset: 0xc, Size: 0x4]
	int AllValidGroupSpotCount;//[Offset: 0x10, Size: 0x4]
	int AllSpotCount;//[Offset: 0x14, Size: 0x4]
	int AllValidSpotCount;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TableRowBase
<----------Generated by SSpawner v1.0.4---------->


Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x8, Size: 0x10]
	float BuildingLocationX;//[Offset: 0x18, Size: 0x4]
	float BuildingLocationY;//[Offset: 0x1c, Size: 0x4]
	int AllGroupSpotCount;//[Offset: 0x20, Size: 0x4]
	int AllValidGroupSpotCount;//[Offset: 0x24, Size: 0x4]
	int AllSpotCount;//[Offset: 0x28, Size: 0x4]
	int AllValidSpotCount;//[Offset: 0x2c, Size: 0x4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x30, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x8, Size: 0x1]
	int AllSpotCount;//[Offset: 0xc, Size: 0x4]
	int AllValidSpotCount;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemClassStatisticsData.TableRowBase
	FString ItemPath;//[Offset: 0x8, Size: 0x10]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int ItemCount;//[Offset: 0x1c, Size: 0x4]
	FString ItemTogetherPath;//[Offset: 0x20, Size: 0x10]
	int ItemTogetherCount;//[Offset: 0x30, Size: 0x4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AreaItemStatisticsData.TableRowBase
	FString ItemName;//[Offset: 0x8, Size: 0x10]
	int UID;//[Offset: 0x18, Size: 0x4]
	int ItemId;//[Offset: 0x1c, Size: 0x4]
	int GroupType;//[Offset: 0x20, Size: 0x4]
	int SpotType;//[Offset: 0x24, Size: 0x4]
	FString AreaName;//[Offset: 0x28, Size: 0x10]
	Vector Location;//[Offset: 0x38, Size: 0xc]
	float X;//[Offset: 0x44, Size: 0x4]
	float Y;//[Offset: 0x48, Size: 0x4]
	int GameTime;//[Offset: 0x4c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0, Size: 0x1]
	int SpotGroupPercent;//[Offset: 0x4, Size: 0x4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 0x10]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float RepeatGenerateItemCDMin;//[Offset: 0x1c, Size: 0x4]
	float RepeatGenerateItemCDMax;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0, Size: 0x1]
	int SpotPercentMin;//[Offset: 0x4, Size: 0x4]
	int SpotPercentMax;//[Offset: 0x8, Size: 0x4]
	int SpotPercentDot;//[Offset: 0xc, Size: 0x4]
	int ItemPerSpotMin;//[Offset: 0x10, Size: 0x4]
	int ItemPerSpotMax;//[Offset: 0x14, Size: 0x4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x18, Size: 0x10]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemRegionCircle
	Vector Center;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
	float RadiusSquared2D;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ExtraItemSpawn
	int SpawnPercent;//[Offset: 0x0, Size: 0x4]
	FString SpawnItemValue;//[Offset: 0x8, Size: 0x10]
	FString SpawnItemCategory;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0, Size: 0x10]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 0x4]
	FString ItemValue;//[Offset: 0x8, Size: 0x10]
	FString ItemCategory;//[Offset: 0x18, Size: 0x10]
	int ItemWeight;//[Offset: 0x28, Size: 0x4]
	FString ItemPath;//[Offset: 0x30, Size: 0x10]
	int ItemStackCount;//[Offset: 0x40, Size: 0x4]
	FString ItemTogetherPath;//[Offset: 0x48, Size: 0x10]
	int ItemTogetherStackCount;//[Offset: 0x58, Size: 0x4]
	int ItemTogetherCountMin;//[Offset: 0x5c, Size: 0x4]
	int ItemTogetherCountMax;//[Offset: 0x60, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2e0, Size: 0x8]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x2e8, Size: 0x10]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x2f8, Size: 0x10]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x68f4388
	void RepeatSpots();// 0x68f4374
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x68f42f8
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x68f4188
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x68f405c
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x68f3f44
<----------Generated by SSpawner v1.0.4---------->


Class: DateTime
<----------Generated by SSpawner v1.0.4---------->


Class: RepeatItemSpotData
	float RepeatGenerateCD;//[Offset: 0xb8, Size: 0x4]
	int64 LastGenerateItemTime;//[Offset: 0xc0, Size: 0x8]
	<FString,int> CacheItemValeCategory;//[Offset: 0xc8, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0, Size: 0x4]
	class Object* ItemClass;//[Offset: 0x8, Size: 0x8]
	FString ItemPath;//[Offset: 0x10, Size: 0x10]
	int ItemCount;//[Offset: 0x20, Size: 0x4]
	FString MetaData;//[Offset: 0x28, Size: 0x10]
	FString ItemValue;//[Offset: 0x38, Size: 0x10]
	FString ItemCategory;//[Offset: 0x48, Size: 0x10]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool IsNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	Vector SpotGenerateLoc;//[Offset: 0x5c, Size: 0xc]
	Vector SpotGroupLoc;//[Offset: 0x68, Size: 0xc]
	Rotator SpotRotator;//[Offset: 0x74, Size: 0xc]
	int SpotPercent;//[Offset: 0x80, Size: 0x4]
	FString SpotDefaultTag;//[Offset: 0x88, Size: 0x10]
	Actor* HostActor;//[Offset: 0xa0, Size: 0x8]
	Actor* AttachedActor;//[Offset: 0xa8, Size: 0x8]
	int SpotIndex;//[Offset: 0xc4, Size: 0x4]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	Vector RelativeLoc;//[Offset: 0xcc, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: AreaItemsLimitEdit
	int AreaX;//[Offset: 0x0, Size: 0x4]
	int AreaY;//[Offset: 0x4, Size: 0x4]
	GenerateItemLimit[] ItemsMaxLimitEdit;//[Offset: 0x8, Size: 0x10]
	GenerateItemLimit[] ItemsMinLimitEdit;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GenerateItemLimit
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int ItemNum;//[Offset: 0x4, Size: 0x4]
	FString WrapperPath;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RegionID
<----------Generated by SSpawner v1.0.4---------->


Class: AreaItemsLimit
	RegionID RegionID;//[Offset: 0x0, Size: 0xc]
	bool IsBeginGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool IsCheckRecoverItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	Vector[] AvailablePosi;//[Offset: 0x10, Size: 0x10]
	<int,AreaItemsNum> ItemsMaxLimit;//[Offset: 0x20, Size: 0x50]
	<int,AreaItemsNum> ItemsMinLimit;//[Offset: 0x70, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: AreaItemsNum
	int LimitNum;//[Offset: 0x0, Size: 0x4]
	int CurNum;//[Offset: 0x4, Size: 0x4]
	FString WrapperPath;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicSpotConfig
	FString Comment;//[Offset: 0x0, Size: 0x10]
	bool bDefaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString DynamicSpotPath;//[Offset: 0x18, Size: 0x10]
	CustomSpotConfig CustomSpotConfig;//[Offset: 0x28, Size: 0x1c]
	SpotGroupProperty[] SpotGroupProperties;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CustomSpotConfig
	bool bGenerateAtBeginning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	int NeedGroupMin;//[Offset: 0x4, Size: 0x4]
	int NeedGroupMax;//[Offset: 0x8, Size: 0x4]
	bool bSpotPerGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int NeedSpotPerGroupMin;//[Offset: 0x10, Size: 0x4]
	int NeedSpotPerGroupMax;//[Offset: 0x14, Size: 0x4]
	bool bUseCookedRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bOverrideNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PrimeItemCircleConfig
	SpotGroupProperty[] PrimeItemCircleProperties;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UAESpotGroupObject.Object
	Object* Host;//[Offset: 0x80, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DropGroundEffectInfo
	float GroundEffectLifeSpan;//[Offset: 0x0, Size: 0x4]
	Transform EffectTransform;//[Offset: 0x10, Size: 0x30]
	ParticleSystem* GroundEffect;//[Offset: 0x40, Size: 0x28]
	FString EffectPath;//[Offset: 0x68, Size: 0x10]
	bool bShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bEffectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: UAENetDriver.IpNetDriver.NetDriver.Object
	float NetCullChangeTime;//[Offset: 0x698, Size: 0x4]
	bool bEnableCollectNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1]
	bool bEnableResetNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f0, Size: 0x1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f0, Size: 0x1]
	uint32 MaxPortCountToTry;//[Offset: 0x5f4, Size: 0x4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x610, Size: 0x4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x614, Size: 0x4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x618, Size: 0x4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x61c, Size: 0x4]
	float RecreateSocketCooldownTime;//[Offset: 0x680, Size: 0x4]
	float RecreateSocketMaxTryCount;//[Offset: 0x684, Size: 0x4]
	bool bResolveRemoteHostOnRecreateSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	bool bContinueProcessWhenReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 0x1]
	bool bContinueProcessWhenConReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68a, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AirDropBoxGenerateWrapperItemData
	class Actor* WrapperClass;//[Offset: 0x0, Size: 0x8]
	int Count;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ExtraDamageInfo
	int DamageTypeId;//[Offset: 0x0, Size: 0x4]
	int DamageItemID;//[Offset: 0x4, Size: 0x4]
	enum DamagePosition;//[Offset: 0x8, Size: 0x1]
	bool DamageToDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool DamageToDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x2cc, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x2d0, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x2dc, Size: 0xc]
	float ProbeSize;//[Offset: 0x2e8, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x2ec, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ed, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ed, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ed, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ed, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ed, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ed, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ed, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ed, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ee, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x2f0, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x2f4, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x2f8, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x2fc, Size: 0x4]
	void SetActive(bool bNewActive, bool bReset);// 0x8e593f8
	Rotator GetTargetRotation();// 0x8e593b8
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	STExtraAnimInstanceProxy Proxy;//[Offset: 0xb50, Size: 0x550]
	bool CanDumpThisAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a0, Size: 0x1]
	bool bEnableInitializeRecacheCustomAnimAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a3, Size: 0x1]
	Rotator OwnerAimRotation;//[Offset: 0x10a4, Size: 0xc]
	Rotator C_SightAngledRotOffset;//[Offset: 0x10b0, Size: 0xc]
	bool C_bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bc, Size: 0x1]
	bool C_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bd, Size: 0x1]
	bool C_SkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10be, Size: 0x1]
	bool C_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bf, Size: 0x1]
	bool C_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c0, Size: 0x1]
	bool C_ReloadProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c1, Size: 0x1]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c2, Size: 0x1]
	bool C_IsGrenadeModeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c3, Size: 0x1]
	Rotator SwimRotate;//[Offset: 0x10c4, Size: 0xc]
	bool C_ShouldIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 0x1]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d1, Size: 0x1]
	bool C_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d2, Size: 0x1]
	float C_SwimSpeed;//[Offset: 0x10d4, Size: 0x4]
	float C_ProneHandleAlpha;//[Offset: 0x10d8, Size: 0x4]
	bool C_IsLeanOutVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10dc, Size: 0x1]
	float LeftHandShouldNotIKAlpha;//[Offset: 0x10e0, Size: 0x4]
	float LeftHandIKAlpha;//[Offset: 0x10e4, Size: 0x4]
	bool C_SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e8, Size: 0x1]
	bool C_IsCrouchingOrMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e9, Size: 0x1]
	bool bAllowRotWithCurStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ea, Size: 0x1]
	enum C_SeatSpecialType;//[Offset: 0x10eb, Size: 0x1]
	int WeaponReloadSlotIndex;//[Offset: 0x10ec, Size: 0x4]
	bool C_IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f0, Size: 0x1]
	bool C_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f1, Size: 0x1]
	bool C_IsMeleeAttacking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f2, Size: 0x1]
	float NeckTurnUILeftAngle;//[Offset: 0x10f4, Size: 0x4]
	float NeckTurnUIRightAngle;//[Offset: 0x10f8, Size: 0x4]
	float NeckTurnUIUPAngle;//[Offset: 0x10fc, Size: 0x4]
	float NeckTurnUIDownAngle;//[Offset: 0x1100, Size: 0x4]
	float NeckNotTurnAngle;//[Offset: 0x1104, Size: 0x4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0x1108, Size: 0x4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0x110c, Size: 0x4]
	float NeckMapAngleLeft;//[Offset: 0x1110, Size: 0x4]
	float NeckMapAngleRight;//[Offset: 0x1114, Size: 0x4]
	float NeckMapAngleUp;//[Offset: 0x1118, Size: 0x4]
	float NeckMapAngleDown;//[Offset: 0x111c, Size: 0x4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0x1120, Size: 0x4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0x1124, Size: 0x4]
	float NeckMapCrouchAngleLeft;//[Offset: 0x1128, Size: 0x4]
	float NeckMapCrouchAngleRight;//[Offset: 0x112c, Size: 0x4]
	float NeckMapCrouchAngleUp;//[Offset: 0x1130, Size: 0x4]
	float NeckMapCrouchAngleDown;//[Offset: 0x1134, Size: 0x4]
	float NeckTurnSpeed;//[Offset: 0x1138, Size: 0x4]
	enum C_ParachuteState;//[Offset: 0x113c, Size: 0x1]
	Rotator C_HeadRotOffset;//[Offset: 0x1140, Size: 0xc]
	Rotator DeltaViewOffset;//[Offset: 0x114c, Size: 0xc]
	Vector WeaponSwitchLocationCorrect;//[Offset: 0x1158, Size: 0xc]
	Rotator WeaponSwitchRotationCorrect;//[Offset: 0x1164, Size: 0xc]
	float EnableWeaponModifyAlpha;//[Offset: 0x1170, Size: 0x4]
	bool C_UseFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1174, Size: 0x1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1175, Size: 0x1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1176, Size: 0x1]
	bool C_IsObstructedAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1177, Size: 0x1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1178, Size: 0x1]
	float C_AimOffsetAdditiveAlpha;//[Offset: 0x117c, Size: 0x4]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1180, Size: 0x1]
	float C_HoldingShieldAlpha;//[Offset: 0x1184, Size: 0x4]
	float C_HoldingShieldAdditive;//[Offset: 0x1188, Size: 0x4]
	int[] DisableHandIKAndObstructedSkillID;//[Offset: 0x1190, Size: 0x10]
	AnimSequence* Anim_DefaultDriveVehiclePose;//[Offset: 0x11a0, Size: 0x8]
	bool bDefaultDriveVehiclePoseValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a8, Size: 0x1]
	BlendSpace* C_ObstructedAnim;//[Offset: 0x11b0, Size: 0x8]
	AnimSequence* C_ShieldAddtive;//[Offset: 0x11b8, Size: 0x8]
	AnimMontage* C_RevivalMontage;//[Offset: 0x11c0, Size: 0x8]
	BlendSpace* C_BSFreeFalling;//[Offset: 0x11c8, Size: 0x8]
	BlendSpace* C_BSFreeFalling_Turn;//[Offset: 0x11d0, Size: 0x8]
	AnimSequence* C_FreeFalling_Shake;//[Offset: 0x11d8, Size: 0x8]
	BlendSpace* C_BSParachute;//[Offset: 0x11e0, Size: 0x8]
	AnimSequence* C_ParachuteEnter;//[Offset: 0x11e8, Size: 0x8]
	AnimSequence* C_ParachuteLand;//[Offset: 0x11f0, Size: 0x8]
	AnimMontage* C_FreeFallingStartMontage;//[Offset: 0x11f8, Size: 0x8]
	BlendSpace* SwimAnim;//[Offset: 0x1200, Size: 0x8]
	BlendSpace* SwimUpAnim;//[Offset: 0x1208, Size: 0x8]
	BlendSpace* SwimDownAnim;//[Offset: 0x1210, Size: 0x8]
	BlendSpace* NearDeathSwimUpAnim;//[Offset: 0x1218, Size: 0x8]
	BlendSpace* NearDeathSwimDownAnim;//[Offset: 0x1220, Size: 0x8]
	bool bIsHelicoptorDirver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1229, Size: 0x1]
	Vector C_MoveDirExt;//[Offset: 0x122c, Size: 0xc]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0x1238, Size: 0xc]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0x1244, Size: 0xc]
	Rotator r_C_ComponentRotationRelToControlRotation;//[Offset: 0x1250, Size: 0xc]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125c, Size: 0x1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125d, Size: 0x1]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125e, Size: 0x1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125f, Size: 0x1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1260, Size: 0x1]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1261, Size: 0x1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1262, Size: 0x1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1263, Size: 0x1]
	bool b_C_ParachuteState_FreeFallShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1264, Size: 0x1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1265, Size: 0x1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1266, Size: 0x1]
	float DefaultLandCDTime;//[Offset: 0x1268, Size: 0x4]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1270, Size: 0x1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1271, Size: 0x1]
	bool b_C_LastMovementMode_NEQ_Falling_OR_HoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1272, Size: 0x1]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0x1274, Size: 0x4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0x1278, Size: 0x4]
	bool b_C_NotUseGeneralHeadAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127c, Size: 0x1]
	bool b_C_MoveVelocity_SightSlow_High;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127d, Size: 0x1]
	bool b_C_MoveVelocity_SightSlow_Low;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127e, Size: 0x1]
	bool b_C_DoingPickup_Or_DoingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127f, Size: 0x1]
	bool b_C_IsInFlyDeviceAnimType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1280, Size: 0x1]
	enum[] DisallowedEyeRotationWithHeadList;//[Offset: 0x1288, Size: 0x10]
	float C_LeanOut_AimAngle;//[Offset: 0x129c, Size: 0x4]
	float LeanOutL_AimAngle;//[Offset: 0x12a4, Size: 0x4]
	float LeanOutR_AimAngle;//[Offset: 0x12a8, Size: 0x4]
	bool bIsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ac, Size: 0x1]
	bool bAlwaysLandLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ad, Size: 0x1]
	bool bForcePlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d0, Size: 0x1]
	bool bEnableStanbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d2, Size: 0x1]
	bool bEnableArmedStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d3, Size: 0x1]
	float EnableArmedStandbyAnimPitchMin;//[Offset: 0x12d4, Size: 0x4]
	float EnableArmedStandbyAnimPitchMax;//[Offset: 0x12d8, Size: 0x4]
	float StandbyAnimTimeInterval;//[Offset: 0x12dc, Size: 0x4]
	enum[] StandbyAnimPawnStateExclusion;//[Offset: 0x12e0, Size: 0x10]
	int[] ColdGameModeIDList;//[Offset: 0x12f0, Size: 0x10]
	enum[] StandbyGameModeType;//[Offset: 0x1300, Size: 0x10]
	bool bIsPlayRandomAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1310, Size: 0x1]
	AnimMontage* CurStandbyAnimMontage;//[Offset: 0x1320, Size: 0x8]
	STExtraBaseCharacter* C_AttachParentCharacter;//[Offset: 0x1328, Size: 0x8]
	Vector C_AttachParentPawnMoveVelocity;//[Offset: 0x1330, Size: 0xc]
	bool b_C_CarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x133c, Size: 0x1]
	bool b_C_BeCarriedBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x133d, Size: 0x1]
	float f_C_CarryBackBSTimeAccumulator;//[Offset: 0x1340, Size: 0x4]
	float f_C_ParachuteNearDeathBSTimeAccumulator;//[Offset: 0x1344, Size: 0x4]
	AnimInstanceContainer* FeatureMoveAnimContainer;//[Offset: 0x1348, Size: 0x8]
	AnimInstanceContainer* FeatureNearDeathAnimContainer;//[Offset: 0x1350, Size: 0x8]
	AnimInstanceContainer* FeatureHitAnimContainer;//[Offset: 0x1358, Size: 0x8]
	bool bEnableAnimMoveContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1360, Size: 0x1]
	bool bEnableAnimHitContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1361, Size: 0x1]
	bool bEnableAnimNearDeathContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1362, Size: 0x1]
	bool bNeedDellFeatureAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1363, Size: 0x1]
	void TryToFireFlareGun();// 0x60f2d90
	void TryPlayStandbyAnim();// 0x60f2d7c
	bool ShouldDestoryParachuteAnimAsset();// 0x60f2d44
	void SetVelocityZFactor(float NewFactor);// 0x60f2cc8
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x60f2c08
	void PostCacheParamList(float DeltaSeconds);// 0x70644c4
	void PlayStandbyAnimAnyWay();// 0x60f2bec
	void PendingKillParachuteAnim(Object* InObject);// 0x60f2b70
	void OnEmoteAnimFinished(int EmoteIndex, int StopReason);// 0x60f2abc
	bool IsCastingAnyDisableHandIKAndObstructedSkill();// 0x60f2a84
	void InterrupteStandbyAnim(STExtraBaseCharacter* SelfRef);// 0x60f2a08
	void HandlePlayerPickUp();// 0x60f29ec
	void HandlePerspectiveChanged(bool IsFPP);// 0x60f2968
	FString[] GetAnimUngroupsEntry();// 0x60f2838
	FString[] GetAnimSyncGroupsEntry();// 0x60f2708
	void DumpAllProperties();// 0x60f26f4
	void DumpAllAnimInstancesInThisWorld();// 0x60f26e0
	void ClearStandbyAnimState();// 0x60f26c4
	void ClearParachuteAnimVars();// 0x60f26b0
	AnimParamList CacheParamList(float DeltaSeconds);// 0x60f2564
	void CacheParachuteAnimVars(bool bForceRefresh);// 0x60f24e0
	Object* CacheParachuteAnimVar_Internal(int ParachuteAnimType, class Object TargetClass);// 0x60f2418
	PlayerAnimList CacheAnimVarList();// 0x60f22e8
	void AsyncAnimStandbyCallback(AnimationAsset* RetAsset);// 0x60f226c
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	delegate OnMontageStoppedEvent;//[Offset: 0x480, Size: 0x10]
	bool bIsFPPAnimInstace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1]
	bool C_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 0x1]
	bool C_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493, Size: 0x1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	bool C_IsWeaponBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 0x1]
	bool C_Scoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x496, Size: 0x1]
	bool bLowerArmBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x497, Size: 0x1]
	bool C_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	bool C_IsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 0x1]
	bool C_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 0x1]
	bool bDisableTurnPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49b, Size: 0x1]
	bool C_ShouldPlayTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	bool C_ShouldSlowMoveAnimX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49d, Size: 0x1]
	bool C_ShouldSlowMoveAnimY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49e, Size: 0x1]
	bool C_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49f, Size: 0x1]
	bool C_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	bool C_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 0x1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a2, Size: 0x1]
	bool C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a3, Size: 0x1]
	bool C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5, Size: 0x1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a6, Size: 0x1]
	bool b_C_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a7, Size: 0x1]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 0x1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4aa, Size: 0x1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ab, Size: 0x1]
	bool C_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 0x1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad, Size: 0x1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ae, Size: 0x1]
	bool b_WeaponState_NEQ_LeftHandSwitchWeaponWhenStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4af, Size: 0x1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 0x1]
	bool C_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 0x1]
	bool C_EnableForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b2, Size: 0x1]
	bool b_P_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b3, Size: 0x1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 0x1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 0x1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b6, Size: 0x1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b7, Size: 0x1]
	bool C_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 0x1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 0x1]
	bool bWalkToJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bb, Size: 0x1]
	bool bJumpStartToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 0x1]
	bool bFallingToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bd, Size: 0x1]
	bool b_C_WithoutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4be, Size: 0x1]
	bool b_C_ChangeMovementAndNotSwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bf, Size: 0x1]
	bool b_C_EmptyToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	bool b_C_EmptyToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 0x1]
	bool b_C_EmptyToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c2, Size: 0x1]
	bool b_C_StandToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c3, Size: 0x1]
	bool b_C_StandToCrouchNotMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 0x1]
	bool b_C_StandToCrouchOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c5, Size: 0x1]
	bool b_C_StandTo_StandToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c6, Size: 0x1]
	bool b_C_StandTo_StandToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c7, Size: 0x1]
	bool b_C_CrouchToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	bool b_C_CrouchToStandNotMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 0x1]
	bool b_C_CrouchToStandOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ca, Size: 0x1]
	bool b_C_CrouchTo_CrouchToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cb, Size: 0x1]
	bool b_C_CrouchTo_CrouchToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 0x1]
	bool b_C_ProneToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 0x1]
	bool b_C_ProneToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ce, Size: 0x1]
	bool b_C_ProneTo_ProneToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cf, Size: 0x1]
	bool b_C_ProneTo_ProneToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
	bool b_C_ProneToStand_ToStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 0x1]
	bool b_C_StandToProne_ToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d2, Size: 0x1]
	bool b_C_CrouchToProne_ToProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d3, Size: 0x1]
	bool b_C_ProneToCrouch_ToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]
	Rotator r_C_ShovelRotator;//[Offset: 0x4d8, Size: 0xc]
	bool b_C_MoveTurnNoScopeNoPickupNoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 0x1]
	bool b_C_ShovelScopeAndAutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 0x1]
	Vector r_C_AimOffsetTranslation;//[Offset: 0x4e8, Size: 0xc]
	Rotator r_C_AimOffsetRotator;//[Offset: 0x4f4, Size: 0xc]
	bool b_C_NearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	bool b_C_NearDeathOnFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 0x1]
	bool b_C_NearDeathInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x502, Size: 0x1]
	bool b_C_FreeFallViewOffet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x503, Size: 0x1]
	bool b_C_FreeFallControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1]
	bool b_C_FreefallingToParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 0x1]
	bool b_C_FreefallingToParachuteEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x506, Size: 0x1]
	bool b_C_State1_To_NeathDeath_Parchute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x507, Size: 0x1]
	bool b_C_State1_To_NeathDeath_Enter_Parchute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	bool b_C_NeathDeath_Parchute_To_State1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 0x1]
	byte C_LODLevel;//[Offset: 0x50a, Size: 0x1]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0x50c, Size: 0x4]
	float C_SightSlowBlendStandBaseAlpha;//[Offset: 0x510, Size: 0x4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x518, Size: 0xc]
	float MoveVelocityLength2D;//[Offset: 0x524, Size: 0x4]
	byte C_PoseType;//[Offset: 0x528, Size: 0x1]
	byte C_LastMovementMode;//[Offset: 0x529, Size: 0x1]
	byte C_CustomMovementMode;//[Offset: 0x52a, Size: 0x1]
	byte C_WeaponType;//[Offset: 0x52b, Size: 0x1]
	byte C_WeaponHoldType;//[Offset: 0x52c, Size: 0x1]
	byte C_WeaponState;//[Offset: 0x52d, Size: 0x1]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52e, Size: 0x1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x530, Size: 0x4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 0x1]
	bool b_C_WeaponState_EQ_PreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x535, Size: 0x1]
	bool C_IsReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x536, Size: 0x1]
	bool C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x537, Size: 0x1]
	enum C_VehicleType;//[Offset: 0x538, Size: 0x1]
	bool C_IsShoudlerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x539, Size: 0x1]
	float C_IsReloadAnimAdditive_Alpha;//[Offset: 0x53c, Size: 0x4]
	float C_ReloadAnimAdditiveSpeed;//[Offset: 0x540, Size: 0x4]
	float C_CharacterYawRotateRate;//[Offset: 0x544, Size: 0x4]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0x548, Size: 0x4]
	float C_MaxFallingSpeed;//[Offset: 0x54c, Size: 0x4]
	float C_FireAlpha;//[Offset: 0x550, Size: 0x4]
	float b_WalkAdditiveAlpha;//[Offset: 0x554, Size: 0x4]
	float f_FallingVelocityZFactor;//[Offset: 0x558, Size: 0x4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0x55c, Size: 0x4]
	float PeekFrameRate;//[Offset: 0x560, Size: 0x4]
	float PeekSpeed;//[Offset: 0x564, Size: 0x4]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x568, Size: 0x4]
	float C_ForegripAnimParam;//[Offset: 0x56c, Size: 0x4]
	float C_HandleFolderFactor;//[Offset: 0x570, Size: 0x4]
	float C_HandleFolderAlphaLerp;//[Offset: 0x574, Size: 0x4]
	float C_HandleFolderAlphaTarget;//[Offset: 0x578, Size: 0x4]
	float C_HandleFolderAlphaSpeed;//[Offset: 0x57c, Size: 0x4]
	float MoveDirParachuteLerpSpeed;//[Offset: 0x580, Size: 0x4]
	float MoveDirNormalLerpSpeed;//[Offset: 0x584, Size: 0x4]
	float ScopeVelocityInterpSpeed;//[Offset: 0x588, Size: 0x4]
	Vector C_MoveVelocity;//[Offset: 0x590, Size: 0xc]
	Vector C_MoveInputVelocity;//[Offset: 0x59c, Size: 0xc]
	Vector C_MoveInputVelocityUnit;//[Offset: 0x5a8, Size: 0xc]
	Vector C_MoveDir;//[Offset: 0x5b4, Size: 0xc]
	Vector C_HurtDir;//[Offset: 0x5c0, Size: 0xc]
	Vector C_FirstAnimSpine_StandAndCrouch;//[Offset: 0x5cc, Size: 0xc]
	Vector C_FirstAnimSpine_Prone;//[Offset: 0x5d8, Size: 0xc]
	Vector C_FPPStandOffsetLocation;//[Offset: 0x5e4, Size: 0xc]
	Vector ScopeAimSpine03TranslationModify;//[Offset: 0x5f0, Size: 0xc]
	Rotator ScopeAimSpine03RotationModifiy;//[Offset: 0x5fc, Size: 0xc]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0x608, Size: 0xc]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0x614, Size: 0xc]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0x620, Size: 0xc]
	Rotator C_OwnerRotation;//[Offset: 0x62c, Size: 0xc]
	Rotator C_ControlRotation;//[Offset: 0x638, Size: 0xc]
	Rotator C_LastControlRotation;//[Offset: 0x644, Size: 0xc]
	Rotator C_ViewRotation;//[Offset: 0x650, Size: 0xc]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0x65c, Size: 0xc]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0x668, Size: 0xc]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0x674, Size: 0xc]
	Rotator RecoilADSRotation_CP;//[Offset: 0x680, Size: 0xc]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0x68c, Size: 0xc]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0x698, Size: 0xc]
	Vector C_FPPProneOffsetLocation;//[Offset: 0x6a4, Size: 0xc]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0x6b0, Size: 0xc]
	CurveFloat* C_FallingIKCurve;//[Offset: 0x6c0, Size: 0x8]
	Rotator OwnerRotation;//[Offset: 0x6c8, Size: 0xc]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 0x1]
	Rotator ShovelingRotation;//[Offset: 0x6d8, Size: 0xc]
	float ShovelingRotationoffset;//[Offset: 0x6e4, Size: 0x4]
	Rotator UpShovelingRotationAdd;//[Offset: 0x6e8, Size: 0xc]
	Rotator FloorRotation;//[Offset: 0x6f4, Size: 0xc]
	float FloorRotationPitchSpeed;//[Offset: 0x700, Size: 0x4]
	byte Role;//[Offset: 0x704, Size: 0x1]
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x705, Size: 0x1]
	bool ShovelingToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x706, Size: 0x1]
	bool ShovelMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x707, Size: 0x1]
	bool ShovelGenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 0x1]
	bool C_ClimbAnimSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x709, Size: 0x1]
	float C_ClimbAnimTransTime;//[Offset: 0x70c, Size: 0x4]
	float C_ClimbAnimTime_A;//[Offset: 0x710, Size: 0x4]
	float C_ClimbAnimTime_B;//[Offset: 0x714, Size: 0x4]
	AnimParam_Accumulate WeaponAccumulateParam;//[Offset: 0x718, Size: 0x48]
	float Switch_AimBlendSpace_Time;//[Offset: 0x760, Size: 0x4]
	float Switch_AimBlendSpace_Counter;//[Offset: 0x764, Size: 0x4]
	bool bAimBlendSpaceChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0x770, Size: 0x8]
	AimOffsetBlendSpace* bs_AimBlendSpace_Dest;//[Offset: 0x778, Size: 0x8]
	AimOffsetBlendSpace* bs_AimBlendSpace_DestLast;//[Offset: 0x780, Size: 0x8]
	BlendSpace* C_MovementBSCache_Stand;//[Offset: 0x788, Size: 0x8]
	BlendSpace* C_MovementBSCache_Crouch;//[Offset: 0x790, Size: 0x8]
	BlendSpace* C_MovementBSCache_Prone;//[Offset: 0x798, Size: 0x8]
	AnimSequence* C_SwitchPose_Stand_To_Crouch;//[Offset: 0x7a0, Size: 0x8]
	AnimSequence* C_SwitchPose_Stand_To_Prone;//[Offset: 0x7a8, Size: 0x8]
	AnimSequence* C_SwitchPose_Crouch_To_Stand;//[Offset: 0x7b0, Size: 0x8]
	AnimSequence* C_SwitchPose_Crouch_To_Prone;//[Offset: 0x7b8, Size: 0x8]
	AnimSequence* C_SwitchPose_Prone_To_Stand;//[Offset: 0x7c0, Size: 0x8]
	AnimSequence* C_SwitchPose_Prone_To_Crouch;//[Offset: 0x7c8, Size: 0x8]
	BlendSpace* C_MovementBSCache_Stand_Dest;//[Offset: 0x7d0, Size: 0x8]
	BlendSpace* C_MovementBSCache_Crouch_Dest;//[Offset: 0x7d8, Size: 0x8]
	BlendSpace* C_MovementBSCache_Prone_Dest;//[Offset: 0x7e0, Size: 0x8]
	<FName,float> C_MovementBS_Stand_SourceTransTime;//[Offset: 0x7e8, Size: 0x50]
	<FName,float> C_MovementBS_Stand_SourceTransBackTime;//[Offset: 0x838, Size: 0x50]
	<FName,float> C_MovementBS_Stand_DestTransTime;//[Offset: 0x888, Size: 0x50]
	<byte,float> C_CustomMovementBlendTimeMap;//[Offset: 0x8d8, Size: 0x50]
	AnimSequence* C_SwitchPose_Stand_To_Crouch_Dest;//[Offset: 0x928, Size: 0x8]
	AnimSequence* C_SwitchPose_Stand_To_Prone_Dest;//[Offset: 0x930, Size: 0x8]
	AnimSequence* C_SwitchPose_Crouch_To_Stand_Dest;//[Offset: 0x938, Size: 0x8]
	AnimSequence* C_SwitchPose_Crouch_To_Prone_Dest;//[Offset: 0x940, Size: 0x8]
	AnimSequence* C_SwitchPose_Prone_To_Stand_Dest;//[Offset: 0x948, Size: 0x8]
	AnimSequence* C_SwitchPose_Prone_To_Crouch_Dest;//[Offset: 0x950, Size: 0x8]
	float StandSwitchToPronePoseAnimDuration;//[Offset: 0x958, Size: 0x4]
	float StandSwitchFromPronePoseAnimDuration;//[Offset: 0x95c, Size: 0x4]
	float CrouchSwitchToPronePoseAnimDuration;//[Offset: 0x960, Size: 0x4]
	float CrouchSwitchFromPronePoseAnimDuration;//[Offset: 0x964, Size: 0x4]
	float StandSwitchToPronePoseAnimDelay;//[Offset: 0x968, Size: 0x4]
	float StandSwitchFromPronePoseAnimDelay;//[Offset: 0x96c, Size: 0x4]
	float CrouchSwitchToPronePoseAnimDelay;//[Offset: 0x970, Size: 0x4]
	float CrouchSwitchFromPronePoseAnimDelay;//[Offset: 0x974, Size: 0x4]
	float SwitchingPoseTimer;//[Offset: 0x978, Size: 0x4]
	float SwitchingPoseTimerInternal;//[Offset: 0x97c, Size: 0x4]
	float SwitchPoseAnimStartPosition;//[Offset: 0x980, Size: 0x4]
	float C_CustomMovementBlendTime;//[Offset: 0x984, Size: 0x4]
	byte C_InterruptCachePose;//[Offset: 0x988, Size: 0x1]
	bool C_UseInterruptPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x989, Size: 0x1]
	float InterruptPoseInternal;//[Offset: 0x98c, Size: 0x4]
	bool C_IsSwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 0x1]
	byte C_RecoverCharPose;//[Offset: 0x991, Size: 0x1]
	float SwitchPoseTransTime;//[Offset: 0x99c, Size: 0x4]
	float SwitchPoseTransBackTime;//[Offset: 0x9a0, Size: 0x4]
	bool C_IsPlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]
	bool C_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a5, Size: 0x1]
	bool b_C_MoveVelocity_Turning_NotScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 0x1]
	AnimSequence* C_IdleAddtive;//[Offset: 0x9b8, Size: 0x8]
	AnimSequence* C_ShoulderIdleAddtive;//[Offset: 0x9c0, Size: 0x8]
	BlendSpace1D* C_FallingBS;//[Offset: 0x9c8, Size: 0x8]
	AnimSequence* C_JumpStart;//[Offset: 0x9d0, Size: 0x8]
	AnimSequence* C_LandLight;//[Offset: 0x9d8, Size: 0x8]
	AnimSequence* C_LandHeavy;//[Offset: 0x9e0, Size: 0x8]
	AnimSequence* GrenadeJumpHigh;//[Offset: 0x9e8, Size: 0x8]
	AnimSequence* GrenadeJumpLow;//[Offset: 0x9f0, Size: 0x8]
	AnimSequence* GrenadeFallHigh;//[Offset: 0x9f8, Size: 0x8]
	AnimSequence* GrenadeFallLow;//[Offset: 0xa00, Size: 0x8]
	BlendSpace1D* MovementUpBodyOverride;//[Offset: 0xa08, Size: 0x8]
	BlendSpace* MovementLowerBodyOverride;//[Offset: 0xa10, Size: 0x8]
	AnimSequence* C_TurnAnim;//[Offset: 0xa18, Size: 0x8]
	AnimSequence* C_StandScopeBlendAnim;//[Offset: 0xa20, Size: 0x8]
	AnimSequence* C_CrouchScopeBlendAnim;//[Offset: 0xa28, Size: 0x8]
	BlendSpace* C_HitBlendSpace;//[Offset: 0xa30, Size: 0x8]
	BlendSpace1D* C_PeekAnim;//[Offset: 0xa38, Size: 0x8]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0xa40, Size: 0x8]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0xa48, Size: 0x8]
	AnimMontage* C_MontageRescue;//[Offset: 0xa50, Size: 0x8]
	AnimMontage* C_MontageRescueSelf;//[Offset: 0xa58, Size: 0x8]
	AnimMontage* C_MontageDead;//[Offset: 0xa60, Size: 0x8]
	AnimMontage* C_MontageDead_Stand;//[Offset: 0xa68, Size: 0x8]
	AnimMontage* C_MontageDead_Crouch;//[Offset: 0xa70, Size: 0x8]
	AnimMontage* C_MontageDead_Prone;//[Offset: 0xa78, Size: 0x8]
	AnimSequence* C_ShovelPhaseEnter;//[Offset: 0xa80, Size: 0x8]
	AnimSequence* C_ShovePhaseShoveling;//[Offset: 0xa88, Size: 0x8]
	AnimSequence* C_ShovelPhaseLeave;//[Offset: 0xa90, Size: 0x8]
	AnimSequence* C_Climb_FrameAnim_A;//[Offset: 0xa98, Size: 0x8]
	AnimSequence* C_Climb_FrameAnim_B;//[Offset: 0xaa0, Size: 0x8]
	BlendSpace* C_FireBalloonDriverBS;//[Offset: 0xaa8, Size: 0x8]
	Vector C_FireBalloonMoveVelocity;//[Offset: 0xab0, Size: 0xc]
	enum AnimInstanceType;//[Offset: 0xabc, Size: 0x1]
	bool MovementUpBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabd, Size: 0x1]
	float MovementUpBodyBlentWeight;//[Offset: 0xac0, Size: 0x4]
	bool MovementLowerBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac4, Size: 0x1]
	float MovementLowerBodyBlentWeight;//[Offset: 0xac8, Size: 0x4]
	bool C_bSkeletonMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacc, Size: 0x1]
	bool C_IsQuickBow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacd, Size: 0x1]
	class AnimInstance* LocomotionAnimDefaultABP;//[Offset: 0xad0, Size: 0x8]
	AnimInstanceContainer* LocomotionAnimContainer;//[Offset: 0xad8, Size: 0x8]
	bool bEnableLocomotionAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 0x1]
	class AnimInstance* VehicleAnimDefaultABP;//[Offset: 0xae8, Size: 0x8]
	AnimInstanceContainer* VehicleAnimContainer;//[Offset: 0xaf0, Size: 0x8]
	bool bEnableVehicleAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf8, Size: 0x1]
	byte LastPoseTypeCache;//[Offset: 0xaf9, Size: 0x1]
	int ForceLODLevel;//[Offset: 0xb08, Size: 0x4]
	float LeaveStateTimerInternal;//[Offset: 0xb28, Size: 0x4]
	bool bEnableSkillAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 0x1]
	AnimInstanceContainer* SkillAnimContainer;//[Offset: 0xb30, Size: 0x8]
	bool bShouldUseSkillContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb38, Size: 0x1]
	static FName Util_GetAnimMontageSlotName(AnimMontage* Montage, int Index);// 0x60f7e1c
	void UpdateSkillAnimContainer();// 0x60f7e08
	void UnbindSkillStuffDelegate();// 0x60f7df4
	void SwitchingPoseFinishCallback();// 0x60f7de0
	void SetInterruptPose(bool bUseInterrupPose, byte InterruptPose);// 0x60f7d18
	void SetClimbAnimation(AnimSequence* AnimSequence, bool bFlag);// 0x60f7c58
	void ResetSkillAnimContainer();// 0x60f7c3c
	void RefreshPeekState();// 0x60f7c28
	void PlaySwitchWeaponAnimation(bool bWantsEquip);// 0x60f7ba4
	void PlayPostReloadWeaponAnimationOld();// 0x60f7b90
	void PlayPostReloadWeaponAnimation(int RemainReloadTimes);// 0x60f7b14
	void PlayPostFillGasWeaponAnimation();// 0x60f7b00
	void PlayPlayerDeadAnimation();// 0x60f7ae4
	void PlayAnimationByEventType(byte Type, float SpeedScale);// 0x60f7a2c
	void OnRespawned_BP();// 0x60f7a10
	void OnRecycled_BP();// 0x60f79f4
	void OnHandleSkillStarted(Character* OwnerCharacter, int SkillID);// 0x60f7934
	void OnHandleSkillEnd(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x60f7838
	void LeaveStateCallback();// 0x60f7824
	bool IsAssetSkeletonMatch(AnimationAsset* CheckAnimAsset, SkeletalMeshComponent* MeshComp);// 0x60f775c
	void HandleStateLeave(enum LeaveState);// 0x60f76e0
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x60f765c
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x60f759c
	void HandlePlayerPickUp();// 0x60f7580
	void HandlePlayerEnterRescueState(bool bBeginRescueing, bool bSelfRescue);// 0x60f74a8
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x70644c4
	void HandlePlayerAnimMontagePlayExtraDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos, bool bOnlyJumpToSectionWhilePlaying, FName IgnoreStopSection);// 0x60f72a4
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x60f7120
	void HandleOwnerAnimEvent(FName EventMsg);// 0x60f709c
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime, const byte InLoopCount, const float InStartPos, const float LoopStartPos);// 0x60f6e6c
	byte GetRole();// 0x60f6e38
	FName[] GetPlayingMontageSlot();// 0x60f6d94
	FName GetPlayingMontageSection();// 0x60f6d60
	AnimMontage* GetPlayingMontage();// 0x60f6d2c
	void FillShovelAnimation(out const PlayerAnimList AnimList);// 0x60f6b80
	void EnableAnimFlag(enum PlayFlag);// 0x60f6b04
	void DisableAnimFlag(enum PlayFlag);// 0x60f6a88
	void ClearStandbyAnimState();// 0x60f6a6c
	bool CanUseSkillContainer();// 0x60f6a34
	void BindSkillStuffDelegate();// 0x60f6a20
<----------Generated by SSpawner v1.0.4---------->


Class: STPawnAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x468, Size: 0x8]
	FString LuaFilePath;//[Offset: 0x470, Size: 0x10]
	void OnNotifyMontagePlayingEvent_BluePrint(FName NotifyName);// 0x70644c4
	void OnNotifyMontagePlayingEvent(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointPayload);// 0x6253730
	void HandlePlayerAnimMontagePlayExtraDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos, bool bOnlyJumpToSectionWhilePlaying, FName IgnoreStopSection);// 0x625352c
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x62533a8
	void HandleOwnerAnimEvent(FName EventMsg);// 0x6253324
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime, const byte InLoopCount, const float InStartPos, const float LoopStartPos);// 0x62530f4
<----------Generated by SSpawner v1.0.4---------->


Class: BranchingPointNotifyPayload
<----------Generated by SSpawner v1.0.4---------->


Class: AnimParam_Accumulate
	AnimSequence* AccumulateAnimSeq;//[Offset: 0x0, Size: 0x8]
	AnimSequence* AccumulateAnimSeqNew;//[Offset: 0x8, Size: 0x8]
	bool bAccumulateAnimSeqChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float AccumulateAnimSeqChangeTimer;//[Offset: 0x14, Size: 0x4]
	float AccumulateAnimSeqChangeTimerCounter;//[Offset: 0x18, Size: 0x4]
	float AccumulateRealtime;//[Offset: 0x1c, Size: 0x4]
	bool bAccumulateRealTimeMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float AccumulateRate;//[Offset: 0x24, Size: 0x4]
	bool bAccumulateRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bAccumulateRateMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bHasAccumulateRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	float BlendInSpeed;//[Offset: 0x2c, Size: 0x4]
	float BlendOutSpeed;//[Offset: 0x30, Size: 0x4]
	float BlendOutRealSpeed;//[Offset: 0x34, Size: 0x4]
	float BlendOutDelayTime;//[Offset: 0x38, Size: 0x4]
	float BlendOutDelayTime_Counter;//[Offset: 0x3c, Size: 0x4]
	float CacheAccumulateRate;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x141, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimInstanceContainer.Object
	SkeletalMeshComponent* ParentMesh;//[Offset: 0x28, Size: 0x8]
	<class AnimInstance,AnimInstance*> CacheAnimInstanceMap;//[Offset: 0x30, Size: 0x50]
	class AnimInstance* TargetClass;//[Offset: 0x80, Size: 0x8]
	AnimInstance* TargetAnimInstance;//[Offset: 0x88, Size: 0x8]
	AnimInstance* SetTargetAnimInstance(class AnimInstance InstanceClass);// 0x8c7a8e4
	bool RemoveCacheAnimInstance(class AnimInstance InstanceClass);// 0x8c7a854
	bool IsRunningTargetAnimInstance(out class AnimInstance InstanceClass);// 0x8c7a7b4
	bool IsReceiveInPoseNode();// 0x8c7a77c
	AnimInstance* GetTargetInstance(bool bCheckPendingKill);// 0x8c7a6e8
	void ClearCacheAnimInstance();// 0x8c7a6d4
	bool AddCacheAnimInstance(class AnimInstance InstanceClass);// 0x8c7a644
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerAnimList
	int FrameCounter;//[Offset: 0x0, Size: 0x4]
	PlayerAnimData MovementAnim;//[Offset: 0x8, Size: 0x10]
	PlayerAnimData AimAnim;//[Offset: 0x18, Size: 0x10]
	PlayerAnimData ReloadAnim;//[Offset: 0x28, Size: 0x10]
	PlayerAnimData FillGasAnim;//[Offset: 0x38, Size: 0x10]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x48, Size: 0x10]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x58, Size: 0x10]
	PlayerAnimData PickUpAnim;//[Offset: 0x68, Size: 0x10]
	PlayerAnimData FireAnim;//[Offset: 0x78, Size: 0x10]
	PlayerAnimData FireAccAnim;//[Offset: 0x88, Size: 0x10]
	PlayerAnimData PostFireAnim;//[Offset: 0x98, Size: 0x10]
	PlayerAnimData HurtAnim;//[Offset: 0xa8, Size: 0x10]
	PlayerAnimData TurnAnim;//[Offset: 0xb8, Size: 0x10]
	PlayerAnimData PullingPlugAnim;//[Offset: 0xc8, Size: 0x10]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0xd8, Size: 0x10]
	PlayerAnimData WeaponIdle;//[Offset: 0xe8, Size: 0x10]
	PlayerAnimData ForegripAnim;//[Offset: 0xf8, Size: 0x10]
	PlayerAnimData ShoudlerWeaponIdle;//[Offset: 0x108, Size: 0x10]
	PlayerAnimData BeCarriedBackMoveAnim;//[Offset: 0x118, Size: 0x10]
	PlayerAnimData BeCarriedBackPickUpAnim;//[Offset: 0x128, Size: 0x10]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x138, Size: 0x10]
	PlayerAnimData[] ShovelAnimList;//[Offset: 0x148, Size: 0x10]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0x158, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 0x8]
	float rate;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraAnimInstanceProxy.AnimInstanceProxy
	STExtraBaseCharacter* OwnerPawn;//[Offset: 0x528, Size: 0x8]
	STExtraAnimInstanceBase* ParentAnimInst;//[Offset: 0x530, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimInstanceProxy
	AnimInstance*[] SubAnimInstances;//[Offset: 0x518, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimParamList
	int FrameCounter;//[Offset: 0x0, Size: 0x4]
	Vector Velocity;//[Offset: 0x4, Size: 0xc]
	Vector movedir;//[Offset: 0x10, Size: 0xc]
	byte MovementMode;//[Offset: 0x1c, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x1d, Size: 0x1]
	byte PoseType;//[Offset: 0x1e, Size: 0x1]
	Rotator ViewRotation;//[Offset: 0x20, Size: 0xc]
	Rotator ControlRotation;//[Offset: 0x2c, Size: 0xc]
	byte WeaponType;//[Offset: 0x38, Size: 0x1]
	byte WeaponHoldType;//[Offset: 0x39, Size: 0x1]
	byte WeaponState;//[Offset: 0x3a, Size: 0x1]
	byte WeaponReloadMethod;//[Offset: 0x3b, Size: 0x1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	byte SightType;//[Offset: 0x3d, Size: 0x1]
	float RecoilKickADS;//[Offset: 0x40, Size: 0x4]
	float ForegripParam;//[Offset: 0x44, Size: 0x4]
	Vector OffsetFPPLocation;//[Offset: 0x4c, Size: 0xc]
	Rotator OffsetFPPRotation;//[Offset: 0x58, Size: 0xc]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64, Size: 0xc]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70, Size: 0xc]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c, Size: 0xc]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88, Size: 0xc]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94, Size: 0xc]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0, Size: 0xc]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac, Size: 0xc]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8, Size: 0xc]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4, Size: 0xc]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0, Size: 0xc]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 0x1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 0x1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	Vector HurtDir;//[Offset: 0xe4, Size: 0xc]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	byte JumpType;//[Offset: 0xf2, Size: 0x1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 0x1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	float HandleFolderFactor;//[Offset: 0xf8, Size: 0x4]
	float CharacterYawRotateRate;//[Offset: 0xfc, Size: 0x4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bCarryBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	bool bParachuteNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 0x1]
	float CarryBlendTimeAccumulator;//[Offset: 0x104, Size: 0x4]
	float ParachuteNearDeathBlendTimeAccumulator;//[Offset: 0x108, Size: 0x4]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	bool bAlwaysLandLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ResolvePenetrationParams
	bool bLineTracePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bBackDirAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	int IterationRounds;//[Offset: 0x4, Size: 0x4]
	int IterationDirections;//[Offset: 0x8, Size: 0x4]
	float AdjustRadius;//[Offset: 0xc, Size: 0x4]
	float AdjustMaxHeight;//[Offset: 0x10, Size: 0x4]
	FName IgnoreTag;//[Offset: 0x18, Size: 0x8]
	FName PushupTag;//[Offset: 0x20, Size: 0x8]
	float OverlapShapeInflation;//[Offset: 0x28, Size: 0x4]
	float PassWallShapeInflation;//[Offset: 0x2c, Size: 0x4]
	World* InWorld;//[Offset: 0x30, Size: 0x8]
	Actor*[] OverlapIgnoreActors;//[Offset: 0x38, Size: 0x10]
	Actor*[] PassWallIgnoreActors;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0, Size: 0xc]
	Rotator Rot;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: RescueTime
	bool bBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float RescueStartTime;//[Offset: 0x4, Size: 0x4]
	float RescueExpectedEndTime;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SyncTeamMatePlayerState
	STExtraPlayerState* TeammatePlayerState;//[Offset: 0x0, Size: 0x8]
	byte PlayerInTeamIndex;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: HistoricalTeammateInfo
	FString Name;//[Offset: 0x0, Size: 0x10]
	uint64 UID;//[Offset: 0x10, Size: 0x8]
	FString OpenID;//[Offset: 0x18, Size: 0x10]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bIsDeliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	uint64 OriginalUID;//[Offset: 0x30, Size: 0x8]
	int InTeamIndex;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0, Size: 0x4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	int LayerID;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0, Size: 0x1]
	STExtraBaseCharacter* Character;//[Offset: 0x8, Size: 0x8]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0x14b0, Size: 0x8]
	ParticleSystemComponent*[] PSCs;//[Offset: 0x14b8, Size: 0x10]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0x14c8, Size: 0x28]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0x14f0, Size: 0x8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0x14f8, Size: 0x8]
	float TorqueMultiplierforBoosting;//[Offset: 0x1504, Size: 0x4]
	float WheelEffectUpdateInterval;//[Offset: 0x1508, Size: 0x4]
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150c, Size: 0x1]
	int ValidTransformMinWheelNum;//[Offset: 0x1510, Size: 0x4]
	delegate OnVehicleWheelLanded;//[Offset: 0x1518, Size: 0x10]
	float MinLandingWheelSuspensionOffset;//[Offset: 0x1528, Size: 0x4]
	delegate OnVehicleGearChanged;//[Offset: 0x1530, Size: 0x10]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0x1548, Size: 0x8]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0x1550, Size: 0x8]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0x1558, Size: 0x8]
	AkAudioEvent* Sfx_Slip;//[Offset: 0x1560, Size: 0x8]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0x1568, Size: 0x8]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0x1570, Size: 0x8]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0x1578, Size: 0x8]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0x1580, Size: 0x8]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x1588, Size: 0x8]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0x1590, Size: 0x78]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0x1608, Size: 0x70]
	AkComponent* AkComp_WheelFriction;//[Offset: 0x1678, Size: 0x8]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x1694, Size: 0x4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x1698, Size: 0x4]
	float WheelSfxUpdateInterval;//[Offset: 0x16c0, Size: 0x4]
	ParticleSystemComponent* DustPSC;//[Offset: 0x16c8, Size: 0x8]
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x16e8, Size: 0x8]
	FString LoopSmokeCmpName;//[Offset: 0x16f0, Size: 0x10]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x1700, Size: 0xc]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170c, Size: 0x1]
	float ExtraBoostFactor;//[Offset: 0x1710, Size: 0x4]
	FName IsStoppedBlackboardKeyName;//[Offset: 0x1768, Size: 0x8]
	FName TargetLocationBlackboardKeyName;//[Offset: 0x1770, Size: 0x8]
	FName PathingLocationBlackboardKeyName;//[Offset: 0x1778, Size: 0x8]
	FName PathInputLocationBlackboardKeyName;//[Offset: 0x1780, Size: 0x8]
	delegate OnVehicleInputMoveDelegate;//[Offset: 0x1790, Size: 0x10]
	WheeledNeutralThrottleComponent* NeutralThrottleComp;//[Offset: 0x17a0, Size: 0x8]
	enum RepNeutralThrottleStatus;//[Offset: 0x17a8, Size: 0x1]
	STExtraPlayerCharacter* NeutralThrottleCharacter;//[Offset: 0x17b0, Size: 0x8]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);// 0x624ea8c
	void ServerSetNeutralThrottleStatus(enum NewStatus);// 0x624e9dc
	void PostLoadFPPMesh();// 0x624e9c0
	void PlayerControllerLost();// 0x624e9ac
	void OnWheelsLanded();// 0x624e998
	void OnRep_ReplicatedState();// 0x624e984
	void OnRep_NeutralThrottleStatus(enum PreStatus);// 0x624e908
	void OnGearChanged(bool bIsUp);// 0x624e884
	void MulticastDrawNavigationDebug(float DeltaSeconds, Vector TargetLocation, Vector PathingLocation, Vector PathInputLocation);// 0x624e748
	void MulticastDrawAvoidanceDebugLineTraceSingle(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x624e5e0
	void MulticastDrawAvoidanceDebugLineTraceMulti(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x624e478
	void MulticastDrawAvoidanceDebugBoxTraceSingle(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x624e28c
	void MulticastDrawAvoidanceDebugBoxTraceMulti(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x624e0a0
	bool IsVehicleInputMove(float InputTolerance);// 0x624e010
	float GetVehicleSpeed();// 0x624dfdc
	float GetVehicleSlip();// 0x624dfa0
	Vector GetRotationInputDir();// 0x624df60
	float GetBoostFactor();// 0x624df24
	void BroadcastClientVehicleWheelDestroyEffect();// 0x624df08
<----------Generated by SSpawner v1.0.4---------->


Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 0x1]
	ParticleSystem* MoveFx;//[Offset: 0x8, Size: 0x8]
	ParticleSystem* SlipFx;//[Offset: 0x10, Size: 0x8]
	ParticleSystem* HubFx;//[Offset: 0x18, Size: 0x8]
	float minSpeed;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x3f4, Size: 0x4]
	float MaxQuadLength;//[Offset: 0x3f8, Size: 0x4]
	float QuadDirectionAcceptAngle;//[Offset: 0x3fc, Size: 0x4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x400, Size: 0x8]
	float DefaultTrailWidth;//[Offset: 0x408, Size: 0x4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 0x1]
	float DefaultTrailLength;//[Offset: 0x410, Size: 0x4]
	float TextureLength;//[Offset: 0x414, Size: 0x4]
	int USegmentNum;//[Offset: 0x418, Size: 0x4]
	int CoordU;//[Offset: 0x41c, Size: 0x4]
	int SlippingCoordU;//[Offset: 0x420, Size: 0x4]
	int BrokenCoordU;//[Offset: 0x424, Size: 0x4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	float AdditionalTrailWidth;//[Offset: 0x42c, Size: 0x4]
	float AdditionalTextureLength;//[Offset: 0x430, Size: 0x4]
	int AdditionalCoordU;//[Offset: 0x434, Size: 0x4]
	int AdditionalSlippingCoordU;//[Offset: 0x438, Size: 0x4]
	int AdditionalBrokenCoordU;//[Offset: 0x43c, Size: 0x4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x448, Size: 0x8]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x6275008
	void StopUpdate();// 0x6274ff4
	bool IsUpdating();// 0x6274fbc
<----------Generated by SSpawner v1.0.4---------->


Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x7a0, Size: 0x10]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 0x1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b1, Size: 0x1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b2, Size: 0x1]
	enum CollisionMode;//[Offset: 0x7b3, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x7b8, Size: 0x8]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x7f0, Size: 0x10]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x800, Size: 0x10]
	BoxSphereBounds LocalBounds;//[Offset: 0x810, Size: 0x1c]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x830, Size: 0x58]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x888, Size: 0x10]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0xa40dc60
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0xa40db18
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0xa40da58
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0xa40d998
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0xa40d8d8
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0xa40d760
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x70644c4
	bool IsMeshSectionVisible(int SectionIndex);// 0xa40d6d0
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0xa40d640
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0xa40d5b0
	int GetNumSections();// 0xa40d57c
	int GetLastSectionIndex();// 0xa40d548
	int FirstAvailableMeshSectionIndex();// 0xa40d514
	void EndBatchUpdates();// 0xa40d500
	bool DoesSectionExist(int SectionIndex);// 0xa40d470
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0xa40cf60
	void CookCollisionNow();// 0xa40cf4c
	void ClearMeshSection(int SectionIndex);// 0xa40ced0
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0xa40ce54
	void ClearCollisionConvexMeshes();// 0xa40ce40
	void ClearAllMeshSections();// 0xa40ce2c
	void ClearAllMeshCollisionSections();// 0xa40ce18
	bool ChangeRuntimeMeshSectionUVs(int SectionIndex, int Index, <int,Vector2D> UVs);// 0xa40cc30
	void BeginBatchUpdates();// 0xa40cc14
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0xa40cadc
<----------Generated by SSpawner v1.0.4---------->


Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 0x10]
	int[] IndexBuffer;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 0x10]
	Box BoundingBox;//[Offset: 0x10, Size: 0x1c]
<----------Generated by SSpawner v1.0.4---------->


Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction
<----------Generated by SSpawner v1.0.4---------->


Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Transform Trans;//[Offset: 0x10, Size: 0x30]
	Vector Normal;//[Offset: 0x40, Size: 0xc]
	enum Type;//[Offset: 0x4c, Size: 0x1]
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x460, Size: 0x10]
	FName[] ExtraOptBoneNames;//[Offset: 0x470, Size: 0x10]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	float DebugVehicleSettingInterval;//[Offset: 0x494, Size: 0x4]
	float AntiRollStiffness;//[Offset: 0x498, Size: 0x4]
	VehicleWheel*[] WheelHubs;//[Offset: 0x4a0, Size: 0x10]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x4b8, Size: 0x8]
	<uint32,CachedWheelData> mapCachedWheelData;//[Offset: 0x500, Size: 0x50]
	float MaxRPMLimit;//[Offset: 0x680, Size: 0x4]
	float TorqueRate;//[Offset: 0x684, Size: 0x4]
	byte[] SpecialModifyCollisionList;//[Offset: 0x688, Size: 0x10]
	int[] SpecialModifyShapeIndexList;//[Offset: 0x698, Size: 0x10]
	FName RootBodyName;//[Offset: 0x6a8, Size: 0x8]
	bool bAllowCollisionWeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]
	bool IsInAir_bServerCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b1, Size: 0x1]
	bool IsInAir_bClientCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b2, Size: 0x1]
	int IsInAir_ShapeIndexToQuery;//[Offset: 0x6b4, Size: 0x4]
	float IsInAir_QueryInterval;//[Offset: 0x6b8, Size: 0x4]
	float IsInAir_QueryLength;//[Offset: 0x6bc, Size: 0x4]
	delegate OnIsInAirChange;//[Offset: 0x6c0, Size: 0x10]
	bool IsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 0x1]
	bool DynamicChangeDragCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 0x1]
	float DragCoefficientInAir;//[Offset: 0x6dc, Size: 0x4]
	float SmallSpeedIntervalThreshold;//[Offset: 0x6ec, Size: 0x4]
	float SmallSpeedThreshold;//[Offset: 0x6f0, Size: 0x4]
	void SetVehicleToRestState();// 0x6243ac4
	void SetTransmissionSetup(out const VehicleTransmissionData NewTransmissionSetup);// 0x6243a08
	void SetSuspensionIgnoreMask(int InIgnoreMask);// 0x624398c
	void SetEngineSetup(out const VehicleEngineData NewEngineSetup);// 0x624384c
	void SetDragCoefficient(float InDragCoefficient);// 0x62437c8
	void SetDifferentialSetup(out const VehicleDifferential4WData NewDifferentialSetup);// 0x6243740
	void SetBoosting(float rate);// 0x62436bc
	void RefreshBodyCollision();// 0x62436a8
	void OnExpoldeStopWheel();// 0x6243694
	void MoveWheelShapeHeight(float Height);// 0x6243618
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x6243524
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x62433b8
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x62432c4
	int GetSuspensionIgnoreMask();// 0x6243290
	int GetNumWheelsNotInAir();// 0x624325c
	Vector GetLinearVelocity();// 0x6243224
	Transform GetCMassLocalPose();// 0x62431d0
	void ForceWheelsRotate(float DriveTorque);// 0x6243154
	void ClearDestroyedWheel();// 0x6243140
	void ChangeDragCoefficientInInAir();// 0x624312c
<----------Generated by SSpawner v1.0.4---------->


Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x300, Size: 0x90]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x390, Size: 0x1c]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x3b0, Size: 0x30]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x3e0, Size: 0x78]
	float AckermannAccuracy;//[Offset: 0x458, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 0x1]
	bool bRestorePhysicsState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x198, Size: 0x1]
	WheelSetup[] WheelSetups;//[Offset: 0x1a0, Size: 0x10]
	float Mass;//[Offset: 0x1b0, Size: 0x4]
	float DragCoefficient;//[Offset: 0x1b4, Size: 0x4]
	float ChassisWidth;//[Offset: 0x1b8, Size: 0x4]
	float ChassisHeight;//[Offset: 0x1bc, Size: 0x4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	bool bClientSuspensionSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1]
	bool bServerSuspensionSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2, Size: 0x1]
	float DragArea;//[Offset: 0x1c4, Size: 0x4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x1c8, Size: 0x4]
	float MaxEngineRPM;//[Offset: 0x1cc, Size: 0x4]
	float DebugDragMagnitude;//[Offset: 0x1d0, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x1d4, Size: 0xc]
	float MinNormalizedTireLoad;//[Offset: 0x1e0, Size: 0x4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x1e4, Size: 0x4]
	float MaxNormalizedTireLoad;//[Offset: 0x1e8, Size: 0x4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x1ec, Size: 0x4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x1f0, Size: 0x4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x1f4, Size: 0x4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x1f8, Size: 0x4]
	VehicleWheel*[] Wheels;//[Offset: 0x200, Size: 0x10]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	float RVOAvoidanceRadius;//[Offset: 0x22c, Size: 0x4]
	float RVOAvoidanceHeight;//[Offset: 0x230, Size: 0x4]
	float AvoidanceConsiderationRadius;//[Offset: 0x234, Size: 0x4]
	float RVOSteeringStep;//[Offset: 0x238, Size: 0x4]
	float RVOThrottleStep;//[Offset: 0x23c, Size: 0x4]
	int AvoidanceUID;//[Offset: 0x240, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x244, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x248, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x24c, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x250, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x254, Size: 0xc]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x270, Size: 0x14]
	float RawSteeringInput;//[Offset: 0x288, Size: 0x4]
	float RawThrottleInput;//[Offset: 0x28c, Size: 0x4]
	float RawBrakeInput;//[Offset: 0x290, Size: 0x4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 0x1]
	float SteeringInput;//[Offset: 0x298, Size: 0x4]
	float ThrottleInput;//[Offset: 0x29c, Size: 0x4]
	float BrakeInput;//[Offset: 0x2a0, Size: 0x4]
	float HandbrakeInput;//[Offset: 0x2a4, Size: 0x4]
	float IdleBrakeInput;//[Offset: 0x2a8, Size: 0x4]
	float StopThreshold;//[Offset: 0x2ac, Size: 0x4]
	float WrongDirectionThreshold;//[Offset: 0x2b0, Size: 0x4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x2b4, Size: 0x8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x2bc, Size: 0x8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x2c4, Size: 0x8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x2cc, Size: 0x8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1]
	void SetUseAutoGears(bool bUseAuto);// 0xa153d18
	void SetThrottleInput(float Throttle);// 0xa153c94
	void SetTargetGear(int GearNum, bool bImmediate);// 0xa153bd4
	void SetSteeringInput(float Steering);// 0xa153b50
	void SetPhysActive(bool bActive);// 0xa153ac4
	void SetHandbrakeInput(bool bNewHandbrake);// 0xa153a38
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0xa1539b0
	void SetGroupsToIgnore(int GroupFlags);// 0xa153934
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0xa1538ac
	void SetGroupsToAvoid(int GroupFlags);// 0xa153830
	void SetGearUp(bool bNewGearUp);// 0xa1537ac
	void SetGearDown(bool bNewGearDown);// 0xa153728
	void SetBrakeInput(float Brake);// 0xa1536a4
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0xa15361c
	void SetAvoidanceGroup(int GroupFlags);// 0xa1535a0
	void SetAvoidanceEnabled(bool bEnable);// 0xa15351c
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0xa153374
	bool IsSuspensionSweep();// 0xa153334
	void GetWheelShapeIndices(out int[] OutWheelShapeIndices);// 0xa153234
	bool GetUseAutoGears();// 0xa1531fc
	int GetTargetGear();// 0xa1531c8
	float GetForwardSpeed();// 0xa153194
	float GetEngineRotationSpeed();// 0xa153160
	float GetEngineMaxRotationSpeed();// 0xa15312c
	int GetCurrentGear();// 0xa1530f8
	void EnableVehicleWheel(int WheelIndex, bool InEnable);// 0xa153038
	void EnableVehicleSimulation(bool InEnable);// 0xa152fb4
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 0x78]
	float MaxRPM;//[Offset: 0x78, Size: 0x4]
	float MOI;//[Offset: 0x7c, Size: 0x4]
	float DampingRateFullThrottle;//[Offset: 0x80, Size: 0x4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x84, Size: 0x4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x88, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 0x1]
	float FrontRearSplit;//[Offset: 0x4, Size: 0x4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 0x4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 0x4]
	float CentreBias;//[Offset: 0x10, Size: 0x4]
	float FrontBias;//[Offset: 0x14, Size: 0x4]
	float RearBias;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float GearSwitchTime;//[Offset: 0x4, Size: 0x4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 0x4]
	float FinalRatio;//[Offset: 0xc, Size: 0x4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 0x10]
	float ReverseGearRatio;//[Offset: 0x20, Size: 0x4]
	float NeutralGearUpRatio;//[Offset: 0x24, Size: 0x4]
	float ClutchStrength;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 0x4]
	float DownRatio;//[Offset: 0x4, Size: 0x4]
	float UpRatio;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 0x8]
	FName TireBoneName;//[Offset: 0x8, Size: 0x8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x28, Size: 0x8]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	Vector Offset;//[Offset: 0x34, Size: 0xc]
	float ShapeRadius;//[Offset: 0x40, Size: 0x4]
	float ShapeWidth;//[Offset: 0x44, Size: 0x4]
	float Mass;//[Offset: 0x48, Size: 0x4]
	float DampingRate;//[Offset: 0x4c, Size: 0x4]
	float SteerAngle;//[Offset: 0x50, Size: 0x4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	TireType* TireType;//[Offset: 0x58, Size: 0x8]
	TireConfig* TireConfig;//[Offset: 0x60, Size: 0x8]
	float LatStiffMaxLoad;//[Offset: 0x68, Size: 0x4]
	float LatStiffValue;//[Offset: 0x6c, Size: 0x4]
	float LongStiffValue;//[Offset: 0x70, Size: 0x4]
	float SuspensionForceOffset;//[Offset: 0x74, Size: 0x4]
	float SuspensionMaxRaise;//[Offset: 0x78, Size: 0x4]
	float SuspensionMaxDrop;//[Offset: 0x7c, Size: 0x4]
	float SuspensionNaturalFrequency;//[Offset: 0x80, Size: 0x4]
	float SuspensionDampingRatio;//[Offset: 0x84, Size: 0x4]
	byte SweepType;//[Offset: 0x88, Size: 0x1]
	float MaxBrakeTorque;//[Offset: 0x8c, Size: 0x4]
	float MaxHandBrakeTorque;//[Offset: 0x90, Size: 0x4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x98, Size: 0x8]
	int WheelIndex;//[Offset: 0xa0, Size: 0x4]
	float DebugLongSlip;//[Offset: 0xa4, Size: 0x4]
	float DebugLatSlip;//[Offset: 0xa8, Size: 0x4]
	float DebugNormalizedTireLoad;//[Offset: 0xac, Size: 0x4]
	float DebugWheelTorque;//[Offset: 0xb4, Size: 0x4]
	float DebugLongForce;//[Offset: 0xb8, Size: 0x4]
	float DebugLatForce;//[Offset: 0xbc, Size: 0x4]
	Vector Location;//[Offset: 0xc0, Size: 0xc]
	Vector OldLocation;//[Offset: 0xcc, Size: 0xc]
	Vector Velocity;//[Offset: 0xd8, Size: 0xc]
	bool IsInAir();// 0xa15275c
	float GetSuspensionOffset();// 0xa152728
	float GetSteerAngle();// 0xa1526f4
	float GetRotationAngle();// 0xa1526c0
<----------Generated by SSpawner v1.0.4---------->


Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CachedWheelData
	bool WheelsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float WheelSuspensionOffset;//[Offset: 0x4, Size: 0x4]
	PhysicalMaterial* WheelContactMaterial;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 0x4]
	float ThrottleInput;//[Offset: 0x4, Size: 0x4]
	float BrakeInput;//[Offset: 0x8, Size: 0x4]
	float HandbrakeInput;//[Offset: 0xc, Size: 0x4]
	int CurrentGear;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 0x4]
	float FallRate;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 0x8]
	AkAudioEvent* EventStart;//[Offset: 0x8, Size: 0x8]
	AkAudioEvent* EventStop;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x58, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleSfxLoopBase
	AkComponent* AkComp;//[Offset: 0x0, Size: 0x8]
	<uint32,float> MapRTPC;//[Offset: 0x8, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2d0, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x2d8, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x2e8, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x2ec, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x2f0, Size: 0x4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 0x1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f8, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f8, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fa, Size: 0x1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fa, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x2fc, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x300, Size: 0x4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x308, Size: 0x8]
	FString EventName;//[Offset: 0x310, Size: 0x10]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x9cc524c
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x9cc4f60
	void StopPlayingID(int StopEventID);// 0x9cc4ee4
	void Stop();// 0x9cc4ed0
	int SetSwitch(FString SwitchGroup, FString SwitchState);// 0x9cc4cb8
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x9cc4c34
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x9cc4ac4
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x9cc4918
	void SetOutputBusVolume(float BusVolume);// 0x9cc489c
	void SetListeners(out const AkComponent*[] Listeners);// 0x9cc47e4
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x9cc4768
	void SetAutoDestroy(bool in_AutoDestroy);// 0x9cc46e8
	void SetAttenuationScalingFactor(float Value);// 0x9cc466c
	int SeekOnEvent(FString in_EventName, int in_iPosition);// 0x9cc4574
	void PostTrigger(FString Trigger);// 0x9cc4440
	int PostAssociatedAkEvent();// 0x9cc440c
	int PostAkEventByName(FString in_EventName);// 0x9cc4354
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x9cc425c
	float GetAttenuationRadius();// 0x9cc4228
	void GetAkGameObjectName(out FString Name);// 0x9cc4170
<----------Generated by SSpawner v1.0.4---------->


Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x58, Size: 0x8]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x60, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0, Size: 0x1]
	int8 ThrottleInput;//[Offset: 0x1, Size: 0x1]
	int8 BrakeInput;//[Offset: 0x2, Size: 0x1]
	int8 HandbrakeInput;//[Offset: 0x3, Size: 0x1]
	int8 CurrentGear;//[Offset: 0x4, Size: 0x1]
	int Flag;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WheeledNeutralThrottleComponent.VehicleEffectComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate NeutralThrottleInit;//[Offset: 0x1e8, Size: 0x10]
	delegate OnNeutralThrottle;//[Offset: 0x1f8, Size: 0x10]
	STExtraVehicleSfxLoop NT_WheelFrictionGroundLoop;//[Offset: 0x218, Size: 0x78]
	STExtraWheeledVehicle* WheeledVehicle;//[Offset: 0x290, Size: 0x8]
	VehicleNeutralThrottleConfig NeutralThrottleConfig;//[Offset: 0x298, Size: 0x70]
	enum NeutralThrottleStatus;//[Offset: 0x308, Size: 0x1]
	AkAudioEvent* NT_FrictionAudio;//[Offset: 0x330, Size: 0x8]
	void StartNeutralThrottle(enum NewStatus);// 0x6377170
	void NeutralThrottleRelease();// 0x637715c
	bool IsStartNeutralThrottle();// 0x6377124
	void HandleVehicleWheelDestory();// 0x6377110
	void HandleVehicleMove(bool bMove);// 0x637708c
	void HandleSeatOccupiersChanged();// 0x6377078
	void HandleOnDSSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x6376f84
	float GetSimulateRPM();// 0x6376f50
	bool CanNeutralThrottle();// 0x6376f18
	void CameraShakeInternal();// 0x6376f04
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleEffectComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	void HandleAvatarEquiped();// 0x630ea90
	void CreateDynamicMaterialInstance();// 0x630ea74
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleNeutralThrottleConfig
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum DifferentialType;//[Offset: 0x1, Size: 0x1]
	float CanNeutralThrottleMinSpeed;//[Offset: 0x4, Size: 0x4]
	float NeutralThrottleToMaxRPMSeconds;//[Offset: 0x8, Size: 0x4]
	float NeutralThrottleDecelSeconds;//[Offset: 0xc, Size: 0x4]
	float WheelRPMOverEngineRPMRate;//[Offset: 0x10, Size: 0x4]
	AkAudioEvent* FrictionAudio;//[Offset: 0x18, Size: 0x28]
	Vector CameraOffset;//[Offset: 0x40, Size: 0xc]
	float AccelCameraOffsetSeconds;//[Offset: 0x4c, Size: 0x4]
	float DecelCameraOffsetSeconds;//[Offset: 0x50, Size: 0x4]
	class CameraShake* CameraShake;//[Offset: 0x58, Size: 0x8]
	float CameraShakeDelay;//[Offset: 0x60, Size: 0x4]
	STVehicleWheelSlipDustConfig* DustConfig;//[Offset: 0x68, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STVehicleWheelSlipDustConfig.DataAsset.Object
	STVehicleSlipWheelDust[] SlipWheelDusts;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: STVehicleSlipWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 0x1]
	STVehicleSingleWheelFx[] WheelFx;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: STVehicleSingleWheelFx
	enum Wheel;//[Offset: 0x0, Size: 0x1]
	ParticleSystem* WheelFx;//[Offset: 0x8, Size: 0x8]
	FName SocketName;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerAliasShowInfo
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x0, Size: 0x48]
	FString PlayerName;//[Offset: 0x48, Size: 0x10]
	STExtraBaseCharacter* Character;//[Offset: 0x58, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0, Size: 0x4]
	Vector BoxLocation;//[Offset: 0x4, Size: 0xc]
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BuildMaterialData
	int MatID;//[Offset: 0x0, Size: 0x4]
	int MatCount;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x3f8, Size: 0x8]
	int DecalId;//[Offset: 0x400, Size: 0x4]
	int TeamID;//[Offset: 0x404, Size: 0x4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x410, Size: 0x80]
	STExtraPlayerState* OwnerPS;//[Offset: 0x490, Size: 0x8]
	STExtraVehicleBase* Vehicle;//[Offset: 0x498, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x4a0, Size: 0x8]
	int PostEventID;//[Offset: 0x4a8, Size: 0x4]
	void RemoveSelfByParent();// 0x5f26490
	void OnRep_DecalInfo();// 0x5f2647c
	void OnDamageableActorDestroyed(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x5f263bc
<----------Generated by SSpawner v1.0.4---------->


Class: IdeaDecalInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
	FName SocketName;//[Offset: 0x60, Size: 0x8]
	enum ParentType;//[Offset: 0x68, Size: 0x1]
	PrimitiveComponent* Parent;//[Offset: 0x6c, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterBuffRecord
	int BuffID;//[Offset: 0x0, Size: 0x4]
	int CauseSkillID;//[Offset: 0x4, Size: 0x4]
	int LayerCount;//[Offset: 0x8, Size: 0x4]
	Actor* Causer;//[Offset: 0xc, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: MarkSyncData
	enum Status;//[Offset: 0x0, Size: 0x1]
	enum MapAdded;//[Offset: 0x1, Size: 0x1]
	byte InstanceID;//[Offset: 0x2, Size: 0x1]
	int TypeId;//[Offset: 0x4, Size: 0x4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x8, Size: 0x20]
	Vector_NetQuantize Location;//[Offset: 0x28, Size: 0xc]
	Actor* Actor;//[Offset: 0x34, Size: 0x8]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	Property*[] DeltaProperties;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CustomMarkEventData
	enum InWhichMap;//[Offset: 0x0, Size: 0x1]
	float CreateTime;//[Offset: 0x4, Size: 0x4]
	int CustomState;//[Offset: 0x8, Size: 0x4]
	FString CustomString;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: QuickSignMsg
	FString MsgID;//[Offset: 0x0, Size: 0x10]
	FString PlayerName;//[Offset: 0x10, Size: 0x10]
	Vector HitPos;//[Offset: 0x20, Size: 0xc]
	FString ConfigKey;//[Offset: 0x30, Size: 0x10]
	int audioID;//[Offset: 0x40, Size: 0x4]
	FString ParamString;//[Offset: 0x48, Size: 0x10]
	int BindActorGUID;//[Offset: 0x58, Size: 0x4]
	int RelationID;//[Offset: 0x5c, Size: 0x4]
	uint32 PlayerKey;//[Offset: 0x60, Size: 0x4]
	int MiniMapIconTypeId;//[Offset: 0x64, Size: 0x4]
	enum MsgType;//[Offset: 0x68, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: TeamateStateUAVChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 0xc]
	uint32 View;//[Offset: 0xc, Size: 0x4]
	byte Roll;//[Offset: 0x10, Size: 0x1]
	byte uavType;//[Offset: 0x11, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackComponent.LuaActorComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0x1e8, Size: 0x10]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x1f8, Size: 0x10]
	delegate SingleItemDeleteDelegate;//[Offset: 0x208, Size: 0x10]
	delegate BatchItemUpdateDelegate;//[Offset: 0x218, Size: 0x10]
	delegate BatchItemDeleteDelegate;//[Offset: 0x228, Size: 0x10]
	delegate CapacityUpdatedDelegate;//[Offset: 0x238, Size: 0x10]
	delegate ItemOperationDelegate;//[Offset: 0x248, Size: 0x10]
	delegate ItemOperationInfoDelegate;//[Offset: 0x258, Size: 0x10]
	delegate AssociationOperationDelegate;//[Offset: 0x268, Size: 0x10]
	delegate ItemOperCountDelegate;//[Offset: 0x278, Size: 0x10]
	delegate ItemOperationFailedDelegate;//[Offset: 0x288, Size: 0x10]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x298, Size: 0x10]
	delegate ItemHandleAddDelegate;//[Offset: 0x2a8, Size: 0x10]
	<int,int> PickupLimitSetting;//[Offset: 0x2b8, Size: 0x50]
	delegate ItemUpdatedDelegate;//[Offset: 0x308, Size: 0x10]
	delegate ItemRemovedDelegate;//[Offset: 0x318, Size: 0x10]
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0x328, Size: 0x10]
	BattleItemPickupAfterLand[] BattleItemPickupAfterLandList;//[Offset: 0x338, Size: 0x10]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x348, Size: 0x10]
	IncNetArray ItemListNet;//[Offset: 0x368, Size: 0x20]
	IncNetArray ItemListNetCache;//[Offset: 0x388, Size: 0x20]
	<int,BattleItemData> CacheBattleItemMap;//[Offset: 0x3a8, Size: 0x50]
	ItemDefineID[] BroadcastInsertItemList;//[Offset: 0x3f8, Size: 0x10]
	ItemDefineID[] BroadcastUpdateItemList;//[Offset: 0x408, Size: 0x10]
	ItemDefineID[] BroadcastDeleteItemList;//[Offset: 0x418, Size: 0x10]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x430, Size: 0x10]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x440, Size: 0x50]
	int CapacityThreshold;//[Offset: 0x490, Size: 0x4]
	float Capacity;//[Offset: 0x494, Size: 0x4]
	float OccupiedCapacity;//[Offset: 0x498, Size: 0x4]
	float SafetyBoxCapacity;//[Offset: 0x49c, Size: 0x4]
	float SafetyBoxOccupiedCapacity;//[Offset: 0x4a0, Size: 0x4]
	int virtualitemid;//[Offset: 0x4bc, Size: 0x4]
	bool IsForbidAutoEquipAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	int[] NeedToShowTypeList;//[Offset: 0x4d0, Size: 0x10]
	bool bVerifyWeaponPackageData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]
	bool bShowBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1, Size: 0x1]
	delegate BackpackShowBountyDelegate;//[Offset: 0x4e8, Size: 0x10]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x68b72b8
	float UpdateStoreAreaOccupiedCapacity(out float StoreAreaOccupiedCapacity, enum InItemStoreArea);// 0x68b71d4
	void UpdateOccupiedCapacity();// 0x68b71b8
	float UpdateCapacity();// 0x68b717c
	void UnlockUpdateItemListReceive();// 0x68b7168
	void TryMergeItemHandles(out const ItemDefineID DefineID, enum InItemStoreArea);// 0x68b7090
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x68b6f70
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x68b6e7c
	void ServerSetShowBounty(bool bInShowBounty);// 0x68b6db8
	void ServerSetCustomAccessories(int WeaponItemID, int Index, int ItemId);// 0x68b6c90
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x68b6b68
	int ReturnItem(ItemDefineID DefineID, int Count, bool bCallHandlePickup);// 0x68b6a48
	bool RemoveItemHandle(out const ItemDefineID DefineID);// 0x68b699c
	void ReceiveItemList();// 0x68b6980
	void ReceiveCapacity();// 0x68b6964
	int PreCheckCanPickupBagAvatar(BattleItemHandleBase* NewHandle, BattleItemHandleBase* OldHandle, enum reson);// 0x68b685c
	void PostItemHandleEquippingState(out const ItemDefineID DefineID, bool bEquipping);// 0x68b677c
	bool PickupItemFromWrapperDetail(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x68b6500
	bool PickUpItem_Default(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason);// 0x68b62c0
	bool PickupItem(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x68b6044
	void PickupBattleItemOnPlane();// 0x68b6030
	bool PickItem_IntoSafetyBox(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason);// 0x68b5df0
	bool PickItem_IntoBackpack(out const ItemDefineID DefineID, out const BattleItemPickupInfo PickupInfo, enum Reason);// 0x68b5bb0
	void OnRep_specialCountLimit();// 0x68b5b9c
	void OnRep_ItemListNet();// 0x68b5b88
	void OnRep_Capacity();// 0x68b5b74
	void NotifyItemUpdated(out const ItemDefineID DefineID);// 0x68b5adc
	void NotifyItemRemoved(out const ItemDefineID DefineID);// 0x68b5a44
	void NotifyItemListUpdated();// 0x68b5a28
	void NotifyCapacityUpdated();// 0x68b5a0c
	BattleItemHandleBase* NewItemHandle(out const ItemDefineID DefineID);// 0x68b5964
	ItemDefineID NewItemDefineID(out const ItemDefineID DefineID);// 0x68b58ac
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x68b57ec
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int Count);// 0x68b5734
	void ModifyAutoPickClipType(int InAutoPickClipType);// 0x68b5684
	void ModifyAimNotAutoUse(bool bAdd);// 0x68b55c0
	void LockUpdateItemListReceive();// 0x68b55ac
	BattleItemData ItemNet2Data(out const NetArrayUnit NetItem);// 0x68b542c
	bool IsNeedToShowInBackpack(int TypeDefineID);// 0x68b539c
	bool IsItemListUpdatedHasSomeItemTypes(out const int[] ItemTypes);// 0x68b52d0
	bool IsItemListUpdatedHasSomeItemSubTypes(out const int[] ItemSubTypes);// 0x68b5204
	bool IsItemListUpdatedHasSomeItems(out const int[] ItemTypeSpecificIDs);// 0x68b5138
	bool IsItemListUpdatedHasOneItemType(int itemType);// 0x68b50a8
	bool IsItemListUpdatedHasOneItemSubType(int ItemSubType);// 0x68b5018
	bool IsItemListUpdatedHasOneItem(int ItemTypeSpecificID);// 0x68b4f88
	bool IsItemExist(out const ItemDefineID DefineID);// 0x68b4edc
	bool IsEnableWeaponAttachmentBindToWeapon();// 0x68b4e9c
	bool IsEnableBackpackRepActor();// 0x68b4e64
	bool IsCustomIgnoreAccessories(int WeaponId, int Index);// 0x68b4d9c
	bool IsCustomAccessories(int WeaponId, int ItemId);// 0x68b4cd4
	bool IsBackPackContainItemId(int ItemId);// 0x68b4c44
	bool IsAutoUse(int ItemId);// 0x70644c4
	bool HasUnEquipItemByDefindIdRange(int LowValue, int HighValue);// 0x68b4b7c
	bool HasTagSub(int ItemId, out const FName TagName);// 0x70644c4
	bool HasItemBySubType(int SubType);// 0x68b4aec
	bool HasItemByDefineID(out const ItemDefineID DefineID);// 0x68b4a48
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x68b4980
	void HandleDropInDisuse(out const ItemDefineID DefineID, BattleItemHandleBase* ItemHandle, enum Reason, float OccupiedCapacityBeforeDisuse);// 0x68b4828
	World* GetWorld_BP();// 0x68b47f4
	int GetUnEquipItemNumByItemId(int ItemId);// 0x68b4768
	SpecialPickInfo GetSpecialItemNow(ItemDefineID DefineID);// 0x68b46c8
	SpecialPickInfo GetSpecialItemBefore(int ItemResId);// 0x68b4638
	float GetSafetyBoxCapacity();// 0x68b45fc
	BattleItemData GetLeastElectrictyBattleItemData(ItemDefineID DefineID, enum AdditionalDataNameType);// 0x68b44fc
	int GetItemSubType(int ItemId);// 0x70644c4
	BattleItemData[] GetItemListByDefineID(out const ItemDefineID DefineID);// 0x68b4388
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x68b4348
	ItemHandleBase*[] GetItemHandleList();// 0x68b42bc
	int GetItemCountByType(int InItemType);// 0x68b4230
	int GetItemCountByItemSpecialID(int InItemSpecialID);// 0x68b41a4
	BattleItemData GetItemByDefineID(out const ItemDefineID DefineID);// 0x68b40dc
	float GetItemAssociateWeights(out const BattleItemData InItemData);// 0x68b4020
	BattleItemData GetFirstItemBySubType(int SubType);// 0x68b3f6c
	BattleItemData GetFirstItemByDefineIDIgnoreInstance(out const ItemDefineID DefineID);// 0x68b3ea4
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out const ItemDefineID DefineID);// 0x68b3de4
	BattleItemData[] GetAllItemList(enum InItemStoreArea);// 0x68b3c84
	enum GetAIPickupType(int ItemId);// 0x68b3bf0
	void ForceNetUpdate();// 0x68b3bd4
	bool DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x68b3ab4
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x68b39d0
	BattleItemHandleBase* CreateItemHandleInternal(out const ItemDefineID DefineID);// 0x68b3928
	ItemHandleBase* CreateItemHandle(out const ItemDefineID DefineID);// 0x68b3880
	int ConsumeItem(ItemDefineID DefineID, int Count);// 0x68b37a8
	void ClientBroadcastItemOperationFailedDelegate(const ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x68b36a8
	void ClientBroadcastItemOperationDelegate(const ItemDefineID DefineID, enum OperationType, byte Reason);// 0x68b35a8
	int CheckSpecialMaxCountForItem(out const ItemDefineID DefineID, int Count);// 0x68b34c8
	bool CheckSkillPropItemCanBePickup(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x68b33e0
	bool CheckPickUpItemDefaultSuccess(out const ItemDefineID DefineID, bool bPickupSucc, bool bAutoEquip);// 0x68b32a0
	int CheckLeftLimitCountForItem(int InItemID, int InCount);// 0x68b31d4
	void CheckItemEmptyInBackpack(int InItemID);// 0x68b3158
	int CheckCapacityForItem(out const ItemDefineID DefineID, int Count, enum InItemStoreArea);// 0x68b3034
	bool ChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x68b2f14
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x68b2e6c
	bool CacheItemAssociationBeforeDisuse(ItemDefineID DefineID, enum Reason);// 0x68b2d88
	void BroadcastItemOperCountDelegate(out const ItemDefineID DefineID, enum OperationType, int Count);// 0x68b2c74
	void BroadcastItemOperationInfoDelegate(out const ItemOperationInfo ItemOperationInfo);// 0x68b2bd8
	void BroadcastItemOperationFailedDelegate(out const ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x68b2ac4
	void BroadcastItemOperationDelegate(out const ItemDefineID DefineID, enum OperationType, byte Reason);// 0x68b29b0
	bool AlternativePickupItem(out ItemDefineID DefineID);// 0x68b2904
	bool AddItemHandle(out const ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x68b2818
	void AddBattleItemPickupOnPlane(out ItemDefineID DefineID, out BattleItemPickupInfo PickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x68b25b8
<----------Generated by SSpawner v1.0.4---------->


Class: CustomAccessoriesData
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int ItemId;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemPickupAfterLand
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	BattleItemPickupInfo PickupInfo;//[Offset: 0x18, Size: 0x58]
	enum Reason;//[Offset: 0x70, Size: 0x1]
	enum BattleItemClientPickupType;//[Offset: 0x71, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SpecialPickInfo
	int item_id;//[Offset: 0x0, Size: 0x4]
	int cur_count;//[Offset: 0x4, Size: 0x4]
	int total_count;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: IncNetArray
	NetArrayUnit[] IncArray;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0, Size: 0x48]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	int Count;//[Offset: 0x18, Size: 0x4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	enum ItemStoreArea;//[Offset: 0x1d, Size: 0x1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20, Size: 0x10]
	ItemAssociation[] Associations;//[Offset: 0x30, Size: 0x10]
	int Durability;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemOperationInfo
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	enum BattleItemOperationType;//[Offset: 0x18, Size: 0x1]
	byte Reason;//[Offset: 0x19, Size: 0x1]
	int Count;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackRepActor.PlayerReliableSequentialSyncActor.PlayerActorChannelExActor.Actor.Object
	BackpackComponent* BackpackComp;//[Offset: 0x408, Size: 0x8]
	IncNetArray ItemListNet;//[Offset: 0x410, Size: 0x20]
	void OnRep_ItemListNet();// 0x68bb9a0
	void NotifyItemUpdated(out const ItemDefineID DefineID, out const BattleItemData ItemData);// 0x68bb898
	void NotifyItemRemoved(out const ItemDefineID DefineID, out const BattleItemData ItemData);// 0x68bb790
	void NotifyItemEmpty(int Slack);// 0x68bb714
	void NotifyItemAdded(out const ItemDefineID DefineID, out const BattleItemData ItemData);// 0x68bb60c
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerReliableSequentialSyncActor.PlayerActorChannelExActor.Actor.Object
	PlayerController* OwningController;//[Offset: 0x400, Size: 0x8]
	void OnActorSpawned(Actor* Actor);// 0x648cbb4
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerActorChannelExActor.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: CommonBtnComponent.ActorComponent.Object
	float CheckDoorDistanceSqr;//[Offset: 0x110, Size: 0x4]
	PUBGDoor* TriggeredDoor;//[Offset: 0x118, Size: 0x8]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0x120, Size: 0x8]
	void SetAutoOpenDoorMode(int Mode);// 0x5e4e5e0
	void SetAutoOpenDoorEnable(bool bEnable);// 0x5e4e55c
	void RPC_Server_DoorState(PUBGDoor* actionDoor, int ClientDoorState);// 0x5e4e46c
	void RPC_Client_DoorState(PUBGDoor* actionDoor, int DoorState);// 0x5e4e37c
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x5e4e2ec
	PUBGDoor* GetPriorityDoor();// 0x5e4e2b8
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor, int ClientDoorState);// 0x5e4e174
	void BP_SimulateUIClick(bool bExtraDoor);// 0x70644c4
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: PUBGDoor.UAENetActor.LuaActor.Actor.Object
	int iRegionDoor;//[Offset: 0x574, Size: 0x4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]
	float MaxNetCullDistanceSquared;//[Offset: 0x57c, Size: 0x4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 0x1]
	float autoOpenDistanceSquared;//[Offset: 0x584, Size: 0x4]
	float autoOpenAngel;//[Offset: 0x588, Size: 0x4]
	float forwardSpeedRatio;//[Offset: 0x58c, Size: 0x4]
	int DoorState;//[Offset: 0x590, Size: 0x4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 0x1]
	float DoorOperateTime;//[Offset: 0x598, Size: 0x4]
	StaticMeshComponent* doorMesh;//[Offset: 0x5a0, Size: 0x8]
	BoxComponent* interactionBox;//[Offset: 0x5a8, Size: 0x8]
	BoxComponent* interForceBox;//[Offset: 0x5b0, Size: 0x8]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	int DoorStateEx;//[Offset: 0x5bc, Size: 0x4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x5c8, Size: 0x8]
	BoxComponent* interactionBoxEx;//[Offset: 0x5d0, Size: 0x8]
	BoxComponent* interForceBoxEx;//[Offset: 0x5d8, Size: 0x8]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]
	bool bIsFobidUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 0x1]
	bool bIsFobidAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e2, Size: 0x1]
	delegate OnDoorBrokenDelegate;//[Offset: 0x5e8, Size: 0x10]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x5f8, Size: 0x10]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x608, Size: 0x4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 0x1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60d, Size: 0x1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60e, Size: 0x1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60f, Size: 0x1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 0x1]
	Character* PlayerCharacter;//[Offset: 0x618, Size: 0x8]
	float autoOpenAngelCosinValue;//[Offset: 0x620, Size: 0x4]
	StaticMesh* InitialMesh_C;//[Offset: 0x630, Size: 0x8]
	bool bInitedDataBeforeBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	FName DoorMeshCollisionProfileBeforeBroken;//[Offset: 0x640, Size: 0x8]
	FName DoorMeshBoxCollisionProfileBeforeBroken;//[Offset: 0x648, Size: 0x8]
	CollisionResponseContainer DoorMeshBoxCollisionResponses;//[Offset: 0x658, Size: 0x20]
	bool WasBrokenForObjectPoolReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1]
	DoorOpenConfig DoorOpenConfig;//[Offset: 0x680, Size: 0x10]
	ExDoorOpenConfig ExDoorOpenConfig;//[Offset: 0x690, Size: 0x10]
	void SetDoorBroken(bool bExtraDoor, Controller* EventInstigator);// 0x6015b50
	void RefreshUIOnClient();// 0x6015b3c
	void RecordBreakDoorTlog(PlayerController* EventInstigator);// 0x6015ac0
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x6015a00
	void OnRep_RepDoorStateEx();// 0x60159ec
	void OnRep_RepDoorState();// 0x60159d8
	void OnRep_RepDoorBrokenEx();// 0x60159c4
	void OnRep_RepDoorBroken();// 0x60159b0
	void OnRep_ExDoorOpenConfig();// 0x601599c
	void OnRep_DoorOpenConfig();// 0x6015988
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x601585c
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x6015730
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x6015670
	void OnBPRespawned();// 0x6015654
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x601544c
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x6015244
	void On_DoorAniFinsih(const BoxComponent* InDoorCheckBox, bool extraDoor);// 0x6015184
	bool IsSameDoorState(int ClientState);// 0x60150f4
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx, BoxComponent* interForceBox, BoxComponent* interForceBoxEx);// 0x6014f08
	enum[] GetDamageableGameObjectType();// 0x6014e5c
	void ForceNetUpdate();// 0x6014e40
	void DeCodeKey();// 0x6014e24
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x6014d64
	void ClientDoorRPC(int iDoorState, bool bDoorBroken, int iDoorStateEx, bool bDoorBrokenEx);// 0x6014c14
	void BPSetObjectPoolInitialData();// 0x6014bf8
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x70644c4
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x70644c4
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: DoorOpenConfig
	int DoorState;//[Offset: 0x0, Size: 0x4]
	STExtraBaseCharacter* Character;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ExDoorOpenConfig
	int DoorStateEx;//[Offset: 0x0, Size: 0x4]
	STExtraBaseCharacter* Character;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ChatComponent.LuaActorComponent.ActorComponent.Object
	int end_time;//[Offset: 0x1d8, Size: 0x4]
	FString Reason;//[Offset: 0x1e0, Size: 0x10]
	int[] audioChat;//[Offset: 0x1f0, Size: 0x10]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0x200, Size: 0x10]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0x210, Size: 0x10]
	QuickChatOption[] allChatOption;//[Offset: 0x220, Size: 0x10]
	int MinTraceDist;//[Offset: 0x230, Size: 0x4]
	FString TeammateColor;//[Offset: 0x238, Size: 0x10]
	FString MyColor;//[Offset: 0x248, Size: 0x10]
	<int,FString> ActorNameList;//[Offset: 0x258, Size: 0x50]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x2a8, Size: 0x50]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x2f8, Size: 0x10]
	float SendMsgCD;//[Offset: 0x308, Size: 0x4]
	float lastShowChatTime;//[Offset: 0x30c, Size: 0x4]
	float ShowChatDuration;//[Offset: 0x310, Size: 0x4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x318, Size: 0x10]
	FString EndChar;//[Offset: 0x328, Size: 0x10]
	FString ColonChar;//[Offset: 0x338, Size: 0x10]
	<int,int> TextID2AudioID;//[Offset: 0x348, Size: 0x50]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x398, Size: 0x10]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x3a8, Size: 0x8]
	byte[] ExtendParamsCache;//[Offset: 0x3b8, Size: 0x10]
	int itemIDOnGround;//[Offset: 0x3d8, Size: 0x4]
	int itemOnGroundNetGUID;//[Offset: 0x3dc, Size: 0x4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x3e0, Size: 0x8]
	Vector hitItemPosition;//[Offset: 0x3e8, Size: 0xc]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1]
	Vector hitGroundPosition;//[Offset: 0x3f8, Size: 0xc]
	FString CongregationPlayerName;//[Offset: 0x408, Size: 0x10]
	FString CongregationPlayerKey;//[Offset: 0x418, Size: 0x10]
	InGameChatMsg CurrMsg;//[Offset: 0x428, Size: 0x70]
	bool bLoadBankAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	bool AutoLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 0x1]
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x70644c4
	void TransformMsgAndSend(FString Msg, int MsgID, int ItemId, FString PlayerKeyString, int MsgExtraParam, byte CheckSetting, bool bIncludeTeammates);// 0x5e412bc
	void ShowTeamMsg(out const InGameChatMsg MsgItem, bool isMe, bool ShowChat, bool PlaySound, bool bControlByMaxShowDis);// 0x5e410d0
	void ShowQuickPanel(bool bShow);// 0x5e4104c
	void SetExtendParamsCache(out const byte[] Content);// 0x5e40f94
	void ServerSendMsg(const InGameChatMsg MsgItem, byte CheckSetting, bool bIncludeTeammates);// 0x5e40e14
	void ServerSendGift(const InGameChatMsg MsgItem);// 0x5e40d2c
	void SendDirtyFilterContent(FString Content);// 0x70644c4
	void SendDirtyFilter(FString Name, FString Content, bool isMe, bool bSTTMsg);// 0x70644c4
	void ReportBattleChat(int MsgID, FString Msg, int MsgExtraParam);// 0x70644c4
	void OnInviteNextBattle(FString gid, FString Name);// 0x5e40c1c
	void OnFilterFinishWithMsgID(FString filterText, int MsgID, FString Name);// 0x70644c4
	void OnFilterFinish(FString filterText);// 0x70644c4
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x70644c4
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x70644c4
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x70644c4
	void MakeQuickSignMark(out const InGameChatMsg MsgItem, bool isMe, enum flagType, bool bControlByMaxShowDis);// 0x5e40a84
	void LoadBankAndPlay(FString BankName, FString EventName);// 0x5e40974
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x5e40820
	void FindTextIDByAudioID();// 0x70644c4
	void CloseChatHistoryList();// 0x70644c4
	void ClientReceiveMsg(const InGameChatMsg MsgItem, bool isMe, byte CheckSetting);// 0x5e406d8
	void ClientReceiveGift(const InGameChatMsg MsgItem, bool isMe);// 0x5e405d4
	bool CheckSpecialChatCD(int MsgID);// 0x5e40544
	byte CheckIsNeedShow(byte CheckSetting);// 0x5e404b0
	void AddQuickAudio(AkAudioEvent* audio, int chatID);// 0x5e403f8
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x70644c4
	void AddOneMarkToUI(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x70644c4
	void AddFriendChat(FString gid, FString Name, FString Content, bool IsSelf);// 0x5e400c8
<----------Generated by SSpawner v1.0.4---------->


Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0, Size: 0x4]
	int RealTextID;//[Offset: 0x4, Size: 0x4]
	int AlternateTextID;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: QuickChatOption
	int chatTextID;//[Offset: 0x0, Size: 0x4]
	AkAudioEvent* audioEvent1;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString Content;//[Offset: 0x10, Size: 0x10]
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int MsgType;//[Offset: 0x24, Size: 0x4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: QuickChatFlag
	enum Type;//[Offset: 0x0, Size: 0x1]
	int[] chatIDList;//[Offset: 0x8, Size: 0x10]
	int AlternateChatID;//[Offset: 0x18, Size: 0x4]
	int FlagIndex;//[Offset: 0x1c, Size: 0x4]
	int traceDist;//[Offset: 0x20, Size: 0x4]
	float minDist;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: QuickGroundFlag
	int Index;//[Offset: 0x0, Size: 0x4]
	int flagID;//[Offset: 0x4, Size: 0x4]
	Vector hitPosition;//[Offset: 0x8, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: InGameFilterChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0x154, Size: 0x4]
	float PickUpZLimit;//[Offset: 0x158, Size: 0x4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x160, Size: 0x10]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x170, Size: 0x4]
	float FindPutDownPointZThreshold;//[Offset: 0x174, Size: 0x4]
	float FindPutDownPointZHalfHeightAdjust;//[Offset: 0x178, Size: 0x4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x17c, Size: 0x4]
	Vector2D RegionXRange;//[Offset: 0x180, Size: 0x8]
	Vector2D RegionYRange;//[Offset: 0x188, Size: 0x8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x194, Size: 0xc]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x1a0, Size: 0x4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x1a4, Size: 0x4]
	float DrawTime;//[Offset: 0x1a8, Size: 0x4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 0x1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x1b0, Size: 0x8]
	<SearchedPickUpItemResult,float> RecentAutoPickupMap;//[Offset: 0x1b8, Size: 0x50]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x208, Size: 0x10]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x218, Size: 0x10]
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x5fcce1c
	void ServerPutDownTarget(Actor* Target);// 0x5fccd6c
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x5fccc04
	void ServerPickUpAttachmentTarget(Actor* Target, const PickUpItemData ItemData, enum PickupAttachmentAdditionalDataType, ItemDefineID TargetDefineID);// 0x5fcc9c4
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x5fcc90c
	void PutDownTarget(Actor* Target);// 0x5fcc890
	void PickUpTargetAttachment(Actor* Target, out const PickUpItemData ItemData, enum PickupAttachmentAdditionalDataType, ItemDefineID TargetDefineID);// 0x5fcc690
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x5fcc564
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x5fcc4e8
	void NotifyMeetPickupAvailableActor(Actor* Target, bool bUpdatePickupManager);// 0x5fcc428
	void MarkRecentAutoPickUp(SearchedPickUpItemResult PickUpResult);// 0x5fcc20c
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x5fcc17c
	Vector[] GetNearItemLocationList(out const Vector TargetLoc, float Radius, float IgnoreDist, uint32[] ItemIDs);// 0x5fcbf08
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x5fcbe24
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x5fcbd30
	void ControlClientPutDownTarget(Actor* Target);// 0x5fcbc80
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x5fcbb90
	void ControlClientPickUpAttachmentTarget(Actor* Target, int AdditionalParam, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x5fcb9e4
	void ClampWorldLocation(out Vector OutVector);// 0x5fcb95c
	bool CheckRecentAutoPickUp(SearchedPickUpItemResult PickUpResult, float OverTime);// 0x5fcb6f8
<----------Generated by SSpawner v1.0.4---------->


Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 0x8]
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 0x38]
<----------Generated by SSpawner v1.0.4---------->


Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	uint32 playerIdentifier;//[Offset: 0x10, Size: 0x4]
	FString msgContent;//[Offset: 0x18, Size: 0x10]
	int MsgID;//[Offset: 0x28, Size: 0x4]
	int audioID;//[Offset: 0x2c, Size: 0x4]
	int ItemId;//[Offset: 0x30, Size: 0x4]
	FString PlayerKeyString;//[Offset: 0x38, Size: 0x10]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	Vector hitPosition;//[Offset: 0x4c, Size: 0xc]
	int itemIDOnGround;//[Offset: 0x58, Size: 0x4]
	bool bSTTMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	byte[] ExtendParams;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GuideComponent.ActorComponent.Object
	GuideInfo[] WidgetList;//[Offset: 0x110, Size: 0x10]
	Widget* MaskWidget;//[Offset: 0x120, Size: 0x8]
	void SetMaskWidgetOnTop(bool bTop);// 0x5f1b170
	void CreateGuideUI();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: GuideInfo
	Widget* Widget;//[Offset: 0x0, Size: 0x8]
	int guildUI;//[Offset: 0x8, Size: 0x4]
	Vector2D Offset;//[Offset: 0xc, Size: 0x8]
	Vector2D Size;//[Offset: 0x14, Size: 0x8]
	int childData;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: QuickSignComponent.LuaActorComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0x1d8, Size: 0x10]
	delegate OnDelSignMarkDelegate;//[Offset: 0x1e8, Size: 0x10]
	delegate OnDangerousQuickSignDelegate;//[Offset: 0x1f8, Size: 0x10]
	delegate FOnSignPickUpActoDelegate;//[Offset: 0x208, Size: 0x10]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	int TextID_OutRange;//[Offset: 0x21c, Size: 0x4]
	FString PreFix_Command;//[Offset: 0x220, Size: 0x10]
	FString PreFix_Command_Res;//[Offset: 0x230, Size: 0x10]
	FString PreFix_Mark;//[Offset: 0x240, Size: 0x10]
	FString PreFix_MarkBox;//[Offset: 0x250, Size: 0x10]
	FName IgnoreTag;//[Offset: 0x260, Size: 0x8]
	int MinTraceDist;//[Offset: 0x268, Size: 0x4]
	int MaxTraceDist;//[Offset: 0x26c, Size: 0x4]
	int ItemTraceDist;//[Offset: 0x270, Size: 0x4]
	int MarkMutualExclusionDist;//[Offset: 0x274, Size: 0x4]
	int MiniMapAttentionIconID;//[Offset: 0x278, Size: 0x4]
	int MiniMapThingIconID;//[Offset: 0x27c, Size: 0x4]
	float MinHighLightDangerousTime;//[Offset: 0x280, Size: 0x4]
	float MinHighLightDangerousDistance;//[Offset: 0x284, Size: 0x4]
	float DangerousMarkLifeSpan;//[Offset: 0x288, Size: 0x4]
	<int,DangerousSignInfo> LastDangerousID;//[Offset: 0x290, Size: 0x50]
	int MarkMaxNum;//[Offset: 0x2e0, Size: 0x4]
	float ReplyDelayTime;//[Offset: 0x2e4, Size: 0x4]
	bool bHasSendLongPressTLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	bool bLoadBankAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x2f0, Size: 0x8]
	<int,FString> CommandTypeIDMap;//[Offset: 0x2f8, Size: 0x50]
	<class Object,FString> MarkNameClassMap;//[Offset: 0x348, Size: 0x50]
	<int,FString> BoxTypeNameMap;//[Offset: 0x398, Size: 0x50]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x3e8, Size: 0x50]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x438, Size: 0x50]
	FString[] HasReplyMsg;//[Offset: 0x488, Size: 0x10]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x498, Size: 0x50]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x4e8, Size: 0x50]
	int[] ServerCachedNetGUIDs;//[Offset: 0x538, Size: 0x10]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x548, Size: 0x10]
	FString[] TempIDArray;//[Offset: 0x558, Size: 0x10]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x568, Size: 0x50]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x5b8, Size: 0x50]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x660, Size: 0x50]
	<FString,enum> ConfigKeyToSignSubType;//[Offset: 0x6b0, Size: 0x50]
	byte MaxSendCountPerSecond;//[Offset: 0x700, Size: 0x1]
	<FString,QuickSignMark> CustomMarkInfoMap;//[Offset: 0x758, Size: 0x50]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x602cfb4
	void SpectatorActorMark(out const QuickSignMsg OriMarkInfo, out QuickSignMsg MarkInfo, Actor* Actor);// 0x70644c4
	void ShowMsgTipsVoice(out const QuickSignMsg MsgItem, bool IsSelf, FString PlayerKey);// 0x70644c4
	void ServerSendMsg(const QuickSignMsg MsgItem, byte SignType);// 0x602ce88
	void ServerMarkCustom(out const QuickSignMsg MsgItem, float ShareDistance, bool ShareWithTeammates);// 0x602cd34
	void ServerDelNetGuid(int Guid);// 0x602ccb8
	void ServerDelMsg(FString MsgID);// 0x602cbdc
	void ServerDelCustomMark(FString MsgID, bool ShareWithTeammates);// 0x602caa8
	void ServerAddNetGuid(int Guid);// 0x602ca2c
	void ReportQuickSign(out const QuickSignMsg MsgItem);// 0x70644c4
	void RemoveActorMask(int ActorNetGUID);// 0x602c97c
	void OperMark(FString MsgID);// 0x602c8d4
	void OnPickUpActor(int Guid);// 0x602c858
	void MakeQuickNeed(enum SignSubType);// 0x602c7dc
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor, int RelationID, bool bNeedTransform);// 0x602c6e0
	void MakeQuickMark();// 0x602c6cc
	void MakeQuickCommand(byte SignType);// 0x602c650
	void MakeCustomMark(Vector targetPos, FString SignConfigKey);// 0x602c568
	bool IsSelfMark(FString MsgID);// 0x602c4ac
	bool IsContainMark(FString MsgID);// 0x602c3f0
	int GetVoiceAudioID(enum MsgType);// 0x70644c4
	bool GetRelationActorMsg(int ActorGUID, int RelationID, out QuickSignMsg MsgItem);// 0x602c2a0
	bool GenerateMarkInfo(out const QuickSignMsg MsgItem, out QuickSignMark MarkInfo);// 0x70644c4
	FString FindMarkNameClassKey(class Object uMarkClass);// 0x602c19c
	void DelSpecialReplyMsg(out const QuickSignMark MsgItem);// 0x602c0dc
	void DelMarkFromPool(FString MsgMark, bool bIsCheckSenderMap);// 0x602bfec
	void DelAllMarkMsgForReplay();// 0x602bfd8
	void DealWithNewMsg(out const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey, bool ShowChat, bool bControlByMaxShowDis);// 0x602bd40
	void DealWithMarkCustomMsg(out const QuickSignMsg MsgItem, bool IsSelf);// 0x602bc28
	void ClientReceiveMsg(const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey);// 0x602bab4
	void ClientMarkCustomMsg(const QuickSignMsg MsgItem, bool IsSelf);// 0x602b9b0
	void ClientDelMsg(FString MsgID);// 0x602b900
	void ClientDelCustomMarkMsg(FString MsgID);// 0x602b850
	void CheckMsgValid();// 0x602b83c
	void AnalysisConfigKeyClass(FString ConfigId, FString ConfigScriptParam);// 0x602b72c
	void AddSpecialReplyMsg(out const QuickSignMark MsgItem);// 0x602b66c
	void AddRelationActorMap(out const QuickSignMsg MsgItem);// 0x602b5a4
	void AddNewMark(out const QuickSignMsg MsgItem, bool IsSelf, FString SenderPlayerKey, bool bControlByMaxShowDis);// 0x602b358
	void AddMarkToPool(out const QuickSignMark MsgMark, FString SenderPlayerKey);// 0x602b19c
	void AddActorMask(int ActorNetGUID);// 0x602b0ec
<----------Generated by SSpawner v1.0.4---------->


Class: DangerousSignInfo
	FString MsgID;//[Offset: 0x0, Size: 0x10]
	Vector LastDangerousLocation;//[Offset: 0x10, Size: 0xc]
	float LastMarkDangerousTime;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: QuickSignMark
	FString MsgID;//[Offset: 0x0, Size: 0x10]
	FString MarkType;//[Offset: 0x10, Size: 0x10]
	FString IconPath;//[Offset: 0x20, Size: 0x10]
	FString IconBGPath;//[Offset: 0x30, Size: 0x10]
	FString IconOuterPath;//[Offset: 0x40, Size: 0x10]
	FString IconOuterBGPath;//[Offset: 0x50, Size: 0x10]
	FString IconOutScreenIconPath;//[Offset: 0x60, Size: 0x10]
	FString IconOutScreenBGPath;//[Offset: 0x70, Size: 0x10]
	FString IconOutScreenArrowPath;//[Offset: 0x80, Size: 0x10]
	FString ReplyID;//[Offset: 0x90, Size: 0x10]
	Vector Loc;//[Offset: 0xa0, Size: 0xc]
	int MaxNum;//[Offset: 0xac, Size: 0x4]
	int LifeSpan;//[Offset: 0xb0, Size: 0x4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	FString SenderPlayerKey;//[Offset: 0xb8, Size: 0x10]
	bool bControlByMaxShowDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0x110, Size: 0x8]
	FString OwningPlayerName;//[Offset: 0x118, Size: 0x10]
	int RetrieveUseItemAreaType(int ItemId, Vector PlayerLocation);// 0x5df728c
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x5df7200
	int[] RetrieveTaskAreaList(Vector PlayerLocation);// 0x5df710c
	int RetrieveLandLocType(FString TargetName);// 0x5df6fd0
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName);// 0x5df6c80
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0x70644c4
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0x70644c4
	int[] GetTaskAreaListFromDataTable(Vector InPlayerLocation);// 0x70644c4
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0x70644c4
	FString GetOwningPlayerName();// 0x5df6bdc
	FString GetMapName();// 0x5df6b38
	int GetLandLocIDFromDataTable(FString InTargetName);// 0x70644c4
	int GetItemUseAreaIDFromDataTable(int ItemId, Vector InPlayerLocation);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemSpectatingData
	int TypeSpecificID;//[Offset: 0x0, Size: 0x4]
	int AdditionalData;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: FriendObserver
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	byte gender;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SyncOBDataActor.Actor.Object
	PlayerStaticInfoInOB[] TotalPlayersStatic;//[Offset: 0x3f8, Size: 0x10]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x408, Size: 0x10]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x418, Size: 0x10]
	PlayerBreathInfoList PlayerBreathInfoList;//[Offset: 0x428, Size: 0x20]
	PlayerFiringList PlayerFiringList;//[Offset: 0x448, Size: 0x10]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x458, Size: 0x10]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x468, Size: 0x10]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x478, Size: 0x10]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x488, Size: 0x10]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x498, Size: 0x50]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	bool bRefreshPosWhenDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 0x1]
	void OnRep_TotalPlayersStaticInfo();// 0x6262698
	void OnRep_RefreshTotalPlayers();// 0x6262684
	void OnRep_RefreshAirDropBox();// 0x6262670
	void OnRep_PlayerFiringList();// 0x626265c
	void OnRep_PlayerBreathInfoList();// 0x6262648
	Vector GetNewestAirDropBoxPos();// 0x6262610
	PlayerInfoInOB[] GetNearPlayerList();// 0x62624f8
	float GetBreath(uint32 InPlayerKey);// 0x626246c
	AirDropBoxInOb[] GetAirDropBoxList();// 0x62623e4
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	FString PlayerOpenID;//[Offset: 0x10, Size: 0x10]
	FString PicUrl;//[Offset: 0x20, Size: 0x10]
	int TeamID;//[Offset: 0x30, Size: 0x4]
	byte IndexInMap;//[Offset: 0x34, Size: 0x1]
	uint64 UID;//[Offset: 0x38, Size: 0x8]
	uint32 PlayerKey;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerBaseInfoInOB
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 0xc]
	int Health;//[Offset: 0xc, Size: 0x4]
	int HealthMax;//[Offset: 0x10, Size: 0x4]
	int LiveState;//[Offset: 0x14, Size: 0x4]
	int KillNum;//[Offset: 0x18, Size: 0x4]
	int KillNumBeforeDie;//[Offset: 0x1c, Size: 0x4]
	uint32 PlayerKey;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AirDropBoxInOb
	int boxId;//[Offset: 0x0, Size: 0x4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector pos;//[Offset: 0x8, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerBreathInfoList
	uint64 PlayerIndexLow;//[Offset: 0x0, Size: 0x8]
	uint64 PlayerIndexHigh;//[Offset: 0x8, Size: 0x8]
	byte[] BreathList;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerFiringList
	uint64 PlayerFiringIndexLow;//[Offset: 0x0, Size: 0x8]
	uint64 PlayerFiringIndexHigh;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerInfoInOB.PlayerBaseInfoInOB
	uint64 UID;//[Offset: 0x28, Size: 0x8]
	FString PlayerName;//[Offset: 0x30, Size: 0x10]
	FString PlayerOpenID;//[Offset: 0x40, Size: 0x10]
	FString PicUrl;//[Offset: 0x50, Size: 0x10]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int TeamID;//[Offset: 0x64, Size: 0x4]
	FString TeamName;//[Offset: 0x68, Size: 0x10]
	Pawn* Character;//[Offset: 0x78, Size: 0x8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bHasDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0, Size: 0x4]
	FString TeamName;//[Offset: 0x8, Size: 0x10]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FString LogoPicUrl;//[Offset: 0x20, Size: 0x10]
	int KillNum;//[Offset: 0x30, Size: 0x4]
	int LiveMemberNum;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIPlayerInfoInOB
	FString PlayerKey;//[Offset: 0x0, Size: 0x10]
	int TeamID;//[Offset: 0x10, Size: 0x4]
	Pawn* Character;//[Offset: 0x14, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AllStarReportData
	bool bShowReportFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int BeReportedNum;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ObservedData
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	FString PicUrl;//[Offset: 0x10, Size: 0x10]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int TeamID;//[Offset: 0x24, Size: 0x4]
	uint64 UID;//[Offset: 0x28, Size: 0x8]
	Vector[] PosList;//[Offset: 0x30, Size: 0x10]
	uint32 PlayerKey;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: OwnerClientCreateWeaponCache
	ItemDefineID[] IDList;//[Offset: 0x0, Size: 0x10]
	uint32 CharacterGUID;//[Offset: 0x10, Size: 0x4]
	int SyncTicket;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponMgrInfo
	ItemDefineID[] ItemList;//[Offset: 0x0, Size: 0x10]
	WeaponManagerComponent* WeaponMgr;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0x158, Size: 0x50]
	FName LeftLogicSocketName;//[Offset: 0x1a8, Size: 0x8]
	FName RightLogicSocketName;//[Offset: 0x1b0, Size: 0x8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x1b8, Size: 0x50]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x208, Size: 0x50]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x258, Size: 0x4]
	bool ShowMainWeaponModelOnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	FName CurUseWeaponLogicSocket;//[Offset: 0x260, Size: 0x8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x268, Size: 0x8]
	FName NextUseWeaponLogicSocket;//[Offset: 0x270, Size: 0x8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x280, Size: 0x8]
	FName LastUseLogicSlot;//[Offset: 0x288, Size: 0x8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	bool EnableResyncSpawnPolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 0x1]
	float ResyncTimeBias;//[Offset: 0x294, Size: 0x4]
	float NextResyncTimestamp;//[Offset: 0x298, Size: 0x4]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x2a0, Size: 0x10]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x2b0, Size: 0x10]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x2c0, Size: 0x10]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x2d0, Size: 0x10]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x2e0, Size: 0x10]
	delegate SimulatedWeaponChangedDelegate;//[Offset: 0x2f0, Size: 0x10]
	delegate WeaponSystemAttachDataChangedDelegate;//[Offset: 0x300, Size: 0x10]
	delegate NextUseWeaponChangedDelegate;//[Offset: 0x320, Size: 0x10]
	delegate EquipVehicleShootWeaponDelegate;//[Offset: 0x330, Size: 0x10]
	byte SwitchSlotAfterFinishCreatingWeapon;//[Offset: 0x340, Size: 0x1]
	bool bSwitchSlotAfterCreatIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x348, Size: 0x50]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x398, Size: 0x10]
	WeaponCreateInstance[] TargetCreateArray;//[Offset: 0x3b0, Size: 0x10]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x3c0, Size: 0x10]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x3d0, Size: 0x38]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x408, Size: 0x38]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x440, Size: 0x38]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x478, Size: 0x38]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x4b0, Size: 0x38]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x4f0, Size: 0x8]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x4f8, Size: 0x8]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x500, Size: 0x8]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x508, Size: 0x8]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x510, Size: 0x8]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x550, Size: 0x8]
	void WeaponSystemDataChangedDelegate__DelegateSignature(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x70644c4
	void WeaponSystemAttachDataChangedDelegate__DelegateSignature();// 0x70644c4
	void UpdateOwnerClientCreateWeapon();// 0x636bad0
	void TickHideWeapon();// 0x636babc
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x636b9fc
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x636b9e8
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0x70644c4
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x636b7e0
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0x70644c4
	void SetSwitchSlotAfterFinishCreatingWeapon(byte Slot, bool ignoreState);// 0x636b720
	void SetNextUseWeaponSlot(byte Slot);// 0x636b6a4
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x636b5e4
	void RemoveWeaponInInventory(STExtraWeapon* Weapon);// 0x636b568
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x636b4ec
	void PushAutoTriggerWeaponEventTaskWhenEquipWeapon(out const AutoTriggerWeaponEventParam Param);// 0x636b414
	int OverrideShootWeaponInitClip__DelegateSignature(int nWeaponSlot, int nSpecificID);// 0x70644c4
	void OnRepReplayData();// 0x636b400
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x636b3ec
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x636b3d8
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x636b3c4
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x636b3b0
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x636b39c
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x636b320
	void OnRep_NextUseWeaponLogicSocket();// 0x636b30c
	void OnRep_CurrentWeaponReplicated();// 0x636b2f0
	void OnRep_CurrentWeaponLogicSocket();// 0x636b2dc
	void OnRep_CurrentShieldWeaponReplicated();// 0x636b2c8
	void OnReconnectOnServer();// 0x636b2ac
	void OnReconnectOnClient();// 0x636b290
	void NextUseWeaponChangedDelegate__DelegateSignature();// 0x70644c4
	void LogInventoryDataInfo();// 0x636b27c
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x636b16c
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x636b0c0
	void LocalForceFinishSwitchWeapon();// 0x636b0ac
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x70644c4
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x636b098
	bool LocalDestroyWeapon(FName SocketName, bool bEnableBroadcast);// 0x636afbc
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x636afa8
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x70644c4
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x636af84
	bool IsValidSlotForWeapon(out const ItemDefineID DefineID, byte Slot);// 0x636ae98
	bool IsCreatingWeaponOnServer();// 0x636ae60
	bool IsCreatingWeaponOnClient();// 0x636ae3c
	void HideAllWeapon(bool Hidden, byte HideMask, STExtraWeapon* IgnoreWeapon);// 0x636ad38
	bool HasReconnectWeapon();// 0x636ad00
	void HandleGetWeaponFinished(byte Slot);// 0x636ac7c
	byte GetWeaponSlotInInventory(STExtraWeapon* Weapon);// 0x636abf0
	FName GetWeaponAttachSocketFromLogicSocket(FName LogicSocket, STExtraWeapon* BackupWeapon);// 0x636ab2c
	byte GetSlotOfMatchState(byte State);// 0x636aaa0
	FName GetShieldWeaponSlot();// 0x636aa6c
	STExtraWeapon* GetShieldWeapon();// 0x636aa38
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x636a9ac
	byte GetNextUseWeaponSlot();// 0x636a978
	FName GetLogicSocketSlotByLogicSocketAssociationType(int LogicSocketAssociationType);// 0x636a8ec
	FName GetLogicSocketBySlot(byte Slot);// 0x636a860
	int GetLogicSocketAssociationTypeLogicSocket(FName LogicSocket);// 0x636a7d4
	STExtraWeapon* GetLastUsedWeapon();// 0x636a79c
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x636a710
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x636a684
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x636a5f8
	STExtraWeapon* GetInventoryWeaponByDefineID(ItemDefineID DefineID);// 0x636a55c
	STExtraWeapon* GetCurrentUsingWeapon();// 0x636a528
	byte GetCurrentUsingPropSlot();// 0x636a4f4
	FName GetCurrentUsingLogicSocketOnServer();// 0x636a4c0
	FName GetCurrentUsingLogicSocket();// 0x636a48c
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x636a458
	int GetBagLevel();// 0x636a41c
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x636a320
	ItemDefineID[] GetAllInventoryWeaponIDList(bool bForceUseMapData);// 0x636a224
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x636a210
	void EquipVehicleShootWeaponDelegate__DelegateSignature(bool bEquip);// 0x70644c4
	void EnableAllBroadcast(bool bEnable);// 0x636a190
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x636a0d0
	void DebugReconnectToClientOnServer();// 0x636a0bc
	void DebugDisconnetToServerOnClient();// 0x636a0a8
	void ConditionClearSwitchHandle();// 0x636a094
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot, byte EChangeType);// 0x70644c4
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0x70644c4
	bool CanSwapWeaponByPropSlot(byte Slot1, byte Slot2);// 0x6369fc8
	void AttachCurrentWeaponMeshToBack();// 0x6369fb4
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponCreateInstance
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	int SyncTicket;//[Offset: 0x18, Size: 0x4]
	int CreateFrameCount;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 0x8]
	FName LogicSocket;//[Offset: 0x8, Size: 0x8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	ItemDefineID ID;//[Offset: 0x18, Size: 0x18]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int ClientResetBulletNum;//[Offset: 0x34, Size: 0x4]
	int OperationIndex;//[Offset: 0x38, Size: 0x4]
	Actor* WeaponOwnerActor;//[Offset: 0x40, Size: 0x8]
	FString OwnerCharacterName;//[Offset: 0x48, Size: 0x10]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int SyncTicket;//[Offset: 0x5c, Size: 0x4]
	bool bHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 0x8]
	FName LogicSocket;//[Offset: 0x8, Size: 0x8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	ItemDefineID ID;//[Offset: 0x18, Size: 0x18]
	int OperationIndex;//[Offset: 0x30, Size: 0x4]
	int BagLevel;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AutoTriggerWeaponEventParam
	int TargetOwnerRole;//[Offset: 0x0, Size: 0x4]
	enum TargetEvent;//[Offset: 0x4, Size: 0x1]
	ItemDefineID TargetWeaponID;//[Offset: 0x8, Size: 0x18]
	bool bIgnoreItemIDInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	enum[] ForceExitPawnStateList;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x3f8, Size: 0x8]
	Rotator TargetKillerRotation;//[Offset: 0x400, Size: 0xc]
	Actor* ReturnActor;//[Offset: 0x410, Size: 0x8]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x438, Size: 0x8]
	CameraComponent* ObservingCamera;//[Offset: 0x440, Size: 0x8]
	delegate OnTrackingEnd;//[Offset: 0x448, Size: 0x10]
	float MinMovingSpeed;//[Offset: 0x458, Size: 0x4]
	float MaxMovingTime;//[Offset: 0x45c, Size: 0x4]
	float ObservingTime;//[Offset: 0x460, Size: 0x4]
	float TrackingDelay;//[Offset: 0x464, Size: 0x4]
	float ExpectedMinObservingDistance;//[Offset: 0x468, Size: 0x4]
	float CameraAdjustSpeed;//[Offset: 0x46c, Size: 0x4]
	float TrackerToTargetMaxTime;//[Offset: 0x474, Size: 0x4]
	float DriverArmLenth;//[Offset: 0x478, Size: 0x4]
	bool bAdjustTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 0x1]
	float MinRotatingngSpeed;//[Offset: 0x480, Size: 0x4]
	void TargetChangeForPCOB();// 0x5f3dc40
	static KillerTracker* StartTrackingKiller(class KillerTracker Template, Actor* Killer, PlayerController* PC, Vector InitLocation, Rotator InitRotation);// 0x5f3dad8
	void ForceEnd();// 0x5f3dac4
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleUserComponent.VehicleUserComponentBase.LuaActorComponent.ActorComponent.Object
	ItemDefineID LastUsedItemDefineID;//[Offset: 0x248, Size: 0x18]
	float LastFinishCD;//[Offset: 0x260, Size: 0x4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266, Size: 0x1]
	bool bReconnectSkipFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x267, Size: 0x1]
	delegate OnAtomicStateChanged;//[Offset: 0x268, Size: 0x10]
	delegate OnClosestVehicleChanged;//[Offset: 0x278, Size: 0x10]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0x288, Size: 0x8]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0x290, Size: 0x8]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0x298, Size: 0x4]
	float UpdateClosestVehicleInterval;//[Offset: 0x2a0, Size: 0x4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x2b0, Size: 0x10]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x2c0, Size: 0x10]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x2d0, Size: 0x8]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x2e8, Size: 0x4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x2fc, Size: 0x4]
	float CurrentMoveForwardRate;//[Offset: 0x30c, Size: 0x4]
	float CurrentMoveRightRate;//[Offset: 0x310, Size: 0x4]
	float CurrentMoveUpRate;//[Offset: 0x314, Size: 0x4]
	float MaxCanAimAngle;//[Offset: 0x318, Size: 0x4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	bool EnableTestPawnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 0x1]
	float BaseVehicleLockTime;//[Offset: 0x320, Size: 0x4]
	float BaseVehicleServerAuTime;//[Offset: 0x324, Size: 0x4]
	float MaxVehicleLockTime;//[Offset: 0x328, Size: 0x4]
	float MaxVehicleServerAuTime;//[Offset: 0x32c, Size: 0x4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	float UAVSpeedPercent;//[Offset: 0x334, Size: 0x4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x350, Size: 0x8]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x358, Size: 0x8]
	Rotator InputExtraRot;//[Offset: 0x360, Size: 0xc]
	Rotator CharRotVsVehiRot;//[Offset: 0x36c, Size: 0xc]
	float ResetInputExtraRotTime;//[Offset: 0x37c, Size: 0x4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 0x1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x3b8, Size: 0x4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x3c0, Size: 0x4]
	float ControllerYawClampMin;//[Offset: 0x3c8, Size: 0x4]
	float ControllerYawClampMax;//[Offset: 0x3cc, Size: 0x4]
	enum CurrentSeatType;//[Offset: 0x3d0, Size: 0x1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x408, Size: 0x8]
	float FastestAllowDistance;//[Offset: 0x410, Size: 0x4]
	float NearVehicleTickRate;//[Offset: 0x414, Size: 0x4]
	int VehicleIconID;//[Offset: 0x418, Size: 0x4]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x434, Size: 0x4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	bool bIgnoreVehicleLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x443, Size: 0x1]
	delegate OnReceiveReqQuickSwitchSeat;//[Offset: 0x448, Size: 0x10]
	delegate OnReceiveReqDriverLostSwitchSeat;//[Offset: 0x458, Size: 0x10]
	delegate OnRefuseExchangeVehicleSeat;//[Offset: 0x468, Size: 0x10]
	bool bDebugResetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 0x1]
	float EnterVehicleCheatingCheckDis;//[Offset: 0x480, Size: 0x4]
	void UseVehicleWeaponOrNot();// 0x6333e38
	void UpdateVehWeaponPassengerViewLimit();// 0x6333e24
	void UpdatePassengerViewPitchLimit();// 0x6333e10
	void TurnVehicle(float rate);// 0x6333d8c
	void TryUseHorn(bool bUse);// 0x6333d08
	void TryShutDownUnmannedVehicle();// 0x6333cf4
	void TryPauseUnmannedVehicle();// 0x6333ce0
	bool TryLeanOutOrIn(bool bAutoLeanOut, bool bForce);// 0x6333c04
	void TryLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x6333b88
	void TryLaunchCurrentUnmannedVehicle();// 0x6333b68
	void TryExitVehicle();// 0x6333b54
	void TryEnterVehicleInReady(STExtraVehicleBase* InVehicle, enum SeatType);// 0x6333a9c
	bool TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x63339d0
	void TryEnterPrevVehicle();// 0x63339bc
	void TryChangeVehicleSeat();// 0x63339a8
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x6333918
	bool TryChangeFreeFireSeatAndScopeIn();// 0x63338e0
	bool TryChangeFreeFireSeatAndLeanOut();// 0x63338a8
	void TryAutonomousDriving(bool bEnable);// 0x6333824
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x70644c4
	void TestMoveVehicleUp(float rate);// 0x63337a8
	void TestMoveVehicleRight(float rate);// 0x633372c
	void TestMoveVehicleForward(float rate);// 0x63336b0
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x63335f0
	void StopFireVehicleWeapon();// 0x63335dc
	bool ShowVehicleWeaponUI();// 0x63335a4
	void SetVehicleUserState(enum UserState);// 0x633352c
	void SetVehicleIgnoreLookInput(bool bNewIgnore);// 0x63334a8
	void SetPlayMusic(bool bEnabled);// 0x6333424
	void SetLastDriveVehicle(STExtraVehicleBase* LastVehicle);// 0x63333a8
	void SetIsAutoMoveForward(bool IsEnable);// 0x6333324
	void SetClosestVehicle(STExtraVehicleBase* InVehicle);// 0x63332a4
	void SetBrake(float rate);// 0x6333220
	void SetBoosting(bool bEnabled);// 0x6333194
	void SetAirControlF(float rate);// 0x6333110
	void SetAirControlB(float rate);// 0x633308c
	void ServerUseVehicleWeaponOrNot(int SeatID, bool bUse);// 0x6332f88
	void ServerStopFireVehicleWeapon();// 0x6332f28
	void ServerReqQuickSwitchSeat(STExtraPlayerCharacter* ReqTarget);// 0x6332e78
	bool ServerForceEnterVehicle(STExtraVehicleBase* InVehicle, int SeatIdx);// 0x6332dac
	void ServerEquipVehicleWeaponOrNot(int SeatID, bool bEquip);// 0x6332ca8
	bool ServerEnterVehicleWithFailedReason(STExtraVehicleBase* InVehicle, enum SeatType, const int ConditionsIgnore, out enum OutFailedReason);// 0x6332b54
	void ServerDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x6332ad8
	void ServerAgreeQuickSwitchSeat(bool bIsAgree);// 0x6332a14
	void Server_JoystickCenterClickHandler();// 0x63329b4
	void SendToServerUnmannedVehicleUse();// 0x6332954
	void SendToServerUnmannedVehicleRecall();// 0x63328f4
	void SendToServerUnmannedVehiclePause();// 0x6332894
	void RspShutDownUnmannedVehicle(bool bSucceed);// 0x6332808
	void RspRefuseExchangeVehicleSeat(STExtraPlayerCharacter* acceptPlayer);// 0x6332784
	void RspPauseUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x63326bc
	void RspLeanOut(bool bOut);// 0x6332630
	void RspLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x6332568
	void RspExitVehicle(bool bSuccess);// 0x63324dc
	void RspExchangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd);// 0x63323d8
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x6332290
	void RspEnterPrevVehicle(STExtraVehicleBase* InVehicle, bool InSuccess, enum InSeatType, int InSeatIndex);// 0x633210c
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn, int FailTips);// 0x6331f34
	void RspAutonomousDriving(bool bEnable, bool bSucceed);// 0x6331e5c
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x6331d74
	void ReqShutDownUnmannedVehicle();// 0x6331d14
	void ReqQuickSwitchSeat();// 0x6331d00
	void ReqPauseUnmannedVehicle();// 0x6331ca0
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x6331bb8
	void ReqLeanOut(bool IsLeanOut);// 0x6331af4
	void ReqLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x6331a44
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x6331990
	void ReqExchangeVehicleSeat();// 0x6331930
	void ReqEraseLastDriveVehicle();// 0x63318d0
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x63317e0
	void ReqEnterPrevVehicle();// 0x6331780
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x63316d0
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x633160c
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x6331548
	void ReqAutonomousDriving(bool bEnable);// 0x6331484
	void ReqAcceptExchangeVehicleSeat(bool IsAccept);// 0x63313c0
	void OnUnmannedVehicleDriverDead(enum EnteredState);// 0x6331344
	void OnUnmannedVehicle_Standby_Reconnet();// 0x70644c4
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x70644c4
	void OnServerReconnected();// 0x6331330
	void OnScopeInAfterChangeSeat();// 0x633131c
	void OnRep_DefineID();// 0x6331308
	void OnRep_BornInVehicle();// 0x63312f4
	void OnRefuseExchangeVehicleSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x70644c4
	void OnReceiveReqQuickSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x70644c4
	void OnReceiveReqDriverLostSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* Driver);// 0x70644c4
	void OnPauseUnmannedVehicleCompleted();// 0x70644c4
	void OnLeanOutAfterChangeSeat();// 0x63312e0
	void OnLaunchUnmannedVehicleCompleted();// 0x70644c4
	void OnInputAxisMoveRight(float rate);// 0x70644c4
	void OnInputAxisMoveForward(float rate);// 0x70644c4
	void OnExitVehicleCompleted();// 0x70644c4
	void OnEnterVehicleCompleted(enum SeatType);// 0x70644c4
	void OnCurrrentClosestVehicleChanged();// 0x70644c4
	void OnClientReconnected();// 0x63312cc
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x70644c4
	void OnAtomicStateChanged__DelegateSignature(bool bEnter);// 0x70644c4
	void NotifyLeaveVehicleFailed();// 0x63312b0
	void MoveVehicleUp(float rate);// 0x633122c
	void MoveVehicleRight(float rate);// 0x63311a8
	void MoveVehicleForward(float rate);// 0x6331124
	void MaintenanceVehicle(float addpercenthp, bool fixtire);// 0x6331064
	bool IsControllingUnmannedVehicle();// 0x6331034
	bool IsAutoDriving();// 0x6330ffc
	bool IgnoreVehicleLookInput();// 0x6330fc4
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x6330f48
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x6330f34
	void HandleLocalBackpackCurrentWeaponFinished();// 0x6330f20
	bool HandleClientReconnecting();// 0x6330ee8
	enum GetVehicleUserState();// 0x6330ecc
	STExtraVehicleBase* GetVehicle();// 0x6330eb0
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x6330e94
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x6330e60
	bool GetAssistantState();// 0x6330e28
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x6330ce4
	void ForceEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x6330be8
	void FobidRspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x6330aa0
	void FlipTrackVehicleDirection();// 0x6330a8c
	void FireVehicleWeapon();// 0x6330a78
	void DoVehicleLeanOut(bool bLeanOut);// 0x63309ec
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x6330914
	void DoEquipAction(bool bEquip);// 0x6330890
	void DoEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x6330794
	void ClosestVehicleDelegate__DelegateSignature();// 0x70644c4
	void ClientReqQuickSwitchSeat(STExtraPlayerCharacter* ReqOrign);// 0x63306e4
	void ClientDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x6330660
	void Client_UnbindTouchEvents();// 0x6330600
	void Client_ShouldBindTouchEvents();// 0x63305a0
	void CheckVehicleFuel();// 0x633058c
	bool CheckCanLeanOutVehicle();// 0x6330554
	void ChangeAssistantState(bool bEnter);// 0x63304d0
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x6330440
	bool CanUseVehicleHorn();// 0x6330408
	bool CanShowEnterBtn(STExtraVehicleBase* InVehicle);// 0x70644c4
	bool CanLeanOutVehicle(STExtraVehicleBase* InVehicle, STExtraPlayerCharacter* InCharacter, int InSeatIndex);// 0x6330304
	bool CanConsumeReconnectSkipFlag();// 0x63302cc
	bool CanChangeSeat(STExtraVehicleBase* InVehicle);// 0x70644c4
	bool CanAutoDriving();// 0x6330294
	void BrakeTrackVehicle(bool bIsBrake);// 0x6330210
	void AgreeQuickSwitchSeat(bool bIsAgree);// 0x633018c
	void AddVehicleFuel(float amount);// 0x6330108
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleUserComponentBase.LuaActorComponent.ActorComponent.Object
	delegate OnCanEnterVehicleDelegate;//[Offset: 0x1d8, Size: 0x10]
	delegate OnCanExitVehicleDelegate;//[Offset: 0x1e8, Size: 0x10]
	STExtraVehicleBase* Vehicle;//[Offset: 0x1f8, Size: 0x8]
	STExtraPlayerCharacter* Character;//[Offset: 0x200, Size: 0x8]
	enum VehicleUserState;//[Offset: 0x208, Size: 0x1]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	float ExitVehicleCheckInterval;//[Offset: 0x21c, Size: 0x4]
	void TurnVehicle(float InRate);// 0x6338a50
	void SetUsingHorn(bool bEnabled);// 0x63389c4
	void SetBrake(float InRate);// 0x6338940
	void SetBoosting(bool bEnabled);// 0x63388b4
	void SetAirControlF(float InRate);// 0x6338830
	void SetAirControlB(float InRate);// 0x63387ac
	void OnEnterVehiclePreStopSkill(UAESkill* CurSkill);// 0x70644c4
	void MoveVehicleUp(float InRate);// 0x6338728
	void MoveVehicleRight(float InRate);// 0x63386a4
	void MoveVehicleForward(float InRate);// 0x6338620
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x63384dc
	void ForceEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x63383e0
	void DoVehicleLeanOut(bool bLeanOut);// 0x6338354
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x633827c
	void DoEnterVehicle(STExtraVehicleBase* InVehicle, int NewSeatIndex, byte SeatType);// 0x6338180
	bool DoChangeVehicleSeat(int InSeatIndex);// 0x63380e8
	bool CanLeanOutOrIn(bool bLeanOut);// 0x6338048
	bool CanExitVehicle(bool bMustExit);// 0x6337fa8
	bool CanEnterVehicle(STExtraVehicleBase* InVehicle, byte SeatType, out int NewSeatIndex);// 0x6337e90
	bool CanChangeVehicleSeat(out int InSeatIndex);// 0x6337de8
	bool BPCanEnterVehicle(STExtraVehicleBase* InVehicle, byte SeatType);// 0x6337d14
	void AddVehicleFuel(float InAmount);// 0x6337c90
<----------Generated by SSpawner v1.0.4---------->


Class: UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	bool TriggerFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 0x1]
	enum PawnState;//[Offset: 0x6c9, Size: 0x1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ca, Size: 0x1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cb, Size: 0x1]
	<enum,int> CastFailTipsIDMap;//[Offset: 0x6d0, Size: 0x50]
	bool IgnoreCanBePlayedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 0x1]
	bool IgnoreConnectionCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x721, Size: 0x1]
	bool InteractiveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x722, Size: 0x1]
	int InteractiveSkillDurationPhase;//[Offset: 0x724, Size: 0x4]
	float CancelLockDuration;//[Offset: 0x728, Size: 0x4]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x628763c
	float GetSkillDurationScale(UTSkillManagerComponent* SkillManagerComponent);// 0x62875a8
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x62874e8
	void DelayLeaveStateForMelee(UTSkillManagerComponent* SkillManagerComponent);// 0x628746c
<----------Generated by SSpawner v1.0.4---------->


Class: UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x6b8, Size: 0x10]
	bool OnEvent(UTSkillManagerComponent* Comp, byte TheEventType, int PhaseIndex);// 0x627d43c
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkill.LuaActor.Actor.Object
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]
	FString SkillName;//[Offset: 0x4e8, Size: 0x10]
	FName SkillGroup;//[Offset: 0x4f8, Size: 0x8]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	enum SkillCastType;//[Offset: 0x501, Size: 0x1]
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x502, Size: 0x1]
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x503, Size: 0x1]
	int SkillID;//[Offset: 0x504, Size: 0x4]
	int SkillTemplateID;//[Offset: 0x508, Size: 0x4]
	FString SkillDescription;//[Offset: 0x510, Size: 0x10]
	FString SkillDetailDes;//[Offset: 0x520, Size: 0x10]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	bool bMeleeSkillClientTriggerAutoSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x531, Size: 0x1]
	bool bMoveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x532, Size: 0x1]
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x533, Size: 0x1]
	bool bNeedCheckSimulateCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534, Size: 0x1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x535, Size: 0x1]
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x536, Size: 0x1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x537, Size: 0x1]
	UTSkillCreateData BaseData;//[Offset: 0x538, Size: 0x78]
	int SkillCategory;//[Offset: 0x5b0, Size: 0x4]
	bool bCoolDownWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 0x1]
	int CoolDownWhenStopIndex;//[Offset: 0x5b8, Size: 0x4]
	bool bUseNewSkillCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 0x1]
	UAEBlackboardParameter[] BlackboardParamList;//[Offset: 0x5c0, Size: 0x10]
	bool bSetBlackboardDefaultData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	bool bGsListener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 0x1]
	bool bRecycleWhenStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d2, Size: 0x1]
	FString SkillTimeScaleAttrName;//[Offset: 0x5d8, Size: 0x10]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x5e8, Size: 0x50]
	int InstancedNodesTotalSize;//[Offset: 0x638, Size: 0x4]
	FString[] ParentFolderPath;//[Offset: 0x640, Size: 0x10]
	int CurComponentNameIndex;//[Offset: 0x650, Size: 0x4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x654, Size: 0x1]
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x6a8, Size: 0x8]
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x6b0, Size: 0x8]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x9004ce0
	void ResetSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x9004b90
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x90049c8
	bool JumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseId);// 0x900486c
	bool IsEnableSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent);// 0x900477c
	bool IsCDOK(UTSkillManagerComponent* SkillManagerComponent);// 0x900468c
	UTSkillManagerComponent* GetSpecificSkillManager();// 0x9004624
	UAEBlackboard* GetSpecificBlackboard();// 0x90045bc
	UTSkillPhase* GetSkillPhaseByName(FString PhaseName);// 0x900448c
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x90043a4
	UTSkillBaseWidget* GetSkillEffectByPhaseName(FString PhaseName, FString EffectName);// 0x90041c8
	UTSkillBaseWidget* GetSkillEffectByPhaseIndex(int PhaseIndex, FString EffectName);// 0x9004034
	float GetSkillDurationScale(UTSkillManagerComponent* SkillManagerComponent);// 0x9003f48
	UTSkillPhase* GetCurSkillPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x9003e5c
	float GetCoolDownTime(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x9003d04
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x9003bb4
	enum CanBePlayed(UTSkillManagerComponent* SkillManagerComponent);// 0x9003ac8
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillCreateData
	bool bSkillActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int SkillButtonSlot;//[Offset: 0x4, Size: 0x4]
	int SkillGroupIndex;//[Offset: 0x8, Size: 0x4]
	float interval;//[Offset: 0xc, Size: 0x4]
	float IntervalSincePrevFinish;//[Offset: 0x10, Size: 0x4]
	FString CoolDownMessage;//[Offset: 0x18, Size: 0x10]
	int CoolDownMessageID;//[Offset: 0x28, Size: 0x4]
	UTSkillPhase*[] Phases;//[Offset: 0x30, Size: 0x10]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0x40, Size: 0x10]
	FName[] AsyncLoadingSkillUI;//[Offset: 0x58, Size: 0x10]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillPhase.Object
	FString PhaseName;//[Offset: 0x40, Size: 0x10]
	FString PhaseDescription;//[Offset: 0x50, Size: 0x10]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	UTSkill* OwnerSkill;//[Offset: 0x64, Size: 0x8]
	int PhaseIndex;//[Offset: 0x6c, Size: 0x4]
	int ActionsTopHalfCount;//[Offset: 0x88, Size: 0x4]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x90, Size: 0x88]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x118, Size: 0x8]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseId);// 0x903bd60
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x903bc7c
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x903bb98
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x903bab4
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x903b954
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x903b7f4
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x903b710
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x903b5b4
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x903b458
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x903b378
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x903b288
	bool ClearAttachments();// 0x903b21c
	void AfterStartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x903b138
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 0x4]
	FString TimeAdjustAttr;//[Offset: 0x8, Size: 0x10]
	float AltPhaseDuration;//[Offset: 0x18, Size: 0x4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	int CoolDownIndex;//[Offset: 0x20, Size: 0x4]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x28, Size: 0x10]
	UTSkillPicker* Picker;//[Offset: 0x38, Size: 0x8]
	UTSkillEffect*[] Actions;//[Offset: 0x40, Size: 0x10]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x50, Size: 0x10]
	enum PhaseType;//[Offset: 0x60, Size: 0x1]
	int JumpPhaseIndex;//[Offset: 0x64, Size: 0x4]
	FString EnterPhaseTipString;//[Offset: 0x68, Size: 0x10]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x78, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillCondition.UTSkillBaseWidget.Object
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x900db20
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x900d9cc
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x900d878
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x900d718
	bool IsOK_Internal();// 0x900d6a4
	bool IsOK(ActorComponent* SkillManagerComponent);// 0x900d5b4
	UTSkill* GetOwnerSkill();// 0x900d54c
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillBaseWidget.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FString EffectName;//[Offset: 0x50, Size: 0x10]
	Actor* BuffTargetActor;//[Offset: 0x60, Size: 0x8]
	UTSkill* OwnerSkill;//[Offset: 0x68, Size: 0x8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x70, Size: 0x8]
	UAEBlackboard* GetUAEBlackboard();// 0x900e704
	UTSkillManagerComponent* GetOwnerSkillManager();// 0x900e694
	Actor* GetOwnerPawn();// 0x900e624
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	Pawn* OwnerPawn;//[Offset: 0x230, Size: 0x8]
	bool bEnableSkillCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 0x1]
	bool bEnableSkillEncrypt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 0x1]
	Actor* OwnerActor;//[Offset: 0x258, Size: 0x8]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	<int,UTSkill*> SkillIDToSkills;//[Offset: 0x268, Size: 0x50]
	<int,UAEBlackboard*> SkillIDBlackboardMap;//[Offset: 0x2b8, Size: 0x50]
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x308, Size: 0x50]
	delegate ChangeActorBlackboard;//[Offset: 0x358, Size: 0x10]
	<int,UTSkillCreateData> SkillBaseDataMaps;//[Offset: 0x368, Size: 0x50]
	UTSkillLastCastInfo[] LastCastArray;//[Offset: 0x3b8, Size: 0x10]
	delegate OnSkillCast;//[Offset: 0x3c8, Size: 0x10]
	<int,int> IDToSyncSkillActiveStateData;//[Offset: 0x3d8, Size: 0x50]
	SkillActiveRepData[] SyncSkillActiveStateDatas;//[Offset: 0x428, Size: 0x10]
	<int,int> IDToSyncSkillCDDatas;//[Offset: 0x438, Size: 0x50]
	<int,int> ButtonSlotToSkillID;//[Offset: 0x488, Size: 0x50]
	TeammateSkillCDRepData TeammateSkillCDRepData;//[Offset: 0x4d8, Size: 0x10]
	SkillDynamicRepData SyncDynamicRepData;//[Offset: 0x4e8, Size: 0x10]
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x4f8, Size: 0x10]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x580, Size: 0x30]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x5b0, Size: 0x30]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x5e0, Size: 0x10]
	int SkillSynRandomSeed;//[Offset: 0x5f4, Size: 0x4]
	RandomStream SkillSynRandStream;//[Offset: 0x5f8, Size: 0x8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x600, Size: 0x4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x608, Size: 0x50]
	SkillParamater[] SkillParamaters;//[Offset: 0x660, Size: 0x10]
	delegate OnSkillInitSignature;//[Offset: 0x670, Size: 0x10]
	delegate SkillStartEvent;//[Offset: 0x680, Size: 0x10]
	delegate SkillStopEvent;//[Offset: 0x690, Size: 0x10]
	delegate SkillLevelChangeEvent;//[Offset: 0x6a0, Size: 0x10]
	int[] PendingRemoveSkillID;//[Offset: 0x6b0, Size: 0x10]
	<int,byte> CurSkillLevels;//[Offset: 0x6c0, Size: 0x50]
	UTReplaceSkillData[] ReplacedSkillDatas;//[Offset: 0x710, Size: 0x10]
	<int,SkillDisableKeySet> DisableSkillTagsMap;//[Offset: 0x720, Size: 0x50]
	MutilSkillSynData NewSkillSynData;//[Offset: 0x770, Size: 0x30]
	SkillSinglePhaseData NewSkillSinglePhaseData;//[Offset: 0x7a0, Size: 0x30]
	<uint64,UTSkillSimulateData> SkillSimulateDataMap;//[Offset: 0x7d0, Size: 0x50]
	<uint64> AsyncLoadingSkillInst;//[Offset: 0x820, Size: 0x50]
	UTSkillPreSetBlackboard SkillPreSetBlackboard;//[Offset: 0x870, Size: 0x50]
	UTSkillExecQueue SkillExecQueue;//[Offset: 0x8c0, Size: 0xb0]
	uint64 NetClientSimulateInstID;//[Offset: 0x970, Size: 0x8]
	void UpdateSyncSkillCDData(int SkillID);// 0x9025ef0
	void UpdateSyncSkillActiveState(int SkillID);// 0x9025e1c
	void UnRegisterActorBlackBorad(Actor* InActor);// 0x9025d44
	void TryDeleteOneSkill(int SkillID, bool IsImmediately);// 0x9025be0
	void TryAddOneSkill(int SkillID, bool bActive, int ButtonSlot);// 0x9025a10
	void TriggerEvent(int SkillID, byte EventType);// 0x90258c4
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x90255d0
	void SyncOneSkillState(bool RepSkillCD, bool RepSkillActiveState, int RequestID);// 0x90253dc
	void StopSkillSpecific(UTSkill* Skill, enum StopReason);// 0x9025294
	void StopSkillAll(enum StopReason);// 0x90251b0
	void StopSkill_WithID(int SkillID, enum StopReason);// 0x9025060
	void StopSkill(int SkillID, enum StopReason);// 0x9024f10
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x9024db8
	bool SetupOwnerAndSystem();// 0x9024d4c
	void SetSkillTagsDisable(int[] SkillTags, bool bDisable, out FString TriggerKey);// 0x90249d8
	void SetSkillTagDisable(int SkillTag, bool bDisable, out FString TriggerKey);// 0x9024780
	void SetSkillState(out const UTSkillStateSyncData[] InSyncStateDatas);// 0x902463c
	void SetSkillOwner(Actor* tempActor);// 0x9024558
	void SetSkillLevel(int SkillID, int SkillLevel);// 0x9024418
	bool SetSkillActive(int SkillID, bool bActive, bool bForceSet, int ButtonSlot);// 0x90241a0
	void SetAutoSkillID(int InSkillID);// 0x90240cc
	void ServerTriggerEvent_WithParamsAndTssData(int SkillID, byte EventType, uint64 InstID, const FName[] KeyNames, const byte[] Content, const byte[] TssData);// 0x9023c38
	void ServerTriggerEvent_WithParams(int SkillID, byte EventType, uint64 InstID, const FName[] KeyNames, const byte[] Content);// 0x9023874
	void ServerTriggerEvent_WithIDAndTssData(int SkillID, byte EventType, uint64 InstID, const byte[] TssData);// 0x90235a0
	void ServerTriggerEvent_WithID(int SkillID, byte EventType, uint64 InstID);// 0x90233b4
	void ServerTriggerEvent(int SkillID, byte EventType);// 0x9023238
	void ServerStopAllSkill(enum Reason);// 0x9023128
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x9022fac
	void ServerNotifyRandomSeed(int Seed);// 0x9022ea0
	void ResetTeammateSkillCDData();// 0x9022e40
	void ResetSkillCoolDown(int SkillID, int CDIndex);// 0x9022cf4
	void ResetAllSkillCoolDown();// 0x9022c8c
	void RequestSkillStates(bool RepSkillCD, bool RepSkillActiveState);// 0x9022ac0
	void RepSkillHitInfo();// 0x9022a60
	void RepLastCastTime();// 0x9022a00
	void ReplaceSkill(int OldSkillID, int NewSkillID);// 0x90228c0
	void RemoveReplacedSkill(int OldSkillID);// 0x90227ec
	void RemoveAllSkillUIWidget();// 0x902278c
	void RegisterActorBlackBorad(Actor* InActor, UAEBlackboard* RegisterBlackboard);// 0x9022644
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x90224fc
	UTSkill* QuerySkill(int SkillID, bool bOnlyQuery);// 0x9022384
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x902224c
	void OnStopSkill(UTSkill* Skill, enum StopReason);// 0x90220f8
	void OnRespawned();// 0x9022090
	void OnRep_SkillHitInfo();// 0x9022028
	void OnRep_SkillCDDatas();// 0x9021fc8
	void OnRep_SkillActiveState();// 0x9021f68
	void OnRep_ReplaceSkill();// 0x9021f08
	void OnRep_NewSkillSynData();// 0x9021ea8
	void OnRep_NewSkillSinglePhaseData();// 0x9021e48
	void OnRep_NetClientSimulateInstID();// 0x9021de8
	void OnRep_EnableSkillEncrypt();// 0x9021d88
	void OnRep_DynamicRepData();// 0x9021d28
	void OnRecycled();// 0x9021cc0
	void OnInterruptSkill(UTSkill* Skill, enum StopReason);// 0x9021b6c
	void NewUAEBlackboard(int SkillID);// 0x9021a98
	void LocalTriggerNewSkillFail(UTSkill* InNewSkill, uint64 InstID);// 0x9021954
	bool IsSkillTagDisable(int InSkillID);// 0x9021868
	bool IsSkillCanUse();// 0x90217fc
	bool IsSkillActived(int SkillID);// 0x902171c
	bool IsReadyToCastSkill(int SkillID);// 0x9021630
	bool IsEnableSkillCoolDown();// 0x90215bc
	bool IsCurrentUseSkillID(int InSkillID);// 0x90214dc
	bool IsCastingSkillID(int InSkillID);// 0x90213f0
	bool IsCastingSkill();// 0x902137c
	void HandleTriggerParamsEventSuccess(int SkillID, byte EventType);// 0x70644c4
	void HandleTriggerParamsEventFail(int SkillID, byte EventType);// 0x70644c4
	bool HandleTriggerParamsEvent(int SkillID, byte EventType);// 0x70644c4
	void HandleSkillStop(int SkillID, enum StopReason);// 0x902122c
	void HandleSkillStart(int SkillID);// 0x902114c
	UAEBlackboard* GetUAEBlackboardBySkillID(int SkillID);// 0x9021064
	UAEBlackboard* GetUAEBlackboard(UTSkill* InSkill);// 0x9020f84
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x9020e9c
	UTSkillStateSyncData[] GetSkillState();// 0x9020e08
	int GetSkillSlotBySkillID(int SkillID);// 0x9020d2c
	int GetSkillSlotBySkill(UTSkill* Skill);// 0x9020c4c
	UTSkill*[] GetSkillsByGroup(FName SkillGroup);// 0x9020b14
	int GetSkillLevel(int SkillID);// 0x9020a38
	int GetSkillIDFromSkillIndex(int InSkillIndex);// 0x9020950
	int GetSkillIDByClass(class Object SkillClass);// 0x9020864
	FString[] GetSkillExecString();// 0x90207d0
	int GetSkillCurPhase(UTSkill* Skill);// 0x90206f0
	UTSkill* GetSkillByName(FString SkillName);// 0x9020588
	UTSkill* GetSkillByClassName(FString SkillClassName);// 0x9020420
	int GetSkillButtonSlot(int SkillID);// 0x9020344
	UTSkillCreateData GetSkillBaseData(int SkillID);// 0x9020250
	UTSkill* GetSkill(int SkillID);// 0x9020168
	int GetReplacedSkill(int OldSkillID);// 0x902008c
	byte GetRealOwnerRoleSafety();// 0x9020004
	byte GetMutexRelation(int TempSkillID, int InSkillID, bool bShouldMonopolize);// 0x901fe08
	float GetLastCastTime(int SkillID);// 0x901fd2c
	float GetLastCastFinishTime(int SkillID);// 0x901fc50
	UTSkill*[] GetCurSkills();// 0x901fbbc
	UTSkillPhase* GetCurSkillPhase(int InSkillSlot);// 0x901fae0
	int GetCurSkillID(UTSkill* Skill);// 0x901fa00
	UTSkill* GetCurSkill(int InSkillSlot);// 0x901f924
	int[] GetCurMonopolizeSkills();// 0x901f890
	int[] GetCurAllSkillIDs();// 0x901f7fc
	float GetCoolDownTime(int SkillID, int CoolDownIndex);// 0x901f6b4
	int GetButtonSlotSkillID(int ButtonSlot);// 0x901f5d8
	void DynamicRemoveSkill(int InSkillID);// 0x901f4f8
	void DynamicAddSkill(int InSkillID);// 0x901f418
	void ClientStopPreActionSkill(int SkillID, uint64 InstID);// 0x901f2cc
	void ClientStopOneSkill(uint64 InstID, bool bSinglePhaseRep);// 0x901f168
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x901eff8
	void ClientSimulateOneSkill(uint64 InstID, int SkillID, int PhaseIndex, bool bSinglePhaseRep);// 0x901edb0
	void ClearSkill(bool bStopAllSkill, bool bDeactivateAllSkill, bool bResetSkillCD);// 0x901eb8c
	void ClearRepParams();// 0x901eb24
	void ClearInitParams();// 0x901eabc
	void CacheSkillWidget(int SkillID, UTSkillWidget* Widget);// 0x901e96c
<----------Generated by SSpawner v1.0.4---------->


Class: UAEBlackboard.Object
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x28, Size: 0x3c0]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0xa4d21dc
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0xa4d2108
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0xa4d1f84
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0xa4d1eb0
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0xa4d1ddc
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0xa4d1d08
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0xa4d1c34
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0xa4d1b60
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0xa4d1a8c
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0xa4d19b8
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0xa4d18dc
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0xa4d183c
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0xa4d179c
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0xa4d16fc
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0xa4d165c
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0xa4d15bc
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0xa4d151c
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0xa4d147c
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0xa4d13dc
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0xa4d133c
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0xa4d129c
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0xa4d11fc
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0xa4d1160
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0xa4d1078
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0xa4d0fd8
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0xa4d0ed4
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0xa4d0e34
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0xa4d0d98
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0xa4d0cfc
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0xa4d0c60
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0xa4d0bc4
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0xa4d0b28
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0xa4d0a8c
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0xa4d09ec
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0xa4d0904
	void AddValueByParam(out const UAEBlackboardParameter NewParam);// 0xa4d07b8
<----------Generated by SSpawner v1.0.4---------->


Class: UAEBlackboardContainer
	<FName,Object*> ObjectParamMap;//[Offset: 0x0, Size: 0x50]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x50, Size: 0x50]
	<FName,class Object> ClassParamMap;//[Offset: 0xa0, Size: 0x50]
	<FName,byte> EnumParamMap;//[Offset: 0xf0, Size: 0x50]
	<FName,int> IntParamMap;//[Offset: 0x140, Size: 0x50]
	<FName,uint32> UIntParamMap;//[Offset: 0x190, Size: 0x50]
	<FName,float> FloatParamMap;//[Offset: 0x1e0, Size: 0x50]
	<FName,bool> BoolParamMap;//[Offset: 0x230, Size: 0x50]
	<FName,FString> StringParamMap;//[Offset: 0x280, Size: 0x50]
	<FName,FName> NameParamMap;//[Offset: 0x2d0, Size: 0x50]
	<FName,Vector> VectorParamMap;//[Offset: 0x320, Size: 0x50]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x370, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Type;//[Offset: 0x8, Size: 0x1]
	UAEBlackboardParameterDefaultValue DefaultValue;//[Offset: 0x10, Size: 0x88]
<----------Generated by SSpawner v1.0.4---------->


Class: UAEBlackboardParameterDefaultValue
	Object* DefaultObject;//[Offset: 0x0, Size: 0x28]
	class Class* DefaultClass;//[Offset: 0x28, Size: 0x28]
	byte DefaultEnum;//[Offset: 0x50, Size: 0x1]
	int DefaultInt;//[Offset: 0x54, Size: 0x4]
	float DefaultFloat;//[Offset: 0x58, Size: 0x4]
	bool DefaultBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	FString DefaultString;//[Offset: 0x60, Size: 0x10]
	FName DefaultName;//[Offset: 0x70, Size: 0x8]
	Vector DefaultVector;//[Offset: 0x78, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: Class.Struct.Field.Object
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillLastCastInfo
	int SkillID;//[Offset: 0x0, Size: 0x4]
	float LastCastTime;//[Offset: 0x4, Size: 0x4]
	float LastCastFinishTime;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SkillActiveRepData
	int SkillID;//[Offset: 0x0, Size: 0x4]
	int SkillLevel;//[Offset: 0x4, Size: 0x4]
	int SkillButtonSlot;//[Offset: 0x8, Size: 0x4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: TeammateSkillCDRepData
	int SkillID;//[Offset: 0x0, Size: 0x4]
	float CDStartTime;//[Offset: 0x4, Size: 0x4]
	float CDEndTime;//[Offset: 0x8, Size: 0x4]
	int UseCount;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SkillDynamicRepData
	SkillDynamicState[] SkillData;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SkillDynamicState
	int SkillID;//[Offset: 0x0, Size: 0x4]
	bool bAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SkillCDRepData
	int SkillID;//[Offset: 0x0, Size: 0x4]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillSyncData_CD
	int SkillCDIndex;//[Offset: 0x0, Size: 0x4]
	byte[] SkillSyncDatas;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 0x10]
	Actor* FromPawn;//[Offset: 0x10, Size: 0x8]
	int SkillID;//[Offset: 0x18, Size: 0x4]
	int SkillPhaseID;//[Offset: 0x1c, Size: 0x4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	byte HitSurfaceType;//[Offset: 0x22, Size: 0x1]
	Vector HitEnvLocation;//[Offset: 0x24, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 0x10]
	Actor* FromPawn;//[Offset: 0x10, Size: 0x8]
	int SkillID;//[Offset: 0x18, Size: 0x4]
	int SkillPhaseID;//[Offset: 0x1c, Size: 0x4]
	byte HitSurfaceType;//[Offset: 0x20, Size: 0x1]
	Vector HitEnvLocation;//[Offset: 0x24, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SkillParamater
	bool bUseTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName SkillTag;//[Offset: 0x8, Size: 0x8]
	enum SkillType;//[Offset: 0x10, Size: 0x1]
	float CDRecoveryScale;//[Offset: 0x14, Size: 0x4]
	float SkillRuntimeScale;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: UTReplaceSkillData
	int OldSkillID;//[Offset: 0x0, Size: 0x4]
	int NewSkillID;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SkillDisableKeySet
	<FString> DisableKeySet;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: MutilSkillSynData
	UTMutilSkillSynData[] DataList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UTMutilSkillSynData
	bool bEnableRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bSkillStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	uint64 CurInstanceID;//[Offset: 0x8, Size: 0x8]
	int CurSkillID;//[Offset: 0x10, Size: 0x4]
	int SynID;//[Offset: 0x14, Size: 0x4]
	int PhaseIndexes;//[Offset: 0x18, Size: 0x4]
	byte[] PhaseIndexArray;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SkillSinglePhaseData
	UTSkillSynSinglePhaseData[] DataList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillSynSinglePhaseData
	uint64 CurInstanceID;//[Offset: 0x0, Size: 0x8]
	int CurSkillID;//[Offset: 0x8, Size: 0x4]
	int CurSkillPhase;//[Offset: 0xc, Size: 0x4]
	byte UpdateFlag;//[Offset: 0x10, Size: 0x1]
	bool bSkillStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillSimulateData
	uint64 InstanceID;//[Offset: 0x0, Size: 0x8]
	int SkillID;//[Offset: 0x8, Size: 0x4]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bStopSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	int[] SimlatePhaseIndexs;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillPreSetBlackboard
	<int,UAEBlackboard*> PreSetSkillBBData;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillExecQueue
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillStateSyncData
	UTSkillStateSyncDataParam SyncParam;//[Offset: 0x0, Size: 0x2]
	int SkillID;//[Offset: 0x4, Size: 0x4]
	int SkillButtonSlot;//[Offset: 0x8, Size: 0x4]
	bool bSkillActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillStateSyncDataParam
	bool bSyncActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bSyncCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* SkillManager;//[Offset: 0x490, Size: 0x8]
	int SkillID;//[Offset: 0x498, Size: 0x4]
	float TickInterval;//[Offset: 0x49c, Size: 0x4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	void SetSkillManager(UTSkillManagerComponent* Manager);// 0x903f054
	void SetSkillID(int InSkillID);// 0x903ef80
	void RemoveSelf();// 0x903ef20
	UTSkillManagerComponent* GetSkillManager();// 0x903eeb8
	int GetSkillID();// 0x903ee50
	UTSkillCDBase*[] GetSkillCDBases();// 0x903edd0
	UTSkill* GetSkill();// 0x903ed68
	PlayerController* GetLocalPlayerController();// 0x903ed00
	void BindLua(FString luaPath);// 0x903ebbc
<----------Generated by SSpawner v1.0.4---------->


Class: LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	FString LuaFilePath;//[Offset: 0x478, Size: 0x10]
	bool bEnableBlueprintTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillCDBase.LuaObject.Object
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0xa0, Size: 0x8]
	UTSkill* OwnerSkill;//[Offset: 0xa8, Size: 0x8]
	byte[] SyncContent;//[Offset: 0xb0, Size: 0x10]
	bool bIgnoreCastSkillCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	enum CDRole;//[Offset: 0xc1, Size: 0x1]
	void BindLua(FString luaPath);// 0x900c9bc
<----------Generated by SSpawner v1.0.4---------->


Class: LuaObject.Object
	FString LuaFilePath;//[Offset: 0x90, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillPicker.UTSkillBaseWidget.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x78, Size: 0x20]
	class Object[] FilterTemplates;//[Offset: 0x98, Size: 0x10]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0xb8, Size: 0x10]
	UTSkillPickerFilter*[] Filters;//[Offset: 0xc8, Size: 0x10]
	bool PickTargetsInner(Vector OriginPoint);// 0x903d24c
	bool PickTargets(Vector OriginPoint);// 0x903d170
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 0x1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 0x8]
	enum PickerTargetType;//[Offset: 0x10, Size: 0x1]
	enum PickerTargetRole;//[Offset: 0x11, Size: 0x1]
	int PickerMaxCount;//[Offset: 0x14, Size: 0x4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 0x8]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	byte HitPos;//[Offset: 0x11, Size: 0x1]
	FName BoneName;//[Offset: 0x18, Size: 0x8]
	Vector HitEnvLocation;//[Offset: 0x20, Size: 0xc]
	float HitAngleCos;//[Offset: 0x2c, Size: 0x4]
	byte HitPhysMatType;//[Offset: 0x30, Size: 0x1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillPickerFilter.Object
	void HandleFilterArray(out UTSkillPickedTarget[] inArray, Actor* Owner);// 0x903cd34
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillEffect.UTSkillBaseWidget.Object
	float fADScale;//[Offset: 0x78, Size: 0x4]
	float fAPScale;//[Offset: 0x7c, Size: 0x4]
	Object*[] CacheSoftObject;//[Offset: 0x80, Size: 0x10]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x900f230
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x900f14c
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x900eff8
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x900eea4
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x900ed50
	void OnAsyncLoadSoftPathDone();// 0x900ecf0
	UTSkill* GetOwnerSkill();// 0x900ec88
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x900eb34
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x900ea44
<----------Generated by SSpawner v1.0.4---------->


Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	byte SkillEventType;//[Offset: 0x78, Size: 0x1]
	FName[] InterestedOwnerTags;//[Offset: 0x80, Size: 0x10]
	FName PreEventActionTag;//[Offset: 0x90, Size: 0x8]
	UTSkillEffect* SkillEffect;//[Offset: 0x98, Size: 0x8]
	SkillConditionWarpper[] Conditions;//[Offset: 0xa0, Size: 0x10]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0xb0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: STEShootWeaponBulletImpactEffect.Actor.Object
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x3f8, Size: 0x50]
	ParticleSystem* DefaultFX;//[Offset: 0x448, Size: 0x8]
	ParticleSystem* ConcreteFX;//[Offset: 0x450, Size: 0x8]
	ParticleSystem* DirtFX;//[Offset: 0x458, Size: 0x8]
	ParticleSystem* WaterFX;//[Offset: 0x460, Size: 0x8]
	ParticleSystem* MetalFX;//[Offset: 0x468, Size: 0x8]
	ParticleSystem* WoodFX;//[Offset: 0x470, Size: 0x8]
	ParticleSystem* GlassFX;//[Offset: 0x478, Size: 0x8]
	ParticleSystem* GrassFX;//[Offset: 0x480, Size: 0x8]
	ParticleSystem* FleshFX;//[Offset: 0x488, Size: 0x8]
	ParticleSystem* SteelFX;//[Offset: 0x490, Size: 0x8]
	ParticleSystem* SandbagFX;//[Offset: 0x498, Size: 0x8]
	ParticleSystem* SandFX;//[Offset: 0x4a0, Size: 0x8]
	ParticleSystem* ClothFX;//[Offset: 0x4a8, Size: 0x8]
	ParticleSystem* PlasticFX;//[Offset: 0x4b0, Size: 0x8]
	ParticleSystem* LeatherFX;//[Offset: 0x4b8, Size: 0x8]
	ParticleSystem* CeramicsFX;//[Offset: 0x4c0, Size: 0x8]
	ParticleSystem* PaperFX;//[Offset: 0x4c8, Size: 0x8]
	ParticleSystem* StoneFX;//[Offset: 0x4d0, Size: 0x8]
	ParticleSystem* SnowFX;//[Offset: 0x4d8, Size: 0x8]
	ParticleSystem* PopCanFX;//[Offset: 0x4e0, Size: 0x8]
	ParticleSystem* PyreflyFX;//[Offset: 0x4e8, Size: 0x8]
	ParticleSystem* LeafFX;//[Offset: 0x4f0, Size: 0x8]
	ParticleSystem* CarFX;//[Offset: 0x4f8, Size: 0x8]
	ParticleSystem* AsphaltFX;//[Offset: 0x500, Size: 0x8]
	ParticleSystem* IceFX;//[Offset: 0x508, Size: 0x8]
	ParticleSystem* BallCarFX;//[Offset: 0x510, Size: 0x8]
	ParticleSystem* FleshFXNormal;//[Offset: 0x518, Size: 0x8]
	ParticleSystem* FleshFXExpand;//[Offset: 0x520, Size: 0x8]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	AkAudioEvent* DefaultSound;//[Offset: 0x530, Size: 0x8]
	AkAudioEvent* ConcreteSound;//[Offset: 0x538, Size: 0x8]
	AkAudioEvent* DirtSound;//[Offset: 0x540, Size: 0x8]
	AkAudioEvent* WaterSound;//[Offset: 0x548, Size: 0x8]
	AkAudioEvent* MetalSound;//[Offset: 0x550, Size: 0x8]
	AkAudioEvent* WoodSound;//[Offset: 0x558, Size: 0x8]
	AkAudioEvent* GlassSound;//[Offset: 0x560, Size: 0x8]
	AkAudioEvent* GrassSound;//[Offset: 0x568, Size: 0x8]
	AkAudioEvent* FleshSound;//[Offset: 0x570, Size: 0x8]
	AkAudioEvent* SteelSound;//[Offset: 0x578, Size: 0x8]
	AkAudioEvent* SandbagSound;//[Offset: 0x580, Size: 0x8]
	AkAudioEvent* SandSound;//[Offset: 0x588, Size: 0x8]
	AkAudioEvent* ClothSound;//[Offset: 0x590, Size: 0x8]
	AkAudioEvent* PlasticSound;//[Offset: 0x598, Size: 0x8]
	AkAudioEvent* LeatherSound;//[Offset: 0x5a0, Size: 0x8]
	AkAudioEvent* CeramicsSound;//[Offset: 0x5a8, Size: 0x8]
	AkAudioEvent* PaperSound;//[Offset: 0x5b0, Size: 0x8]
	AkAudioEvent* StoneSound;//[Offset: 0x5b8, Size: 0x8]
	AkAudioEvent* SnowSound;//[Offset: 0x5c0, Size: 0x8]
	AkAudioEvent* PopCanSound;//[Offset: 0x5c8, Size: 0x8]
	AkAudioEvent* PyreflySound;//[Offset: 0x5d0, Size: 0x8]
	AkAudioEvent* LeafSound;//[Offset: 0x5d8, Size: 0x8]
	AkAudioEvent* CarSound;//[Offset: 0x5e0, Size: 0x8]
	AkAudioEvent* AsphaltSound;//[Offset: 0x5e8, Size: 0x8]
	AkAudioEvent* IceSound;//[Offset: 0x5f0, Size: 0x8]
	AkAudioEvent* WindBreakSound;//[Offset: 0x5f8, Size: 0x8]
	AkAudioEvent* BallCarSound;//[Offset: 0x600, Size: 0x8]
	AkAudioEvent* ShootFeedbackSound;//[Offset: 0x608, Size: 0x8]
	AkAudioEvent* ShootShieldFeedbackSound;//[Offset: 0x610, Size: 0x8]
	DecalData DefaultDecal;//[Offset: 0x618, Size: 0x20]
	DecalData ConcreteDecal;//[Offset: 0x638, Size: 0x20]
	DecalData DirtDecal;//[Offset: 0x658, Size: 0x20]
	DecalData WaterDecal;//[Offset: 0x678, Size: 0x20]
	DecalData MetalDecal;//[Offset: 0x698, Size: 0x20]
	DecalData WoodDecal;//[Offset: 0x6b8, Size: 0x20]
	DecalData GrassDecal;//[Offset: 0x6d8, Size: 0x20]
	DecalData GlassDecal;//[Offset: 0x6f8, Size: 0x20]
	DecalData FleshDecal;//[Offset: 0x718, Size: 0x20]
	DecalData SteelDecal;//[Offset: 0x738, Size: 0x20]
	DecalData SandbagDecal;//[Offset: 0x758, Size: 0x20]
	DecalData SandDecal;//[Offset: 0x778, Size: 0x20]
	DecalData ClothDecal;//[Offset: 0x798, Size: 0x20]
	DecalData PlasticDecal;//[Offset: 0x7b8, Size: 0x20]
	DecalData LeatherDecal;//[Offset: 0x7d8, Size: 0x20]
	DecalData CeramicsDecal;//[Offset: 0x7f8, Size: 0x20]
	DecalData PaperDecal;//[Offset: 0x818, Size: 0x20]
	DecalData StoneDecal;//[Offset: 0x838, Size: 0x20]
	DecalData SnowDecal;//[Offset: 0x858, Size: 0x20]
	DecalData PopCanDecal;//[Offset: 0x878, Size: 0x20]
	DecalData PyreflyDecal;//[Offset: 0x898, Size: 0x20]
	DecalData LeafDecal;//[Offset: 0x8b8, Size: 0x20]
	DecalData CarDecal;//[Offset: 0x8d8, Size: 0x20]
	DecalData AsphaltDecal;//[Offset: 0x8f8, Size: 0x20]
	DecalData IceDecal;//[Offset: 0x918, Size: 0x20]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x940, Size: 0x110]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa50, Size: 0x1]
	bool bIgnoreDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa51, Size: 0x1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa52, Size: 0x1]
	DecalComponent* ImpactDecalComp;//[Offset: 0xa58, Size: 0x8]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0xa60, Size: 0x8]
	Vector DecalScale;//[Offset: 0xa6c, Size: 0xc]
	SceneComponent* TargetImpactComp;//[Offset: 0xa88, Size: 0x8]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0xb10, Size: 0x8]
	<int,ParticleSystem*> WeaponAvatarSpecialFleshFX;//[Offset: 0xb18, Size: 0x50]
	bool LoadNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c, Size: 0x1]
	bool UseNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6d, Size: 0x1]
	void TimerHideDecal();// 0x60ead44
	void OnLoadImpactFxAsyncCallBack(SoftObjectPath ImpactFxPath, float DistanceScaler, byte HitSurfaceType);// 0x60eab90
	void OnHandleImpactFx(ParticleSystem* ImpactFX, float DistanceScaler, byte HitSurfaceType);// 0x60eaa9c
	SoftObjectPath GetDirectionImpactFXPath(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x60ea8e0
	bool GetDirectionImpactFXAsync(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x60ea75c
<----------Generated by SSpawner v1.0.4---------->


Class: HitEffectItemDataList
	<byte,ParticleSystem*> ItemDataListMap;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 0x4]
	float LifeSpan;//[Offset: 0x4, Size: 0x4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 0x8]
	float ImpactEffectStartScaleDistance;//[Offset: 0x10, Size: 0x4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x14, Size: 0x4]
	float ImpactEffectStartScaleValue;//[Offset: 0x18, Size: 0x4]
	float ImpactEffectEndScaleValue;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 0xc]
	Vector_NetQuantize VictimLocation;//[Offset: 0x24, Size: 0xc]
	Vector_NetQuantize BulletPos;//[Offset: 0x30, Size: 0xc]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x3c, Size: 0xc]
	Vector2D ShootDir2D;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	uint32 ShootID;//[Offset: 0x54, Size: 0x4]
	int BulletTypeSpecialID;//[Offset: 0x58, Size: 0x4]
	uint16 CompensationTime;//[Offset: 0x5c, Size: 0x2]
	Actor* Actor;//[Offset: 0x60, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x68, Size: 0x8]
	int TimeStamp;//[Offset: 0x70, Size: 0x4]
	int ClientShootTime;//[Offset: 0x74, Size: 0x4]
	byte SpecialBulletID;//[Offset: 0x78, Size: 0x1]
	byte HitBodyType;//[Offset: 0x79, Size: 0x1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x7c, Size: 0x4]
	float MuzzleFloorHeight;//[Offset: 0x80, Size: 0x4]
	Vector_NetQuantize WeaponOwnerHeadPos;//[Offset: 0x84, Size: 0xc]
	float DamageRate;//[Offset: 0x90, Size: 0x4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	Vector_NetQuantize GunTailPos;//[Offset: 0x98, Size: 0xc]
	FName BoneName;//[Offset: 0xa8, Size: 0x8]
	Transform BoneTrans;//[Offset: 0xb0, Size: 0x30]
	byte ImpactEffectMask;//[Offset: 0xe0, Size: 0x1]
	byte DataSub;//[Offset: 0xe1, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x2d0, Size: 0x8]
	int SortOrder;//[Offset: 0x2d8, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x2dc, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x2e0, Size: 0x4]
	float FadeDuration;//[Offset: 0x2e4, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 0x1]
	Vector DecalSize;//[Offset: 0x2ec, Size: 0xc]
	void SetSortOrder(int Value);// 0x8cce954
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x8cce8d8
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x8cce7e0
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x8cce764
	float GetFadeStartDelay();// 0x8cce730
	float GetFadeDuration();// 0x8cce6fc
	MaterialInterface* GetDecalMaterial();// 0x8cce6c8
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x8cce68c
<----------Generated by SSpawner v1.0.4---------->


Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0x110, Size: 0x10]
	enum StartStateType;//[Offset: 0x120, Size: 0x1]
	enum FinishStateType;//[Offset: 0x121, Size: 0x1]
	State* CurrentState;//[Offset: 0x128, Size: 0x8]
	enum CurrentStateType;//[Offset: 0x130, Size: 0x1]
	enum LastStateType;//[Offset: 0x131, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: State.Object
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x630, Size: 0x10]
	FString TreasureBoxName;//[Offset: 0x640, Size: 0x10]
	float TotalHP;//[Offset: 0x650, Size: 0x4]
	float BrokenHPPropotion;//[Offset: 0x654, Size: 0x4]
	float TotalTime;//[Offset: 0x658, Size: 0x4]
	int boxId;//[Offset: 0x65c, Size: 0x4]
	Vector GroupLoc;//[Offset: 0x660, Size: 0xc]
	float DestroyTime;//[Offset: 0x66c, Size: 0x4]
	float OperationalDistance;//[Offset: 0x670, Size: 0x4]
	float VisibleHUDlDistance;//[Offset: 0x674, Size: 0x4]
	ParticleSystem* StandbyEffect;//[Offset: 0x678, Size: 0x8]
	Transform StandbyEffectTrans;//[Offset: 0x680, Size: 0x30]
	ParticleSystem* OpenningEffect;//[Offset: 0x6b0, Size: 0x8]
	Transform OpenningEffectTrans;//[Offset: 0x6c0, Size: 0x30]
	ParticleSystem* OpennedEffect;//[Offset: 0x6f0, Size: 0x8]
	Transform OpennedEffectTrans;//[Offset: 0x700, Size: 0x30]
	ParticleSystem* BrokenEffect1;//[Offset: 0x730, Size: 0x8]
	Transform BrokenEffect1Trans;//[Offset: 0x740, Size: 0x30]
	ParticleSystem* BrokenEffect2;//[Offset: 0x770, Size: 0x8]
	Transform BrokenEffect2Trans;//[Offset: 0x780, Size: 0x30]
	MaterialInterface* BlackMat;//[Offset: 0x7b0, Size: 0x8]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x7b8, Size: 0x8]
	SceneComponent* DefaultRoot;//[Offset: 0x7c0, Size: 0x8]
	class Controller[] InstigatorList;//[Offset: 0x7c8, Size: 0x10]
	class Actor[] DamageCauserList;//[Offset: 0x7d8, Size: 0x10]
	enum PickUpBoxType;//[Offset: 0x7e8, Size: 0x1]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e9, Size: 0x1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ea, Size: 0x1]
	int IconID;//[Offset: 0x7ec, Size: 0x4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 0x1]
	bool bRegisterRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84a, Size: 0x1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84b, Size: 0x1]
	int ClientAutoActiveBoxCD;//[Offset: 0x84c, Size: 0x4]
	int AutoActiveBoxCD;//[Offset: 0x850, Size: 0x4]
	int HideLightColumn;//[Offset: 0x854, Size: 0x4]
	float GoUpAnimationWait;//[Offset: 0x858, Size: 0x4]
	float GoUpAnimationSpeed;//[Offset: 0x85c, Size: 0x4]
	float GoUpAnimationHight;//[Offset: 0x860, Size: 0x4]
	bool GoUpAnimationHightEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x864, Size: 0x1]
	float GoUpAnimationYawSpeed;//[Offset: 0x868, Size: 0x4]
	float GoUpAnimationYawTotal;//[Offset: 0x86c, Size: 0x4]
	Vector BoxCoverLoc;//[Offset: 0x870, Size: 0xc]
	Rotator BoxCoverRot;//[Offset: 0x87c, Size: 0xc]
	bool bImmediateOpenBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 0x1]
	bool IsForbidOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x889, Size: 0x1]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88a, Size: 0x1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x890, Size: 0x8]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x898, Size: 0x8]
	float StartedTime;//[Offset: 0x8b8, Size: 0x4]
	enum CurState;//[Offset: 0x8bc, Size: 0x1]
	uint32 StartedPlayerKey;//[Offset: 0x8c0, Size: 0x4]
	int StartedTeamId;//[Offset: 0x8c4, Size: 0x4]
	float CountDownTime;//[Offset: 0x8c8, Size: 0x4]
	float StartDestroytime;//[Offset: 0x8cc, Size: 0x4]
	int MonsterBoxId;//[Offset: 0x8d0, Size: 0x4]
	int MonsterBoxTempleteId;//[Offset: 0x8d4, Size: 0x4]
	<FString,FString> DataStrs;//[Offset: 0x8d8, Size: 0x50]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x930, Size: 0x8]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x938, Size: 0x8]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x940, Size: 0x8]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x948, Size: 0x8]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x950, Size: 0x8]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x958, Size: 0x8]
	Object* TriggerActionHost;//[Offset: 0x998, Size: 0x8]
	void ShowMonsterTreasureBoxSkelemesh(bool IsShow);// 0x70644c4
	void ShowMonsterTreasureBox(PlayerController* PC);// 0x5f77da0
	void SetDropItems(out const DropPropData[] DropItems, STExtraPlayerState* PlayerState);// 0x70644c4
	void SetClientClientAutoActiveBoxCD(int CD);// 0x5f77d24
	void SetAutoActiveBoxCD(int leftTime);// 0x5f77ca8
	void OnTreasureBoxPicked__DelegateSignature();// 0x70644c4
	void OnSomeonePickItem(uint32 InPC, const int TypeSpecificID);// 0x5f77bf4
	void OnRep_HideLightColumn();// 0x5f77be0
	void OnRep_CurState();// 0x5f77bcc
	void OnBoxEmpty();// 0x5f77bb8
	void OnAnimationStop();// 0x5f77ba4
	bool IsShowIcon();// 0x5f77b6c
	int GetMonsterBoxId();// 0x5f77b38
	enum[] GetDamageableGameObjectType();// 0x5f77a8c
	enum GetCurState();// 0x5f77a58
	int GetClientClientAutoActiveBoxCD();// 0x5f77a24
	void DeActiveMonsterTreasureBox();// 0x5f77a10
	bool CanBeDamaged();// 0x5f779d8
	void BPRepCurState();// 0x70644c4
	void BPOnStopMonsterTreasureBox();// 0x70644c4
	void BPOnStartMonsterTreasureBox();// 0x70644c4
	void BPOnHideLightColumn();// 0x70644c4
	void BPOnCountdownEnd();// 0x70644c4
	void BPOnBreakMonsterTreasureBox();// 0x70644c4
	void BPOnAnimationStop();// 0x70644c4
	void BPOnAnimationAkAudioStop();// 0x70644c4
	void BPOnAnimationAkAudioStart();// 0x70644c4
	FString BPGetTreasureBoxName();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	int iRegionHouse;//[Offset: 0x4d0, Size: 0x4]
	float WindowHideDistanceSquared;//[Offset: 0x4d4, Size: 0x4]
	float WindowLoadDistanceSquared;//[Offset: 0x4d8, Size: 0x4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x4dc, Size: 0x4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x4e0, Size: 0x4]
	UAEWindowRepData[] WindowList;//[Offset: 0x4e8, Size: 0x10]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x4f8, Size: 0x50]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	bool bShouldConsiderDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 0x1]
	bool SerializeDataUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 0x1]
	byte[] SerializeData;//[Offset: 0x5b8, Size: 0x10]
	void RecordBreakWindowTlog(PlayerController* EventInstigator);// 0x6925614
	static void ProcessWindowCreateList();// 0x6925600
	void OnRep_WindowList();// 0x69255ec
	void ClearWindowList();// 0x69255d8
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x6925450
<----------Generated by SSpawner v1.0.4---------->


Class: ProduceDropItemComponent.LuaActorComponent.ActorComponent.Object
	CustomDropRule CustomDropRule;//[Offset: 0x1e0, Size: 0x3]
	HitResult GroundHitInfo;//[Offset: 0x1e8, Size: 0x98]
	int ProduceID;//[Offset: 0x280, Size: 0x4]
	float DropGroundItemLifeSpan;//[Offset: 0x284, Size: 0x4]
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	PickUpWrapperActor*[] GenerateActorList;//[Offset: 0x290, Size: 0x10]
	int GridStep;//[Offset: 0x2a0, Size: 0x4]
	int StartAngle;//[Offset: 0x2a4, Size: 0x4]
	int TotalAngle;//[Offset: 0x2a8, Size: 0x4]
	bool bFannedDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	float AngleInterval;//[Offset: 0x2b0, Size: 0x4]
	int RadiusIncrement;//[Offset: 0x2b4, Size: 0x4]
	STExtraCharacter* OwnerPawn;//[Offset: 0x2b8, Size: 0x8]
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	int[] DropPlanIDList;//[Offset: 0x2c8, Size: 0x10]
	int[] NightDropPlanIDList;//[Offset: 0x2d8, Size: 0x10]
	int[] DayDropPlanIDList;//[Offset: 0x2e8, Size: 0x10]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x2f8, Size: 0x8]
	float TombBoxLifeTime;//[Offset: 0x310, Size: 0x4]
	bool bCheckCriticalDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	AkAudioEvent* CriticalDropAudioEvent;//[Offset: 0x318, Size: 0x8]
	int CriticalDropCheckPercent;//[Offset: 0x320, Size: 0x4]
	ParticleSystem* DropGroundEffect;//[Offset: 0x328, Size: 0x28]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	Transform DropGroundEffectTransform;//[Offset: 0x360, Size: 0x30]
	float DropGroundItemLifeOverride;//[Offset: 0x390, Size: 0x4]
	bool IsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 0x1]
	float startHeight;//[Offset: 0x398, Size: 0x4]
	bool bIsIgonreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	float DropGroundEffectLifeSpan;//[Offset: 0x3a0, Size: 0x4]
	bool DropGroundInRandomCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	Vector DropGroundCenterOffest;//[Offset: 0x3a8, Size: 0xc]
	float DropGroundOuterCircleRadius;//[Offset: 0x3b4, Size: 0x4]
	float DropGroundInnerCircleRadius;//[Offset: 0x3b8, Size: 0x4]
	float DropGroundStartAndgle;//[Offset: 0x3bc, Size: 0x4]
	float DropGroundEndAngle;//[Offset: 0x3c0, Size: 0x4]
	bool bDropGroundAngleRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1]
	Vector2D[] DropGroundAngleRangeList;//[Offset: 0x3c8, Size: 0x10]
	float TraceGroundPointZOffset;//[Offset: 0x3d8, Size: 0x4]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1]
	bool bHideDeadTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 0x1]
	bool bUseProducerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3de, Size: 0x1]
	int OpenDropGroundEffect;//[Offset: 0x3e0, Size: 0x4]
	int RandomDropGroundEffect;//[Offset: 0x3e4, Size: 0x4]
	float MaxTraceDist;//[Offset: 0x3e8, Size: 0x4]
	bool bUseDropCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 0x1]
	bool bUseDropCurveAnim_DropToTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 0x1]
	delegate OnItemSpawned;//[Offset: 0x3f0, Size: 0x10]
	delegate OnFinalEffectiveDropRulesGenerated;//[Offset: 0x400, Size: 0x10]
	DropItemCurveAnimComponent* DropItemCurveAnimComponent;//[Offset: 0x410, Size: 0x8]
	bool IsFoeceNotTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	void StartDropWithDropDataByLocation(out const DropPropData[] PropData, Vector Location);// 0x600d474
	void StartDropWithDropData(Actor* DeadCharacter, Controller* Killer, out const DropPropData[] PropData);// 0x600d344
	void StartDropToPosition(Vector DestinPos, Character* KillerPawn, Actor* DeadPawn, bool InTraceGround);// 0x600d210
	void StartDrop(Actor* DeadCharacter, Controller* Killer);// 0x600d15c
	void SetProduceID(int ProduceID);// 0x600d0e4
	void SetNightDropPlanIDList(out int[] DayIdList, out int[] NightIdList);// 0x600cfa8
	void SetDropPlanIDList(out int[] IDList);// 0x600cef0
	void SetDropItemLifeSpan(int ItemTime);// 0x600ce74
	void RandomCircleDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x600cce0
	void OnOwnerPawnDead(STExtraSimpleCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x600cadc
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x600c9bc
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x600c8b0
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x600c80c
	PickUpWrapperActor*[] GetGenerateWrapperList();// 0x600c70c
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x600c5d8
	int GetCountStrNum(FString CountStr);// 0x600c49c
	FString GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x600c370
	FString GenerateDropItemByCfg(out DropPropData[] FinalDropItems);// 0x600c244
	void FannedDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x600c124
	PlayerTombBox* DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector Offset, bool bIsAutoExpand, bool bFixBoxName);// 0x600be10
	void DropToTombBox(out const PickUpItemData[] PropData, Character* KillerPawn, Character* DeadPawn);// 0x600bce0
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* BackPack);// 0x600bbd4
	Actor* DropToGround(out const PickUpItemData PropData, Transform WrapperTrans, Vector StartPos, bool ShowGroundEffect);// 0x600b9ac
	void DropToCommonTreasureBox(Actor* Producer);// 0x600b928
	void DropToCommonLootBox(Actor* Producer, Transform BoxTrans, FString BoxName, enum BoxType, CommonTreasureBox* CommonTreasureBox);// 0x600b6c8
	void DropOutPropsNearActor(out const DropPropData[] PropDataList, Actor* StartActor);// 0x600b5bc
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn);// 0x600b478
	void CalcDropItemListByDropRuleByCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList, out DropItemConfig[] FinalEffectiveDropRules);// 0x600b2dc
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x600b1d0
<----------Generated by SSpawner v1.0.4---------->


Class: CustomDropRule
	bool bTraceIgnorePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bTraceIgnoreWarteringArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAttachToTargetActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: DropItemCurveAnimComponent.ActorComponent.Object
	bool bUseClientSelfLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	Vector2D RangeHigh;//[Offset: 0x114, Size: 0x8]
	Vector CustomStartOffset;//[Offset: 0x11c, Size: 0xc]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool UseTrailParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	bool ClientDropOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 0x1]
	float ClientDropOneByOneInterval;//[Offset: 0x12c, Size: 0x4]
	float CustomGravity;//[Offset: 0x130, Size: 0x4]
	float TrailParticleDelayTime;//[Offset: 0x134, Size: 0x4]
	float LandDirectlyAfterTheReplicatedTime;//[Offset: 0x138, Size: 0x4]
	float ParticleScale;//[Offset: 0x13c, Size: 0x4]
	ParticleSystem* DropTailsParticle;//[Offset: 0x140, Size: 0x28]
	ParticleSystem* RareDropTailsParticle;//[Offset: 0x168, Size: 0x28]
	ParticleSystem* DropTailsParticleSystem;//[Offset: 0x190, Size: 0x8]
	ParticleSystem* RareDropTailsParticleSystem;//[Offset: 0x198, Size: 0x8]
	<int> RareDropItemSet;//[Offset: 0x1a0, Size: 0x50]
	bool bUseDropGroundParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	float DropGroundParticleLifeTime;//[Offset: 0x1f4, Size: 0x4]
	ParticleSystem* DropGroundParticle;//[Offset: 0x1f8, Size: 0x28]
	ParticleSystem* DropGroundParticleSystem;//[Offset: 0x220, Size: 0x8]
	DropGroupContainer[] ItemGroupList;//[Offset: 0x228, Size: 0x10]
	CurveFloat* AnimCurve;//[Offset: 0x238, Size: 0x8]
	bool bUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	void OnDropTailsLoadFinsh2(int GroupID, bool bRare);// 0x5e83900
	void OnDropGroundLoadFinsh();// 0x5e838ec
	void HandleMonsterRecycled(STExtraSimpleCharacter* Monster);// 0x5e83870
	void AddItemClient(int Group, Vector InStartPos, Vector InEndPos, Actor* Target);// 0x5e83740
	void AddDropActorServer(Actor* PickUpWrapper, Vector InStartPos, int UserAddr);// 0x5e8364c
<----------Generated by SSpawner v1.0.4---------->


Class: DropGroupContainer
	int GroupIndex;//[Offset: 0x0, Size: 0x4]
	float GroupTime;//[Offset: 0x4, Size: 0x4]
	ItemCurveAnim[] List;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemCurveAnim
	enum CurState;//[Offset: 0x0, Size: 0x1]
	bool ShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float DropDuration;//[Offset: 0x4, Size: 0x4]
	float CurrentTime;//[Offset: 0x8, Size: 0x4]
	float DropStartSpeed;//[Offset: 0xc, Size: 0x4]
	float DelayDestroyParticleTime;//[Offset: 0x10, Size: 0x4]
	float DelayStartTime;//[Offset: 0x14, Size: 0x4]
	float DelayDestroyGroundParticleTime;//[Offset: 0x18, Size: 0x4]
	Vector StartPos;//[Offset: 0x1c, Size: 0xc]
	Vector EndPos;//[Offset: 0x28, Size: 0xc]
	Actor* TargetActor;//[Offset: 0x34, Size: 0x8]
	ParticleSystemComponent* TailParticleComponent;//[Offset: 0x40, Size: 0x8]
	ParticleSystemComponent* GroundParticleComponent;//[Offset: 0x48, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int iRegionSimpleCharacter;//[Offset: 0x1200, Size: 0x4]
	int ForceLifePeriodTime;//[Offset: 0x1204, Size: 0x4]
	bool bClientRegionForceClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1208, Size: 0x1]
	bool bDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1209, Size: 0x1]
	bool bIsPreClientDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120a, Size: 0x1]
	delegate OnDeath;//[Offset: 0x1210, Size: 0x10]
	float DelayHideDuration;//[Offset: 0x1220, Size: 0x4]
	float AnimDeathLifeSpan;//[Offset: 0x1224, Size: 0x4]
	bool bForcePlayDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1228, Size: 0x1]
	float DelayHideDurationByHeadShoot;//[Offset: 0x122c, Size: 0x4]
	float AnimDeathLifeSpanByHeadShoot;//[Offset: 0x1230, Size: 0x4]
	float DelayHideDurationByVehicleHit;//[Offset: 0x1234, Size: 0x4]
	float AnimDeathLifeSpanByVehicleHit;//[Offset: 0x1238, Size: 0x4]
	ParticleSystem* HeadShootFX_Red;//[Offset: 0x1240, Size: 0x8]
	ParticleSystem* HeadShootFX_Green;//[Offset: 0x1248, Size: 0x8]
	class PlayerTombBox* DropTomb;//[Offset: 0x1250, Size: 0x8]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1258, Size: 0x1]
	int MonsterSpawnTime;//[Offset: 0x125c, Size: 0x4]
	int MonsterDeathTime;//[Offset: 0x1260, Size: 0x4]
	int IdleBlendSpaceValue;//[Offset: 0x1264, Size: 0x4]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1268, Size: 0x1]
	float AnimBornLifeSpan;//[Offset: 0x126c, Size: 0x4]
	bool BornOnCeiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1270, Size: 0x1]
	float MaxBehaveRange;//[Offset: 0x1274, Size: 0x4]
	float AnimLand_Hard_VelocitySquared_Threshold;//[Offset: 0x1278, Size: 0x4]
	float AnimLand_Hard_LifeSpan;//[Offset: 0x127c, Size: 0x4]
	float AnimLand_Light_LifeSpan;//[Offset: 0x1280, Size: 0x4]
	float AnimActiveLifeSpan;//[Offset: 0x1284, Size: 0x4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0x12a0, Size: 0x58]
	bool bForceUseBPSenseConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f8, Size: 0x1]
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x12fc, Size: 0x4]
	float MinTimeLockTarget;//[Offset: 0x1300, Size: 0x4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x1304, Size: 0x4]
	float SensedRadius;//[Offset: 0x1308, Size: 0x4]
	float MinTimeLockHeardEnemy;//[Offset: 0x130c, Size: 0x4]
	float HeardRadius;//[Offset: 0x1310, Size: 0x4]
	float EnableAnimOnDSDistanceSq;//[Offset: 0x1314, Size: 0x4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0x1318, Size: 0x8]
	MobAdvancedMovement* MobAdvancedMovement;//[Offset: 0x1320, Size: 0x8]
	MobPerceptionController* MobPerceptionController;//[Offset: 0x1328, Size: 0x8]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0x1330, Size: 0x8]
	UnitAttrComponent* UnitAttrComp;//[Offset: 0x1338, Size: 0x8]
	CircleMgrComponent* CircleMgr;//[Offset: 0x1350, Size: 0x8]
	int SyncAIState;//[Offset: 0x1358, Size: 0x4]
	float HitBoxRadius;//[Offset: 0x1360, Size: 0x4]
	int AIState;//[Offset: 0x1364, Size: 0x4]
	float StunDuration;//[Offset: 0x1370, Size: 0x4]
	float HurtAnimTime;//[Offset: 0x1374, Size: 0x4]
	float BackAnimPerc;//[Offset: 0x1378, Size: 0x4]
	float TurnInPlaceAngel;//[Offset: 0x137c, Size: 0x4]
	delegate OnEnterAIState;//[Offset: 0x1390, Size: 0x10]
	delegate OnLeaveAIState;//[Offset: 0x13a0, Size: 0x10]
	delegate OnBPEnterAIState;//[Offset: 0x13b0, Size: 0x10]
	delegate OnBPLeaveAIState;//[Offset: 0x13c0, Size: 0x10]
	delegate OnChangeAnimParam;//[Offset: 0x13d0, Size: 0x10]
	delegate OnAnimInstanceAssetLoaded;//[Offset: 0x13e0, Size: 0x10]
	delegate OnAnimListComponentAssetLoaded;//[Offset: 0x13f0, Size: 0x10]
	delegate OnCharacterHitPointDelgate;//[Offset: 0x1418, Size: 0x10]
	bool bCanSkillSpeedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1428, Size: 0x1]
	int FlowId;//[Offset: 0x142c, Size: 0x4]
	FString MonsterName;//[Offset: 0x1430, Size: 0x10]
	FString MonsterNameID;//[Offset: 0x1440, Size: 0x10]
	int MonsterSyncID;//[Offset: 0x1450, Size: 0x4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1454, Size: 0x1]
	int Gold;//[Offset: 0x1458, Size: 0x4]
	int SuperGold;//[Offset: 0x145c, Size: 0x4]
	int[] BornSkill;//[Offset: 0x1460, Size: 0x10]
	int[] AloneSkillIdList;//[Offset: 0x1470, Size: 0x10]
	int HealthBarCount;//[Offset: 0x1480, Size: 0x4]
	bool bIsCrawlChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1484, Size: 0x1]
	int NeedSendAttackFlow;//[Offset: 0x1488, Size: 0x4]
	float TakeDamageScale;//[Offset: 0x148c, Size: 0x4]
	float DamageScale;//[Offset: 0x1490, Size: 0x4]
	Actor* AttackTarget;//[Offset: 0x1494, Size: 0x8]
	bool bMobSuicide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149c, Size: 0x1]
	int[] DecalIndexArray;//[Offset: 0x14a0, Size: 0x10]
	<byte,ParticleSystem*> ImpactFXMap;//[Offset: 0x14b0, Size: 0x50]
	<byte,AkAudioEvent*> ImpactSoundMap;//[Offset: 0x1500, Size: 0x50]
	byte HitPartJudgment;//[Offset: 0x1550, Size: 0x1]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x1558, Size: 0x50]
	BodyTypeDef StandBodyDef;//[Offset: 0x15a8, Size: 0x8]
	PVELagCompensationComponent* PVELagCompensationComponent;//[Offset: 0x15b0, Size: 0x8]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0x15b8, Size: 0x8]
	float IdleWalkSpeedRatio;//[Offset: 0x15c0, Size: 0x4]
	float AttackWalkSpeedRatio;//[Offset: 0x15c4, Size: 0x4]
	float SprintRunSpeedRatio;//[Offset: 0x15c8, Size: 0x4]
	float SidewaysSpeedRatio;//[Offset: 0x15cc, Size: 0x4]
	float MaxSpeedModeRatio;//[Offset: 0x15d0, Size: 0x4]
	bool bMobIgnoreCirclePain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15d4, Size: 0x1]
	float[] CircleDamageRate;//[Offset: 0x15d8, Size: 0x10]
	int ObjectPoolSize;//[Offset: 0x15e8, Size: 0x4]
	int LifePeriodTime;//[Offset: 0x15ec, Size: 0x4]
	float KilledDisCircleEdge;//[Offset: 0x15f0, Size: 0x4]
	int MaxHPStageForBroadcast;//[Offset: 0x15f4, Size: 0x4]
	enum CustomMobRegionSize;//[Offset: 0x15f8, Size: 0x1]
	bool bEnableMaxAllowedDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15f9, Size: 0x1]
	float MaxAllowedDistanceFromSpawnPoint;//[Offset: 0x15fc, Size: 0x4]
	bool bMaxAllowedDistanceCheckIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1600, Size: 0x1]
	bool IsHeadShootDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1608, Size: 0x1]
	Vector MobSvrBornLocation;//[Offset: 0x1610, Size: 0xc]
	int RageLevel;//[Offset: 0x1634, Size: 0x4]
	float AloneRageTimerRate;//[Offset: 0x1640, Size: 0x4]
	float ImpluseScale;//[Offset: 0x1644, Size: 0x4]
	float ImpluseZScale;//[Offset: 0x1648, Size: 0x4]
	bool EnableOverlapImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164c, Size: 0x1]
	bool EnableOverlapDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164d, Size: 0x1]
	float OverlapVehicleDamageRate;//[Offset: 0x1650, Size: 0x4]
	float OverlapAgainstVehicleDamageRate;//[Offset: 0x1654, Size: 0x4]
	float MinDamageInterval;//[Offset: 0x1658, Size: 0x4]
	bool bImpulseBySidesWhenOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165c, Size: 0x1]
	float MovementTickInterval;//[Offset: 0x1660, Size: 0x4]
	float DsActorTickInterval;//[Offset: 0x1664, Size: 0x4]
	bool IsNavWalkMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1668, Size: 0x1]
	AkAudioEvent* MonsterBornSound;//[Offset: 0x1670, Size: 0x8]
	AkAudioEvent* MonsterDeadSound;//[Offset: 0x1678, Size: 0x8]
	AkAudioEvent* MonsterIdleSound;//[Offset: 0x1680, Size: 0x8]
	AkAudioEvent* MonsterRunSound;//[Offset: 0x1688, Size: 0x8]
	float NoPathToTargetTimer;//[Offset: 0x1690, Size: 0x4]
	enum AnimGroupMask;//[Offset: 0x1694, Size: 0x1]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1695, Size: 0x1]
	bool bEnableDSTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1696, Size: 0x1]
	bool ExplodeBeforeDieEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a0, Size: 0x1]
	int ExplodeSkillID;//[Offset: 0x16a4, Size: 0x4]
	float ExplodeSkillDuration;//[Offset: 0x16a8, Size: 0x4]
	bool bDieAfterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ac, Size: 0x1]
	bool CloseCollisionForMeshOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ad, Size: 0x1]
	AkComponent* SoundComp;//[Offset: 0x16b0, Size: 0x8]
	float LagCompensationRecordInterval;//[Offset: 0x1790, Size: 0x4]
	float HearRadius;//[Offset: 0x1798, Size: 0x4]
	float MinTimeLockHeardPos;//[Offset: 0x179c, Size: 0x4]
	bool bIgnoreNetRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a4, Size: 0x1]
	bool bSimulateMovementByCharacterMovementComponentOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a5, Size: 0x1]
	bool bEnableSimulateSyncSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a6, Size: 0x1]
	bool bNotifyLuaDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a7, Size: 0x1]
	UAEMonsterAnimListComponentBase* MonsterAnimListComp;//[Offset: 0x17a8, Size: 0x8]
	bool bUseBlockHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c8, Size: 0x1]
	float DefaultVehicleHitDamage;//[Offset: 0x17cc, Size: 0x4]
	CurveFloat* VehicleSpeedDamageCurve;//[Offset: 0x17d0, Size: 0x8]
	float VehicleHitDamageScale;//[Offset: 0x17d8, Size: 0x4]
	float VehicleHitLaunchVelocityScale;//[Offset: 0x17dc, Size: 0x4]
	float VehicleHitLaunchVelocityZOffset;//[Offset: 0x17e0, Size: 0x4]
	float VehicleHitMinLaunchVelocity;//[Offset: 0x17e4, Size: 0x4]
	float VehicleHitMaxLaunchVelocity;//[Offset: 0x17e8, Size: 0x4]
	float VehicleHitInterval;//[Offset: 0x17ec, Size: 0x4]
	float VehicleHitAccumulate;//[Offset: 0x17f0, Size: 0x4]
	bool bEnableExtraMeleeHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f4, Size: 0x1]
	float MeleeAttackRecoverDuration;//[Offset: 0x17f8, Size: 0x4]
	bool bDisableCollisionWhenDisappear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17fc, Size: 0x1]
	<class DamageType,MeleeAttackSetting> MeleeAttackHitSetting;//[Offset: 0x1800, Size: 0x50]
	int[] MeleeAttackInterruptSkillID;//[Offset: 0x1850, Size: 0x10]
	TimerHandle LeaveLaunchAirGroundHandle;//[Offset: 0x1860, Size: 0x8]
	TimerHandle LeaveLaunchAirRiseUpHandle;//[Offset: 0x1868, Size: 0x8]
	bool bShouldFaceDirectionWhileLaunched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1870, Size: 0x1]
	byte[] IgnoreChannelOnLaunched;//[Offset: 0x1878, Size: 0x10]
	float MinLaunchAirGroundTime;//[Offset: 0x1888, Size: 0x4]
	float MaxLaunchAirGroundTime;//[Offset: 0x188c, Size: 0x4]
	float DelayCheckLaunchAirState;//[Offset: 0x1890, Size: 0x4]
	TimerHandle CheckLaunchAirStateTimerHandle;//[Offset: 0x1898, Size: 0x8]
	MonsterIdleIndex MonsterIdleIndex;//[Offset: 0x18a0, Size: 0x8]
	delegate OnMonsterSetPlayedIdleIndex;//[Offset: 0x18a8, Size: 0x10]
	delegate OnMonsterHurting;//[Offset: 0x18b8, Size: 0x10]
	bool bCharAnimParamHasInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c8, Size: 0x1]
	MonsterAnimListComponent* MonsterAnimListComponent;//[Offset: 0x18d0, Size: 0x8]
	FName DeadMontageSlotName;//[Offset: 0x18d8, Size: 0x8]
	enum[] PauseLogicAIState;//[Offset: 0x18e0, Size: 0x10]
	delegate OnMonsterSpawned;//[Offset: 0x18f0, Size: 0x10]
	delegate OnMonsterRecycled;//[Offset: 0x1900, Size: 0x10]
	float ChangeCapsuleSize;//[Offset: 0x1910, Size: 0x4]
	bool TestPathSyncToLocation(Vector Location);// 0x621a298
	bool TestPathSyncToActor(Actor* Actor);// 0x621a208
	void StopMovementMode();// 0x621a1ec
	void StartMovementMode();// 0x621a1d0
	void ShowHeadShootDeadEffect();// 0x621a1bc
	void SetReplicateAliveSeconds(bool bReplicate);// 0x621a138
	void SetCopyBoneSimpleChar(STExtraSimpleCharacter* InSimpleChar);// 0x621a0bc
	bool ResumeAILogic();// 0x621a084
	void ResetCharAnimParam();// 0x621a070
	bool PauseAILogic();// 0x621a038
	void OnTakeMeleeAttackDamage(out const MeleeDamageEvent AttackEvent, Pawn* DamageCauser);// 0x6219ea8
	void OnSmoothComponentSnapshotPreReplicate();// 0x6219e94
	void OnRep_SyncAIState();// 0x6219e80
	void OnRep_ReplicatedMovement();// 0x6219e64
	void OnRep_RageLevel();// 0x6219e50
	void OnRep_MonsterSyncID();// 0x6219e3c
	void OnRep_MonsterNameID();// 0x6219e28
	void OnRep_MonsterIdleIndex();// 0x6219e14
	void OnRep_IsLeftRightMove();// 0x6219df8
	void OnRep_IdleBlendSpaceValue();// 0x6219de4
	void OnRep_ChangeCapsuleSize();// 0x6219dc8
	void OnLeaveLaunchAirFlyState();// 0x6219dac
	void OnEnterLaunchAirFlyState();// 0x6219d90
	void OnAIMoveCompleted(AIRequestID RequestID, byte Result);// 0x6219cd4
	void NotifyInitial();// 0x6219cc0
	void MulticastPlayerSoundByID(int SoundID);// 0x6219c10
	void LeaveLaunchAirRiseUp();// 0x6219bfc
	void LeaveLaunchAirGround();// 0x6219be8
	void LeaveAIState(enum NewState, bool bIsNotify);// 0x6219b28
	void LaunchCharacterWithParam(Vector LaunchVelocity, bool bChangeState);// 0x6219a68
	void K2_ClientHandleVehicleResponse(STExtraVehicleBase* OtherVehicle, Vector HitImpulseDirection, float HitSpeed);// 0x621996c
	bool IsSameTeam(Pawn* Other);// 0x62198d4
	bool IsPlayingDeadMontage();// 0x621989c
	bool IsInActiveState();// 0x6219864
	bool IsEnableBroadcastDamage(out const DamageEvent DamageEvent, float Damage);// 0x6219778
	bool IsCanCopyBone();// 0x6219740
	bool IsBoss();// 0x6219708
	bool IsBigBoss();// 0x62196d0
	bool IsBehemoth();// 0x6219698
	void InterruptAttackSkill();// 0x6219684
	void InitVehicleHitStuff();// 0x6219668
	void InitCharAnimParam();// 0x6219654
	bool HasAnyAIState(out const enum[] AIStates);// 0x6219588
	bool HasAIState(enum NewState);// 0x62194f8
	bool HandleVehicleHit(STExtraVehicleBase* OtherVehicle, Vector HitImpulseDirection, float HitSpeed, bool bChangeState);// 0x62193a4
	void HandleRagDollState(Controller* Killer, Actor* DamageCauser, out const HitResult HitInfo, out const Vector HitImpulseDir, out const DamageEvent DamageEvent);// 0x62191a8
	void HandleOnLaunchAirState(byte PrevMovementMode, byte PreviousCustomMode);// 0x62190f0
	void HandleHitByBullet(Actor* Causer);// 0x6219074
	void GotoEarthAndDie();// 0x6219058
	Vector GetVelocity();// 0x6219018
	AkComponent* GetSoundComponent();// 0x6218fe4
	Vector GetServerHeadLocation();// 0x6218fac
	STExtraPlayerController* GetPlayerControllerSafety();// 0x6218f70
	int GetMonsterType();// 0x6218f54
	FString GetMonsterName();// 0x6218ea8
	MonsterAnimListComponent* GetMonsterAnimListComponent();// 0x6218e74
	float GetHitBoxRadius();// 0x6218e58
	ExFootIKComponent* GetExFootIKComponent();// 0x6218e1c
	class PlayerTombBox GetDropTomb();// 0x6218de0
	int GetDeactiveMonsterCount();// 0x6218dac
	byte GetCurHitPartJugementType();// 0x6218d78
	STExtraSimpleCharacter* GetCopyBoneSimpleChar();// 0x6218d44
	SimpleCharAnimParamList GetAnimParam();// 0x6218cd4
	int GetAliveTimeSeconds();// 0x6218cb8
	int GetActiveMonsterCount();// 0x6218c84
	void FaceAttackerWithTimeline(Rotator TargetRotation);// 0x6218c00
	void ExplodeBeforeDie(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, Vector _hitImpulseDir, HitResult _hitInfo, bool bIsHeadshot);// 0x62188a8
	void EnterAIState(enum NewState, bool bIsNotify);// 0x62187e8
	void EnableDSAnim(bool bEnable);// 0x6218764
	void DoHurting(byte HurtType, Vector HurtDir, float CauseDamage, int CauseSkillID);// 0x621862c
	void DisappearOnDeath();// 0x6218618
	void DieAfterExplode();// 0x6218604
	void DelayHidden();// 0x62185e8
	void ClearOnDeath(Controller* EventInstigator, out const DamageEvent DamageEvent);// 0x6218514
	bool CheckPlayerNeedUpdateAnimation();// 0x62184dc
	void CheckLaunchAirState();// 0x62184c8
	bool CheckCanResponseVehicle();// 0x6218490
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x621839c
	void ChangeSourceType(byte NewSourceType);// 0x6218320
	float CalcVehicleHitDamage(STExtraVehicleBase* OtherVehicle, Vector HitImpulseDirection, float HitSpeed);// 0x6218214
	void BroadcastReliableLeaveAIState(enum NewState, bool bIsNotify);// 0x6218110
	void BroadcastReliableEnterAIState(enum NewState, bool bIsNotify);// 0x621800c
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x6217d74
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x6217aa4
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x621780c
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x6217574
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x621729c
	void BroadcastClientsSimulateLastPointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool bFatalHealthCost, bool bHeadShotDamage);// 0x6217004
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x6216d6c
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x6216ad4
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x6216804
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool bFatalHealthCost, bool bHeadShotDamage);// 0x6216530
	void BroadcastClientsGMTestDamage(float Damage, float CurHealth, int DamageClassID, byte HitPart);// 0x62163c8
	void BroadcastClientsDebugSpeed(float Speed);// 0x6216318
	void BroadcastClientsDebugOutputDamage(float OutputDmg);// 0x6216268
	void BPSetEyeEffect(float Switch, LinearColor Color);// 0x70644c4
	void BPPreRespawned();// 0x621624c
	void BpOnTakeMeleeAttackDamage(Pawn* Attacker, class DamageType DamageType);// 0x6216190
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x70644c4
	void BPNotifyInitial();// 0x70644c4
	void BPNotifyDisappearOnDeath();// 0x70644c4
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x70644c4
	void BPMonsterInitTableDone();// 0x70644c4
	bool BpHasAnyAIState(out const enum[] AIStates);// 0x62160c4
	byte BPGetReplicatedMovementMode();// 0x62160a8
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x6215f58
	enum BpAIState2AIState(enum InState);// 0x6215ecc
	bool BP_HasAIState(enum NewState);// 0x6215e3c
	RoadPointInfo[] BleCallGetRoadPoints();// 0x6215d90
	bool AllowAIState(enum NewState);// 0x6215d00
	enum AIState2BpAIState(enum InState);// 0x6215c74
	void AddWeaponDamageAddition(byte WeaponType);// 0x6215bf8
<----------Generated by SSpawner v1.0.4---------->


Class: SimpleCharAnimParamList
	Vector Velocity;//[Offset: 0x0, Size: 0xc]
	Vector movedir;//[Offset: 0xc, Size: 0xc]
	byte MovementMode;//[Offset: 0x18, Size: 0x1]
	Rotator ViewRotation;//[Offset: 0x1c, Size: 0xc]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	Vector HurtDir;//[Offset: 0x2c, Size: 0xc]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int RandomAnimID;//[Offset: 0x40, Size: 0x4]
	int IdleBlendSpaceValue;//[Offset: 0x44, Size: 0x4]
	float AdditiveYaw;//[Offset: 0x48, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0x110, Size: 0x38]
	RepSnapshot Snapshot;//[Offset: 0x148, Size: 0x38]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x180, Size: 0x4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x184, Size: 0x4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x188, Size: 0x4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x18c, Size: 0x4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x190, Size: 0x4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x194, Size: 0x4]
	float FindFloorUpOffset;//[Offset: 0x198, Size: 0x4]
	float FindFloorDownOffset;//[Offset: 0x19c, Size: 0x4]
	float CapsuleHalfHeight;//[Offset: 0x1a0, Size: 0x4]
	bool bUseFindFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1]
	int CurrentDeviceLevel;//[Offset: 0x1a8, Size: 0x4]
	int FindFloorDeviceLevel;//[Offset: 0x1ac, Size: 0x4]
	bool bForceRepSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	delegate OnSnapshotPreReplicate;//[Offset: 0x1b8, Size: 0x10]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x1cc, Size: 0xdc]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aa, Size: 0x1]
	bool bOnlyUpdateLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ab, Size: 0x1]
	bool bOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	bool bSimulatedProxyOnlyUpdateLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1]
	bool bSimulatedProxyOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae, Size: 0x1]
	bool bAutonomousProxyEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2af, Size: 0x1]
	bool bIsReplayRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	float ConstantMoveSpeedThreshold;//[Offset: 0x2b4, Size: 0x4]
	float LinearVelocityLerpFactor;//[Offset: 0x2b8, Size: 0x4]
	bool bConstantMoveProtectSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	delegate OnActorTeleportFinish;//[Offset: 0x2c0, Size: 0x10]
	bool bEnableTurnAnimationNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool FlipTurnRightFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	float MoveMaxSpeedWhenTuring;//[Offset: 0x2d4, Size: 0x4]
	bool bAutoUpdateVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	float TurnThreshold;//[Offset: 0x30c, Size: 0x4]
	CurveFloat* TurnTimeCurve;//[Offset: 0x310, Size: 0x8]
	float TurnSpeed;//[Offset: 0x318, Size: 0x4]
	void TeleportNextSync();// 0x606a5e4
	void StopPredict();// 0x606a5d0
	void SetVelocity(out const Vector Velocity);// 0x606a548
	void SetEnable(bool bInEnable, bool bForceReinit);// 0x606a478
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x606a388
	void OnRep_Snapshot();// 0x606a374
	Vector GetVelocity();// 0x606a33c
	bool GetEnable();// 0x606a320
	Vector FindFloor(const Vector InLocation);// 0x606a290
<----------Generated by SSpawner v1.0.4---------->


Class: RepSnapshot
	float TimeStamp;//[Offset: 0x0, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x4, Size: 0xc]
	Rotator_NetQuantize Rotation;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize LinearVelocity;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x28, Size: 0xc]
	bool IsTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: Rotator_NetQuantize.Rotator
<----------Generated by SSpawner v1.0.4---------->


Class: SimulateSyncSmooth
	float LocErrorTolerance;//[Offset: 0x0, Size: 0x4]
	float RotErrorTolerance;//[Offset: 0x4, Size: 0x4]
	float MaxPredictMoveTime;//[Offset: 0x8, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0xc, Size: 0x4]
	float SmoothNetUpdateTime;//[Offset: 0x10, Size: 0x4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MobAdvancedMovement.ActorComponent.Object
	float WallClimb_AcceptableFaceAngle;//[Offset: 0x110, Size: 0x4]
	float WallClimb_TurnFaceSpeed;//[Offset: 0x114, Size: 0x4]
	float WallClimb_KeepDistanceToWall;//[Offset: 0x118, Size: 0x4]
	float WallClimb_JumpToWallSpeed;//[Offset: 0x11c, Size: 0x4]
	float WallClimb_JumpToWallHeightOffset;//[Offset: 0x120, Size: 0x4]
	float WallClimb_MoveUpSpeed;//[Offset: 0x124, Size: 0x4]
	float WallClimb_MoveUpHeightOffset;//[Offset: 0x128, Size: 0x4]
	float WallClimb_ClimbToStand_Duration;//[Offset: 0x12c, Size: 0x4]
	CurveFloat* Curve_ClimbToStand_Forward;//[Offset: 0x130, Size: 0x8]
	CurveFloat* Curve_ClimbToStand_Height;//[Offset: 0x138, Size: 0x8]
	float WallJump_JumpSpeed;//[Offset: 0x140, Size: 0x4]
	float WallJump_JumpAngle;//[Offset: 0x144, Size: 0x4]
	float WallJump_ZVelocity;//[Offset: 0x148, Size: 0x4]
	float Stride_AcceptableFaceAngle;//[Offset: 0x14c, Size: 0x4]
	float Stride_Duration;//[Offset: 0x150, Size: 0x4]
	float Stride_KeepDistanceToWall;//[Offset: 0x154, Size: 0x4]
	float Stride_HeightOffset;//[Offset: 0x158, Size: 0x4]
	float Stride_ForwardOffset;//[Offset: 0x15c, Size: 0x4]
	float Stride_LineTraceOffset;//[Offset: 0x160, Size: 0x4]
	CurveFloat* Curve_Stride_Forward;//[Offset: 0x168, Size: 0x8]
	CurveFloat* Curve_Stride_Height;//[Offset: 0x170, Size: 0x8]
	bool Stride_JumpInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	int iWallClimbState;//[Offset: 0x17c, Size: 0x4]
	int iWallJumpState;//[Offset: 0x180, Size: 0x4]
	int iStrideState;//[Offset: 0x184, Size: 0x4]
	void WindowJump(Vector DstLoacation, Vector originLocation, float WindowHeight);// 0x5f68e20
	void WallJump(Vector DstLocation);// 0x5f68da4
	void WallClimbExit();// 0x5f68d90
	void WallClimb(Vector DstLocation, Vector originLocation, float WindowHeight);// 0x5f68c9c
	void TickWallJump_Turn(float DeltaTime);// 0x5f68c20
	void TickWallJump(float DeltaTime);// 0x5f68ba4
	void TickWallClimb_Turn(float DeltaTime);// 0x5f68b28
	void TickWallClimb_JumpToWall(float DeltaTime);// 0x5f68aac
	void TickWallClimb_ClimbUp(float DeltaTime);// 0x5f68a30
	void TickWallClimb_ClimbToStand(float DeltaTime);// 0x5f689b4
	void TickWallClimb(float DeltaTime);// 0x5f68938
	void TickStride_Turn(float DeltaTime);// 0x5f688bc
	void TickStride_Stride(float DeltaTime);// 0x5f68840
	void TickStride_MoveToWall(float DeltaTime);// 0x5f687c4
	void TickStride(float DeltaTime);// 0x5f68748
	void StrideJump();// 0x5f68734
	void StrideExit();// 0x5f68720
	void Stride(out Vector DstLocation, out Vector originLocation);// 0x5f68644
	void OnMobDie();// 0x5f68630
	void NotifyClientsWallClimbSyncState(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x5f68534
	void NotifyClientsWallClimbStartClimbToStand(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x5f68438
	void NotifyClientsStrideState(Vector pos, Rotator Rotator, int nowStrideState);// 0x5f6833c
	void NotifyClientsStartStride(Vector pos, Rotator Rotator, int nowStrideState, Vector originLocation, Vector DstLocation, float heightLength, float forwardLength);// 0x5f6813c
	bool IsInAdvancedMovement();// 0x5f68104
	int GetWallJumpState();// 0x5f680d0
	int GetWallClimbState();// 0x5f6809c
	int GetStrideState();// 0x5f68068
	void BPWallJump(Vector DstLocation);// 0x5f67fe4
	void BPWallClimb(Vector DstLocation);// 0x5f67f60
<----------Generated by SSpawner v1.0.4---------->


Class: MobPerceptionController.ActorComponent.Object
	float AcceptableNoiseLoudness;//[Offset: 0x110, Size: 0x4]
	enum[] AcceptableNoiseType;//[Offset: 0x118, Size: 0x10]
	enum NoiseAttenuationModel;//[Offset: 0x128, Size: 0x1]
	int NoisePoolSize;//[Offset: 0x12c, Size: 0x4]
	float NoiseRememberTime;//[Offset: 0x130, Size: 0x4]
	float NoiseUpdateFrequency;//[Offset: 0x134, Size: 0x4]
	bool SearchNoise(out NoiseInfo NoiseInfo, enum searchType, BehaviorTreeComponent* BehaviorTree, bool CheckDistance, bool CheckDeadOrDestoryed);// 0x5f6ae94
	void OnPerceptionSenseUpdated(AIPerceptionComponent* PerceptionComponent, out Actor*[] UpdatedActors);// 0x5f6ad9c
	void OnMobDie();// 0x5f6ad88
	void ClearNoisePool();// 0x5f6ad74
	NoiseCheckResult CheckNoise(out AIStimulus Stimulus);// 0x5f6ac10
	float Attenuation(out AIStimulus Stimulus);// 0x5f6aaac
	void AddToNoisePool(Actor* Instigator, out AIStimulus Stimulus, float LoudnessHeard);// 0x5f6a8d0
<----------Generated by SSpawner v1.0.4---------->


Class: NoiseInfo
	enum NoiseType;//[Offset: 0x0, Size: 0x1]
	Actor* Instigator;//[Offset: 0x4, Size: 0x8]
	Vector NoiseLocation;//[Offset: 0xc, Size: 0xc]
	float LoudnessAtStart;//[Offset: 0x18, Size: 0x4]
	float LoudnessHeard;//[Offset: 0x1c, Size: 0x4]
	float HeardTime;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x190, Size: 0x10]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x81f2048
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x81f1fbc
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x81f1ec0
<----------Generated by SSpawner v1.0.4---------->


Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0x118, Size: 0x8]
	AIController* AIOwner;//[Offset: 0x120, Size: 0x8]
	void StopLogic(FString Reason);// 0x81f5f4c
	void RestartLogic();// 0x81f5f30
	bool IsRunning();// 0x81f5ef0
	bool IsPaused();// 0x81f5eb0
<----------Generated by SSpawner v1.0.4---------->


Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0x110, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x118, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0x140, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x81f3d08
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x81f3b74
	void SetValueAsRotator(out const FName KeyName, Rotator RotatorValue);// 0x81f3a98
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x81f39bc
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x81f38e0
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x81f3804
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x81f3728
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x81f364c
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x81f3570
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x81f348c
	bool IsVectorValueSet(out const FName KeyName);// 0x81f33ec
	Vector GetValueAsVector(out const FName KeyName);// 0x81f334c
	FString GetValueAsString(out const FName KeyName);// 0x81f3248
	Rotator GetValueAsRotator(out const FName KeyName);// 0x81f31a8
	Object* GetValueAsObject(out const FName KeyName);// 0x81f310c
	FName GetValueAsName(out const FName KeyName);// 0x81f3070
	int GetValueAsInt(out const FName KeyName);// 0x81f2fd4
	float GetValueAsFloat(out const FName KeyName);// 0x81f2f38
	byte GetValueAsEnum(out const FName KeyName);// 0x81f2e9c
	class Object GetValueAsClass(out const FName KeyName);// 0x81f2e00
	bool GetValueAsBool(out const FName KeyName);// 0x81f2d60
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x81f2c74
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x81f2b88
	void ClearValue(out const FName KeyName);// 0x81f2afc
<----------Generated by SSpawner v1.0.4---------->


Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BlackboardKeyType.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x28, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x30, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x38, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BTService.BTAuxiliaryNode.BTNode.Object
	float interval;//[Offset: 0x58, Size: 0x4]
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BTAuxiliaryNode.BTNode.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]
<----------Generated by SSpawner v1.0.4---------->


Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x498, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x498, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x498, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x498, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x498, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x498, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x4a0, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x4a8, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x4b0, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x4b8, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x4c0, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x4c8, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x4d0, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x4d8, Size: 0x10]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 0x1]
	bool bShareNavigationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ea, Size: 0x1]
	Vector ShareNavSysOffset;//[Offset: 0x4ec, Size: 0xc]
	bool bEnableActiveRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x81e5390
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x81e5314
	void SetMoveBlockDetection(bool bEnable);// 0x81e5290
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x81e51f8
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x70644c4
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x70644c4
	void OnPossess(Pawn* PossessedPawn);// 0x70644c4
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x81e5138
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x81e4ec0
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x81e4ca4
	void K2_SetFocus(Actor* NewFocus);// 0x81e4c28
	void K2_SetFocalPoint(Vector FP);// 0x81e4bac
	void K2_ClearFocus();// 0x81e4b98
	bool HasPartialPath();// 0x81e4b60
	PathFollowingComponent* GetPathFollowingComponent();// 0x81e4b44
	byte GetMoveStatus();// 0x81e4b10
	Vector GetImmediateMoveDestination();// 0x81e4ad8
	Actor* GetFocusActor();// 0x81e4aa4
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x81e4a0c
	Vector GetFocalPoint();// 0x81e49d4
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x81e49b8
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x81e493c
<----------Generated by SSpawner v1.0.4---------->


Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x158, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x168, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x8213320
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x8213198
	Vector GetPathDestination();// 0x8213160
	byte GetPathActionType();// 0x821312c
<----------Generated by SSpawner v1.0.4---------->


Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0x110, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0x120, Size: 0x8]
	AIController* AIOwner;//[Offset: 0x138, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x1c0, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x1d0, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x81e715c
	void RequestStimuliListenerUpdate();// 0x81e7148
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x81e7090
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x81e6fd8
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x81e6ee0
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x81e6de8
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x81e6cf0
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x81e6bd4
<----------Generated by SSpawner v1.0.4---------->


Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x80, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x90, Size: 0x4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x81e812c
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x81e80b0
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x81e7fbc
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x81e7f04
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x81e7d70
<----------Generated by SSpawner v1.0.4---------->


Class: AISenseEvent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x28, Size: 0x8]
	int iExtraData;//[Offset: 0x40, Size: 0x4]
	int iExtraData;//[Offset: 0x44, Size: 0x4]
	int iExtraData;//[Offset: 0x48, Size: 0x4]
	float fExtraData;//[Offset: 0x4c, Size: 0x4]
	float fExtraData;//[Offset: 0x50, Size: 0x4]
	float fExtraData;//[Offset: 0x54, Size: 0x4]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0x110, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0x118, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0x128, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0x138, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x8214b80
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x8214a84
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x82149f8
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x821496c
<----------Generated by SSpawner v1.0.4---------->


Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x82139a0
	void Finish(byte WithResult);// 0x8213914
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x8213860
<----------Generated by SSpawner v1.0.4---------->


Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0x118, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0x128, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0x148, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x158, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x170, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x813432c
	static enum K2_RunGameplayTask(interface class TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x8134034
<----------Generated by SSpawner v1.0.4---------->


Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x81323e8
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x70644c4
	void EndTask();// 0x81323d4
<----------Generated by SSpawner v1.0.4---------->


Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: GameplayResourceSet
<----------Generated by SSpawner v1.0.4---------->


Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: NoiseCheckResult
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum NoiseType;//[Offset: 0x1, Size: 0x1]
	float LoudnessHeard;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	float VelocityDampingOnGround;//[Offset: 0x110, Size: 0x4]
	float VelocityDampingInMidAir;//[Offset: 0x114, Size: 0x4]
	float StepHeight;//[Offset: 0x118, Size: 0x4]
	float VehicleHitFeedBack;//[Offset: 0x11c, Size: 0x4]
	float VehicleImpluseScale;//[Offset: 0x120, Size: 0x4]
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0x124, Size: 0x4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0x128, Size: 0x4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x168, Size: 0x8]
	bool StopSkillSimulate();// 0x6222cb8
	bool StartSkillSimulate(Vector InVelocity, bool PreventPenetration);// 0x6222be4
	void SetVelocity(Vector InVelocity);// 0x6222b68
	void SetSimulatePhysics(bool bInEnabled);// 0x6222ae8
	void SetEnabled(bool InEnabled);// 0x6222a68
	void SetCharacterMovementActive(bool _bIsActive);// 0x62229e4
	bool IsOnGround();// 0x62229ac
	Vector GetVelocity();// 0x6222974
	bool FindGround();// 0x622293c
	void AddVelocity(Vector InVelocity);// 0x62228c0
	void ActivatePhysics();// 0x62228ac
<----------Generated by SSpawner v1.0.4---------->


Class: UnitAttrComponent.ActorComponent.Object
	byte Category;//[Offset: 0x110, Size: 0x1]
	byte Type;//[Offset: 0x111, Size: 0x1]
	int TypeId;//[Offset: 0x114, Size: 0x4]
	void SetActorVisible(bool bEnable);// 0x62dc39c
<----------Generated by SSpawner v1.0.4---------->


Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x1c8, Size: 0x10]
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]
	bool bIsNotMultiCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da, Size: 0x1]
	bool bUseDIYCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db, Size: 0x1]
	int CustomBeginIndex;//[Offset: 0x1dc, Size: 0x4]
	bool IsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x1e8, Size: 0x10]
	float DestinyThreshold;//[Offset: 0x1f8, Size: 0x4]
	int RoundNum;//[Offset: 0x1fc, Size: 0x4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	bool bEnableLowProbCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 0x1]
	Vector2D LowProbCenter;//[Offset: 0x204, Size: 0x8]
	float LowProbCenterRadius;//[Offset: 0x20c, Size: 0x4]
	float LowProbRatio;//[Offset: 0x210, Size: 0x4]
	bool bEnableInnerCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 0x1]
	class Actor* InnerCircleClass;//[Offset: 0x218, Size: 0x8]
	float TimeForForbidMakePain;//[Offset: 0x220, Size: 0x4]
	Actor* InnerCircle;//[Offset: 0x228, Size: 0x8]
	Vector InnerCircleInfo;//[Offset: 0x230, Size: 0xc]
	bool bEnablePrecalculateCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	Vector BlueCircle;//[Offset: 0x274, Size: 0xc]
	Vector WhiteCircle;//[Offset: 0x280, Size: 0xc]
	int CurrentIndex;//[Offset: 0x28c, Size: 0x4]
	Actor* ContainActor;//[Offset: 0x290, Size: 0x8]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	CirCleCfg[] TempCircleConfigs;//[Offset: 0x310, Size: 0x10]
	delegate OnCircleBegin;//[Offset: 0x378, Size: 0x10]
	delegate OnCircleSizeAndPosChanged;//[Offset: 0x388, Size: 0x10]
	delegate OnCircleInitSizeAndPosChanged;//[Offset: 0x398, Size: 0x10]
	delegate OnCircleInfoChanged;//[Offset: 0x3a8, Size: 0x10]
	delegate OnWaveEnded;//[Offset: 0x3b8, Size: 0x10]
	delegate OnCircleEnded;//[Offset: 0x3c8, Size: 0x10]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x3d8, Size: 0x8]
	bool bPreCalculateFirstWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	delegate OnFinishedPreCalculateFirstWhiteCircle;//[Offset: 0x3e8, Size: 0x10]
	bool WhitCircleIsOutOfBlueCircle();// 0x5e49e28
	void StartCircleFromBegin();// 0x5e49e14
	void SetGMCicleTime(float cdTime, float LastTime);// 0x5e49d2c
	void SetContainActor(Actor* InContainActor);// 0x5e49cb0
	void RetriveGetCircleInfo(out GetCircleInfo CurInfo);// 0x5e49bf8
	void RetriveCircleInfo(out ReConnectGameStateInfo CurInfo);// 0x5e49b34
	void PreCalculateCircle(int CircleIndex);// 0x5e49ab8
	void OverrideDestinyChanceByIndex(bool bOverride, float InChance, int CircleIndex);// 0x5e499b4
	void OverrideDestinyChance(bool bOverride, float InChance);// 0x5e498ec
	void MakePain(Actor* _actor, float _desireDamage);// 0x5e49834
	void MakeDesiredCircle(Vector circleInfo, int CircleType);// 0x5e4977c
	bool MakeCurrentWhiteCircle(int InCircleIndex);// 0x5e496e4
	bool IsUseCustomWhiteCircle();// 0x5e496ac
	bool IsPositionInBlueCircle(out const Vector Position);// 0x5e49610
	bool IsInWhiteCircle(out const Vector Location);// 0x5e4955c
	bool IsInBlueCircle(Actor* _actor);// 0x5e494cc
	void InitCircleTimer();// 0x5e494b0
	bool HasDoubleCircleEnabled();// 0x5e49494
	void GMBeginCircleWithCustomParam(int CurIndex, float PosX, float PosY, float PosZ, float DelayTime, float LastTime, float SafeZoneTime, float BlueCircleRadius);// 0x5e49280
	void GMBeginCircle(int CurIndex, float PosX, float PosY, float PosZ, bool bUseSamePoint);// 0x5e49110
	Vector GetWhiteCircle(int InCircleIndex);// 0x5e49080
	Vector[] GetPlayerPositionByDestiny(int CircleIndex);// 0x5e48f84
	Vector GetOverrideVictimPos(Actor* Victim);// 0x5e48ef4
	float GetNeedTotalTimeToCircleIndex(int CircleIndex);// 0x5e48e68
	Vector GetInnerCircleInfo();// 0x5e48e40
	Vector GetFirstWhiteCircle();// 0x5e48e08
	Vector GetCustomWhiteCircleConfigByIndex(int CircleIndex, int RandomIndex);// 0x5e48d40
	Vector GetCustomBlueCircleConfigByIndex(int CircleIndex);// 0x5e48cb0
	Vector GetCurrentWhiteCircle();// 0x5e48c88
	int GetCurrentCircleIndex();// 0x5e48c54
	Vector GetCurrentBlueCircle();// 0x5e48c2c
	int GetCircleIndexByTime(float TimeSeconds);// 0x5e48ba0
	bool CalculateWhiteCircleByDestiny(int CircleIndex, bool bInDestiny, out Vector[] Positions);// 0x5e48a48
	float BlueToWhiteLeftTime(bool bConsiderSafeZoneAppeartime);// 0x5e489b4
	void ApplyCircleOffset(Vector InOffset);// 0x5e48938
<----------Generated by SSpawner v1.0.4---------->


Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	RegisterTimer[] TimerRegister;//[Offset: 0x118, Size: 0x10]
	FString TimerName;//[Offset: 0x128, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RegisterTimer
	int waveIndex;//[Offset: 0x0, Size: 0x4]
	float[] Times;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CirCleCfg
	int CircleID;//[Offset: 0x0, Size: 0x4]
	float DelayTime;//[Offset: 0x4, Size: 0x4]
	float RadiusWhenDestoryMap;//[Offset: 0x8, Size: 0x4]
	float SafeZoneAppeartime;//[Offset: 0xc, Size: 0x4]
	bool bIsCircleWarningUseFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float[] BlueCirclePreWarning;//[Offset: 0x18, Size: 0x10]
	CircleWarningConfig[] BlueCirclePreWarningWithFilter;//[Offset: 0x28, Size: 0x10]
	float LastTime;//[Offset: 0x38, Size: 0x4]
	float Pain;//[Offset: 0x3c, Size: 0x4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Vector2D bluepoint;//[Offset: 0x44, Size: 0x8]
	float blueradius;//[Offset: 0x4c, Size: 0x4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bUseCustomWhiteStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	Vector[] Whitepoints;//[Offset: 0x58, Size: 0x10]
	float whiteradius;//[Offset: 0x68, Size: 0x4]
	float Alpha;//[Offset: 0x6c, Size: 0x4]
	bool bUseContainActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float DestinyChance;//[Offset: 0x74, Size: 0x4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	float ScreenSizeFactor;//[Offset: 0x7c, Size: 0x4]
	float ExtraRadius;//[Offset: 0x80, Size: 0x4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	float DamageMagnifierRange;//[Offset: 0x88, Size: 0x4]
	float DamageMagnifier;//[Offset: 0x8c, Size: 0x4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x90, Size: 0x8]
	Vector[] AvoidPoints;//[Offset: 0x98, Size: 0x10]
	float EdgeDistance;//[Offset: 0xa8, Size: 0x4]
	bool bUseAvoidPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CircleWarningConfig
	float WarningTime;//[Offset: 0x0, Size: 0x4]
	enum WarningState;//[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x3f8, Size: 0x8]
	bool bUseRandomPointIfNotFindAValidCircleCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	bool bFixMayBeInOcean;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 0x1]
	FName AvoidObjectTag;//[Offset: 0x408, Size: 0x8]
	Vector2D PointInsidePolygon;//[Offset: 0x410, Size: 0x8]
	Vector2D[] PolygonPointArray;//[Offset: 0x418, Size: 0x10]
	bool IsInWater(Vector Position);// 0x5e4af00
	Vector GetRandomPointInArea(Vector Origin, float Radius, bool bTry);// 0x5e4adf0
<----------Generated by SSpawner v1.0.4---------->


Class: GetCircleInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 0x4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 0x4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 0x4]
	byte CircleStatus;//[Offset: 0x10, Size: 0x1]
	Vector BlueCircle;//[Offset: 0x14, Size: 0xc]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 0xc]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 0xc]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 0x4]
	float ExtraRadius;//[Offset: 0x40, Size: 0x4]
	int CurrentCircleIndex;//[Offset: 0x44, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ReConnectGameStateInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 0x4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 0x4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 0x4]
	byte CircleStatus;//[Offset: 0x10, Size: 0x1]
	Vector BlueCircle;//[Offset: 0x14, Size: 0xc]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 0xc]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 0xc]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 0x4]
	float ExtraRadius;//[Offset: 0x40, Size: 0x4]
	byte AirAttackStatus;//[Offset: 0x44, Size: 0x1]
	Vector AirAttackArea;//[Offset: 0x48, Size: 0xc]
	int AirAttackWave;//[Offset: 0x54, Size: 0x4]
	int BossCountDown;//[Offset: 0x58, Size: 0x4]
	Vector BossBornPos;//[Offset: 0x5c, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0, Size: 0x4]
	int DownThreshold;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PVELagCompensationComponent.LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool bAutoAdaptShootingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x297c, Size: 0x1]
	float ShootingBoxScaleFactor;//[Offset: 0x2980, Size: 0x4]
	Vector2D MovementProtectFactorXY;//[Offset: 0x2984, Size: 0x8]
	Vector2D MovementProtectFactorZ;//[Offset: 0x298c, Size: 0x8]
	float SimulatedCharacterServerTime();// 0x60212d8
	enum ShootSimpleCharacterVerify(STExtraShootWeapon* Weapon, STExtraBaseCharacter* Shooter, out const BulletHitInfoUploadData ShootData);// 0x6021194
	void AutoAdaptShootingBox();// 0x6021180
<----------Generated by SSpawner v1.0.4---------->


Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	float KeepStillMinTime;//[Offset: 0x40c, Size: 0x4]
	float StillMaxSpeed;//[Offset: 0x410, Size: 0x4]
	Vector StandStillBoundBoxExtent;//[Offset: 0x414, Size: 0xc]
	Vector StandStillHeadBoundBoxExtent;//[Offset: 0x420, Size: 0xc]
	Vector StandStillHeadBoxOffset;//[Offset: 0x42c, Size: 0xc]
	Vector CrouchStillBoundBoxExtent;//[Offset: 0x438, Size: 0xc]
	Vector CrouchStillHeadBoundBoxExtent;//[Offset: 0x444, Size: 0xc]
	Vector CrouchStillHeadBoxOffset;//[Offset: 0x450, Size: 0xc]
	float WeaponOffsetStillScale;//[Offset: 0x45c, Size: 0x4]
	float StandStilDynamicScale;//[Offset: 0x460, Size: 0x4]
	Vector StandStillBoundBoxExtentPicth;//[Offset: 0x464, Size: 0xc]
	Vector StandStillHeadBoundBoxExtentPicth;//[Offset: 0x470, Size: 0xc]
	Vector CrouchStillBoundBoxExtentPicth;//[Offset: 0x47c, Size: 0xc]
	Vector CrouchStillHeadBoundBoxExtentPicth;//[Offset: 0x488, Size: 0xc]
	DistanceContinueHitCheck DistanceContinueHitCheck;//[Offset: 0x494, Size: 0x2c]
	void PostServerMoveDelegate();// 0x5f3e3b8
<----------Generated by SSpawner v1.0.4---------->


Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 0x1]
	bool GM_VerifyProjectileBulletPosBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 0x1]
	float TolDistanceBulletPosNoBlock;//[Offset: 0x114, Size: 0x4]
	float TolDistanceBulletPosBlock;//[Offset: 0x118, Size: 0x4]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 0x1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e, Size: 0x1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f, Size: 0x1]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 0x1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 0x1]
	bool bVerifyMuzzleImpactDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	bool bVerifyShootPosInHistory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 0x1]
	bool bVerifyMuzzleLocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126, Size: 0x1]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127, Size: 0x1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 0x1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b, Size: 0x1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	bool bVerifyShooterHead2PosIsBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1]
	int TolerateMuzzleAndCharacterDisSquare;//[Offset: 0x130, Size: 0x4]
	int TolerateMuzzleAndVehicleDisSquare;//[Offset: 0x134, Size: 0x4]
	float TolerateShootPointDistanceSqured;//[Offset: 0x138, Size: 0x4]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0x13c, Size: 0x4]
	float TolerateShootPointScaleOnFast;//[Offset: 0x140, Size: 0x4]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x148, Size: 0x4]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x14c, Size: 0x4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x150, Size: 0x4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x154, Size: 0x4]
	float MaxGunPosZHeight;//[Offset: 0x158, Size: 0x4]
	float MaxGunPosLength;//[Offset: 0x15c, Size: 0x4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x160, Size: 0x4]
	float TolerateOwnerAndBulletDist;//[Offset: 0x164, Size: 0x4]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0x168, Size: 0x10]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x178, Size: 0x4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]
	float ShortDirReverseDistance;//[Offset: 0x180, Size: 0x4]
	float TolerateShootRange;//[Offset: 0x184, Size: 0x4]
	float TolerateHitDataDelayTime;//[Offset: 0x188, Size: 0x4]
	PingDifVerifyStr[] PingDifVerifyData;//[Offset: 0x190, Size: 0x10]
	PingDifVerifyStr[] PingDifVerifyDataAI;//[Offset: 0x1a0, Size: 0x10]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	float BonePointTorelate;//[Offset: 0x1b4, Size: 0x4]
	Vector VerifiedBoneScale;//[Offset: 0x1b8, Size: 0xc]
	float VerifyMuzImpDirIgnoreDis;//[Offset: 0x1c4, Size: 0x4]
	float TolMuzImpDir2BulletDir;//[Offset: 0x1c8, Size: 0x4]
	float TolMuzImpDir2ControlRot;//[Offset: 0x1cc, Size: 0x4]
	int VerifyMuzImpDirRecordTime;//[Offset: 0x1d0, Size: 0x4]
	float TolShootPos2History;//[Offset: 0x1d4, Size: 0x4]
	float TolShootPos2History2;//[Offset: 0x1d8, Size: 0x4]
	int VerifyShootPosInHistoryRecordTime;//[Offset: 0x1dc, Size: 0x4]
	bool VerifyMuzzleLocusIgnoreFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool VerifyMuzzleLocusIgnoreShotGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 0x1]
	float VerifyMuzzleLocusIgnoreDis;//[Offset: 0x1e4, Size: 0x4]
	float TolMuzLocusXMin;//[Offset: 0x1e8, Size: 0x4]
	float TolMuzLocusXMax;//[Offset: 0x1ec, Size: 0x4]
	float TolMuzLocusYMin;//[Offset: 0x1f0, Size: 0x4]
	float TolMuzLocusYMax;//[Offset: 0x1f4, Size: 0x4]
	float TolMuzLocusZMin;//[Offset: 0x1f8, Size: 0x4]
	float TolMuzLocusZMax;//[Offset: 0x1fc, Size: 0x4]
	float TolMuzLocusLengthMax;//[Offset: 0x200, Size: 0x4]
	float TolHead2ShootPosLength3;//[Offset: 0x204, Size: 0x4]
	float TolHead2ShootPosLength4;//[Offset: 0x208, Size: 0x4]
	float TolGun2ShootPosLength1;//[Offset: 0x20c, Size: 0x4]
	float TolGun2ShootPosLength2;//[Offset: 0x210, Size: 0x4]
	float VerifyRecentMovementTorelateTime;//[Offset: 0x214, Size: 0x4]
	int VerifyRecentMovementTorelateNum1;//[Offset: 0x218, Size: 0x4]
	int VerifyRecentMovementTorelateNum2;//[Offset: 0x21c, Size: 0x4]
	float ShootCornerMinLagTime;//[Offset: 0x220, Size: 0x4]
	float ShootCornerMaxDotValue;//[Offset: 0x224, Size: 0x4]
	float ShootCornerMinPingDiff;//[Offset: 0x228, Size: 0x4]
	float ShootCornerMinDisDiff;//[Offset: 0x22c, Size: 0x4]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	int MaxBlockLineTraceTimes;//[Offset: 0x234, Size: 0x4]
	float TolerateFlyDis;//[Offset: 0x238, Size: 0x4]
	float VehiclePosCheckInterval;//[Offset: 0x23c, Size: 0x4]
	float MaxVehicleSpeed;//[Offset: 0x240, Size: 0x4]
	float TolerateVehicleDis;//[Offset: 0x244, Size: 0x4]
	float MaxTolerateVehicleDis;//[Offset: 0x248, Size: 0x4]
	float CharacterPosCheckInterval;//[Offset: 0x24c, Size: 0x4]
	float MaxCharacterSpeed;//[Offset: 0x250, Size: 0x4]
	float TolerateCharacterDis;//[Offset: 0x254, Size: 0x4]
	float MaxTolerateCharacterDis;//[Offset: 0x258, Size: 0x4]
	float SimVehiclePosCheckInterval;//[Offset: 0x25c, Size: 0x4]
	float SimTolerateVehicleDis;//[Offset: 0x260, Size: 0x4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x264, Size: 0x4]
	float SimCharacterPosCheckInterval;//[Offset: 0x268, Size: 0x4]
	float SimTolerateCharacterDis;//[Offset: 0x26c, Size: 0x4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x270, Size: 0x4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x274, Size: 0x4]
	float TolerateNetDelay;//[Offset: 0x278, Size: 0x4]
	float TolerateMaxVictmPosDis;//[Offset: 0x27c, Size: 0x4]
	float GrayWeaponAndShootAngle;//[Offset: 0x280, Size: 0x4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x284, Size: 0x4]
	float GrayImpactPointChangeMinSqured;//[Offset: 0x288, Size: 0x4]
	float GrayBulletImpactOffsetMaxDist;//[Offset: 0x28c, Size: 0x4]
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0x290, Size: 0x10]
	ServerCheckBox[] PoseCheckBoxesHighPrecision;//[Offset: 0x2a0, Size: 0x10]
	float fBoundBoxScaleMillisecondMin;//[Offset: 0x2b0, Size: 0x4]
	float fBoundBoxScaleMillisecondMax;//[Offset: 0x2b4, Size: 0x4]
	float fShootBoxMaxScaleInShootCorner;//[Offset: 0x2b8, Size: 0x4]
	Character* CharacterOwner;//[Offset: 0x2c0, Size: 0x8]
	WeaponAntiData CacheWeaponAntiData;//[Offset: 0x2c8, Size: 0x18]
	Vector LastImpactPoint;//[Offset: 0x2e0, Size: 0xc]
	bool CacheIsShootPosBlockImpactPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool CacheIsShootCornerSituation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	float CacheShootPingDiff;//[Offset: 0x304, Size: 0x4]
	float ShooterNetDelayMinSeconds;//[Offset: 0x30c, Size: 0x4]
	float ShooterNetDelayMaxSeconds;//[Offset: 0x310, Size: 0x4]
	<enum,IndefiniteVerifyCfg> IndefiniteVerifyCfg;//[Offset: 0x318, Size: 0x50]
	<enum,int> IndefiniteVerifyPassCount;//[Offset: 0x368, Size: 0x50]
	<enum,int> IndefiniteVerifyFailCount;//[Offset: 0x3b8, Size: 0x50]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1]
	static float Stat_SimulatedCharacterServerTime(const Character* InChara);// 0x5f3f8e8
	float SimulatedCharacterServerTime();// 0x5f3f8ac
	void SetIndefiniteVerifyCfg(enum Type, int InCountThreshold, float InPercentThreshold);// 0x5f3f7b8
	float ServerLatestTransformUpdateTimeStamp();// 0x5f3f77c
	float ServerLatestTimeStamp();// 0x5f3f740
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x5f3f674
	void OnCharacterStartInit();// 0x5f3f660
	void GrayVerify(STExtraShootWeapon* Weapon, out const BulletHitInfoUploadData ShootData);// 0x5f3f564
	float GetTolerateServerVictmPosTolerateByNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x5f3f4a0
	float GetTolerateServerVictmPosByNearMaxNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x5f3f3dc
	float GetTolerateServerShooterPosDisByNetDelay(Pawn* AttackerPawn);// 0x5f3f350
	bool GetPingDifVerifyData(float PingDif, out PingDifVerifyStr OutData, bool IsAI);// 0x5f3f230
	float GetNearMaxNetDelay(Pawn* TargetPawn, float NearTime);// 0x5f3f168
	int GetIndefiniteVerifyCount(enum VerifyType, bool IsPass);// 0x5f3f098
	static float GetCharacterPredictionSeconds(const Character* InChara);// 0x5f3f01c
	enum ConditionChanggeIndefiniteVerify(out const ShootVerifyParameter VerifyData, enum VerifyType);// 0x5f3ef3c
	bool CheckIsShootCorner(out const ShootVerifyParameter VerifyData);// 0x5f3ee98
	int ChangeIndefiniteVerifyCount(enum VerifyType, bool IsPass, int Var);// 0x5f3ed8c
	float AuthorityCharacterServerTime();// 0x5f3ed58
	void AddPingDifVerifyData(float MinPing, float MaxPing, float TorLagTime, float ShootCornerBoxScale, bool IsAI);// 0x5f3ebe8
<----------Generated by SSpawner v1.0.4---------->


Class: EntityAntiCheatComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 0x4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 0x4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8, Size: 0x4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DistanceContinueHitCheck
	float CheckDisSquared;//[Offset: 0x0, Size: 0x4]
	int MaxContinueTimes;//[Offset: 0x4, Size: 0x4]
	float ShootIntervalBuff;//[Offset: 0x8, Size: 0x4]
	float MaxCheatTimes;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PingDifVerifyStr
	float MinPingDif;//[Offset: 0x0, Size: 0x4]
	float MaxPingDif;//[Offset: 0x4, Size: 0x4]
	float TolLagTime;//[Offset: 0x8, Size: 0x4]
	float ShootCornerBoxScale;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0, Size: 0x1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 0xc]
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 0xc]
	Vector Offset;//[Offset: 0x1c, Size: 0xc]
	Vector PitchOffset;//[Offset: 0x28, Size: 0xc]
	float ReferenceHSlope;//[Offset: 0x34, Size: 0x4]
	float ReferenceVSlope;//[Offset: 0x38, Size: 0x4]
	float HMinScale;//[Offset: 0x3c, Size: 0x4]
	float VMinScale;//[Offset: 0x40, Size: 0x4]
	float HMaxScale;//[Offset: 0x44, Size: 0x4]
	float VMaxScale;//[Offset: 0x48, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: IndefiniteVerifyCfg
	int CountThreshold;//[Offset: 0x0, Size: 0x4]
	float PercentThreshold;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Box BoundBox;//[Offset: 0x18, Size: 0x1c]
	Box HeadBoundBox;//[Offset: 0x34, Size: 0x1c]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Vector VehicleLocation;//[Offset: 0x54, Size: 0xc]
	Rotator VehicleRotation;//[Offset: 0x60, Size: 0xc]
	Vector VehicleRotVelocity;//[Offset: 0x6c, Size: 0xc]
	Vector Velocity;//[Offset: 0x78, Size: 0xc]
	uint32 UserCmdSequenceNew;//[Offset: 0x84, Size: 0x4]
	uint32 UserCmdSequenceOld;//[Offset: 0x88, Size: 0x4]
	uint32 LastAckBadMoveSequence;//[Offset: 0x8c, Size: 0x4]
	float MoveServerTimeNew;//[Offset: 0x90, Size: 0x4]
	float MoveServerTimeOld;//[Offset: 0x94, Size: 0x4]
	enum MoveBaseState;//[Offset: 0x98, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ShootVerifyParameter
	STExtraShootWeapon* Weapon;//[Offset: 0x0, Size: 0x8]
	STExtraCharacter* Shooter;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: UAEMonsterAnimListComponentBase.UAEAnimListComponentBase.ActorComponent.Object
	bool bCacheAnimAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x203, Size: 0x1]
	MonsterAnimPhaseData[] MonsterAnimDatas;//[Offset: 0x208, Size: 0x10]
	<byte,AnimationAsset*> MonsterAnimDatasMap;//[Offset: 0x218, Size: 0x50]
	MonsterAnimPhaseData[] MonsterAnimDatasRandom1;//[Offset: 0x268, Size: 0x10]
	MonsterAnimPhaseData[] MonsterAnimDatasRandom2;//[Offset: 0x278, Size: 0x10]
	delegate OnAnimLoadedFinished;//[Offset: 0x288, Size: 0x10]
	int RandomAnimID;//[Offset: 0x298, Size: 0x4]
	void OnAsyncLoadingFinished(MonsterAsyncloadAnimParams loadAnimParams);// 0x62863e8
	MonsterAnimPhaseData GetMonsterAnimPhaseDataByType(byte PoseType);// 0x62862fc
	AnimationAsset* GetMonsterAnimByType(byte PoseType);// 0x6286270
<----------Generated by SSpawner v1.0.4---------->


Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x178, Size: 0x50]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x1c8, Size: 0x10]
	bool bDisableAnimListOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 0x4]
	AnimationAsset* Animation;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterAnimPhaseData
	byte PosType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterAsyncloadAnimParams
	byte PosType;//[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MeleeAttackSetting
	float ImpulseLaunchScale;//[Offset: 0x0, Size: 0x4]
	float ImpulseLaunchZOffset;//[Offset: 0x4, Size: 0x4]
	bool bConsiderAttackerVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float MinAttackerVelocity;//[Offset: 0xc, Size: 0x4]
	float MaxAttackerVelocity;//[Offset: 0x10, Size: 0x4]
	float MaxVelocityInfluenceScale;//[Offset: 0x14, Size: 0x4]
	bool bShouldAffectZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterIdleIndex
	int PlayedIdleIndex;//[Offset: 0x0, Size: 0x4]
	int ForceReplicateTag;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterAnimListComponent.LuaActorComponent.ActorComponent.Object
	bool bLoadAnimAssetsBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	bool bLoadAnimAssetsOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 0x1]
	bool bEnableAutoCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d3, Size: 0x1]
	MonsterAnimData* MonsterAnimDataAsset;//[Offset: 0x1d8, Size: 0x8]
	<FName,MonsterAnimCache> CachedAsset;//[Offset: 0x1e0, Size: 0x50]
	bool bIsLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bHasLoadingFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	void RequestLoadAnimAssets(FString Reason);// 0x5f73d00
	void OnMonsterOwnerRespawned(STExtraSimpleCharacter* Monster);// 0x5f73c84
	void OnAnimAssetsLoadingFinished(const FString Reason);// 0x5f73b50
	bool GetIsLoadingAnimAssets();// 0x5f73b34
	BlendSpace1D* GetBlendSpace1D(FString AnimAssetName);// 0x5f73a7c
	BlendSpace* GetBlendSpace(FString AnimAssetName);// 0x5f739c4
	AnimSequence* GetAnimSequence(FString AnimAssetName);// 0x5f7390c
	AnimMontage* GetAnimMontage(FString AnimAssetName);// 0x5f73854
	AnimationAsset* GetAnimAsset(out const FName AnimAssetName, FString Reason);// 0x5f73748
	void CacheAnimInstanceAnimAssetVars(FString Reason);// 0x5f736a0
	void AutoCacheInstanceAnimVars(AnimInstance* Instance);// 0x5f73624
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterAnimData.DataAsset.Object
	MonsterAnimVarName[] AnimVarNames;//[Offset: 0x38, Size: 0x10]
	MonsterAnimAsset[] AnimAssets;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterAnimVarName
	FName AnimVarName;//[Offset: 0x0, Size: 0x8]
	FString Description;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterAnimAsset
	UAEBlackboardKeySelector AnimVarName;//[Offset: 0x0, Size: 0x8]
	AnimationAsset*[] AnimSoftPtr;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterAnimCache
	int LoadedIndex;//[Offset: 0x0, Size: 0x4]
	AnimationAsset* Asset;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
<----------Generated by SSpawner v1.0.4---------->


Class: STPointDamageEvent.PointDamageEvent.DamageEvent
	int ItemId;//[Offset: 0xb8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 0xc]
	HitResult HitInfo;//[Offset: 0x20, Size: 0x98]
<----------Generated by SSpawner v1.0.4---------->


Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ExFootIKComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 0x1]
	float UpwardDetectionDistance;//[Offset: 0x774, Size: 0x4]
	float DownwardDetectionDistance;//[Offset: 0x778, Size: 0x4]
	float DetectionSphereRadius;//[Offset: 0x77c, Size: 0x4]
	byte DetectionCollisionChannel;//[Offset: 0x780, Size: 0x1]
	float InterpSpeed;//[Offset: 0x784, Size: 0x4]
	bool bEnableIKEffectorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 0x1]
	bool bEnableKEffectorOffsetMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x789, Size: 0x1]
	float ScaleOfPawn;//[Offset: 0x78c, Size: 0x4]
	<FName,ExFootIKInfo> FootIKInfos;//[Offset: 0x790, Size: 0x50]
	bool bEnableOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1]
	float TickFrequencyPerSecond;//[Offset: 0x7e4, Size: 0x4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 0x1]
	Vector IKEffectorOffsetMinValue;//[Offset: 0x7ec, Size: 0xc]
	void GetIKEffectorRotation(out Rotator OutIKEffectorRotation, out bool bOutIsValid, out const FName InFootIKName);// 0x5ece690
	Vector GetIKEffectorOffsetMinValue();// 0x5ece668
	void GetIKEffectorOffset(out Vector OutIKEffectorOffset, out bool bOutIsValid, out const FName InFootIKName);// 0x5ece490
<----------Generated by SSpawner v1.0.4---------->


Class: ExFootIKInfo
	FName IKBoneOrSocketName;//[Offset: 0x0, Size: 0x8]
	FName FixedBoneOrSocketName;//[Offset: 0x8, Size: 0x8]
	Vector IKBoneOrSocketOffset;//[Offset: 0x10, Size: 0xc]
	Vector IKEffectorOffset;//[Offset: 0x1c, Size: 0xc]
	Rotator IKEffectorRotation;//[Offset: 0x28, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
<----------Generated by SSpawner v1.0.4---------->


Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x10, Size: 0x14]
	Vector Origin;//[Offset: 0x24, Size: 0xc]
	HitResult[] ComponentHits;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 0x4]
	float MinimumDamage;//[Offset: 0x4, Size: 0x4]
	float InnerRadius;//[Offset: 0x8, Size: 0x4]
	float OuterRadius;//[Offset: 0xc, Size: 0x4]
	float DamageFalloff;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
<----------Generated by SSpawner v1.0.4---------->


Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
<----------Generated by SSpawner v1.0.4---------->


Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
<----------Generated by SSpawner v1.0.4---------->


Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
<----------Generated by SSpawner v1.0.4---------->


Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent
<----------Generated by SSpawner v1.0.4---------->


Class: RoadPointInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	int Radius;//[Offset: 0x4, Size: 0x4]
	Vector pos;//[Offset: 0x8, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: DropPropData
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int ItemCount;//[Offset: 0x4, Size: 0x4]
	int DropMode;//[Offset: 0x8, Size: 0x4]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int KeyID;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0, Size: 0x4]
	int ItemDropRuleID;//[Offset: 0x4, Size: 0x4]
	int RandomCount;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CommonTreasureBox.PlayerTombBox.LuaActor.Actor.Object
	void RegisterToCurveAnimComponent();// 0x5e4ebe0
<----------Generated by SSpawner v1.0.4---------->


Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	FString PathToLoad;//[Offset: 0x30, Size: 0x10]
	int ID;//[Offset: 0x40, Size: 0x4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	Pawn* LastInstigatorPawn;//[Offset: 0x48, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x900, Size: 0x4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904, Size: 0x1]
	Pawn* LastInstigatorPawn;//[Offset: 0x908, Size: 0x8]
	StaticMesh* BrokenMesh;//[Offset: 0x910, Size: 0x8]
	ParticleSystem* BrokenEffect;//[Offset: 0x918, Size: 0x8]
	void NotifyServerBroken(PlayerController* Instigator);// 0x70644c4
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x693c858
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x70644c4
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x693c788
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x693c6c8
	UAEWindowRepData GetRepData();// 0x693c5fc
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarCapture.LuaActor.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x4c0, Size: 0x8]
	MeshComponent* WeaponMesh;//[Offset: 0x4c8, Size: 0x8]
	STExtraPlayerController* ASTPC;//[Offset: 0x4d0, Size: 0x8]
	int[] IgnoreDisplayWeaponIDList;//[Offset: 0x4d8, Size: 0x10]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x4e8, Size: 0x50]
	class AnimInstance* animBP;//[Offset: 0x538, Size: 0x8]
	<int,class AnimInstance> AnimBP_SpecialMap;//[Offset: 0x540, Size: 0x50]
	class AnimInstance* AnimBP_Real;//[Offset: 0x590, Size: 0x8]
	delegate OnWeaponBlendAnim;//[Offset: 0x598, Size: 0x10]
	int CurUseWeaponSkinID;//[Offset: 0x5a8, Size: 0x4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	bool bShowingAvatarModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ad, Size: 0x1]
	<int,FName> SlotToSocket;//[Offset: 0x5b0, Size: 0x50]
	FName OBPlayerName;//[Offset: 0x600, Size: 0x8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x608, Size: 0x8]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x610, Size: 0x8]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x618, Size: 0x8]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x620, Size: 0x10]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x630, Size: 0x10]
	SkeletalMeshComponent* PendantComponent;//[Offset: 0x640, Size: 0x8]
	FName[] HideBoneNames;//[Offset: 0x648, Size: 0x10]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x658, Size: 0x10]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x668, Size: 0x10]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x678, Size: 0x8]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x680, Size: 0x8]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x5d8484c
	void SetEnable(bool IsEnable);// 0x5d847c8
	void ResetWeaponPendant(int WeaponId);// 0x5d8474c
	void ResetBackpackPendant(CharacterAvatarComponent2* AvatarComponent);// 0x5d846d0
	void RenderCaptureScene();// 0x5d846bc
	void RefreshAvatar();// 0x5d846a8
	void OnWeaponSystemDataChanged(out WeaponSystemDataOnSimulateClient WeaponSystemData);// 0x5d84604
	void OnWeaponAvatarEquipped(int SlotID, ItemDefineID NewItemID);// 0x5d84538
	void OnSimulatedWeaponChanged();// 0x5d84524
	void OnAvatarEquipped(enum SlotType, bool IsEquipped, int ItemId);// 0x5d84420
	void OnAvatarAllMeshLoaded();// 0x5d8440c
	void ModifyAnimationByEquipWeapon(int WeaponId);// 0x5d84388
	void ModifyAnimationByCharAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x5d84304
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x5d841f8
	int[] GetWeaponSkinIDs();// 0x5d84154
	CharacterAvatarComponent2* GetOBAvatarComponent();// 0x5d84120
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x5d83fdc
	void EquipWeapon();// 0x5d83fc8
	void EquipPlayerAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x5d83f4c
	void DisplayAvatarWithComponent(bool IsEnable, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x5d83e4c
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x5d83d84
	void CreateWeapon(bool IsSkeletalMesh);// 0x5d83d00
	void BluePrintSetEnable(bool IsEnable);// 0x70644c4
	void ApplyAnimation();// 0x5d83cec
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0, Size: 0x8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 0x28]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 0x28]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	<enum,FName> SlotTypeToSocket;//[Offset: 0x980, Size: 0x50]
	<enum,FName> SubSlotTypeToSocket;//[Offset: 0x9d0, Size: 0x50]
	int gender;//[Offset: 0xa20, Size: 0x4]
	delegate OnAvatarEquipped;//[Offset: 0xa28, Size: 0x10]
	delegate OnAvatarVisibleChanged;//[Offset: 0xa38, Size: 0x10]
	AvatarSlotNameConfig DefaultSlotNameConfig;//[Offset: 0xa48, Size: 0xa0]
	<enum,AvatarSlotNameConfig> SlotNameMap;//[Offset: 0xae8, Size: 0x50]
	int HeadAvatarID;//[Offset: 0xb48, Size: 0x4]
	int PreHeadAvatarID;//[Offset: 0xb4c, Size: 0x4]
	SoftObjectPath HeadMeshSoftPath;//[Offset: 0xb50, Size: 0x18]
	class AnimInstance* HeadAniminstanceClass;//[Offset: 0xb68, Size: 0x8]
	bool isEnable2PassHairMarkDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb71, Size: 0x1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb88, Size: 0x1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb89, Size: 0x1]
	<FName> HadHideBoneNames;//[Offset: 0xb90, Size: 0x50]
	enum[] OpenResetHideBone;//[Offset: 0xbe0, Size: 0x10]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0xbf0, Size: 0x50]
	int[] ignoreSlots;//[Offset: 0xc40, Size: 0x10]
	int WholeBodyModelID;//[Offset: 0xc50, Size: 0x4]
	int CurrentClothID;//[Offset: 0xc54, Size: 0x4]
	int[] NeedRemoveSlot;//[Offset: 0xc58, Size: 0x10]
	<enum,int> AvatarRectifyData;//[Offset: 0xc68, Size: 0x50]
	delegate OnAvatarRectifyDataChange;//[Offset: 0xcb8, Size: 0x10]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc8, Size: 0x1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0xcd0, Size: 0x50]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0xd20, Size: 0x50]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0xd70, Size: 0x50]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0xdc0, Size: 0x50]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0xe10, Size: 0x50]
	delegate OnAvatarAttachEquipped;//[Offset: 0xe60, Size: 0x10]
	delegate OnClothParticleEquipped;//[Offset: 0xe70, Size: 0x10]
	delegate OnClothPlaneCutChanged;//[Offset: 0xe80, Size: 0x10]
	delegate OnEnableEffectTickChanged;//[Offset: 0xe90, Size: 0x10]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0xea0, Size: 0x50]
	int ConfigMinDistFromMainChar;//[Offset: 0xef0, Size: 0x4]
	int ConfigMaxDistFromMainChar;//[Offset: 0xef4, Size: 0x4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0xef8, Size: 0x4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0xf00, Size: 0x10]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0xf10, Size: 0x10]
	float ConfigBoundScale;//[Offset: 0xf20, Size: 0x4]
	int EnableEquipAvatarPendant;//[Offset: 0xf24, Size: 0x4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf28, Size: 0x1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf29, Size: 0x1]
	<int,AdditonalAvatarStruct> AdditionalAvatarMap;//[Offset: 0xf30, Size: 0x50]
	FakeHeadInfo FakeHeadInfo;//[Offset: 0xf80, Size: 0x38]
	class AnimInstance* SoftAnimBPClass;//[Offset: 0xfb8, Size: 0x28]
	bool EnableCachedAvatarRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe0, Size: 0x1]
	bool bEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe3, Size: 0x1]
	bool HasVehicleAjustHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe4, Size: 0x1]
	int BodySlotStateChangeCount;//[Offset: 0xfe8, Size: 0x4]
	float CutPlaneW;//[Offset: 0xfec, Size: 0x4]
	bool EnableClothPlaneCut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff8, Size: 0x1]
	SkinnedMeshComponent* ClothSkinMeshTobeCut;//[Offset: 0x1010, Size: 0x8]
	bool bEnableAvatarReAttachFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1018, Size: 0x1]
	bool bVisibleChangeRefreshAvatarReAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1019, Size: 0x1]
	enum[] AlwaysResetReAttachSlotList;//[Offset: 0x1020, Size: 0x10]
	<enum,AvatarReAttachConfigCollection> PendingAvatarReAttachCollectionMap;//[Offset: 0x1030, Size: 0x50]
	<enum,ReAttachConfig> FinalWorkingAvatarReAttachMap;//[Offset: 0x1080, Size: 0x50]
	int BackAircraftType;//[Offset: 0x10d0, Size: 0x4]
	int BackSkateType;//[Offset: 0x10d4, Size: 0x4]
	bool EnableEffectTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d8, Size: 0x1]
	int TypeToInt(enum InSlotType);// 0x5e2c8b8
	void TemporarySetHidedBonesVisibility(bool Visible);// 0x5e2c834
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x5e2c714
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x5e2c654
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x5e2c594
	bool SetSkinMaterial(int SlotID, out const ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x5e2c474
	void SetPlane();// 0x5e2c460
	void SetNormalMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, int SlotID, BackpackAvatarHandle* InAvatarHandle);// 0x5e2c2f4
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x5e2c188
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x5e2c10c
	void SetForceMeshLodWithVehicle(const int InSlot, const bool bInEnterVehicle);// 0x5e2c04c
	void SetClothParticleVisibility(int SlotID, bool Visible, bool IsForCE);// 0x5e2bf40
	void SetCastPhotonShadow(bool Enable);// 0x5e2bebc
	bool SetBodySuitsMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, BackpackAvatarHandle* InAvatarHandle);// 0x5e2bd7c
	void SetAvatarVisibility(enum SlotType, bool Visible, bool IsForCE);// 0x5e2bc70
	void SetAvatarGender(int AGender);// 0x5e2bbf4
	void SetAvatarForceLOD(enum SlotType, int LODLevel);// 0x5e2bb3c
	void SetAllMeshCharMode(bool bMainChar);// 0x5e2bab8
	void ResetBackpackPendant(int InSlotID, BackpackAvatarHandle* AvatarHandle);// 0x5e2ba00
	void ResetAnimDynamicsByMeshComp(MeshComponent* MeshComp);// 0x5e2b97c
	void ResetAllAnimDynamics();// 0x5e2b960
	void RequestSyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x5e2b8a8
	void ReportAvatarInfo(out <int,int> AvatarInfo);// 0x5e2b7c4
	void RemoveForceReplaceOnVehicle(int SlotID);// 0x5e2b748
	void RemoveClothParticleEffect(int SlotID);// 0x5e2b6cc
	void RemoveAvatarReAttach(const enum InTriggerSlot);// 0x5e2b650
	void RemoveAttachMesh(int SlotID);// 0x5e2b5d4
	void RefreshAvatarReAttachForAssociatedSlot(const enum InScaledSlot, const enum InAssociatedSlot);// 0x5e2b51c
	void RefreshAvatarReAttach();// 0x5e2b508
	void ProcessUnDownloadHead();// 0x5e2b4ec
	void ProcessClothSuits();// 0x5e2b4d0
	void ProcessChangedVehicleSeat();// 0x70644c4
	void ProcessAvatarRectify();// 0x5e2b4b4
	void PreProcessBeforeLoadMesh();// 0x5e2b498
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x70644c4
	void PostProcessAfterLoadMesh();// 0x5e2b47c
	void OnSyncLoadBattleHandlesDone(out const BattleItemHandleBase*[] AvatarHandles);// 0x5e2b3c4
	void OnRespawned();// 0x5e2b3a8
	void OnRep_VehicleForceReplace();// 0x5e2b38c
	void OnRep_EnableClothPlaneCut();// 0x5e2b378
	void OnRep_BodySlotStateChangedInternal();// 0x5e2b364
	void OnRep_BodySlotStateChanged();// 0x5e2b348
	void OnRecycled();// 0x5e2b32c
	void OnPlayerLeaveVehicle(STExtraVehicleBase* InVehicle);// 0x5e2b2b0
	void OnPlayerLeaveState(enum State);// 0x5e2b234
	void OnPlayerEnterVehicle(STExtraVehicleBase* InVehicle);// 0x5e2b1b8
	void OnPlayerEnterState(enum State);// 0x5e2b13c
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x5e2b06c
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x5e2afac
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x5e2af00
	void OnEnterOrLeaveVehicle();// 0x70644c4
	void OnEnableEffectTickChanged__DelegateSignature(bool IsEnable);// 0x70644c4
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x5e2ade8
	void OnClothPlaneCutChanged__DelegateSignature(bool IsEnable);// 0x70644c4
	void OnClothParticleEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x70644c4
	void OnAvatarVisibleChanged__DelegateSignature(enum SlotType, bool bIsVisibile);// 0x70644c4
	void OnAvatarRectifyDataChange__DelegateSignature();// 0x70644c4
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID, int RealShowItemID);// 0x5e2ac88
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x5e2abb4
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x5e2aa84
	void OnAvatarEquippedCall(enum SlotType, bool bEquipped, int ItemId);// 0x5e2a980
	void OnAvatarEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x70644c4
	void OnAvatarAttachEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x70644c4
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x5e2a8fc
	void OnAsyncLoadBattleHandlesDone_Download(int InAsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles, out const ItemDefineID[] DefineIDList);// 0x5e2a77c
	void OnAsyncLoadBattleHandlesDone(int InBodySlotStateChangeCount, out const BattleItemHandleBase*[] AvatarHandles, out const ItemDefineID[] DefineIDList);// 0x5e2a5fc
	bool NeedVehicleForceReplate(int ItemId);// 0x70644c4
	bool NeedHideParachuteEquipemtInFreeState();// 0x5e2a5bc
	void ModifySlotFakeID(enum Slot, int FakeID);// 0x5e2a504
	void ModifyLogicSlotDescID(enum Slot, int ItemId);// 0x5e2a44c
	void MarkAvatarBoneRetargetLODFeature(const enum InAvatarSlot, const bool InIsUseEnable);// 0x5e2a384
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x5e2a260
	bool IsWearingAvatarNeedParachuteWind();// 0x70644c4
	bool IsUseDefaultReplaceModel(int InSlotID, out const ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle);// 0x5e2a138
	bool IsTeammate();// 0x5e2a0f8
	bool IsSelf();// 0x5e2a0b8
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x5e29fb8
	bool IsSameAvatarHandle(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x5e29eb8
	bool IsPendantExistAndBackpackHided(int SlotType);// 0x5e29e28
	bool IsNeedModifyVehicle(int TemplateID);// 0x5e29d98
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x5e29cc4
	bool IsItemClothSlotBlueprintExist(out const ItemDefineID InItemID, bool bWithLog);// 0x5e29bd8
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x5e29aa8
	bool IsInVehicleTemplateConfig(int VehicleID, int TemplateID);// 0x5e299e0
	bool IsCutPlaneOnVehicleOpen();// 0x70644c4
	enum IntToType(int InSlotID);// 0x5e29968
	void InitMasterComponent();// 0x5e29954
	void Initialize();// 0x5e29938
	void InitialAvatarParam(int AGender);// 0x5e298bc
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x5e29840
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x5e29750
	bool InitBodyMeshByHead(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x5e29664
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh);// 0x70644c4
	bool HaveSubTypeMesh(enum SlotType, int SubType);// 0x5e29598
	bool HandleUnEquipCloth(out const ItemDefineID InItemID);// 0x5e294f4
	bool HandleUnEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x5e29410
	void HandleHeadEquipped(BattleItemHandleBase* Handle);// 0x5e29394
	void HandleEquipInitalCloth(BattleItemHandleBase* InItemHandle);// 0x5e29318
	bool HandleEquipCloth(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x5e29234
	bool HandleEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x5e29150
	StaticMesh* GetStaticMesh(out const MeshPackage MeshPack);// 0x5e29094
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x5e28f8c
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage MeshPack);// 0x5e28ed0
	int GetRepalceIDOnVehicle(int OriginID);// 0x70644c4
	enum GetPendantSlotType();// 0x5e28e94
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x5e28e00
	MaterialInstanceDynamic* GetMaterialBySlotName(enum InSlotType, FName SlotName);// 0x5e28d38
	MaterialInstance* GetMaterial(out const MeshPackage MeshPack);// 0x5e28c7c
	BackpackAvatarHandle* GetLoadedHandle(int SlotID);// 0x5e28bf0
	int GetEquipmentSkinItemID(int InItemID);// 0x5e28b5c
	bool GetEquimentMeshBySlot(int Slot, out MeshData MeshPack);// 0x5e28a60
	int[] GetDefaultBodyItemIDList();// 0x5e289bc
	FName GetClothMaterialSkinName(enum SlotType, bool bSuit);// 0x5e288ec
	FName GetClothMaterialColorName(enum SlotType, bool bSuit);// 0x5e2881c
	MaterialInterface* GetCharSkinMaterial(MeshComponent* MasterMesh, enum SlotType, BackpackAvatarHandle* InAvatarHandle);// 0x5e28718
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle);// 0x70644c4
	BackpackAvatarItemPattern* GetAvatarItemPattern(enum InSlotType, int InPatternID, int InNumID);// 0x5e28618
	BackpackAvatarItemColor* GetAvatarItemColor(enum InSlotType, int InColorID);// 0x5e28550
	int GetAvatarIDBySlotID(int SlotID);// 0x5e284c4
	enum GetAttachPartSlotType();// 0x5e28488
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x5e283f4
	bool GetAttachMeshResRef(out const AvatarAttachMeshData MeshPack, out SoftObjectPath OutAssetRef);// 0x5e2828c
	void GetAllEquipItemsWithoutFake(out int[] EquipItems);// 0x5e281d4
	void GetAllEquipItems(out int[] EquipItems);// 0x5e2811c
	void GenerateVehicleTemplateConfig();// 0x70644c4
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle);// 0x70644c4
	void ForceReplaceAvatarOnVehicle(int SlotID);// 0x5e280a0
	void FillVehicleTemplateConfig(int TemplateID, int VehicleID);// 0x5e27fec
	bool EnableEquipAvatarPendantFeature();// 0x5e27fb4
	bool DeleteAvatarMeshData(int InSlotID, out const ItemDefineID InOldItemDefineID, bool bDestroyComp);// 0x5e27e84
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID);// 0x70644c4
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID);// 0x70644c4
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x5e27d9c
	void ClearAvatarHandlerFromPool(out const ItemDefineID InItemID);// 0x5e27d04
	bool CheckShouldEquipDefaultItem(int InSlotID);// 0x5e27c6c
	bool CheckIsHiddenByOther(int InItemResID);// 0x5e27bdc
	bool CheckClothSuitsAllSlotIsExist(out const ItemDefineID InItemID, out const int[] AllSlotItemIDs);// 0x5e27ab8
	void CheckAvatarReAttachForSlotAssociation(const enum InSlot);// 0x5e27a3c
	void CheckAvatarReAttachForSlot(const enum InScaledSlot);// 0x5e279c0
	void CheckAvatarReAttachCancelForSlotAssociation(const enum InScaledSlot);// 0x5e27944
	void CancelAvatarReAttach(out const ReAttachConfig InAvatarReAttachInfo);// 0x5e277e8
	void BPOnRemoveAvatarReAttach();// 0x70644c4
	void BPOnDeleteAvatarMeshData(int InSlotID, bool MeshChanged);// 0x70644c4
	bool BPIsNeedModifyVehicle(int VehicleID, int TemplateID, int SeatIdx);// 0x70644c4
	void AsyncLoadClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x5e27730
	void AsyncLoadAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x5e27678
	void ApplyMeshCompCollision(int SlotID);// 0x5e275fc
	bool ApplyMaterial(MeshComponent* InMeshComponent, ItemHandleBase* InItemHandle);// 0x5e2752c
	void ApplyClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x5e27474
	void ApplyAvatarReAttach(out const ReAttachConfig InAvatarReAttachInfo);// 0x5e27318
	void ApplyAvatarCustomInfo(int InSlotID, MaterialInstanceDynamic* InMatDynamic, BackpackAvatarItemColor* InColorHandle, BackpackAvatarItemPattern* InPatternHandle);// 0x5e271ec
	void ApplyAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x5e27134
	void ApplyAnimListOverride(ItemHandleBase* InItemHandle, bool IsPutOn);// 0x5e2706c
	void AddAvatarReAttach(const enum InTriggerSlot, out const AvatarReAttachConfigCollection InAvatarReAttachCollection);// 0x5e26f88
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x5e26f04
	void ActivateLimitEffect(FName ComponentTag, bool bActivate);// 0x5e26e3c
<----------Generated by SSpawner v1.0.4---------->


Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	<int,FName> SlotToSocket;//[Offset: 0x5a8, Size: 0x50]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x5f8, Size: 0x50]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x648, Size: 0x50]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x698, Size: 0x50]
	delegate OnAvatarBeginLoadMesh;//[Offset: 0x6e8, Size: 0x10]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x6f8, Size: 0x10]
	delegate OnAvatarMeshEquipped;//[Offset: 0x708, Size: 0x10]
	delegate OnAvatarMeshMaterialApplyed;//[Offset: 0x718, Size: 0x10]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 0x1]
	bool EnableMeshOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 0x1]
	bool IsGameStateValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 0x1]
	bool IsLoadMeshProcessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72b, Size: 0x1]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x730, Size: 0x10]
	int AsyncLoadReqID;//[Offset: 0x818, Size: 0x4]
	int LastAsyncLoadReqID;//[Offset: 0x81c, Size: 0x4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 0x1]
	AvatarEntity*[] EntityTickList;//[Offset: 0x838, Size: 0x10]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x848, Size: 0x50]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x898, Size: 0x8]
	delegate OnRegisterEntityTick;//[Offset: 0x8a0, Size: 0x10]
	bool bLoadWithBatchBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 0x1]
	enum[] LoadWithBatchBodyFilterTypes;//[Offset: 0x8b8, Size: 0x10]
	int[] LoadWithBatchBodyFilterTemplateIDs;//[Offset: 0x8c8, Size: 0x10]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x6083a50
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x6083990
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x60838d0
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x6083764
	void SetLoadMeshWithBatchBody(bool bFlag);// 0x60836e0
	void ResetSlotSyncData();// 0x60836c4
	void RequestSyncLoadMeshesWithPath(out const SoftObjectPath[] AssetPathList);// 0x60835ac
	void RequestSyncLoadMeshes();// 0x6083598
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x60834d8
	void RequestAsyncLoadMeshes();// 0x60834c4
	void RequestAsyncLoadHandles();// 0x60834b0
	void RemoveEquippedAvatar(int InSlotID);// 0x608342c
	void RemoveAllEquippedAvatar(bool bClearMasterMesh);// 0x60833a0
	void ReloadLogicAvatar(int SlotID, enum ReloadType, bool bReBuild);// 0x608329c
	void ReloadAllLogicAvatar(enum ReloadType);// 0x6083218
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x6083194
	void RegisterEntityTick(AvatarEntity* Entity, bool isRegister);// 0x60830d4
	bool PutOnEquipmentByResID(int resID);// 0x608303c
	bool PutOffEquimentByResID(int resID);// 0x6082fa4
	void PreProcessBeforeLoadMesh();// 0x6082f88
	void PostProcessAfterLoadMesh();// 0x6082f6c
	void OnSyncLoadMeshesDone();// 0x6082f58
	void OnRespawned();// 0x6082f3c
	void OnRep_BodySlotStateChanged();// 0x6082f20
	void OnRegisterEntityTick__DelegateSignature();// 0x70644c4
	void OnRecycled();// 0x6082f04
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x6082e44
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x6082d98
	void OnAvatarMeshMaterialApplyed__DelegateSignature(MeshComponent* MeshComponent);// 0x70644c4
	void OnAvatarMeshEquippedEventBP(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID, int RealShowItemID);// 0x6082c38
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID, int RealShowItemID);// 0x6082ad8
	void OnAvatarMeshEquipped__DelegateSignature(int SlotID, bool bEquipped, int ItemId);// 0x70644c4
	void OnAvatarBeginLoadMesh__DelegateSignature();// 0x70644c4
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x70644c4
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x6082a54
	void OnAsyncLoadHandlesDone_Download(out const ItemHandleBase*[] AvatarHandles);// 0x6082994
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x60828d4
	void OnAllAvatarHandleLoadedDoneSync();// 0x60828c0
	void OnAllAvatarHandleLoadedDone();// 0x60828ac
	bool NeedToHandleSlotState(out const ItemDefineID InItemID);// 0x6082800
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x60826dc
	bool IsValidStateToRequestDownload();// 0x60826a4
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x60825d0
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x60824fc
	bool IsItemHasEquipped(int InItemID);// 0x608246c
	bool IsForceRecreateMeshBoneRetargetAdaptSlot(const enum InTestSlot);// 0x60823d4
	bool IsEnableItemDownload(int ItemId);// 0x70644c4
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x6082328
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x6082290
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x60821f8
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x6082138
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x6082030
	enum GetMeshTypeBySlot(int InSlotID);// 0x6081fa4
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x6081f18
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x6081e84
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x6081df8
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID);// 0x6081cf0
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID);// 0x6081be8
	AvatarEntityFactory* GetEntityFactory();// 0x6081bac
	SoftObjectPath GetBatchDefaultBodyPath();// 0x70644c4
	ItemHandleBase* GetAvatarHandleExternal(out const ItemDefineID InItemID, bool bDirectCreate);// 0x6081ac4
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int SubSlotID);// 0x60819c0
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x608192c
	MeshComponent*[] GetAllMeshComponents(bool CheckVisible);// 0x6081830
	int GetAdvanceVehicleInsideSlotID();// 0x60817f4
	bool GenerateDefaultAvatarConfig(int InBaseSkinID);// 0x70644c4
	bool DeleteAvatarMeshData(int InSlotID, out const ItemDefineID InOldItemDefineID, bool bDestroyComp);// 0x60816c4
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x60815dc
	AvatarEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x6081518
	bool CheckSlotInfo(int InSlotID, out bool isHide, out bool isReplace, out bool bVisable, out ItemDefineID OutItemID);// 0x6081340
	bool CanLoadItemWithBatchBody(out const ItemDefineID InItemID);// 0x608129c
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x60811dc
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs, out ItemDefineID[] OutRequestItemList);// 0x6081098
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x6080f90
	void BPCreateAvatarCustomHandle(int SlotID, int ItemId, out const AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle);// 0x70644c4
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x6080d78
<----------Generated by SSpawner v1.0.4---------->


Class: SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0x2f0, Size: 0x50]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x340, Size: 0x50]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x390, Size: 0x20]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x3b0, Size: 0x10]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x3c0, Size: 0x10]
	delegate OnAvatarEquippedEvent;//[Offset: 0x3d0, Size: 0x10]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x3e0, Size: 0x10]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x3f0, Size: 0x10]
	int itemType;//[Offset: 0x400, Size: 0x4]
	enum CustomType;//[Offset: 0x404, Size: 0x1]
	<int,ForceEquipSlotInfo> ForceEquipItemLogic;//[Offset: 0x408, Size: 0x50]
	bool VehicleForceReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 0x1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 0x1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x463, Size: 0x1]
	int SubSlotStartNum;//[Offset: 0x464, Size: 0x4]
	int SubSlotIntervalNum;//[Offset: 0x468, Size: 0x4]
	<int,enum> SlotHideStateMap;//[Offset: 0x470, Size: 0x50]
	<int,TempAvatarSlotDesc> TempRunningSlotDesc;//[Offset: 0x4c0, Size: 0x50]
	int[] AlawysHideResetOperation;//[Offset: 0x570, Size: 0x10]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	delegate OnAvatarConflictProcess;//[Offset: 0x588, Size: 0x10]
	void SetForceHideState(int InSlotID, enum InForceHideState);// 0x607f054
	void ServerProcessData();// 0x607f038
	void RemoveTempRunningSlotDesc(int SlotID, int Index);// 0x607ef84
	void RemoveForceEquipItem(int SlotID);// 0x607ef08
	void RemoveAllEquippedItem();// 0x607eef4
	void OnRespawned();// 0x607eed8
	void OnRep_VehicleForceReplace();// 0x607eebc
	void OnRep_BodySlotStateChanged();// 0x607eea0
	void OnRecycled();// 0x607ee84
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x607edb4
	void OnHandleUnequipSlot(int InSlotID);// 0x607ed38
	void OnHandleUnequipItem(out const AvatarSyncData InSyncData);// 0x607ec94
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x607ebe8
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x607ead0
	void OnAvatarUnequippedEvent__DelegateSignature(int SlotID, ItemDefineID OldItemID);// 0x70644c4
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x607e9fc
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x607e8cc
	void OnAvatarEquippedFailedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x70644c4
	void OnAvatarEquippedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x70644c4
	void OnAvatarConflictProcess__DelegateSignature(int SlotID, ItemDefineID NewItemID, int[] ConflictSlotID);// 0x70644c4
	bool NeedToHandleSlotState(out const ItemDefineID InItemID);// 0x607e820
	bool ModifyViewDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x607e714
	bool ModifyViewDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x607e608
	bool ModifyViewDataByForceHide(int InSlotID, bool bHide);// 0x607e534
	bool ModifySyncDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x607e428
	bool ModifySyncDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x607e31c
	bool ModifySyncDataByForceHide(int InSlotID, enum HideState);// 0x607e250
	int MakeStateInfo(out const int[] InSlotDesc);// 0x607e188
	AvatarTableData MakeAvatarTableData(out const ItemDefineID InItemID);// 0x607e0b8
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x607dfb8
	bool IsItemHasMutilReplaceMesh(int InSlotID, out const ItemDefineID InItemID);// 0x607ded0
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x607dda0
	bool IsInHideWhiteTable(int SlotID1, int SlotID2);// 0x607dcd0
	bool IsEquippedThoseItemList(out const int[] InItemListID);// 0x607dc04
	bool IsEquippedItemID(int InItemID);// 0x607db74
	bool IsEquippedItemDefineID(out const ItemDefineID InItemID);// 0x607dad0
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x607da24
	bool HasLogicEquipped(out const ItemDefineID InItemID);// 0x607d980
	bool HandleUnequipSlot(int InSlotID);// 0x607d8f0
	bool HandleUnequipItem(out const ItemDefineID InItemID);// 0x607d84c
	void HandleItemSlotState(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x607d6b8
	void HandleItemResetOrderDesc();// 0x607d6a4
	void HandleItemResetOperation();// 0x607d690
	void HandleItemReplaceRelation();// 0x607d67c
	void HandleItemHideRelation();// 0x607d668
	bool HandleEquipItem(out const ItemDefineID InItemID, out const AvatarCustom InCustomInfo);// 0x607d56c
	void GetViewDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x607d3f4
	void GetViewDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x607d27c
	bool GetViewDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x607d19c
	bool GetViewDataBySlot(const int InSlotID, out AvatarSlotDesc OutSlotDesc);// 0x607d08c
	void GetSyncDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x607cf14
	void GetSyncDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x607cd9c
	bool GetSyncDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x607ccbc
	bool GetSyncDataBySlot(const int InSlotID, out AvatarSyncData OutSlotDesc);// 0x607cbc8
	int GetLogicEquippedSlot(out const ItemDefineID InItemID);// 0x607cb28
	int GetItemTemplateID(out const ItemDefineID InItemID);// 0x607ca80
	enum GetForceHideState(int InSlotID, int ItemId);// 0x607c9b4
	ItemDefineID GetEquippedItemDefineID3(int InSlotID);// 0x607c918
	void GetEquippedItemDefineID2(int InSlotID, out ItemDefineID ItemDefineID, out ItemDefineID RealShowItemDefineID);// 0x607c7f0
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x607c754
	int GetAvatarSlotID(int InSubSlotID);// 0x607c6c8
	void ClientPostProcessViewDataMiddle();// 0x607c6ac
	void ClientPostProcessViewDataBefore();// 0x607c690
	void ClientPostProcessViewDataAfter();// 0x607c674
	void ClientBuildAvatarRelationData();// 0x607c660
	void ClientBodySlotStateChanged();// 0x607c64c
	bool CheckItemConflictRule(out const ItemDefineID InItemID, out const AvatarTableData InAvatarData);// 0x607c530
	void BuildAvatarItemMap(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x607c39c
	void BPHandleTempRunningSlotDesc();// 0x607c380
	bool BPClientPostProcessViewDataMiddle();// 0x607c340
	bool BPClientPostProcessViewDataBefore();// 0x607c300
	bool BPClientPostProcessViewDataAfter();// 0x607c2c0
	void AddTempRunningSlotDesc(int SlotID, int InItemType, int Template, bool bForcHideState);// 0x607c18c
	void AddForceEquipItem(int SlotID, int ItemId, enum HideState);// 0x607c09c
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 0x4]
	int SubSlotID;//[Offset: 0x4, Size: 0x4]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 0x18]
	ItemDefineID RealShowItemDefineID;//[Offset: 0x20, Size: 0x18]
	int gender;//[Offset: 0x38, Size: 0x4]
	int HideState;//[Offset: 0x3c, Size: 0x4]
	int ReplaceState;//[Offset: 0x40, Size: 0x4]
	bool IsExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	AvatarCustom CustomInfo;//[Offset: 0x48, Size: 0x14]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	enum SlotDescDiff;//[Offset: 0x5d, Size: 0x1]
	ItemDefineID OldItemDefineID;//[Offset: 0x60, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarCustom
	enum CustomType;//[Offset: 0x0, Size: 0x1]
	int ColorID;//[Offset: 0x4, Size: 0x4]
	int PatternID;//[Offset: 0x8, Size: 0x4]
	int NumID;//[Offset: 0xc, Size: 0x4]
	int ParticleID;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: NetAvatarSyncData
	AvatarSyncData[] SlotSyncData;//[Offset: 0x0, Size: 0x10]
	int gender;//[Offset: 0x10, Size: 0x4]
	int BaseID;//[Offset: 0x14, Size: 0x4]
	int UpdateFlag;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarSyncData
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int AdditionalItemID;//[Offset: 0x4, Size: 0x4]
	int SlotID;//[Offset: 0x8, Size: 0x4]
	int SubSlotID;//[Offset: 0xc, Size: 0x4]
	int HideState;//[Offset: 0x10, Size: 0x4]
	int ReplaceState;//[Offset: 0x14, Size: 0x4]
	int FakeItemID;//[Offset: 0x18, Size: 0x4]
	enum ForceDescDiff;//[Offset: 0x1c, Size: 0x1]
	enum OperationType;//[Offset: 0x1d, Size: 0x1]
	AvatarCustom CustomInfo;//[Offset: 0x20, Size: 0x14]
	enum ForceHideState;//[Offset: 0x34, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ForceEquipSlotInfo
<----------Generated by SSpawner v1.0.4---------->


Class: TempAvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 0x4]
	AvatarTableData RelationData;//[Offset: 0x8, Size: 0xa0]
	int[] ReplaceDesc;//[Offset: 0xa8, Size: 0x10]
	int[] HideDesc;//[Offset: 0xb8, Size: 0x10]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarTableData
	int SlotID;//[Offset: 0x0, Size: 0x4]
	int SubSlotID;//[Offset: 0x4, Size: 0x4]
	int[] HideFlags;//[Offset: 0x8, Size: 0x10]
	int[] ReplaceFlags;//[Offset: 0x18, Size: 0x10]
	int[] RecoverHideFlagsWhenSelfHidden;//[Offset: 0x28, Size: 0x10]
	int[] RecoverReplaceFlagsWhenSelfHidden;//[Offset: 0x38, Size: 0x10]
	int[] RecoverHideFlagsWhenSelfReplaced;//[Offset: 0x48, Size: 0x10]
	int[] RecoverReplaceFlagsWhenSelfReplaced;//[Offset: 0x58, Size: 0x10]
	int[] ConflictConfig;//[Offset: 0x68, Size: 0x10]
	int[] ConflictConfigWhenSelfReplaced;//[Offset: 0x78, Size: 0x10]
	int HideBoneSlotID;//[Offset: 0x88, Size: 0x4]
	int HideBoneType;//[Offset: 0x8c, Size: 0x4]
	FName[] HideBoneNames;//[Offset: 0x90, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SlotMeshDesc
	int SlotID;//[Offset: 0x0, Size: 0x4]
	MeshComponent* MeshComp;//[Offset: 0x4, Size: 0x8]
	ParticleGroup ParticleGroup;//[Offset: 0x10, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleGroup
	ParticleSystem*[] ParticleSystemList;//[Offset: 0x0, Size: 0x10]
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x10, Size: 0x10]
	ParticleAsset[] ParticleAssetList;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleAsset
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 0x28]
	FName AttachSocket;//[Offset: 0x58, Size: 0x8]
	FName ComponentTag;//[Offset: 0x60, Size: 0x8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x68, Size: 0x10]
	bool bLimitCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bAutoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	bool EnableCullDist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]
	float CullDist;//[Offset: 0x7c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SlotHandleDesc
	int SlotID;//[Offset: 0x0, Size: 0x4]
	ItemHandleBase* EquipHandle;//[Offset: 0x4, Size: 0x8]
	AvatarCustomBase*[] CustomHandles;//[Offset: 0x10, Size: 0x10]
	SoftObjectPath EquipMeshAssetPath;//[Offset: 0x20, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarCustomBase.CustomBase.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x40, Size: 0x10]
	void SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x5e592f4
	void AsyncLoadCustomAssetDone();// 0x5e592e0
	bool ApplyCustomInfo();// 0x5e592a0
<----------Generated by SSpawner v1.0.4---------->


Class: CustomBase.Object
	int CustomID;//[Offset: 0x28, Size: 0x4]
	ActorComponent* OwnerComp;//[Offset: 0x2c, Size: 0x8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x34, Size: 0x8]
	void SetCustomID(int InCustomID);// 0x5e58f74
	MeshComponent* GetOwnerMeshComp();// 0x5e58f40
	ActorComponent* GetOwnerComp();// 0x5e58f0c
	bool ClearCustomInfo();// 0x5e58ecc
	bool ApplyCustomInfo();// 0x5e58e8c
<----------Generated by SSpawner v1.0.4---------->


Class: CustomMatConfig
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	CustomMatScalar[] ScalarConfig;//[Offset: 0x8, Size: 0x10]
	CustomMatColor[] ColorConfig;//[Offset: 0x18, Size: 0x10]
	CustomMatTextrue[] TextrueConfig;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CustomMatScalar
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	FName Tips;//[Offset: 0x8, Size: 0x8]
	float Scalar;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CustomMatColor
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	FName Tips;//[Offset: 0x8, Size: 0x8]
	LinearColor Color;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CustomMatTextrue
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	FName Tips;//[Offset: 0x8, Size: 0x8]
	Texture* Textrue;//[Offset: 0x10, Size: 0x28]
	FString TextruePath;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x28, Size: 0x4]
	int SubSlotID;//[Offset: 0x2c, Size: 0x4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x30, Size: 0x8]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x38, Size: 0x8]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x40, Size: 0x8]
	MeshComponent* MeshComponent;//[Offset: 0x48, Size: 0x8]
	MeshData EntityMeshData;//[Offset: 0x50, Size: 0x80]
	MeshData CachedEntityMeshData;//[Offset: 0xd0, Size: 0x80]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 0x1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 0x1]
	FName SocketName;//[Offset: 0x158, Size: 0x8]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x160, Size: 0x10]
	SoftObjectPath MeshAssetPath;//[Offset: 0x170, Size: 0x18]
	ItemDefineID ParentDefineID;//[Offset: 0x188, Size: 0x18]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x1a0, Size: 0x50]
	void UpdateVisibility();// 0x5d92f98
	void UnRegisterTick();// 0x5d92f7c
	void TickEntity();// 0x5d92f60
	void SetSocketName();// 0x5d92f44
	void SetParentDefineID(ItemDefineID ParentID);// 0x5d92eb0
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x5d92dd8
	void RevertEntityMeshData();// 0x5d92dc4
	void RenderEntity(out SoftObjectPath SoftPath);// 0x5d92cfc
	void RegisterTick();// 0x5d92ce0
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x5d92c48
	void PutOnDefaultEquipment(enum SlotType);// 0x5d92bc4
	void OnPostRender();// 0x5d92ba8
	bool IsEntityAvailable(enum VisibilityType);// 0x5d92b10
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x5d92a44
	void Init(int SlotID, int SubSlotID, SlotViewAvatarComponent* AvatarComponent);// 0x5d9294c
	enum GetMeshType();// 0x5d92910
	MeshData GetMeshData();// 0x5d928ac
	BattleItemHandleBase* GetLoadedHandle();// 0x5d92878
	ItemDefineID GetDefineID();// 0x5d92824
	void EnterRenderPipeline();// 0x5d92808
	void EnterLogicPipeline();// 0x5d927ec
	void DrawOutline(bool bEnable);// 0x5d92760
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x5d92684
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x5d925bc
	void ClearEquipmentLogic(bool putDefault);// 0x5d92530
	void ClearEntity(bool ForceClear);// 0x5d924a4
	void ApplyAnimation();// 0x5d92488
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x5d92404
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum SlotID;//[Offset: 0x140, Size: 0x1]
	enum SubSlot;//[Offset: 0x141, Size: 0x1]
	enum specialType;//[Offset: 0x142, Size: 0x1]
	enum ForceMeshType;//[Offset: 0x143, Size: 0x1]
	enum ForceLODMeshType;//[Offset: 0x144, Size: 0x1]
	<enum,int> SuitConfig;//[Offset: 0x148, Size: 0x50]
	MeshPackage MeshPack;//[Offset: 0x198, Size: 0x258]
	MeshPackage replacedMeshPack;//[Offset: 0x3f0, Size: 0x258]
	MeshPackage[] MutilReplacedMeshPack;//[Offset: 0x648, Size: 0x10]
	enum[] hiddenFlags;//[Offset: 0x658, Size: 0x10]
	enum[] subHiddenFlags;//[Offset: 0x668, Size: 0x10]
	enum[] ReplaceFlags;//[Offset: 0x678, Size: 0x10]
	enum[] ignoreFlags;//[Offset: 0x688, Size: 0x10]
	AvatarPostOperation[] postOperation;//[Offset: 0x698, Size: 0x10]
	BackpackComponent* pBackpackComp;//[Offset: 0x6a8, Size: 0x8]
	int ItemCapacity;//[Offset: 0x6b0, Size: 0x4]
	int Durability;//[Offset: 0x6b4, Size: 0x4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x6c0, Size: 0x38]
	enum hideBoneSlot;//[Offset: 0x6f8, Size: 0x1]
	FName hideBoneName;//[Offset: 0x700, Size: 0x8]
	FName[] hideBoneNameArray;//[Offset: 0x708, Size: 0x10]
	enum HideBoneType;//[Offset: 0x718, Size: 0x1]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x720, Size: 0x50]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x770, Size: 0x10]
	int PendantConfigIndex;//[Offset: 0x780, Size: 0x4]
	float PendantScale;//[Offset: 0x784, Size: 0x4]
	int DefaultExtendPendantID;//[Offset: 0x788, Size: 0x4]
	AvatarAnimOverrideData[] CharacterAnimListOverrideList;//[Offset: 0x790, Size: 0x10]
	byte CharacterAnimOverrideType;//[Offset: 0x7a0, Size: 0x1]
	AvatarAnimOverrideData[] CharacterAnimListAdditiveOverrideList;//[Offset: 0x7a8, Size: 0x10]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x7b8, Size: 0x58]
	BattleItemAdditionalData[] ArmorAttachmentAdditionalDataList;//[Offset: 0x810, Size: 0x10]
	ArmorAttachItemUnit[] CachedArmorAttachmentListBeforeDrop;//[Offset: 0x820, Size: 0x10]
	AvatarReAttachConfigCollection AvatarReAttachCollection;//[Offset: 0x830, Size: 0x10]
	bool bForceUseClothAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 0x1]
	CharacterEffectCfgBase*[] SkinEffectCfgs;//[Offset: 0x848, Size: 0x10]
	bool bEnableSelfForceLODInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 0x1]
	int ForceLODLevelInVehicle;//[Offset: 0x85c, Size: 0x4]
	int RecoverDefaultLODOutVehicle;//[Offset: 0x860, Size: 0x4]
	void SetItemDurability(int InDurability);// 0x5dae398
	void SetItemCapacity(int InCapacity);// 0x5dae31c
	void PreLocalHandleDisuse();// 0x5dae308
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x5dae1ac
	bool IsSwimConfig();// 0x70644c4
	bool HasRibbon();// 0x5dae174
	bool HasCustomInfo();// 0x5dae13c
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x5dae040
	bool HandleRealShowMeshpack(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x5dadf2c
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x5dadc78
	bool HandleMutilReplaceMeshPack(int ReplaceState, out MeshPackage OutMeshPack, Object* Outer);// 0x5dadb2c
	bool HandleMutilMeshPack(out MeshPackage OutMeshPack, Object* Outer);// 0x5dada1c
	bool HandleMeshpackPostProcess(out const MeshPackage InMeshPack, out MeshPackage OutMeshPack, Object* Outer);// 0x5dad8a0
	bool HandleMeshAttached(MeshComponent* SkeletalMeshComp, Object* Outer);// 0x5dad7d0
	bool HandleEnable(bool bEnable);// 0x5dad730
	bool HandleDrop(int InCount, enum Reason);// 0x5dad65c
	bool HandleDisuse(enum Reason);// 0x5dad5c4
	BackpackComponent* GetBackpackComponent();// 0x5dad590
	bool CheckOverrideAvatarAnimList(CharacterAvatarComponent2* InAvatarComp, bool bIsPutOn);// 0x5dad4b4
	bool CheckOverrideAvatarAdditiveAnimList(CharacterAvatarComponent2* InAvatarComp, bool bIsPutOn);// 0x5dad3d8
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity, enum Reason, enum DisuseReason);// 0x5dad28c
	bool BPOnCharacterAttrChangedWithDetailEvent(float resultVal);// 0x5dad1f4
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason);// 0x5dad15c
	void AutoEquipChips();// 0x5dad140
<----------Generated by SSpawner v1.0.4---------->


Class: MeshPackage.AssetPackage
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 0x28]
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 0x28]
	StaticMesh* maleLODStMesh;//[Offset: 0x58, Size: 0x28]
	StaticMesh* femaleLODStMesh;//[Offset: 0x80, Size: 0x28]
	SkeletalMesh* maleSkMesh;//[Offset: 0xa8, Size: 0x28]
	SkeletalMesh* femaleSkMesh;//[Offset: 0xd0, Size: 0x28]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xf8, Size: 0x28]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0x120, Size: 0x28]
	MaterialInterface* maleMat;//[Offset: 0x148, Size: 0x28]
	MaterialInterface* femaleMat;//[Offset: 0x170, Size: 0x28]
	MaterialSet[] additionalMaleMats;//[Offset: 0x198, Size: 0x10]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x1a8, Size: 0x10]
	MaterialInterface* baseMat;//[Offset: 0x1b8, Size: 0x8]
	class AnimInstance* animBP;//[Offset: 0x1c0, Size: 0x8]
	AnimSequence* LobbyIdleAnim;//[Offset: 0x1c8, Size: 0x28]
	bool bForceUseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	bool IsEffectOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1]
	enum EffectCreateType;//[Offset: 0x1f2, Size: 0x1]
	AvatarEffectData[] EffectDataList;//[Offset: 0x1f8, Size: 0x10]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x208, Size: 0x10]
	class AnimInstance* animBPClass;//[Offset: 0x218, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: AssetPackage
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialSet
	MaterialInterface* targetMat;//[Offset: 0x0, Size: 0x28]
	enum targetSlot;//[Offset: 0x28, Size: 0x1]
	MaterialInterface* targetBaseMat;//[Offset: 0x30, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarEffectData
	Transform Transform;//[Offset: 0x0, Size: 0x30]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 0x28]
	FName AttachSocket;//[Offset: 0x58, Size: 0x8]
	FName ComponentTag;//[Offset: 0x60, Size: 0x8]
	enum ValidMethod;//[Offset: 0x68, Size: 0x1]
	enum ValidDevice;//[Offset: 0x69, Size: 0x1]
	bool bIsActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1]
	bool bIsActivateWithMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 0x1]
	bool IsLobbyActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x70, Size: 0x10]
	ParticleSystem* ParticleSystem_F;//[Offset: 0x80, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarAttachMeshData.AssetPackage
	Transform Transform;//[Offset: 0x10, Size: 0x30]
	FName AttachSocket;//[Offset: 0x40, Size: 0x8]
	FName SlotName;//[Offset: 0x48, Size: 0x8]
	StaticMesh* StaticMesh;//[Offset: 0x50, Size: 0x28]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78, Size: 0x28]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0, Size: 0x28]
	MaterialInterface* MatInstance;//[Offset: 0xc8, Size: 0x28]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0, Size: 0x8]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarPostOperation
	enum SlotID;//[Offset: 0x0, Size: 0x1]
	enum operationWhenReplaced;//[Offset: 0x1, Size: 0x1]
	enum operationWhenHidden;//[Offset: 0x2, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 0x18]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0x18, Size: 0x10]
	FString BodyDurabilityIndexName;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]
	enum Op;//[Offset: 0x10, Size: 0x1]
	float ModifyValue;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0, Size: 0x8]
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0, Size: 0x10]
	Transform SocketRelativeTransform;//[Offset: 0x10, Size: 0x30]
	Vector AngularLimitsMin;//[Offset: 0x40, Size: 0xc]
	Vector AngularLimitsMax;//[Offset: 0x4c, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarAnimOverrideData
	byte Layer;//[Offset: 0x0, Size: 0x1]
	class UAECharAnimListCompBase* AnimListCompClass;//[Offset: 0x8, Size: 0x8]
	UAECharAnimListCompBase* AnimListCompInstance;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x208, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 0x1]
	FString AnimsCatorgeryName;//[Offset: 0x8, Size: 0x10]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x18, Size: 0x60]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 0x10]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0x10, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: ArmorAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	enum SlotAdditionalType;//[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarReAttachConfigCollection
	ReAttachConfig[] AvatarReAttachList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ReAttachConfig
	enum ReAttachSlot;//[Offset: 0x0, Size: 0x1]
	enum TriggerSlot;//[Offset: 0x1, Size: 0x1]
	int Priority;//[Offset: 0x4, Size: 0x4]
	bool bForceRecreateAdaptSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum SlotAdaptSpace;//[Offset: 0x9, Size: 0x1]
	Transform AttachTransform;//[Offset: 0x10, Size: 0x30]
	bool bForceRecreateAdaptAssociatedSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	enum AssociatedSlotAdaptSpace;//[Offset: 0x41, Size: 0x1]
	Transform AssociatedSlotAdaptTransform;//[Offset: 0x50, Size: 0x30]
	enum[] AssociatedSlotList;//[Offset: 0x80, Size: 0x10]
	<FName,Transform> WingClothScaleTransformMap;//[Offset: 0x90, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterEffectCfgBase.Object
	enum TriggerCondition;//[Offset: 0x28, Size: 0x1]
	int MaxApplyCount;//[Offset: 0x2c, Size: 0x4]
	int IntParam1;//[Offset: 0x30, Size: 0x4]
	enum ValidScene;//[Offset: 0x34, Size: 0x1]
	bool OnlyValidInBornIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool EnableLowDeviceOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	void RemoveEffect(CharacterAvatarComponent2* InAvatarComp);// 0x5e35840
	bool ReachedMaxTriggerTime();// 0x5e35800
	void Init();// 0x5e357e4
	bool ApplyEffect(CharacterAvatarComponent2* InAvatarComp);// 0x5e3574c
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarEntityFactory.Object
	AvatarEntity* CreateEntity(int SlotID, int SubSlotID);// 0x5d93a2c
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarSlotNameConfig
	<enum,FString> MaleSlotName;//[Offset: 0x0, Size: 0x50]
	<enum,FString> FemaleSlotName;//[Offset: 0x50, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarHideBonesDesc
	HideBoneData[] hideBoneSlots;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x30, Size: 0x10]
	void SetCustomColorDeffered(MaterialInterface* InMaterial, out const SlotToMatColor InMatColor);// 0x5dafbc8
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x5dafb10
	void ModifySlotMatColorArray(int ArrayIndex, out const SlotToMatColor InSlotToMatColor);// 0x5daf9d4
	void ModifyMaskGrayTexture(int ArrayIndex, Texture* InTexture);// 0x5daf850
	void ModifyMaskColor(int ArrayIndex, out const LinearColor[] InColorArray);// 0x5daf758
	void ModifyGrayScale(int ArrayIndex, float InGrayScale);// 0x5daf6a0
<----------Generated by SSpawner v1.0.4---------->


Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x28, Size: 0x8]
	void SetMaterialTexture(MaterialInterface* InMaterial, FName InName, Texture* InTexture);// 0x5daf174
	void SetMaterialScalar(MaterialInterface* InMaterial, FName InName, float InValue);// 0x5daf084
	void SetMaterialColor(MaterialInterface* InMaterial, FName InName, LinearColor InColor);// 0x5daef94
	CharacterAvatarComponent2* GetOwnerComponent();// 0x5daef60
<----------Generated by SSpawner v1.0.4---------->


Class: SlotToMatColor
	enum SlotID;//[Offset: 0x0, Size: 0x1]
	LinearColor[] MaskColor;//[Offset: 0x8, Size: 0x10]
	float GrayScale;//[Offset: 0x18, Size: 0x4]
	Texture* MaskGrayTexture;//[Offset: 0x20, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x30, Size: 0x10]
	SoftObjectPath SoftRefPath1;//[Offset: 0x40, Size: 0x18]
	SoftObjectPath SoftRefPath2;//[Offset: 0x58, Size: 0x18]
	void SetCustomPatternDeffered(MaterialInterface* InMaterial, out const SlotToMatPattern InMatPattern);// 0x5db04bc
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x5db0404
	bool IsPatternNumMode();// 0x5db03e0
	void InitPatternNumID(int InNumID);// 0x5db0368
	void GetPatternNumTexturePath(int InNumID, out SoftObjectPath OutTexture1, out SoftObjectPath OutTexture2);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: SlotToMatPattern
	enum SlotID;//[Offset: 0x0, Size: 0x1]
	Texture* PatternTexture;//[Offset: 0x8, Size: 0x28]
	float IconScale;//[Offset: 0x30, Size: 0x4]
	Texture* PatternTexture;//[Offset: 0x38, Size: 0x28]
	float IconScale;//[Offset: 0x60, Size: 0x4]
	LinearColor IconOffset;//[Offset: 0x64, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarEffectGroup
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x0, Size: 0x10]
	AvatarEffectData[] EffectDataList;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarAttachMeshGroup
	MeshComponent*[] AttachMeshCompList;//[Offset: 0x0, Size: 0x10]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarAttachMeshFrameSkipMap
	int LODLevel;//[Offset: 0x0, Size: 0x4]
	int SkipFrame;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AdditonalAvatarStruct
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int[] SlotIDList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: FakeHeadInfo
	bool bEnableFakeHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	SkeletalMesh* SoftFakeHeadMesh;//[Offset: 0x8, Size: 0x28]
	class AnimInstance* FakeHeadAnimBPClass;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x350, Size: 0x1]
	float FOVAngle;//[Offset: 0x354, Size: 0x4]
	float OrthoWidth;//[Offset: 0x358, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x360, Size: 0x8]
	byte CaptureSource;//[Offset: 0x368, Size: 0x1]
	byte CompositeMode;//[Offset: 0x369, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x370, Size: 0x550]
	float PostProcessBlendWeight;//[Offset: 0x8c0, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x8d0, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x914, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x920, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x92c, Size: 0x1]
	void CaptureScene();// 0x8e2b494
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x8e2b354
<----------Generated by SSpawner v1.0.4---------->


Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x2c9, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x2d0, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x2e0, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x2f0, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x300, Size: 0x10]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312, Size: 0x1]
	float LODDistanceFactor;//[Offset: 0x314, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x318, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x31c, Size: 0x4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x320, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x8e2add8
	void ShowOnlyActorComponents(Actor* InActor);// 0x8e2ad5c
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x8e2ace0
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x8e2ac64
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x8e2abe8
	void HideComponent(PrimitiveComponent* InComponent);// 0x8e2ab6c
	void HideActorComponents(Actor* InActor);// 0x8e2aaf0
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x8e2aa74
	void ClearHiddenComponents();// 0x8e2aa60
<----------Generated by SSpawner v1.0.4---------->


Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f9, Size: 0x1]
	float OcclusionMaskDarkness;//[Offset: 0x3fc, Size: 0x4]
	float OcclusionDepthRange;//[Offset: 0x400, Size: 0x4]
	Vector LightShaftOverrideDirection;//[Offset: 0x404, Size: 0xc]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x410, Size: 0x4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x414, Size: 0x4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x418, Size: 0x4]
	int DynamicShadowCascades;//[Offset: 0x41c, Size: 0x4]
	float CascadeDistributionExponent;//[Offset: 0x420, Size: 0x4]
	float CascadeTransitionFraction;//[Offset: 0x424, Size: 0x4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x428, Size: 0x4]
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42c, Size: 0x1]
	float ShadowCenterOffset;//[Offset: 0x430, Size: 0x4]
	float ShadowIndependentRadius;//[Offset: 0x434, Size: 0x4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 0x1]
	int FarShadowCascadeCount;//[Offset: 0x43c, Size: 0x4]
	float FarShadowDistance;//[Offset: 0x440, Size: 0x4]
	LinearColor ShadowEdgeColor;//[Offset: 0x444, Size: 0x10]
	float DistanceFieldShadowDistance;//[Offset: 0x454, Size: 0x4]
	float LightSourceAngle;//[Offset: 0x458, Size: 0x4]
	float TraceDistance;//[Offset: 0x45c, Size: 0x4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x460, Size: 0x10]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470, Size: 0x1]
	bool bCastsLandscapeShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x470, Size: 0x1]
	float LandscapeShadowColor;//[Offset: 0x474, Size: 0x4]
	float LandscapeShadowOffset;//[Offset: 0x478, Size: 0x4]
	float LandscapeShadowSoftHeight;//[Offset: 0x47c, Size: 0x4]
	float LandscapeShadowPixelPrecision;//[Offset: 0x480, Size: 0x4]
	LandscapeGeometryAsset* LandscapeGeometry;//[Offset: 0x488, Size: 0x8]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x490, Size: 0x1]
	float SoftShadowSoftness;//[Offset: 0x494, Size: 0x4]
	float ShadowBlendFactor;//[Offset: 0x498, Size: 0x4]
	float BoundsScale;//[Offset: 0x49c, Size: 0x4]
	float NearPlaneOffset;//[Offset: 0x4a0, Size: 0x4]
	float FarPlaneOffset;//[Offset: 0x4a4, Size: 0x4]
	float SplitNearOffset;//[Offset: 0x4a8, Size: 0x4]
	float SplitFarOffset;//[Offset: 0x4ac, Size: 0x4]
	float ShadowMapResolution;//[Offset: 0x4b0, Size: 0x4]
	Color ModulatedShadowColor;//[Offset: 0x4b4, Size: 0x4]
	ACESParameter[] ACESParameters;//[Offset: 0x4b8, Size: 0x10]
	bool bUsedShadowControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c8, Size: 0x1]
	float ShadowControl;//[Offset: 0x4cc, Size: 0x4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d0, Size: 0x1]
	int AtmosphereSunLightIndex;//[Offset: 0x4d4, Size: 0x4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x4d8, Size: 0x10]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e8, Size: 0x1]
	bool bCastsCloudShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e8, Size: 0x1]
	Texture* CloudShadowTexture;//[Offset: 0x4f0, Size: 0x8]
	float CloudShadowTileSize;//[Offset: 0x4f8, Size: 0x4]
	float CloudShadowDensity;//[Offset: 0x4fc, Size: 0x4]
	Vector2D CloudShadowWinSpeed;//[Offset: 0x500, Size: 0x8]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x8cd70ac
	void SetOcclusionMaskDarkness(float NewValue);// 0x8cd7030
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x8cd6fb4
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x8cd6f30
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x8cd6eb4
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x8cd6e38
	void SetDynamicShadowCascades(int NewValue);// 0x8cd6dbc
	void SetCloudShadowWinSpeed(out const Vector2D InWinSpeed);// 0x8cd6d34
	void SetCloudShadowTileSize(float InValue);// 0x8cd6cb8
	void SetCloudShadowTexture(Texture* InTexture);// 0x8cd6c3c
	void SetCloudShadowDensity(float InDensity);// 0x8cd6bc0
	void SetCastsCloudShadow(bool InValue);// 0x8cd6b3c
	void SetCascadeTransitionFraction(float NewValue);// 0x8cd6ac0
	void SetCascadeDistributionExponent(float NewValue);// 0x8cd6a44
	void SetAtmosphereSunLight(bool bNewValue);// 0x8cd69c0
<----------Generated by SSpawner v1.0.4---------->


Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeGeometryAsset.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x30, Size: 0x10]
	Vector[] Normals;//[Offset: 0x40, Size: 0x10]
	Vector2D[] UV;//[Offset: 0x50, Size: 0x10]
	int[] Indices;//[Offset: 0x60, Size: 0x10]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x70, Size: 0x50]
	int ComponentIndexCount;//[Offset: 0xc0, Size: 0x4]
	int ComponentVertexCount;//[Offset: 0xc4, Size: 0x4]
	<FString,LevelComponentMapValue> SubLevelComponentMap;//[Offset: 0xc8, Size: 0x50]
	StaticMesh* HighQualityMesh;//[Offset: 0x118, Size: 0x28]
	float HighQualityMeshDestroyHight;//[Offset: 0x140, Size: 0x4]
	<IntPoint,int> ComponentVertexIndexOffset;//[Offset: 0x148, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: LevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 0x10]
	int[] IndexOffsetArray;//[Offset: 0x10, Size: 0x10]
	int[] IndexCountArray;//[Offset: 0x20, Size: 0x10]
	int[] VertexOffsetIndex;//[Offset: 0x30, Size: 0x10]
	int[] BorderIndex1;//[Offset: 0x40, Size: 0x10]
	int[] BorderIndex2;//[Offset: 0x50, Size: 0x10]
	int[] BorderIndex3;//[Offset: 0x60, Size: 0x10]
	int[] BorderIndex4;//[Offset: 0x70, Size: 0x10]
	int[] UnderBorderIndex1;//[Offset: 0x80, Size: 0x10]
	int[] UnderBorderIndex2;//[Offset: 0x90, Size: 0x10]
	int[] UnderBorderIndex3;//[Offset: 0xa0, Size: 0x10]
	int[] UnderBorderIndex4;//[Offset: 0xb0, Size: 0x10]
	int[] BorderIndicesBuffer1;//[Offset: 0xc0, Size: 0x10]
	int[] BorderIndicesBuffer2;//[Offset: 0xd0, Size: 0x10]
	int[] BorderIndicesBuffer3;//[Offset: 0xe0, Size: 0x10]
	int[] BorderIndicesBuffer4;//[Offset: 0xf0, Size: 0x10]
	FString Sibling1Name;//[Offset: 0x100, Size: 0x10]
	FString Sibling2Name;//[Offset: 0x110, Size: 0x10]
	FString Sibling3Name;//[Offset: 0x120, Size: 0x10]
	FString Sibling4Name;//[Offset: 0x130, Size: 0x10]
	int Sibling1Idx;//[Offset: 0x140, Size: 0x4]
	int Sibling2Idx;//[Offset: 0x144, Size: 0x4]
	int Sibling3Idx;//[Offset: 0x148, Size: 0x4]
	int Sibling4Idx;//[Offset: 0x14c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 0x10]
	float Bright;//[Offset: 0x10, Size: 0x4]
	float Gray;//[Offset: 0x14, Size: 0x4]
	float ShoulderStrength;//[Offset: 0x18, Size: 0x4]
	float ToeStrength;//[Offset: 0x1c, Size: 0x4]
	float LinearStrength;//[Offset: 0x20, Size: 0x4]
	float LinearAngle;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x8, Size: 0x10]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x20, Size: 0x10]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x30, Size: 0x10]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte QualityLevel;//[Offset: 0x0, Size: 0x1]
	class Actor[] TargetClassConfigList;//[Offset: 0x8, Size: 0x10]
	class Object[] CachedClassList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0, Size: 0x1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x3f8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 0x50]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x50, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 0x10]
	TrailMarkActor*[] AssignableList;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x3f8, Size: 0x50]
	class Actor[] IgnoreActorClass;//[Offset: 0x448, Size: 0x10]
	float DecalLongestDistance;//[Offset: 0x458, Size: 0x4]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x468, Size: 0x10]
	RuntimeMeshComponent* Decal;//[Offset: 0x478, Size: 0x8]
	void RemoveDecalOnTimer(int[] DecalIdArray);// 0x5f270b8
	bool RemoveDecal(const int ID, bool NeedUpdate);// 0x5f26fe4
	int[] CreateNewDecal(out const Transform DecalTrans, MaterialInstanceDynamic* DecalMaterialInstance, out const Vector2D DecalUVOffset, out const Vector2D DecalUVScale, float AutoDisappearTime, byte TraceAxis, bool bNegativeDir, bool bIgnoreTransForEndPosition);// 0x5f26ce0
<----------Generated by SSpawner v1.0.4---------->


Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 0x8]
	Texture* DecalTexure;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x140, Size: 0x8]
	Texture* DecalTexure;//[Offset: 0x148, Size: 0x8]
	int CoordX;//[Offset: 0x150, Size: 0x4]
	int CoordY;//[Offset: 0x154, Size: 0x4]
	Vector2D DecalSize;//[Offset: 0x158, Size: 0x8]
	bool bIsGifDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	bool bIsMusicDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 0x1]
	int GifDecalFrameNum;//[Offset: 0x164, Size: 0x4]
	float GifDecalFrameTime;//[Offset: 0x168, Size: 0x4]
	AkAudioEvent* DecalSound;//[Offset: 0x170, Size: 0x8]
	float AttenuationRadius;//[Offset: 0x178, Size: 0x4]
	float OutputVolume;//[Offset: 0x17c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x3f4, Size: 0x4]
	int RemainSupplyTimes;//[Offset: 0x3f8, Size: 0x4]
	int SupplyBulletNum;//[Offset: 0x3fc, Size: 0x4]
	float ValidDistance;//[Offset: 0x400, Size: 0x4]
	delegate SupplySpotTimesChange;//[Offset: 0x408, Size: 0x10]
	void ReqUseSupplySpot(STExtraPlayerController* InController);// 0x625be04
<----------Generated by SSpawner v1.0.4---------->


Class: EnhancerSpot.Actor.Object
	EnhancerSpotPlayerSkill[] SkillIdConfig;//[Offset: 0x3f8, Size: 0x10]
	int AddMonsterExpNum;//[Offset: 0x408, Size: 0x4]
	int RemainEnhancerTimesConfig;//[Offset: 0x40c, Size: 0x4]
	int RemainEnhancerTimes;//[Offset: 0x410, Size: 0x4]
	int UseSuccessTipsId;//[Offset: 0x414, Size: 0x4]
	float ValidDistance;//[Offset: 0x418, Size: 0x4]
	float SelfResetTime;//[Offset: 0x41c, Size: 0x4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	enum EnhancerState;//[Offset: 0x421, Size: 0x1]
	float ReadyTime;//[Offset: 0x424, Size: 0x4]
	float FixReadyTime;//[Offset: 0x428, Size: 0x4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x430, Size: 0x10]
	void StateChangeDelegate();// 0x5ea9b18
	void SetReadyTime(float SReadyTime);// 0x5ea9a9c
	void SetEState(enum EState);// 0x5ea9a20
	void RPC_Broadcast_NotifyReadyTime(enum SEnhancerState, float SReadyTime);// 0x5ea9930
	void ResetTimes();// 0x5ea991c
	void ResetSelf();// 0x5ea9908
	void ReqUseEnhancerSpot(STExtraPlayerController* InController);// 0x5ea9884
	void ReadyTimeChangeDelegate();// 0x5ea9868
	void OpenEffect();// 0x5ea984c
	void OnRep_StateChange();// 0x5ea9838
	void OnRep_ReadyTimeChange();// 0x5ea9824
	void OnRep_FixReadyTimeChange();// 0x5ea9810
	enum GetSpotState();// 0x5ea97f4
	void DelayResetSelf();// 0x5ea97e0
	void CloseEffect();// 0x5ea97c4
<----------Generated by SSpawner v1.0.4---------->


Class: EnhancerSpotPlayerSkill
	enum PawnSubType;//[Offset: 0x0, Size: 0x1]
	int SkillID;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerRevivalComponent.LuaActorComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0x1d4, Size: 0x4]
	int GotoSpectatingTime;//[Offset: 0x1d8, Size: 0x4]
	int64 FinishRevivalTime;//[Offset: 0x1e0, Size: 0x8]
	int64 StartObserverTime;//[Offset: 0x1e8, Size: 0x8]
	STExtraPlayerController* OwningPC;//[Offset: 0x1f0, Size: 0x8]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0x1f8, Size: 0x8]
	GameBaseInfo GameBaseInfo;//[Offset: 0x200, Size: 0x90]
	DateTime BePickupTime;//[Offset: 0x290, Size: 0x8]
	void TickRevival(float DeltaSeconds);// 0x5ff08e4
	void SetRemainingRevivalTime(int InValue);// 0x5ff0868
	void SetCaptureIDCardStatus(bool InValue);// 0x5ff07e4
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x5ff0768
	void OnPlayerQuitSpectating();// 0x5ff0754
	void OnPlayerGotoSpectating();// 0x5ff0740
	void OnPlayerExitGame(FName ParamState);// 0x5ff06c4
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x5ff0640
	void LeaveRevivalState(uint32 SaviorKey);// 0x5ff05c4
	bool IsInWaittingRevivalState();// 0x5ff058c
	int GetRevivalCountDownTime();// 0x5ff0570
	int GetRemainingRevivalTime();// 0x5ff053c
	bool GetCaptureIDCardStatus();// 0x5ff0504
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x5ff0478
	void EnterRevivalState();// 0x5ff0464
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x5ff0384
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x5ff02a4
<----------Generated by SSpawner v1.0.4---------->


Class: RevivalPointActor.LuaActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x4c0, Size: 0x8]
	float SmokeStartScaleDistance;//[Offset: 0x4cc, Size: 0x4]
	float SmokeEndScaleDistance;//[Offset: 0x4d0, Size: 0x4]
	float SmokeStartScaleValue;//[Offset: 0x4d4, Size: 0x4]
	float SmokeEndScaleValue;//[Offset: 0x4d8, Size: 0x4]
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 0x1]
	float RevivalCDTime;//[Offset: 0x4e0, Size: 0x4]
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 0x1]
	int RevivalCount;//[Offset: 0x4e8, Size: 0x4]
	delegate OnHaveRevivedTeammates;//[Offset: 0x4f0, Size: 0x10]
	int ID;//[Offset: 0x500, Size: 0x4]
	enum CurState;//[Offset: 0x504, Size: 0x1]
	enum preState;//[Offset: 0x505, Size: 0x1]
	int RevivalTime;//[Offset: 0x508, Size: 0x4]
	bool bCanBroadcastFatalDamageInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 0x1]
	int CurRevivalTime;//[Offset: 0x510, Size: 0x4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	int OperationalDistance;//[Offset: 0x518, Size: 0x4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x520, Size: 0x50]
	Transform PTowEleTransform;//[Offset: 0x570, Size: 0x30]
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x5a0, Size: 0x50]
	FString ExParticleComponentTag;//[Offset: 0x5f0, Size: 0x10]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x600, Size: 0x50]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x650, Size: 0x8]
	int SmokingdisappearTime;//[Offset: 0x658, Size: 0x4]
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 0x1]
	int IconID;//[Offset: 0x660, Size: 0x4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x668, Size: 0x10]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x678, Size: 0x8]
	float RevivalCDTimeCur;//[Offset: 0x680, Size: 0x4]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x698, Size: 0x8]
	void UpdateRevivalPointEffect();// 0x603744c
	void StartRevival();// 0x6037438
	void ShowOperatorUIByState();// 0x603741c
	void SetDisableMapUI();// 0x6037408
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x6037378
	bool RecheckCurrentRevivingPlayers();// 0x6037340
	void OnRep_ShowSmoking();// 0x603732c
	void OnRep_RevivalPointState(enum LastPreState);// 0x60372a8
	void OnRep_RevivalCDTimeCur();// 0x603728c
	void OnRep_CurrentRevivingPlayers();// 0x6037278
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x60371e8
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x6037158
	float GetRevivalCDTimeCurPercent();// 0x6037124
	float GetRevivalCDTimeCur();// 0x60370f0
	float GetRevivalCDTime();// 0x60370bc
	int GetId();// 0x6037088
	void DistanceChangedEvent(float Scale);// 0x70644c4
	void CheckOverlap();// 0x603706c
	bool CanOperatorMe(STExtraPlayerController* InPC);// 0x6036fdc
<----------Generated by SSpawner v1.0.4---------->


Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0, Size: 0x4]
	uint32 DroperPlayerID;//[Offset: 0x4, Size: 0x4]
	int64 PickupTime;//[Offset: 0x8, Size: 0x8]
	int64 DroperTime;//[Offset: 0x10, Size: 0x8]
	FString PickUpName;//[Offset: 0x18, Size: 0x10]
	FString DroperPlayerName;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: FloatingTextComponent.ActorComponent.Object
	int MaxWidgetNum;//[Offset: 0x128, Size: 0x4]
	CurveFloat* OffsetXCurve;//[Offset: 0x130, Size: 0x8]
	CurveFloat* OffsetYCurve;//[Offset: 0x138, Size: 0x8]
	Vector RandomVector;//[Offset: 0x140, Size: 0xc]
	float TextScale;//[Offset: 0x14c, Size: 0x4]
	LinearColor NormalTextColor;//[Offset: 0x150, Size: 0x10]
	float HeadShotTextScale;//[Offset: 0x160, Size: 0x4]
	LinearColor HeadShotTextColor;//[Offset: 0x164, Size: 0x10]
	float BigDamageTextScale;//[Offset: 0x174, Size: 0x4]
	float BigDamage;//[Offset: 0x178, Size: 0x4]
	LinearColor BigDamageTextColor;//[Offset: 0x17c, Size: 0x10]
	float MaxWidgetRemianTime;//[Offset: 0x18c, Size: 0x4]
	int FloatTextZorder;//[Offset: 0x190, Size: 0x4]
	bool bIgnoreZeorDamageSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1]
	UserWidget*[] IdleWidgetList;//[Offset: 0x198, Size: 0x10]
	ShowTextWidgetData[] ShowWidgetList;//[Offset: 0x1a8, Size: 0x10]
	float[] RecycleTimeList;//[Offset: 0x1b8, Size: 0x10]
	float RecycleTime;//[Offset: 0x1c8, Size: 0x4]
	STExtraPlayerController* PC;//[Offset: 0x1d0, Size: 0x8]
	void UpdateTextWidgetPos(out ShowTextWidgetData ShowTextWidgetData);// 0x5ede164
	void ShowFloatingText(out const FloatingTextData FloatingTextData);// 0x5ede0d4
	void SetFloatingText(UserWidget* FloatingTextWidget, int Damage);// 0x70644c4
	void ReycleFloatingTextWidget();// 0x5ede0c0
	void PlayFloatingTextAnim(out ShowTextWidgetData ShowTextWidgetData, int Damage, bool IsHeadshot);// 0x5eddfa4
	void OnFloatingDamageText(float BaseDamage, bool IsHeadshot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x5eddda0
	ShowTextWidgetData GetShowTextWidgetData(out const FloatingTextData FloatingTextData);// 0x5eddce8
	void ClientHandleFloatingTextArray(const FloatingTextData[] FloatingTextArray);// 0x5eddc0c
<----------Generated by SSpawner v1.0.4---------->


Class: ShowTextWidgetData
	UserWidget* FloatingTextWidget;//[Offset: 0x0, Size: 0x8]
	float RecycleTime;//[Offset: 0x8, Size: 0x4]
	Vector ShowWorldPos;//[Offset: 0xc, Size: 0xc]
	Vector RandomOffset;//[Offset: 0x18, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: FloatingTextData
	float BaseDamage;//[Offset: 0x0, Size: 0x4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x8, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: ParachuteAnimAssetData
	<byte,AnimationAsset*> AnimAssetCache;//[Offset: 0x0, Size: 0x50]
	bool IsAnimCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 0x1]
	int CircleIndex;//[Offset: 0x550, Size: 0x4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x554, Size: 0x1c]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x570, Size: 0x1c]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x590, Size: 0x28]
	float TickOBPlayerCD;//[Offset: 0x5b8, Size: 0x4]
	float TickWeatherFogCD;//[Offset: 0x5bc, Size: 0x4]
	DynamicWeatherController* SrcController;//[Offset: 0x5c0, Size: 0x8]
	DynamicWeatherController* DstController;//[Offset: 0x5c8, Size: 0x8]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x5d0, Size: 0x8]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x5e0, Size: 0x50]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x640, Size: 0x10]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x650, Size: 0x10]
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x5e8d3f0
	void BlendToWeather(bool bDstWeather);// 0x5e8d36c
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x3f8, Size: 0x50]
	int CurUseFixWeatherIndex;//[Offset: 0x448, Size: 0x4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x44c, Size: 0x1c]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x468, Size: 0x50]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x4b8, Size: 0x1c]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x4d4, Size: 0x1c]
	float ServerElapsedTime;//[Offset: 0x4f0, Size: 0x4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	enum NextWeatherStatus;//[Offset: 0x4f9, Size: 0x1]
	float NextWeatherCountDownTime;//[Offset: 0x4fc, Size: 0x4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 0x1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x508, Size: 0x10]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	STExtraGameStateBase* GameState;//[Offset: 0x530, Size: 0x8]
	enum UICountDownType;//[Offset: 0x54a, Size: 0x1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54b, Size: 0x1]
	void StartTransition();// 0x5e8e2a4
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x5e8e228
	void RPCRequireControl();// 0x5e8e214
	void RPCRequire();// 0x5e8e200
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x5e8e17c
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x5e8e160
	void ReinitInDemoReplay();// 0x5e8e14c
	void RefreshWeatherPredictionUI();// 0x5e8e138
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x5e8e0a8
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x5e8e018
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x5e8df88
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x5e8def8
	void OnRep_NextWeatherCountDownTime();// 0x5e8dee4
	void OnRep_ControllerDataForReplay();// 0x5e8ded0
	void OnRep_ControllerData();// 0x5e8debc
	void OnRep_bEnableWeatherPredictionUI();// 0x5e8dea8
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0x70644c4
	void HandleClientHasReactivated();// 0x5e8de94
	void GotoSpecificWeather(int WeatherIndex);// 0x5e8de18
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x5e8dd38
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x5e8dc98
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x5e8dc0c
	float GetInProgressElapsedTimeSecWithWeather();// 0x5e8dbd8
	float GetGlobalWeatherSystemTimeOnServer();// 0x5e8dba4
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x5e8db6c
	void ForceStopDynamicWeatherChangeOnServer();// 0x5e8db58
	void ForceStartNextWeatherChangeOnServer();// 0x5e8db44
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x5e8daa0
	void ClientGotoSpecificWeather(int WeatherIndex);// 0x5e8da24
<----------Generated by SSpawner v1.0.4---------->


Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0, Size: 0x1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float ElapsedTime;//[Offset: 0x4, Size: 0x4]
	float BlendInTime;//[Offset: 0x8, Size: 0x4]
	float BlendOutTime;//[Offset: 0xc, Size: 0x4]
	float SaturateTime;//[Offset: 0x10, Size: 0x4]
	float TimeMultiplier;//[Offset: 0x14, Size: 0x4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0, Size: 0x4]
	float StartTimeMax;//[Offset: 0x4, Size: 0x4]
	float BlendInTime;//[Offset: 0x8, Size: 0x4]
	float BlendOutTime;//[Offset: 0xc, Size: 0x4]
	float DurationTimeMin;//[Offset: 0x10, Size: 0x4]
	float DurationTimeMax;//[Offset: 0x14, Size: 0x4]
	enum LastWeatherStatus;//[Offset: 0x18, Size: 0x1]
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 0x4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x28, Size: 0x10]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x38, Size: 0x10]
	float TimeMultiplier;//[Offset: 0x48, Size: 0x4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0, Size: 0x1]
	float Weight;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0, Size: 0x1]
	float StartTime;//[Offset: 0x4, Size: 0x4]
	float TotalDurationTime;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 0x4]
	float ElapsedTime;//[Offset: 0x8, Size: 0x4]
	enum NextWeather;//[Offset: 0xc, Size: 0x1]
	float NextDuration;//[Offset: 0x10, Size: 0x4]
	float WeatherTotalWeight;//[Offset: 0x14, Size: 0x4]
	float TimelineOffset;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0x110, Size: 0x10]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0x120, Size: 0x10]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0x130, Size: 0x10]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0x140, Size: 0x10]
	delegate WeatherRecover;//[Offset: 0x150, Size: 0x10]
	enum DynamicWeatherType;//[Offset: 0x160, Size: 0x1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0x168, Size: 0x8]
	CurveFloat* LightCurve;//[Offset: 0x170, Size: 0x8]
	float TargetLightValue;//[Offset: 0x178, Size: 0x4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x180, Size: 0x8]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x188, Size: 0x8]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x190, Size: 0x8]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x198, Size: 0x8]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x1a0, Size: 0x8]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x1a8, Size: 0x8]
	float UINotifyTimeBeforeStart;//[Offset: 0x1b0, Size: 0x4]
	FString UINotifyModuleName;//[Offset: 0x1b8, Size: 0x10]
	int ChangeStartUINotifyID;//[Offset: 0x1c8, Size: 0x4]
	int ChangeQuitUINotifyID;//[Offset: 0x1cc, Size: 0x4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x1d0, Size: 0x4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x1d8, Size: 0x8]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x1e0, Size: 0x8]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x1e8, Size: 0x8]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x1f4, Size: 0x1c]
	float RuningDirection;//[Offset: 0x210, Size: 0x4]
	float RuningTime;//[Offset: 0x214, Size: 0x4]
	float LerpTotalTime;//[Offset: 0x218, Size: 0x4]
	FString WeatherName;//[Offset: 0x220, Size: 0x10]
	DirectionalLight* MainLight;//[Offset: 0x230, Size: 0x8]
	SkyLight* SkyLight;//[Offset: 0x238, Size: 0x8]
	ExponentialHeightFog* Fog;//[Offset: 0x240, Size: 0x8]
	WeatherObject ObjectValues;//[Offset: 0x248, Size: 0x68]
	WeatherObject WeatherObjectSrc;//[Offset: 0x2b0, Size: 0x68]
	WeatherObject WeatherObjectLerp;//[Offset: 0x31c, Size: 0x68]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x384, Size: 0xc]
	void UINotifyCallbackOnServer();// 0x5e8ca8c
	void OnUserQualitySettingChanged(int renderlevel);// 0x5e8ca08
<----------Generated by SSpawner v1.0.4---------->


Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0, Size: 0x4]
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 0x10]
	float MainLight_Temperature;//[Offset: 0x14, Size: 0x4]
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 0xc]
	float SkyLight_Density;//[Offset: 0x24, Size: 0x4]
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 0x10]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 0x4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 0x10]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 0x4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 0x10]
	float HeightFallOff;//[Offset: 0x60, Size: 0x4]
	float StartDistance;//[Offset: 0x64, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0, Size: 0x1]
	float CurrentElapsedTime;//[Offset: 0x4, Size: 0x4]
	float TotalTime;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0, Size: 0x1]
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString ScreenAppearanceName;//[Offset: 0x8, Size: 0x10]
	byte ParticleType;//[Offset: 0x18, Size: 0x1]
	float ScreenAppearanceConcentration;//[Offset: 0x1c, Size: 0x4]
	FName ShaderName;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 0x10]
	ExponentialHeightFog* Fog;//[Offset: 0x10, Size: 0x8]
	WeatherDstFog DstWeatherFog;//[Offset: 0x18, Size: 0x14]
	WeatherSrcFog SrcWeatherFog;//[Offset: 0x2c, Size: 0xc]
	float blendTime;//[Offset: 0x38, Size: 0x4]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeatherDstFog
	bool UseStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float StartDistance;//[Offset: 0x4, Size: 0x4]
	bool UseDensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 0x4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeatherSrcFog
	float StartDistance;//[Offset: 0x0, Size: 0x4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x4, Size: 0x4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponHitDetailInfo
	int TotalShootNum;//[Offset: 0x0, Size: 0x4]
	int[] HitNumEveryBodys;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LastGameRemainItemData
	FName TombName;//[Offset: 0x0, Size: 0x8]
	Vector DropGroundPoint;//[Offset: 0x8, Size: 0xc]
	FString TargetPlayerUID;//[Offset: 0x18, Size: 0x10]
	RemainItemData[] RemainItemDataList;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RemainItemData
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x8, Size: 0x10]
	int SlotID;//[Offset: 0x18, Size: 0x4]
	int8 RemainType;//[Offset: 0x1c, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ParachuteData
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	float SlideDuration;//[Offset: 0x8, Size: 0x4]
	byte FollowState;//[Offset: 0xc, Size: 0x1]
	Vector ClientLandLocation;//[Offset: 0x10, Size: 0xc]
	Vector ClientLocation;//[Offset: 0x1c, Size: 0xc]
	Vector ServerLandLocation;//[Offset: 0x28, Size: 0xc]
	float SlideStartTime;//[Offset: 0x34, Size: 0x4]
	float SlideEndTime;//[Offset: 0x38, Size: 0x4]
	FString InputCount;//[Offset: 0x40, Size: 0x10]
	FString PositionCheck;//[Offset: 0x50, Size: 0x10]
	FString ClientPositionDiff;//[Offset: 0x60, Size: 0x10]
	float LastCorrectionTime;//[Offset: 0x70, Size: 0x4]
	float LastCorrectionHeight;//[Offset: 0x74, Size: 0x4]
	Vector LastCorrectionLocation;//[Offset: 0x78, Size: 0xc]
	Vector LastCorrectedLocation;//[Offset: 0x84, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleMoveDragData
	VehicleMoveDrag[] MoveDrag;//[Offset: 0x0, Size: 0x10]
	VehicleMoveDrag[] SimulatedMoveDrag;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleMoveDrag
	int Minute;//[Offset: 0x0, Size: 0x4]
	byte VehicleType;//[Offset: 0x4, Size: 0x1]
	byte[] Reasons;//[Offset: 0x8, Size: 0x10]
	int[] Counters;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenAppearanceActor.Actor.Object
	bool EnableScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1]
	ScreenAppearanceProvider*[] DefaultScreenAppearanceProviders;//[Offset: 0x3f8, Size: 0x10]
	<Actor*,ScreenAppearanceProviders> SavedPlayerScreenAppearances;//[Offset: 0x408, Size: 0x50]
	ScreenAppearanceProviders PersistentScreenAppearances;//[Offset: 0x458, Size: 0x10]
	void StopScreenAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x6041bb8
	void StopScreenAppearance(ScreenAppearanceProvider* Provider);// 0x6041b3c
	void StopAllScreenAppearances(const Actor* AppearanceOwner);// 0x6041ac0
	void SetScalarParameter(out const FName ParameterName, float ParameterValue);// 0x60419ec
	void SetFloatParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, float NewValue);// 0x60418c8
	void SetColorParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, out const LinearColor NewValue);// 0x6041798
	void SetColorParameter(out const FName ParameterName, out const LinearColor ParameterValue);// 0x60416b8
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x60415e8
	Actor* ResolveAppearanceOwner(Actor* InOwner);// 0x6041554
	ScreenAppearanceProvider* PlayDefaultScreenAppearance(const Actor* AppearanceOwner, FName AppearanceName, const Actor* Causer);// 0x6041454
	bool IsScreenAppearancePlaying(const Actor* AppearanceOwner, FName AppearanceName);// 0x604138c
	bool HasActiveAppearance();// 0x6041354
	PlayerController* GetPlayerController();// 0x6041280
	PlayerCameraManager* GetPlayerCameraManager();// 0x6041204
	Actor* GetCurrentViewTarget();// 0x60411d0
	ScreenAppearanceProvider* FindDefaultScreenAppearanceProvider(out const FName Name);// 0x6041134
	ScreenAppearanceProvider* FindAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x6041070
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenAppearanceProvider.Object
	FName AppearanceName;//[Offset: 0x28, Size: 0x8]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bTickEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	float TickInterval;//[Offset: 0x34, Size: 0x4]
	AppearanceParameter[] MaterialParameterCurve;//[Offset: 0x38, Size: 0x10]
	float LifeSpan;//[Offset: 0x48, Size: 0x4]
	ScreenAppearanceScalarParameter[] AppearanceScalarParamters;//[Offset: 0x50, Size: 0x10]
	ScreenAppearanceColorParameter[] AppearanceColorParameters;//[Offset: 0x60, Size: 0x10]
	bool bLobbyUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	ScreenAppearanceActor* OwnerAppearance;//[Offset: 0x98, Size: 0x8]
	Actor* OwnerActor;//[Offset: 0xa0, Size: 0x8]
	FName[] HighPriorityProviderNames;//[Offset: 0xb0, Size: 0x10]
	Transform AlignRelationTransform;//[Offset: 0xc0, Size: 0x30]
	bool bAttachToActiveCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	void UpdateRelativeTransform(out const Transform RelativeTrans);// 0x6042f68
	void SetVectorParameter(out const FName ParameterName, out const Vector Param);// 0x6042e88
	void SetLifeSpan(float NewLifeSpan);// 0x6042e10
	void SetFloatParameter(out const FName ParameterName, float Param);// 0x6042d34
	void SetColorParameter(out const FName ParameterName, out const LinearColor Param);// 0x6042c54
	void SetAsset(Object* Asset);// 0x6042bd0
	void ReceiveTick(float DeltaTime);// 0x70644c4
	void ReceiveEndPlay();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	MaterialInterface* GetMaterial();// 0x6042b94
	void AlignActiveCamera(bool bForceUseActiveCamera);// 0x6042b10
<----------Generated by SSpawner v1.0.4---------->


Class: AppearanceParameter
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	CurveBase* ControlCurve;//[Offset: 0x8, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenAppearanceScalarParameter
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	float ParameterValue;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenAppearanceColorParameter
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenAppearanceProviders
	ScreenAppearanceProvider*[] ScreenAppearances;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerPetSpectatorComponent.LuaActorComponent.ActorComponent.Object
	STExtraPetSpectatorCharacter* PetSpectatorPawn;//[Offset: 0x1d8, Size: 0x8]
	bool bTeammatePetShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	STExtraPetSpectatorCharacter* SpawnPetSpectator(class Actor ActorClass, out const Transform SpawnTransform, Actor* Owner);// 0x5fedc5c
	void OnRep_PetSpectatorPawn();// 0x70644c4
	bool CanControlSpectator();// 0x5fedc1c
<----------Generated by SSpawner v1.0.4---------->


Class: CacheSACData
	STExtraShootWeapon* TargetWeapon;//[Offset: 0x0, Size: 0x8]
	SACData SACData;//[Offset: 0x8, Size: 0x98]
<----------Generated by SSpawner v1.0.4---------->


Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 0x10]
	BulletHitInfoUploadBinaray[] HitBinarayArray;//[Offset: 0x10, Size: 0x10]
	BulletHitInfoWithoutDamage[] HitInfoWithoutDamageArray;//[Offset: 0x20, Size: 0x10]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0x30, Size: 0x10]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x40, Size: 0x10]
	byte[] CopmpressBinarayData;//[Offset: 0x50, Size: 0x10]
	uint32[] CopmpressBinaraySectionLen;//[Offset: 0x60, Size: 0x10]
	int ShootTimes;//[Offset: 0x70, Size: 0x4]
	byte[] TssSdkAntiData;//[Offset: 0x78, Size: 0x10]
	int TssSdkAntiDataLen;//[Offset: 0x88, Size: 0x4]
	int NetworkStatus;//[Offset: 0x8c, Size: 0x4]
	int Sequence;//[Offset: 0x90, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BulletHitInfoUploadBinaray
	byte[] Data;//[Offset: 0x0, Size: 0x10]
	uint16 CompensationTime;//[Offset: 0x10, Size: 0x2]
	Actor* Actor;//[Offset: 0x14, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x1c, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BulletHitInfoWithoutDamage
	Vector ImpactPoint;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 0xc]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x24, Size: 0xc]
	byte SurfaceType;//[Offset: 0x30, Size: 0x1]
	uint32 ShootID;//[Offset: 0x34, Size: 0x4]
	Actor* Actor;//[Offset: 0x38, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x40, Size: 0x8]
	byte HitBodyType;//[Offset: 0x48, Size: 0x1]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	byte ImpactEffectMask;//[Offset: 0x4a, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0, Size: 0x4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 0xc]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 0xc]
	int BulletFlyDistance;//[Offset: 0x1c, Size: 0x4]
	int BulletDown;//[Offset: 0x20, Size: 0x4]
	int8 CurBullet;//[Offset: 0x24, Size: 0x1]
	int ShootInterval;//[Offset: 0x28, Size: 0x4]
	int BulletFlyTime;//[Offset: 0x2c, Size: 0x4]
	int BulletShootTime;//[Offset: 0x30, Size: 0x4]
	int BulletHitTime;//[Offset: 0x34, Size: 0x4]
	int AimFov;//[Offset: 0x38, Size: 0x4]
	byte bulletDamageReduceRatio;//[Offset: 0x3c, Size: 0x1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40, Size: 0xc]
	int64 ClientStartTime;//[Offset: 0x50, Size: 0x8]
	int[] MrpcsFlow;//[Offset: 0x58, Size: 0x10]
	int AutoAimSpeed;//[Offset: 0x68, Size: 0x4]
	int AutoAimSpeedRateMax;//[Offset: 0x6c, Size: 0x4]
	int AutoAimRangeMax;//[Offset: 0x70, Size: 0x4]
	int AutoAimRangeRateMax;//[Offset: 0x74, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ShootTimeData
	Vector_NetQuantize ShootPos;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize GunPos;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 0xc]
	uint32 ShootID;//[Offset: 0x24, Size: 0x4]
	uint64 CurrentStates;//[Offset: 0x28, Size: 0x8]
	byte CapsuleHalfHeight;//[Offset: 0x30, Size: 0x1]
	float SkeletonLength;//[Offset: 0x34, Size: 0x4]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x40, Size: 0x40]
	uint32 UserCmdSequence;//[Offset: 0x80, Size: 0x4]
	byte ShootTimeConDelta;//[Offset: 0x84, Size: 0x1]
	float ShootLevelTime;//[Offset: 0x88, Size: 0x4]
	Vector_NetQuantize GunTailPos;//[Offset: 0x8c, Size: 0xc]
	byte ShotFlags;//[Offset: 0x98, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: Vector_NetQuantizeNormalSv.Vector
<----------Generated by SSpawner v1.0.4---------->


Class: ShootTimeInfo_NetQuantize
<----------Generated by SSpawner v1.0.4---------->


Class: BattleOpenSequencerInfo
	Transform StartPosition;//[Offset: 0x0, Size: 0x30]
	VehicleWarStartVehicleInfo[] VehicleInfoList;//[Offset: 0x30, Size: 0x10]
	float Time;//[Offset: 0x40, Size: 0x4]
	float ServerStartTimestamp;//[Offset: 0x44, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarStartVehicleInfo
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	STExtraVehicleBase* Vehicle;//[Offset: 0x18, Size: 0x8]
	VehicleWarStartVehiclePlayerInfo DriverInfo;//[Offset: 0x20, Size: 0x10]
	VehicleWarStartVehiclePlayerInfo PassengerInfo;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarStartVehiclePlayerInfo
	int upassLevel;//[Offset: 0x0, Size: 0x4]
	int upassScore;//[Offset: 0x4, Size: 0x4]
	STExtraBaseCharacter* BasePlayer;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerDecalData
	int DecalId;//[Offset: 0x0, Size: 0x4]
	Transform DecalTransform;//[Offset: 0x10, Size: 0x30]
	int DecalInstanceId;//[Offset: 0x40, Size: 0x4]
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x598, Size: 0x10]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x5a8, Size: 0x10]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x5b8, Size: 0x10]
	bool StopFireFilter(STExtraShootWeapon* ShootWeapon);// 0x6366b4c
	void StopFire(STExtraShootWeapon* ShootWeapon);// 0x6366ad0
	bool StartFireFilter(STExtraShootWeapon* ShootWeapon);// 0x6366a38
	void StartFireBySlot(byte Slot, byte ShootMode);// 0x6366980
	STExtraWeapon* SpawnWeaponOnServer(class STExtraWeapon Template, int WeaponType, int WeaponId, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x6366770
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x6366568
	bool ReloadWeaponFilter(STExtraShootWeapon* ShootWeapon);// 0x63664d0
	bool ReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x6366440
	void OnRep_CurrentWeaponReplicated();// 0x6366424
	void OnReconnectOnServer();// 0x6366408
	void LocalStopFire(STExtraShootWeapon* ShootWeapon);// 0x636638c
	void LocalStartFire(STExtraShootWeapon* ShootWeapon, byte ShootMode, Vector SimpleShootTarget, Vector2D ClientScreenSize);// 0x6366260
	void LocalStartBarrel(STExtraShootWeapon* ShootWeapon);// 0x63661e4
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x6366138
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x6366080
	void DoAutoReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x6366004
	void DelayFire(float DelayTime, byte ShootMode);// 0x6365f44
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 0x80]
	STExtraWeapon* Weapon;//[Offset: 0x80, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponReconnectReplicateData
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0, Size: 0x8]
	Actor* WeaponOwner;//[Offset: 0x8, Size: 0x8]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString OwnerPlayerName;//[Offset: 0x18, Size: 0x10]
	FName WeaponInventoryLogicSocket;//[Offset: 0x28, Size: 0x8]
	BulletInClip WeaponBulletInClip;//[Offset: 0x30, Size: 0x18]
	uint32 WeaponShootID;//[Offset: 0x48, Size: 0x4]
	uint32 WeaponClipID;//[Offset: 0x4c, Size: 0x4]
	byte CurWeaponState;//[Offset: 0x50, Size: 0x1]
	byte CurShootType;//[Offset: 0x51, Size: 0x1]
	int CurShootTotalType;//[Offset: 0x54, Size: 0x4]
	ItemDefineID DefineID;//[Offset: 0x58, Size: 0x18]
	int BackpackPistolListIndex;//[Offset: 0x70, Size: 0x4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	int OperationIndex;//[Offset: 0x78, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BulletInClip
	int CurBulletNumInClip;//[Offset: 0x0, Size: 0x4]
	BulletInWeapon[] CurBulletIDList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BulletInWeapon
	int BulletID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DefaultWeaponHolderInfo
	class STExtraWeapon* WeaponClass;//[Offset: 0x0, Size: 0x8]
	FName WeaponSocket;//[Offset: 0x8, Size: 0x8]
	int WeaponSepcificID;//[Offset: 0x10, Size: 0x4]
	int WeaponTypeID;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0, Size: 0x4]
	uint32 CurClipID;//[Offset: 0x4, Size: 0x4]
	int CurBulletNumInClip;//[Offset: 0x8, Size: 0x4]
	byte ShootMode;//[Offset: 0xc, Size: 0x1]
	byte ShootType;//[Offset: 0xd, Size: 0x1]
	float StartFireTime;//[Offset: 0x10, Size: 0x4]
	int StartFireID;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x3f8, Size: 0x8]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x400, Size: 0x8]
	float NearToFarDistance;//[Offset: 0x408, Size: 0x4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x410, Size: 0x8]
	float PlayEffectDelayTime;//[Offset: 0x418, Size: 0x4]
	HitResult SurfaceHit;//[Offset: 0x420, Size: 0x98]
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: HitTargetExtraData
	byte PlatForm;//[Offset: 0x0, Size: 0x1]
	int CharacterReplicatID;//[Offset: 0x4, Size: 0x4]
	int CharacterMovementReplicatID;//[Offset: 0x8, Size: 0x4]
	float LastReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xc, Size: 0x4]
	float LastReplicatedTimePass;//[Offset: 0x10, Size: 0x4]
	float CapsulePreMoveDistance;//[Offset: 0x14, Size: 0x4]
	float MeshOffsetDistance;//[Offset: 0x18, Size: 0x4]
	float AverageFPS;//[Offset: 0x1c, Size: 0x4]
	float ImpactFrameDeltaTime;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraFireBalloon.LuaActor.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x4d0, Size: 0x8]
	StaticMeshComponent* BalloonMesh;//[Offset: 0x4d8, Size: 0x8]
	FireBalloonMovementComponent* Movement;//[Offset: 0x4e0, Size: 0x8]
	int MapMarkTypeID;//[Offset: 0x4e8, Size: 0x4]
	enum MapMarkFlag;//[Offset: 0x4ec, Size: 0x1]
	Pawn* Driver;//[Offset: 0x4f8, Size: 0x8]
	float MoveUpValue;//[Offset: 0x500, Size: 0x4]
	byte MovementSmoothMode;//[Offset: 0x540, Size: 0x1]
	float MovementSmoothAlpha;//[Offset: 0x544, Size: 0x4]
	float MoveUpScale;//[Offset: 0x548, Size: 0x4]
	float AutoFallOffSpeed;//[Offset: 0x54c, Size: 0x4]
	bool UseStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	Vector ControlInputVector;//[Offset: 0x554, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x560, Size: 0xc]
	float TickInterval;//[Offset: 0x56c, Size: 0x4]
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1]
	Vector2D FObservationArea;//[Offset: 0x578, Size: 0x8]
	bool bIsInObservationArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x61681c8
	void SetMoveUpValue(float InMoveUpValue);// 0x616814c
	void SetMoveInputValue(float InMoveUpValue, float InMoveForwardValue, float InMoveRightValue);// 0x6168054
	void SetDriver(Pawn* InPawn);// 0x6167fd0
	void OnRep_Driver(Pawn* PrevDriver);// 0x6167f4c
	Pawn* GetDriver();// 0x6167f30
	void CheckWishTask();// 0x70644c4
	bool CanBeDriver(Pawn* InPawn);// 0x6167e98
	void BPUpdateUIVisible();// 0x70644c4
	void BPUpdateObservationArea();// 0x70644c4
	void BPSetPlayCameraOffsetData(float FAlpha, bool IsUpdateCameraLocation);// 0x70644c4
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x1a1, Size: 0x1]
	float InitialMaxTarceDist;//[Offset: 0x1a4, Size: 0x4]
	Vector InitialLocation;//[Offset: 0x1a8, Size: 0xc]
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x1b8, Size: 0x10]
	Actor* ActorOwner;//[Offset: 0x1c8, Size: 0x8]
	float MaxFlyHeight;//[Offset: 0x1e8, Size: 0x4]
	void SetSkipUpdate(bool bNewValue);// 0x6167974
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0x70644c4
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x70644c4
	float GetMaxFlyHeight();// 0x6167938
<----------Generated by SSpawner v1.0.4---------->


Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x190, Size: 0x4]
	float Acceleration;//[Offset: 0x194, Size: 0x4]
	float Deceleration;//[Offset: 0x198, Size: 0x4]
	float TurningBoost;//[Offset: 0x19c, Size: 0x4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: OBPlayerWeaponRecord
	uint64 OBPlayerWeaponRecord_UID;//[Offset: 0x0, Size: 0x8]
	OBSingleWeaponRecord[] WeaponReport;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: OBSingleWeaponRecord
	int OBSingleWeaponRecord_WeaponID;//[Offset: 0x0, Size: 0x4]
	float TotalDamage;//[Offset: 0x4, Size: 0x4]
	int KillCount;//[Offset: 0x8, Size: 0x4]
	int KnockDownCount;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0, Size: 0x10]
	FString GLVersion;//[Offset: 0x10, Size: 0x10]
	FString OSVersion;//[Offset: 0x20, Size: 0x10]
	FString DeviceMake;//[Offset: 0x30, Size: 0x10]
	FString DeviceModel;//[Offset: 0x40, Size: 0x10]
	FString VulkanVersion;//[Offset: 0x50, Size: 0x10]
	FString MemorySizeInGB;//[Offset: 0x60, Size: 0x10]
	FString OpenID;//[Offset: 0x70, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0, Size: 0x1]
	Actor* SeekAndLockTarget;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ShootMultiBulletsParam
	Vector LaunchBulletPos;//[Offset: 0x0, Size: 0xc]
	Rotator LaunchBulletRot;//[Offset: 0xc, Size: 0xc]
	uint32 ShootID;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerRemainTombBox.PlayerTombBox.LuaActor.Actor.Object
	FString TargetPlayerUID;//[Offset: 0x600, Size: 0x10]
	int MiniMapIconID;//[Offset: 0x610, Size: 0x4]
	int MiniMapInstanceID;//[Offset: 0x614, Size: 0x4]
	bool bIsSearchedRemainBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	void OnRep_IsSearchedRemainBox();// 0x5fee228
	void HandleBoxIsSearched();// 0x5fee20c
<----------Generated by SSpawner v1.0.4---------->


Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0, Size: 0xc]
	Vector ImpactNormal;//[Offset: 0xc, Size: 0xc]
	Actor* HitActor;//[Offset: 0x18, Size: 0x8]
	float BulletHitTime;//[Offset: 0x20, Size: 0x4]
	float BulletLaunchTime;//[Offset: 0x24, Size: 0x4]
	float BulletMovedDistance;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 0x1]
	bool bUseBulletLocReplaceImpactPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x721, Size: 0x1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x722, Size: 0x1]
	bool bUseCachePool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x723, Size: 0x1]
	Vector ServerShootPos;//[Offset: 0x724, Size: 0xc]
	float bFixDistanceToShooter;//[Offset: 0x730, Size: 0x4]
	float ServerShootTime;//[Offset: 0x734, Size: 0x4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x740, Size: 0x60]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b9, Size: 0x1]
	Controller* CachedInstigator;//[Offset: 0x7c0, Size: 0x8]
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x600ed54
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x600ecd8
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x600ec04
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x600eb2c
	void OnImpact(out const HitResult _ImpactResult);// 0x600ea54
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x600e84c
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x440, Size: 0x8]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool bUseSimulateOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1]
	int MaxNoGravityRange;//[Offset: 0x44c, Size: 0x4]
	float LaunchGravityScale;//[Offset: 0x450, Size: 0x4]
	int PunctureTimes;//[Offset: 0x454, Size: 0x4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x458, Size: 0x8]
	class DamageType* DamageType;//[Offset: 0x460, Size: 0x8]
	ParticleSystem* NormalTailFX;//[Offset: 0x468, Size: 0x8]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	ParticleSystem* BeamTailFX;//[Offset: 0x478, Size: 0x8]
	Vector RootScale;//[Offset: 0x480, Size: 0xc]
	bool bUseOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 0x1]
	Vector ShootDir;//[Offset: 0x490, Size: 0xc]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	float ShowBulletEffectMinDistance;//[Offset: 0x4a0, Size: 0x4]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x590, Size: 0x8]
	delegate OnRecycleBullet;//[Offset: 0x598, Size: 0x10]
	delegate OnResetBullet;//[Offset: 0x5a8, Size: 0x10]
	delegate OnBulletImpact;//[Offset: 0x5b8, Size: 0x10]
	delegate OnLaunchBullet;//[Offset: 0x5c8, Size: 0x10]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x5d8, Size: 0x8]
	Actor* WeaponOwnerPawn;//[Offset: 0x5e0, Size: 0x8]
	float WeaponFloorHeight;//[Offset: 0x6b0, Size: 0x4]
	Vector WeaponOwnerPos;//[Offset: 0x6b4, Size: 0xc]
	byte CachedOwnerRole;//[Offset: 0x6c0, Size: 0x1]
	uint32 OwnerPlayerKey;//[Offset: 0x6c4, Size: 0x4]
	bool bEnableClientBlockVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 0x1]
	bool bEnableUpdateBulletTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 0x1]
	int MaxTraceTimes;//[Offset: 0x6cc, Size: 0x4]
	bool bEnableFillSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 0x1]
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 0x1]
	bool VerityBlock(out const Vector StartPos, out const Vector EndPos, STExtraShootWeapon* Weapon, Actor* ImpactActor, out HitResult OutHit);// 0x6210e50
	void ResetBulletDelegate__DelegateSignature();// 0x70644c4
	void ReloadNoEncodeAttr();// 0x6210e34
	void OnShowBulletEffect();// 0x70644c4
	void OnRecycleBulletDelegate__DelegateSignature();// 0x70644c4
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x6210d5c
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x70644c4
	void OnImpact(out const HitResult _ImpactResult);// 0x6210c84
	bool NeedCheckBulletFlySound();// 0x6210c44
	void LaunchBulletDelegate__DelegateSignature();// 0x70644c4
	void LaunchBP(float Speed, out Transform InTrans, Actor* InOwningWeapon, Actor* InInstigator, out Transform OutTrans);// 0x70644c4
	int GetShootID();// 0x6210c28
	float GetMaxNoGravityRange();// 0x6210bec
	float GetMaxBulletFlySpeed();// 0x6210bb0
	float GetLaunchGravityScale();// 0x6210b74
	Controller* GetInstigatorControllerSafe();// 0x6210b40
	STExtraBaseCharacter* GetInstigatorCharacter();// 0x6210b0c
	bool ConditionalDestroyBullet(out const HitResult _ImpactResult);// 0x6210a28
	bool ClientVerifyBlock(out const Vector MuzzlePos, out const Vector ImpactPoint, Actor* Weapon, Actor* ImpactActor);// 0x62108c0
<----------Generated by SSpawner v1.0.4---------->


Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 0x1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb, Size: 0x1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1]
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 0x1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x1c0, Size: 0x8]
	void ResumeMoveAfterImpactWithNoLost();// 0x5e1aff4
	void ResetTickDelay();// 0x5e1afdc
	void IgnoreBounceReflectOnce();// 0x5e1afc0
	void ForceStop();// 0x5e1afac
<----------Generated by SSpawner v1.0.4---------->


Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0, Size: 0x4]
	Transform Trans;//[Offset: 0x10, Size: 0x30]
	Actor* OwningWeapon;//[Offset: 0x40, Size: 0x8]
	Actor* Instigator;//[Offset: 0x48, Size: 0x8]
	uint32 ShootID;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x8d0, Size: 0x4]
	bool bUseBulletCachePool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d4, Size: 0x1]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x8d8, Size: 0x38]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x910, Size: 0x10]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x924, Size: 0x1]
	float CurShootLockInterval;//[Offset: 0x928, Size: 0x4]
	float ShooterSpeedPrediction;//[Offset: 0x92c, Size: 0x4]
	void UpdateShootLockCD(float DeltaTime);// 0x5fa6adc
	void ShootNormalProjectileInner(Vector StartLoc, Rotator StartRot, int ShootID);// 0x5fa69e0
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Actor*[] BulletCacheList;//[Offset: 0x8c0, Size: 0x10]
	void ShootBulletInner(Vector StartLoc, Rotator StartRot, int ShootID);// 0x60ee4bc
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float LastCalcShootTime;//[Offset: 0x174, Size: 0x4]
	HitResult CalcShootHitRet;//[Offset: 0x178, Size: 0x98]
	bool bShootIDNotMatchReportKillflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x218, Size: 0x8]
	<byte,ShootWeaponCustomDamageList> CustomBulletDamage;//[Offset: 0x220, Size: 0x50]
	FName NormalBulletsTrackCompTag;//[Offset: 0x270, Size: 0x8]
	bool bJumpInitClipIDAndShootID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bUseMuzzleRotWhenHandFolder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	bool bChangeShootStartWhenReversedDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27a, Size: 0x1]
	float UseCameraRotReverBlockDistance;//[Offset: 0x27c, Size: 0x4]
	bool bSkipVerifyShootIDValidity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool bSkipVerifyStartFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0x288, Size: 0x8]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x290, Size: 0x8]
	delegate OnShoot;//[Offset: 0x298, Size: 0x10]
	delegate OnBulletHitConstRefDelegate;//[Offset: 0x2a8, Size: 0x10]
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x878, Size: 0x10]
	AIActingComponent* CacheAIActingComp;//[Offset: 0x8a8, Size: 0x8]
	int LastFireID;//[Offset: 0x8b8, Size: 0x4]
	void UpdateVolleyShootParameters(Vector TargetLoc, out Vector StartLoc, out Rotator BulletRot, out Vector BulletDir);// 0x6211eb8
	void ShootDelegate__DelegateSignature();// 0x70644c4
	void OnWeaponClipMaxBulletChanged();// 0x6211ea4
	void OnWeaponBulletChanged();// 0x6211e90
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x70644c4
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x70644c4
	void OnBulletHitConstRefDelegate__DelegateSignature(out const BulletHitInfoUploadData Data, STExtraShootWeapon* Weapon);// 0x70644c4
	bool IsBulletHasShotFlag(int ShootID, enum ShotFlag);// 0x6211dc4
	void GetBulletPosAndVelocity(out Vector StartPos, out Vector Velocity, bool bRefreshCollison);// 0x6211ca0
	HitResult ConditionPreCalcShootHitRet(bool WithDeviation, float ToleranceTime);// 0x6211b34
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0x158, Size: 0x8]
	STExtraPlayerController* GlobalController;//[Offset: 0x168, Size: 0x8]
	void UpdateComponentTick();// 0x636582c
	STExtraWeapon* TryGetOwnerWeapon();// 0x63657f8
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x63657c4
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x6365704
	bool IsWeaponOwnerOBTarget();// 0x63656cc
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x636563c
	bool IsWeaponLogicComponentTickEnabled();// 0x6365604
	bool IsLocalOrSpectorPlayer();// 0x63655cc
	FString GetWeaponDetailInfo();// 0x6365528
	byte GetOwnerPawnRole();// 0x63654f4
<----------Generated by SSpawner v1.0.4---------->


Class: ShootWeaponCustomDamageList
	<enum,ShootWeaponCustomDamage> Data;//[Offset: 0x0, Size: 0x50]
	float RangeModifier;//[Offset: 0x50, Size: 0x4]
	float ReferenceDistance;//[Offset: 0x54, Size: 0x4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x58, Size: 0x4]
	float BaseImpactDamage;//[Offset: 0x5c, Size: 0x4]
	class STExtraShootWeaponBulletBase* BulletClass;//[Offset: 0x60, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ShootWeaponCustomDamage
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 0x28]
	float DamageRate;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x170, Size: 0x8]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x178, Size: 0x8]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x180, Size: 0x8]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 0x1]
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x1f0, Size: 0x70]
	SDeviation DeviationInfo_NoTss;//[Offset: 0x260, Size: 0x44]
	void SetUseTss(bool bUse);// 0x5e1b464
	void OnWeaponStopFire();// 0x5e1b450
	void OnWeaponStartFire();// 0x5e1b43c
	void OnWeaponShoot();// 0x5e1b428
	void GetDataFromWeaponEntity();// 0x5e1b414
	Vector GetCurRecoilInfo();// 0x5e1b3dc
	float GetCurDeviation();// 0x5e1b3a0
	void CheckComponentTick();// 0x5e1b38c
<----------Generated by SSpawner v1.0.4---------->


Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 0x4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 0x4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 0x4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 0x4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 0x4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 0x4]
	float LeftMax;//[Offset: 0x18, Size: 0x4]
	float RightMax;//[Offset: 0x1c, Size: 0x4]
	float HorizontalTendency;//[Offset: 0x20, Size: 0x4]
	CurveVector* RecoilCurve;//[Offset: 0x28, Size: 0x8]
	int BulletPerSwitch;//[Offset: 0x30, Size: 0x4]
	float TimePerSwitch;//[Offset: 0x34, Size: 0x4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float RecoilSpeedVertical;//[Offset: 0x3c, Size: 0x4]
	float RecoilSpeedHorizontal;//[Offset: 0x40, Size: 0x4]
	float RecovertySpeedVertical;//[Offset: 0x44, Size: 0x4]
	float RecoilValueClimb;//[Offset: 0x48, Size: 0x4]
	float RecoilValueFail;//[Offset: 0x4c, Size: 0x4]
	float RecoilModifierStand;//[Offset: 0x50, Size: 0x4]
	float RecoilModifierCrouch;//[Offset: 0x54, Size: 0x4]
	float RecoilModifierProne;//[Offset: 0x58, Size: 0x4]
	float RecoilHorizontalMinScalar;//[Offset: 0x5c, Size: 0x4]
	float BurstEmptyDelay;//[Offset: 0x60, Size: 0x4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	float ShootSightReturnSpeed;//[Offset: 0x68, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 0x4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 0x4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 0x4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 0x4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 0x4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 0x4]
	float DeviationMax;//[Offset: 0x18, Size: 0x4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 0x4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 0x4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 0x4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 0x4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 0x4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 0x4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 0x4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 0x4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 0x4]
	float DeviationShoulderMultiplier;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x4d8, Size: 0x8]
	float BulletFireSpeed;//[Offset: 0x4e0, Size: 0x4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x4f4, Size: 0x4]
	int MaxBulletNumInOneClip;//[Offset: 0x4f8, Size: 0x4]
	int ExtraBulletNumInOneClip;//[Offset: 0x4fc, Size: 0x4]
	int MaxBulletNumInBarrel;//[Offset: 0x500, Size: 0x4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x504, Size: 0x4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x508, Size: 0x10]
	float ShootInterval;//[Offset: 0x518, Size: 0x4]
	int ShootIntervalShowNumber;//[Offset: 0x51c, Size: 0x4]
	float ExtraShootInterval;//[Offset: 0x520, Size: 0x4]
	int ExtraShootIntervalShowNumber;//[Offset: 0x524, Size: 0x4]
	<int,float> VolatileShootIntervalMap;//[Offset: 0x528, Size: 0x50]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 0x1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57b, Size: 0x1]
	bool bIsReasonable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 0x1]
	int BurstShootBulletsNum;//[Offset: 0x580, Size: 0x4]
	FName[] ExtraAvailableMuzzleSocketNameList;//[Offset: 0x588, Size: 0x10]
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	int VolleyShootBulletsNum;//[Offset: 0x59c, Size: 0x4]
	float VolleyBulletSpreadFactor;//[Offset: 0x5a0, Size: 0x4]
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0x5a8, Size: 0x10]
	float BurstShootInterval;//[Offset: 0x5b8, Size: 0x4]
	float BurstShootCD;//[Offset: 0x5bc, Size: 0x4]
	int BulletNumSingleShot;//[Offset: 0x5c0, Size: 0x4]
	FName MuzzleSocketName;//[Offset: 0x5c8, Size: 0x8]
	FName DefaultMuzzleSocketName;//[Offset: 0x5d0, Size: 0x8]
	FName SilencerSocketName;//[Offset: 0x5d8, Size: 0x8]
	FName FiringSuppressorSocketName;//[Offset: 0x5e0, Size: 0x8]
	FName ShellDropSocketName;//[Offset: 0x5e8, Size: 0x8]
	FName ScopeAimCameraSocketName;//[Offset: 0x5f0, Size: 0x8]
	float ImpactEffectSkipDistance;//[Offset: 0x5f8, Size: 0x4]
	float MaxImpactEffectSkipTime;//[Offset: 0x5fc, Size: 0x4]
	byte ShootType;//[Offset: 0x600, Size: 0x1]
	int ShootTotalType;//[Offset: 0x604, Size: 0x4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	float WeaponWarnUpTime;//[Offset: 0x60c, Size: 0x4]
	bool ClientShootIntervalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	bool ClientPreVerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 0x1]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x614, Size: 0x14]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x628, Size: 0x14]
	float BaseImpactDamage;//[Offset: 0x63c, Size: 0x4]
	float VehicleDamageScale;//[Offset: 0x640, Size: 0x4]
	float BulletMomentum;//[Offset: 0x644, Size: 0x4]
	float MomentumAdditionScale;//[Offset: 0x648, Size: 0x4]
	float MomentumAdditionFixed;//[Offset: 0x64c, Size: 0x4]
	float BulletRange;//[Offset: 0x650, Size: 0x4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x658, Size: 0x8]
	byte ImpactDirType;//[Offset: 0x660, Size: 0x1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x668, Size: 0x10]
	float RangeModifier;//[Offset: 0x678, Size: 0x4]
	float ReferenceDistance;//[Offset: 0x67c, Size: 0x4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x680, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x688, Size: 0x8]
	ItemDefineID BulletType;//[Offset: 0x690, Size: 0x18]
	ItemDefineID ReplaceBulletType;//[Offset: 0x6a8, Size: 0x18]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 0x1]
	int InitBulletInClip;//[Offset: 0x6c4, Size: 0x4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 0x1]
	float TraceDistance;//[Offset: 0x6cc, Size: 0x4]
	float MaxValidHitTime;//[Offset: 0x6d0, Size: 0x4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x6d8, Size: 0x50]
	FName SpesificWeaponBulletCanBreakThroughTargetTag;//[Offset: 0x728, Size: 0x8]
	float MaxDamageRate;//[Offset: 0x730, Size: 0x4]
	<byte,int> BreakThroughMaxNumConfig;//[Offset: 0x738, Size: 0x50]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 0x1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x790, Size: 0x8]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x798, Size: 0xb0]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x848, Size: 0x8]
	Vector2D LocalSimulateBulletLaunchRangeFromMuzzle;//[Offset: 0x850, Size: 0x8]
	float BulletTrackDistanceFix;//[Offset: 0x858, Size: 0x4]
	float DamageImpulse;//[Offset: 0x85c, Size: 0x4]
	byte ReloadType;//[Offset: 0x860, Size: 0x1]
	float PreFireTime;//[Offset: 0x864, Size: 0x4]
	float PreFireAnimScale;//[Offset: 0x868, Size: 0x4]
	float PostFireTime;//[Offset: 0x86c, Size: 0x4]
	float PostReloadTime;//[Offset: 0x870, Size: 0x4]
	bool bNeedMagAnimationWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 0x1]
	float ReloadDurationStart;//[Offset: 0x878, Size: 0x4]
	float ReloadDurationStartTacticalOffset;//[Offset: 0x87c, Size: 0x4]
	float ReloadDurationLoop;//[Offset: 0x880, Size: 0x4]
	float ReloadDurationEnd;//[Offset: 0x884, Size: 0x4]
	float ReloadTime;//[Offset: 0x888, Size: 0x4]
	float ReloadTimeTactical;//[Offset: 0x88c, Size: 0x4]
	float ReloadTimeMagOut;//[Offset: 0x890, Size: 0x4]
	float ReloadTimeMagOutTactical;//[Offset: 0x894, Size: 0x4]
	float ReloadTimeMagIn;//[Offset: 0x898, Size: 0x4]
	float ReloadTimeMagInTactical;//[Offset: 0x89c, Size: 0x4]
	float ReloadRate;//[Offset: 0x8a0, Size: 0x4]
	<byte,WeaponReloadCfg> SpecialReloadCfgData;//[Offset: 0x8a8, Size: 0x50]
	FName ReloadAllTIDName;//[Offset: 0x8f8, Size: 0x8]
	FName ReloadTacticalTIDName;//[Offset: 0x900, Size: 0x8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908, Size: 0x1]
	int ReloadSpecificBulletNum;//[Offset: 0x90c, Size: 0x4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 0x1]
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x912, Size: 0x1]
	bool bAutoSwitchWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x913, Size: 0x1]
	float DropDuration;//[Offset: 0x914, Size: 0x4]
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 0x1]
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0x91c, Size: 0x4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x920, Size: 0x110]
	AutoAimingConfigByGameMode[] AdjustAutoAimingConfigByModeList;//[Offset: 0xa30, Size: 0x10]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa40, Size: 0x1]
	SRecoilInfo RecoilInfo;//[Offset: 0xa48, Size: 0x70]
	float AccessoriesVRecoilFactor;//[Offset: 0xab8, Size: 0x4]
	float AccessoriesHRecoilFactor;//[Offset: 0xabc, Size: 0x4]
	float AccessoriesRecoveryFactor;//[Offset: 0xac0, Size: 0x4]
	SDeviation DeviationInfo;//[Offset: 0xae0, Size: 0x44]
	float ShotGunCenterPerc;//[Offset: 0xb24, Size: 0x4]
	float ShotGunVerticalSpread;//[Offset: 0xb28, Size: 0x4]
	float ShotGunHorizontalSpread;//[Offset: 0xb2c, Size: 0x4]
	float GameDeviationFactor;//[Offset: 0xb30, Size: 0x4]
	float GameDeviationAccuracy;//[Offset: 0xb34, Size: 0x4]
	float AccessoriesDeviationFactor;//[Offset: 0xb38, Size: 0x4]
	byte CrossHairType;//[Offset: 0xb3c, Size: 0x1]
	float CrossHairInitialSize;//[Offset: 0xb40, Size: 0x4]
	float CrossHairBurstSpeed;//[Offset: 0xb44, Size: 0x4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0xb48, Size: 0x4]
	float VehicleWeaponDeviationAngle;//[Offset: 0xb4c, Size: 0x4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb50, Size: 0x1]
	FName DefaultScopeSocket;//[Offset: 0xb58, Size: 0x8]
	FName DefaultGripSocket;//[Offset: 0xb60, Size: 0x8]
	FName DefaultGunStockSocket;//[Offset: 0xb68, Size: 0x8]
	FName DefaultMagSocket;//[Offset: 0xb70, Size: 0x8]
	float WeaponBodyLength;//[Offset: 0xb78, Size: 0x4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0xb80, Size: 0x10]
	float WeaponAimFOV;//[Offset: 0xb94, Size: 0x4]
	float WeaponAimInTime;//[Offset: 0xb98, Size: 0x4]
	float WeaponAimPitchRate;//[Offset: 0xb9c, Size: 0x4]
	float WeaponAimYawRate;//[Offset: 0xba0, Size: 0x4]
	float GameMotionYawRate;//[Offset: 0xba4, Size: 0x4]
	float GameMotionPitchRate;//[Offset: 0xba8, Size: 0x4]
	float ForegripParam;//[Offset: 0xbac, Size: 0x4]
	float MagParam;//[Offset: 0xbb0, Size: 0x4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb4, Size: 0x1]
	float SensitiveFireYawRate;//[Offset: 0xbb8, Size: 0x4]
	byte SightType;//[Offset: 0xbbc, Size: 0x1]
	float SensitiveFirePitchRate;//[Offset: 0xbc0, Size: 0x4]
	byte SightVisionType;//[Offset: 0xbc4, Size: 0x1]
	ItemDefineID DefaultScopeID;//[Offset: 0xbc8, Size: 0x18]
	float MaxBulletImpactFXClampDistance;//[Offset: 0xbe0, Size: 0x4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0xbe4, Size: 0x4]
	float RecoilKickADS;//[Offset: 0xbe8, Size: 0x4]
	float ExtraHitPerformScale;//[Offset: 0xbec, Size: 0x4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0xbf0, Size: 0x4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf4, Size: 0x1]
	enum ReleaseFireType;//[Offset: 0xbf5, Size: 0x1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf6, Size: 0x1]
	bool bEnableShoulderScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf7, Size: 0x1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf8, Size: 0x1]
	float LockAnimPitchDegree;//[Offset: 0xbfc, Size: 0x4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0xc00, Size: 0x4]
	float AnimationKick;//[Offset: 0xc04, Size: 0x4]
	int ReloadAnimSlot;//[Offset: 0xc08, Size: 0x4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0c, Size: 0x1]
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0d, Size: 0x1]
	float HandleFolderFactorScale;//[Offset: 0xc10, Size: 0x4]
	float SwitchAimAnimTime;//[Offset: 0xc14, Size: 0x4]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc18, Size: 0x1]
	bool bRecordHitDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc19, Size: 0x1]
	int ConstantWeaponDurability;//[Offset: 0xc1c, Size: 0x4]
	float ShootReduceDurabilityAmount;//[Offset: 0xc20, Size: 0x4]
	Rotator[] RearSightRotConfig;//[Offset: 0xc28, Size: 0x10]
	FName[] RearSightSocketConfig;//[Offset: 0xc38, Size: 0x10]
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0xc48, Size: 0x10]
	int RearSightRotIndex;//[Offset: 0xc58, Size: 0x4]
	bool bForceUseShootIntervalConsistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5c, Size: 0x1]
	int MaxFireNumPerFrame;//[Offset: 0xc60, Size: 0x4]
	bool bCachedDefaultConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc64, Size: 0x1]
	byte[] CoronaEffectCfg;//[Offset: 0x1210, Size: 0x10]
	ItemDefineID GetBulletType();// 0x6064790
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponId;//[Offset: 0x170, Size: 0x4]
	int SkillID;//[Offset: 0x174, Size: 0x4]
	byte WeaponType;//[Offset: 0x178, Size: 0x1]
	byte weaponTypeNew;//[Offset: 0x179, Size: 0x1]
	byte WeaponHoldType;//[Offset: 0x17a, Size: 0x1]
	byte WeaponSingleHandType;//[Offset: 0x17b, Size: 0x1]
	FName WeaponAttachSocket;//[Offset: 0x180, Size: 0x8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0x190, Size: 0x8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	int MaxNoGravityRange;//[Offset: 0x19c, Size: 0x4]
	float LaunchGravityScale;//[Offset: 0x1a0, Size: 0x4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1]
	bool bUseAnimWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5, Size: 0x1]
	bool bForceFinishPreviousSwitchWhenDisableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a6, Size: 0x1]
	int UnableProneHoldingTipID;//[Offset: 0x1a8, Size: 0x4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 0x1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad, Size: 0x1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae, Size: 0x1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1af, Size: 0x1]
	bool bEnableVaultHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	bool bPendingKillAttrModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 0x1]
	int UnableShovelHoldingTipID;//[Offset: 0x1b4, Size: 0x4]
	int UnableVehicleHoldingTipID;//[Offset: 0x1b8, Size: 0x4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1]
	int UnablePeekTipID;//[Offset: 0x1c0, Size: 0x4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 0x1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5, Size: 0x1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x1c8, Size: 0x50]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x218, Size: 0x50]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x268, Size: 0x4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x26c, Size: 0x4]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x270, Size: 0x10]
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x280, Size: 0x4]
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x284, Size: 0x4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x290, Size: 0x30]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x2c0, Size: 0x30]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x2f0, Size: 0x30]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x320, Size: 0x30]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x350, Size: 0x30]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x380, Size: 0x30]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x3b0, Size: 0x30]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x3e0, Size: 0x30]
	<int,Transform> AttachToBackRelativeTransform_BagL_Map;//[Offset: 0x410, Size: 0x50]
	<int,Transform> AttachToBackRelativeTransform_BagR_Map;//[Offset: 0x460, Size: 0x50]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x4b0, Size: 0x8]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 0x1]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 0x1]
	float StandbyAnimTimeInterval;//[Offset: 0x4bc, Size: 0x4]
	byte[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x4c0, Size: 0x10]
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 0x1b0]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x1b0, Size: 0x20]
<----------Generated by SSpawner v1.0.4---------->


Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0x10, Size: 0x1]
	SlateBrush SmallProfileImage;//[Offset: 0x18, Size: 0xb8]
	SlateBrush LargerProfileImage;//[Offset: 0xd0, Size: 0xb8]
	FString Name;//[Offset: 0x188, Size: 0x10]
	FString Description;//[Offset: 0x198, Size: 0x10]
	int DisplayPriority;//[Offset: 0x1a8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
	int PickUpSoundID;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0x10, Size: 0x4]
	byte Type;//[Offset: 0x14, Size: 0x1]
	StaticMesh* ShowMesh;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ExtendBulletNumAttachment
	int TypeSpecificID;//[Offset: 0x0, Size: 0x4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0, Size: 0x4]
	float Body;//[Offset: 0x4, Size: 0x4]
	float Limbs;//[Offset: 0x8, Size: 0x4]
	float Hand;//[Offset: 0xc, Size: 0x4]
	float Foot;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 0x4]
	int rangeEnd;//[Offset: 0x4, Size: 0x4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 0x30]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x30, Size: 0x30]
	WeaponVisualBulletCameraModeConfig ReplayPawnPerspectiveClientSetting;//[Offset: 0x60, Size: 0x30]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x90, Size: 0x10]
	WeaponVisualBulletItemConfig ReplayDefaultSetting;//[Offset: 0xa0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 0x10]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x10, Size: 0x10]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponReloadCfg
	float Time;//[Offset: 0x0, Size: 0x4]
	float TimeMagOut;//[Offset: 0x4, Size: 0x4]
	float TimeMagIn;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 0x4c]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x4c, Size: 0x4c]
	AutoAimingRangeConfig ScopeRange;//[Offset: 0x98, Size: 0x4c]
	float followTimeMax;//[Offset: 0xe4, Size: 0x4]
	bool TriggerBeforeFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	CurveFloat* SpeedCurve;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* DistanceSpeedCurve;//[Offset: 0xf8, Size: 0x8]
	CurveFloat* SensitiveSpeedCurve;//[Offset: 0x100, Size: 0x8]
	float MaxAngle;//[Offset: 0x108, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0, Size: 0x4]
	float CenterSpeedRate;//[Offset: 0x4, Size: 0x4]
	float RangeRate;//[Offset: 0x8, Size: 0x4]
	float SpeedRate;//[Offset: 0xc, Size: 0x4]
	float RangeRateSight;//[Offset: 0x10, Size: 0x4]
	float SpeedRateSight;//[Offset: 0x14, Size: 0x4]
	float CrouchRate;//[Offset: 0x18, Size: 0x4]
	float ProneRate;//[Offset: 0x1c, Size: 0x4]
	float DyingRate;//[Offset: 0x20, Size: 0x4]
	float DriveVehicleRate;//[Offset: 0x24, Size: 0x4]
	float InVehicleRate;//[Offset: 0x28, Size: 0x4]
	float FreeFallRate;//[Offset: 0x2c, Size: 0x4]
	float OpeningRate;//[Offset: 0x30, Size: 0x4]
	float LandingRate;//[Offset: 0x34, Size: 0x4]
	float adsorbMaxRange;//[Offset: 0x38, Size: 0x4]
	float adsorbMinRange;//[Offset: 0x3c, Size: 0x4]
	float adsorbMinAttenuationDis;//[Offset: 0x40, Size: 0x4]
	float adsorbMaxAttenuationDis;//[Offset: 0x44, Size: 0x4]
	float adsorbActiveMinRange;//[Offset: 0x48, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AutoAimingConfigByGameMode
	class GameStateBase* GameStateClass;//[Offset: 0x0, Size: 0x8]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x8, Size: 0x110]
<----------Generated by SSpawner v1.0.4---------->


Class: VolleyShootInfoCache
	Vector StartLoc;//[Offset: 0x0, Size: 0xc]
	Vector ShootDir;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: AIActingComponent.LuaInstancedActorComponent.ActorComponent.Object
	FString AIActingLuaConfig;//[Offset: 0x190, Size: 0x10]
	FString DefaultLuaFilePath;//[Offset: 0x1a0, Size: 0x10]
	int WillKilledBotNum;//[Offset: 0x1b0, Size: 0x4]
	int PlayersOnSquare;//[Offset: 0x1b4, Size: 0x4]
	int OriginalTotalAINum;//[Offset: 0x1b8, Size: 0x4]
	int OriginalTotalCandidateAINum;//[Offset: 0x1bc, Size: 0x4]
	int OriginalTotalCandidateMLAINum;//[Offset: 0x1c0, Size: 0x4]
	bool bSimulateKillConsiderMLAINum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 0x1]
	int[] SimulateKillNums;//[Offset: 0x1c8, Size: 0x10]
	int OriginalDeliveryMLAINum;//[Offset: 0x1d8, Size: 0x4]
	int OriginalFakePlayerMLAINum;//[Offset: 0x1dc, Size: 0x4]
	AIWayPointActor*[] WayPointActorList;//[Offset: 0x1f0, Size: 0x10]
	bool bUseCacheWayPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	AIActingCandidateData[] CandidateAIList;//[Offset: 0x208, Size: 0x10]
	AIActingCandidateData[] CandidateMLDeliveryList;//[Offset: 0x218, Size: 0x10]
	bool bCheckTeleportLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	float AverageRating;//[Offset: 0x2f4, Size: 0x4]
	bool bUseMlAICondCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	float MlAIHpCheckValue;//[Offset: 0x2fc, Size: 0x4]
	float AIDeliveryWaveInterval;//[Offset: 0x300, Size: 0x4]
	bool bNewPrepareBehaviorTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	int MaxActiveAI;//[Offset: 0x308, Size: 0x4]
	int ActiveAI_n;//[Offset: 0x30c, Size: 0x4]
	int ActiveAI_m;//[Offset: 0x310, Size: 0x4]
	float AISpawnCircleOriginOffset;//[Offset: 0x314, Size: 0x4]
	float NoWhiteCirclesRadius;//[Offset: 0x318, Size: 0x4]
	float SelectActionPeriod;//[Offset: 0x31c, Size: 0x4]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x320, Size: 0x4]
	int TryFindSpawnAILocNum;//[Offset: 0x324, Size: 0x4]
	AIActingItem[] AIActingItemList;//[Offset: 0x328, Size: 0x10]
	int SimulateKillMinIntervalNum;//[Offset: 0x38c, Size: 0x4]
	AIBeginAttackEachOther[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x390, Size: 0x10]
	float MinKilledFreqScale;//[Offset: 0x3a0, Size: 0x4]
	float MaxKilledFreqScale;//[Offset: 0x3a4, Size: 0x4]
	bool bEnableClassicDeliveryAct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	bool bEnableHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1]
	int FullFeedLimit;//[Offset: 0x3ac, Size: 0x4]
	DeliveryRatingConfig[] DeliveryWaveInterval;//[Offset: 0x3b0, Size: 0x10]
	float DeliveryBeginTime;//[Offset: 0x3c0, Size: 0x4]
	float DeliveryFreq;//[Offset: 0x3c4, Size: 0x4]
	int DeliveryAINumEachPeriod;//[Offset: 0x3c8, Size: 0x4]
	float MinimumWarmScore;//[Offset: 0x3cc, Size: 0x4]
	float SpecialAIHpCondition;//[Offset: 0x3d0, Size: 0x4]
	float SpecialAICircleDistanceScale;//[Offset: 0x3d4, Size: 0x4]
	AIDeliveryAreaLimit[] AIDeliveryAreaLimit;//[Offset: 0x3d8, Size: 0x10]
	DeliveryCondition[] DeliveryChecks;//[Offset: 0x3e8, Size: 0x10]
	float TeammateDistanceThresholdSqr;//[Offset: 0x3f8, Size: 0x4]
	float EnemyDistanceThresholdSqr;//[Offset: 0x3fc, Size: 0x4]
	float DeliveryCoolDown;//[Offset: 0x400, Size: 0x4]
	SpecialAIDeliveryNumContainer[] SpAINumWitmTeammateCfg;//[Offset: 0x408, Size: 0x10]
	FString HotValuePrefix;//[Offset: 0x418, Size: 0x10]
	HotValueAttenuation HotValueAttenuation;//[Offset: 0x428, Size: 0xc]
	HotValueScale HotValueScale;//[Offset: 0x434, Size: 0xc]
	float DeliveryHotValueThreshold;//[Offset: 0x440, Size: 0x4]
	float HotValueUpdateBeginTime;//[Offset: 0x444, Size: 0x4]
	float HotValueUpdateDeltaTime;//[Offset: 0x448, Size: 0x4]
	bool bDebugHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 0x1]
	Vector2D HotValueLocationOffset;//[Offset: 0x458, Size: 0x8]
	AIRatingDamage[] AIRatingDamageConfig;//[Offset: 0x480, Size: 0x10]
	AIAttackAIRatingDamage[] AIAttackAIRatingDamage;//[Offset: 0x490, Size: 0x10]
	DeliveryPlayerConfig[] AIDeliveryPlayerConfig;//[Offset: 0x4a0, Size: 0x10]
	AIAttackAnimalRatingDamage[] AIAttackAnimalRatingDamage;//[Offset: 0x4b0, Size: 0x10]
	int MaxMoveRequestExecutePerFrame;//[Offset: 0x4c0, Size: 0x4]
	int MaxQueuingMoveRequests;//[Offset: 0x4c4, Size: 0x4]
	int MaxClearTroubleRequestExecutePerFrame;//[Offset: 0x4c8, Size: 0x4]
	int CommonAIDeliverInWave;//[Offset: 0x4cc, Size: 0x4]
	float DeliveryWaveCD;//[Offset: 0x4d0, Size: 0x4]
	<enum,int> StrategyLimit;//[Offset: 0x4d8, Size: 0x50]
	<enum,int> StrategyNums;//[Offset: 0x528, Size: 0x50]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x578, Size: 0x8]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x580, Size: 0x8]
	STExtraPlayerCharacter*[] CachedCandidatePlayers;//[Offset: 0x588, Size: 0x10]
	FakePlayerAIController*[] CachedCandidateAICs;//[Offset: 0x608, Size: 0x10]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x658, Size: 0x4]
	int AIAttackAnimalRatingDamageIndex;//[Offset: 0x65c, Size: 0x4]
	bool IsCheckVisibilityReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1]
	bool bCheckTargetLocationDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x681, Size: 0x1]
	float TargetLocationDistanceThreshold;//[Offset: 0x684, Size: 0x4]
	float MaxAILocationTraceHeightZ;//[Offset: 0x688, Size: 0x4]
	AIActingBPAssit* m_BPAssit;//[Offset: 0x6a0, Size: 0x8]
	FString AIActingBPAssitClassPath;//[Offset: 0x6a8, Size: 0x10]
	Actor*[] WaterSwimActors;//[Offset: 0x6b8, Size: 0x10]
	bool bEnableAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 0x1]
	delegate CustomDeliveryActDelegate;//[Offset: 0x6d0, Size: 0x10]
	uint16[] AIStrategyRatingConfig;//[Offset: 0x738, Size: 0x10]
	void UpdateCachedCandidates();// 0x5d3453c
	void UpdateCachedCandidatePlayers();// 0x5d34528
	void UpdateCachedCandidateAICs();// 0x5d34514
	void TickClassicDeliver(float DeltaTime);// 0x5d34498
	void StrategyChange(const enum StrategyType, const bool bAdd);// 0x5d343d8
	void SimulateKilledFakeAI(out const AIActingCandidateData Killer, out const AIActingCandidateData Killed, int WeapID, out int InWillKilled, byte SpecialDamageType);// 0x5d34180
	void SimulateKillAllFakeAI();// 0x5d3416c
	bool SetAIRatingLevel(FakePlayerAIController* AIC, int Level);// 0x5d340a0
	void SetAIControllerDeleverTarget(FakePlayerAIController* FeedPlayerAIC, STExtraPlayerCharacter* FeedPlayer);// 0x5d33fec
	void RemoveCandidateAI(int PlayerKey, bool bMLAI);// 0x5d33f2c
	void OnSetDeliverTarget(FakePlayerAIController* FeedPlayerAIC, STExtraPlayerCharacter* FeedPlayer);// 0x70644c4
	void OnNotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x5d33e2c
	void OnDeliverWaveBegin(int CurWave);// 0x70644c4
	void InitBornLandStrategyNum();// 0x5d33e10
	void GMOnBehaviorTreeLoaded(AIController* InAIController);// 0x5d33d94
	void GMModidyAIEquipSpawnGroupData(out AIEquipSpawnGroupDataBase[] OutGroupData);// 0x5d33cf0
	int GetWaveCD();// 0x5d33cd0
	STExtraPlayerCharacter* GetOneDeliveryTarget();// 0x5d33c9c
	float GetNoWhiteCirclesRadius();// 0x5d33c80
	void GetNotLimitStrategy(out enum[] NotLimitStrategy);// 0x5d33bc8
	int GetNonInstancedAICNum();// 0x5d33ba4
	float GetHotValueByRowCol(const int InRow, const int InCol);// 0x5d33ae0
	float GetHotValue(const Vector InLocation);// 0x5d33a54
	int GetCurrentActing();// 0x5d33a20
	STExtraBaseCharacter*[] GetAllPlayerPawns();// 0x5d3397c
	STExtraBaseCharacter*[] GetAllAIPawn(bool bMLAI, bool bDelivery);// 0x5d3383c
	STExtraBaseCharacter* CreateCharacter(AIActingCandidateData SpawnCandidateAI, Vector InLocation);// 0x5d336cc
	void CollectAndReportAIStrategyInfo();// 0x5d336b8
	void BroadFinishLastBreathFunction(FString Killer, FString Killed, int WeaponId, FString KillerNation, FString KilledNation);// 0x5d332b0
	bool AdjustAIAttackAnimalRatingDamage(BasicAIController* AIC);// 0x5d33220
<----------Generated by SSpawner v1.0.4---------->


Class: LuaInstancedActorComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x178, Size: 0x10]
	void UnRegistLuaTick();// 0xa02acec
	void RegistLuaTick(float TickInterval);// 0xa02ac70
<----------Generated by SSpawner v1.0.4---------->


Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x3f4, Size: 0x4]
	bool bOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f8, Size: 0x1]
	TeamWayPointLink[] TeamLinks;//[Offset: 0x400, Size: 0x10]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x410, Size: 0x8]
	BillboardComponent* ShowSprite;//[Offset: 0x418, Size: 0x8]
	Vector GetNextWayPointLocation(int TeamID, int ExcludeID);// 0x5d560a0
<----------Generated by SSpawner v1.0.4---------->


Class: TeamWayPointLink
	int TeamID;//[Offset: 0x0, Size: 0x4]
	WayPointLink[] Links;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WayPointLink
	int NextPointID;//[Offset: 0x0, Size: 0x4]
	int Weight;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIActingCandidateData
	int TeamID;//[Offset: 0x0, Size: 0x4]
	uint32 AIPlayerKey;//[Offset: 0x4, Size: 0x4]
	FString AIPlayerName;//[Offset: 0x8, Size: 0x10]
	FString AIPlayerNation;//[Offset: 0x18, Size: 0x10]
	FakePlayerAIController* FakePlayerAIController;//[Offset: 0x28, Size: 0x8]
	bool bMLDelivery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: FakePlayerAIController.BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0xfa8, Size: 0x8]
	delegate OnEnterJumping;//[Offset: 0xfb0, Size: 0x10]
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0xfe8, Size: 0x8]
	int PlayerTeamId;//[Offset: 0xff0, Size: 0x4]
	uint32 PlayerKey;//[Offset: 0xff4, Size: 0x4]
	FString PlayerName;//[Offset: 0xff8, Size: 0x10]
	byte AIType;//[Offset: 0x1008, Size: 0x1]
	int resID;//[Offset: 0x100c, Size: 0x4]
	bool bForceRecordKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1010, Size: 0x1]
	float TeleportRandomAngle;//[Offset: 0x1014, Size: 0x4]
	bool bUnPossessStopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1018, Size: 0x1]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1019, Size: 0x1]
	FString DropItemCfgTableName;//[Offset: 0x1020, Size: 0x10]
	STExtraBaseCharacter* ControlledCharacter;//[Offset: 0x1030, Size: 0x8]
	bool IsOpenPawnMoveOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1039, Size: 0x1]
	GameModePlayerItem[] OverrideInitialItemList;//[Offset: 0x1040, Size: 0x10]
	PlayerSecurityInfoCollector* PlayerSecurityInfoCollector;//[Offset: 0x1050, Size: 0x8]
	void SetPlane(Actor* InPlane);// 0x5ed9374
	void SetLiveState(enum InLiveState);// 0x5ed92f8
	void SetDeliveryActingTarget(STExtraBaseCharacter* DeliveryActingTarget);// 0x5ed927c
	void SetDeliverTarget(STExtraPlayerCharacter* DeliverTargetPlayer);// 0x5ed9200
	void SetCanJump(bool CanJump);// 0x5ed917c
	bool IsInPlane();// 0x5ed9144
	bool IsDeliver();// 0x5ed910c
	int GetResId();// 0x5ed90f0
	Actor* GetPlane();// 0x5ed90bc
	STExtraPlayerCharacter* GetDeliverTarget();// 0x5ed9088
	PlayerSecurityInfoCollector* GetAIPlayerSecurityInfoCollector();// 0x5ed906c
	void ForceDropItems(int itemType);// 0x5ed8ff0
	void ExitPlane();// 0x5ed8fdc
	void EnterPlane();// 0x5ed8fc8
	void DebugBlackboardKey(out const FName KeyName, bool bShouldShow);// 0x5ed8eec
	void ClearDeliver();// 0x5ed8ed8
	void ChangeToNewPrepareBehaviorTree();// 0x5ed8ec4
	void ChangeToFightingBehaviorTree();// 0x5ed8eb0
	void ChangeBehaviorTree(int Index, const bool bUseNewTree);// 0x5ed8df0
<----------Generated by SSpawner v1.0.4---------->


Class: BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	delegate OnCustomSpawnItemDelegate;//[Offset: 0x7a0, Size: 0x10]
	float CheckPeriod;//[Offset: 0x7b0, Size: 0x4]
	float RandomDeviation;//[Offset: 0x7b4, Size: 0x4]
	float ProtectCountdownTime;//[Offset: 0x7b8, Size: 0x4]
	float SpawnEquipDelayTime;//[Offset: 0x7bc, Size: 0x4]
	float SpawnEquipFreezeRadius;//[Offset: 0x7c0, Size: 0x4]
	Vector2D ProtectShootRadius;//[Offset: 0x7c4, Size: 0x8]
	float TurnVelocity;//[Offset: 0x7cc, Size: 0x4]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x7d0, Size: 0x8]
	<enum,enum> WeatherToAttackDist;//[Offset: 0x7d8, Size: 0x50]
	bool bSyncViewRotationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 0x1]
	bool bAimOffsetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x829, Size: 0x1]
	GameModeAIPlayerParams AIParams;//[Offset: 0x838, Size: 0x3d0]
	byte AIActionType;//[Offset: 0xc58, Size: 0x1]
	byte FakePlayerBornType;//[Offset: 0xc59, Size: 0x1]
	bool IsVaultBreakWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5a, Size: 0x1]
	float ValidPlayerControllerDist;//[Offset: 0xc5c, Size: 0x4]
	float DelayAIVaultBreakWindowTime;//[Offset: 0xc60, Size: 0x4]
	int AIParachuteStyle;//[Offset: 0xc64, Size: 0x4]
	BackpackComponent* BackpackComponent;//[Offset: 0xc68, Size: 0x8]
	SpectatorComponent* SpectatorComponent;//[Offset: 0xc70, Size: 0x8]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0xc78, Size: 0x48]
	AIShootMissInfo AIShootMissInfo;//[Offset: 0xcc0, Size: 0x18]
	AIConditionHearingComponent* AIConditionHearingComponent;//[Offset: 0xcd8, Size: 0x8]
	AIParachuteJumpComponent* AIParachuteComp;//[Offset: 0xce0, Size: 0x8]
	AIHoleUpComponent* AIHoleUpComponent;//[Offset: 0xd68, Size: 0x8]
	AIBuildingComponent* AIBuildingComponent;//[Offset: 0xd70, Size: 0x8]
	bool IsRespawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd81, Size: 0x1]
	FString BPClassOverrideTag;//[Offset: 0xd88, Size: 0x10]
	Actor* Plane;//[Offset: 0xd98, Size: 0x8]
	int FlightNo;//[Offset: 0xda0, Size: 0x4]
	int DefaultAIFeatureConfigID;//[Offset: 0xda4, Size: 0x4]
	AIFeatureInfo AIFeatureInfo;//[Offset: 0xda8, Size: 0x190]
	bool IsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf88, Size: 0x1]
	STExtraBaseCharacter* RescuedByWho;//[Offset: 0xf8c, Size: 0x8]
	uint32 CurAILevel;//[Offset: 0xf98, Size: 0x4]
	int MLAIStyle;//[Offset: 0xf9c, Size: 0x4]
	bool bSkipCreateBackpackEveryTimePossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa0, Size: 0x1]
	bool bFullyRandomEveryTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa1, Size: 0x1]
	bool bConsiderBlueCircleWhenTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa2, Size: 0x1]
	bool bConsiderWaterWhenTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa3, Size: 0x1]
	bool bSkipUpdateRotationDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa4, Size: 0x1]
	void UpdateAIMissShootInfo(float CurrentTime, Vector2D MissRange, float MissOnPurposeCD);// 0x5df23e4
	void StopBehaviorTreeAndSetNull();// 0x5df23d0
	void SetRatingDamageScale(float InRating);// 0x5df2358
	void SetPlayerStatePlayerId(int InPlayerId);// 0x5df22dc
	void SetMLAIType(int Type);// 0x5df2260
	void SetIsMLAI(bool InIsMLAI);// 0x5df21d4
	void SetGlobalAverageRating(float RatingValue);// 0x5df2158
	void SetAILevel(uint32 NewAILevel);// 0x5df20dc
	void Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x5df1ffc
	void Respawn();// 0x5df1fe0
	bool IsMLAIPlayerParam();// 0x5df1fc4
	bool IsDead();// 0x5df1f8c
	bool IsAvailableBackpacItemType(ItemDefineID DefineID);// 0x5df1ee4
	void InitSpectatorComponentWithParams(out const GameModeAIPlayerParams Params);// 0x5df1e1c
	void InitAIFeatureInfo(int InID);// 0x5df1d98
	bool InitAI(int InFeatureID);// 0x5df1d00
	float GetRatingDamageScale(STExtraPlayerController* PlayerController);// 0x5df1c74
	float GetRatingDamageFiringAccuRadius(STExtraPlayerController* PlayerController);// 0x5df1be8
	Pawn* GetPossessedBaseCharacter();// 0x5df1bb4
	uint32 GetMLBotTypeParam();// 0x5df1b98
	uint32 GetInitAILevelParam();// 0x5df1b7c
	float GetGlobalAverageRating();// 0x5df1b48
	<float,float> GetEnemyHpDamageRateMap(STExtraBaseCharacter* InEnemy);// 0x5df19b8
	Pawn* GetCurEnemy();// 0x5df197c
	GameModeAIPlayerParams GetAIParams();// 0x5df1930
	uint32 GetAILevel();// 0x5df1914
	void ForceDropItemsWithTypeList(out const int[] TypeList);// 0x5df185c
	void ForceDropItemsWithoutTypeList(out const int[] IgnoreTypeList);// 0x5df17a4
	void CustomSpawnItemDelegate__DelegateSignature(BaseAIController* AIController);// 0x70644c4
	void ClearAIControllerCachedData();// 0x5df1790
	void CheckOverConstructing(Actor* InActor, int TotoalAmountAllowed, int InBuildingID);// 0x5df16a0
	void ChangeAIActionType(byte InAIActionType);// 0x5df161c
	void AutoSpawnItem();// 0x5df1608
	void AddItemForAIWithFullCheck(AIEquipSpawnItem[] DataSet, AIEquipSpawnItem[] AIMustPickUpItemList);// 0x5df13e8
	void AddItemForAI(int ItemId, int Count, bool bDropOnDead, bool bRollOnDead);// 0x5df129c
<----------Generated by SSpawner v1.0.4---------->


Class: BasicAIController.AIController.Controller.Actor.Object
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x568, Size: 0x8]
	BlackboardComponent* BlackboardComp;//[Offset: 0x570, Size: 0x8]
	SpawnerBase* TeamZoneSpawner;//[Offset: 0x578, Size: 0x8]
	SpawnerBase* CurSpawner;//[Offset: 0x580, Size: 0x8]
	uint32 OwnedSpawnerID;//[Offset: 0x588, Size: 0x4]
	bool bAsyncLoadBehaviorTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	enum AIAttackType;//[Offset: 0x58d, Size: 0x1]
	bool IsAdvancedAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58e, Size: 0x1]
	BehaviorTree*[] BehaviorTreePath;//[Offset: 0x590, Size: 0x10]
	BehaviorTree*[] NewBehaviorTreePath;//[Offset: 0x5a0, Size: 0x10]
	BehaviorTree*[] AdvancedBehaviorTreePath;//[Offset: 0x5b0, Size: 0x10]
	int BehaviorTreeIndexRunWhenPossess;//[Offset: 0x5c0, Size: 0x4]
	float ActorLocationTetherDistance;//[Offset: 0x5c4, Size: 0x4]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x5c8, Size: 0x8]
	FString AIFeatureInfoTableName;//[Offset: 0x5d0, Size: 0x10]
	FString AIWeaponRangeTableName;//[Offset: 0x5e0, Size: 0x10]
	int HitRateConfigNum;//[Offset: 0x5f0, Size: 0x4]
	int AIFeatureID;//[Offset: 0x5f4, Size: 0x4]
	AITargetInViewOffset AITargetInViewOffset;//[Offset: 0x5f8, Size: 0x38]
	delegate OnBehaviorTreeLoaded;//[Offset: 0x690, Size: 0x10]
	AIShootingPoseOffsetInfo shootingPoseOffsetInfo;//[Offset: 0x6a0, Size: 0x70]
	delegate OnCollectionHearSoundDelegate;//[Offset: 0x710, Size: 0x10]
	bool InterpControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 0x1]
	enum AICharacterRotateInterpType;//[Offset: 0x721, Size: 0x1]
	float RotationSpeedOfInterpControlRotation;//[Offset: 0x724, Size: 0x4]
	FString LuaFilePath;//[Offset: 0x730, Size: 0x10]
	bool UseAIFeatureInfo();// 0x5dfb080
	void SetCurShootingPose(enum InAIShootingPose);// 0x5dfb004
	void OnAIEnterDarkArea(bool bInEnter, Actor* DarkArea, bool bAtLeastInOne);// 0x5dfaef0
	void InitAIFeatureInfo(int InID);// 0x5dfae6c
	bool InitAI(int InFeatureID);// 0x5dfadd4
	Pawn*[] GetTeammates();// 0x5dfad30
	int GetTeammateCount();// 0x5dfacfc
	int GetCurrentOrder();// 0x5dfacc8
	Pawn* GetCurEnemy();// 0x5dfac8c
	BlackboardComponent* GetBlackboardComponent();// 0x5dfac70
	BehaviorTree*[] GetBehaviorTreePath();// 0x5dfab3c
	enum GetAIAttackType();// 0x5dfab20
	void ClearCurEnemy();// 0x5dfab04
<----------Generated by SSpawner v1.0.4---------->


Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bPathDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	bool bUpdatePathOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 0x1]
	float maxCheckDis;//[Offset: 0x318, Size: 0x4]
	float maxCheckDisTime;//[Offset: 0x31c, Size: 0x4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	float PlayerHalfHeight;//[Offset: 0x328, Size: 0x4]
	float PlayerNewHalfHeight;//[Offset: 0x32c, Size: 0x4]
	float MaxTransferDis;//[Offset: 0x330, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SpawnerBase.Actor.Object
	UnitTransformGenerator* TransformGenerator;//[Offset: 0x458, Size: 0x8]
	UnitSpeciesGenerator* SpeciesGenerator;//[Offset: 0x460, Size: 0x8]
	FString LuaFilePath;//[Offset: 0x468, Size: 0x10]
	Pawn*[] AliveBots;//[Offset: 0x478, Size: 0x10]
	SpawnerInfo SpawnerInfo;//[Offset: 0x488, Size: 0x40]
	void Stop();// 0x6092f60
	Actor* SpawnUnit();// 0x6092f24
	void Run();// 0x6092f08
	void RemoveAliveBot(Pawn* BotPawn);// 0x6092e8c
	GameLevelManagerComponent* GetGameLevelManager();// 0x6092e58
	Pawn*[] GetAliveBots();// 0x6092db4
	void AddAliveBot(Pawn* BotPawn);// 0x6092d38
<----------Generated by SSpawner v1.0.4---------->


Class: UnitTransformGenerator.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 0x10]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SpawnerBase* GetSpawner();// 0x62dccec
	Transform Generate();// 0x62dcc90
<----------Generated by SSpawner v1.0.4---------->


Class: UnitSpeciesGenerator.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 0x10]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	FString SpeciesConfigLuaPath;//[Offset: 0xa0, Size: 0x10]
	void PostConfig(Actor* Actor);// 0x62dc80c
	SpawnerBase* GetSpawner();// 0x62dc7d8
<----------Generated by SSpawner v1.0.4---------->


Class: SpawnerInfo
	Guid SpawnerID;//[Offset: 0x0, Size: 0x10]
	int ConfigId;//[Offset: 0x10, Size: 0x4]
	FString State;//[Offset: 0x18, Size: 0x10]
	bool bAutoSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	int TeamID;//[Offset: 0x2c, Size: 0x4]
	FString OwnerZone;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameLevelManagerComponent.ActorComponent.Object
	delegate OnAppendEliteGroup;//[Offset: 0x110, Size: 0x10]
	delegate OnRemoveEliteGroup;//[Offset: 0x120, Size: 0x10]
	int EliteWarningItemIconID;//[Offset: 0x130, Size: 0x4]
	<int,int> EliteWarningItemInstanceIDMap;//[Offset: 0x138, Size: 0x50]
	GameLevelDesc[] CurActiveGameLevelList;//[Offset: 0x188, Size: 0x10]
	LevelData[] CurActiveGameLevelDataList;//[Offset: 0x198, Size: 0x10]
	int TotalAliveMonsterNum;//[Offset: 0x1a8, Size: 0x4]
	int BornLevelMonsterNum;//[Offset: 0x1ac, Size: 0x4]
	int BornShitMonsterNum;//[Offset: 0x1b0, Size: 0x4]
	<FString,SingleLevelObjArray> LevelObjs;//[Offset: 0x1b8, Size: 0x50]
	AliveMonsterNum[] AliveMonsterNumList;//[Offset: 0x208, Size: 0x10]
	GameLevelDesc CurCompletedGameLevel;//[Offset: 0x218, Size: 0x18]
	float LevelBeginTime;//[Offset: 0x230, Size: 0x4]
	float LevelEndTime;//[Offset: 0x234, Size: 0x4]
	int GM_Diffcult;//[Offset: 0x238, Size: 0x4]
	bool GM_UnLoadLevelData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	bool GM_UnLoadDynamicLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 0x1]
	float NavTickInterval;//[Offset: 0x240, Size: 0x4]
	LevelData[] LevelDataList;//[Offset: 0x248, Size: 0x10]
	LevelRelifePointInfo[] LevelRelifePointList;//[Offset: 0x260, Size: 0x10]
	FString MonsterTableName;//[Offset: 0x270, Size: 0x10]
	FString MonsterBPTableName;//[Offset: 0x280, Size: 0x10]
	FString MonsterSpecialStateTableName;//[Offset: 0x290, Size: 0x10]
	FString DecoratorTableName;//[Offset: 0x2a0, Size: 0x10]
	FString MonsterDropTableName;//[Offset: 0x2b0, Size: 0x10]
	int RelifePosOffsetZ;//[Offset: 0x2c0, Size: 0x4]
	Actor* SpawnPickup(int ID, out const Transform Transform, const int ContentNum);// 0x5ee8f04
	Actor* SpawnMonster(int ID, out const Transform Transform, out const MonsterParams Params);// 0x5ee8d6c
	void RemoveRelifePoint(out GameLevelDesc LevelDesc);// 0x5ee8ca8
	void RegisterGameEvent();// 0x5ee8c94
	void OnRep_CurGameLevelChanged();// 0x5ee8c80
	void OnMonsterWaveEnd(out GameLevelDesc LevelDesc, int WaveID);// 0x5ee8b74
	void OnGameStart();// 0x5ee8b60
	void OnGameEnd();// 0x5ee8b4c
	void OnBotDied(Actor* Actor, Actor* Killer);// 0x5ee8a98
	void OnBotBorn(Actor* Actor);// 0x5ee8a1c
	void OnActorUniqueIdRemove(uint32 SId);// 0x5ee89a0
	void OnActorUniqueIdAdd(Actor* Actor, uint32 SId);// 0x5ee88e8
	void OnActorSpawn(Actor* Actor);// 0x5ee886c
	void OnActorDespawn(Actor* Actor);// 0x5ee87f0
	bool KillUnitBySingleId(int SingleId, bool ForbidenReborn);// 0x5ee871c
	bool KillUnitBySelf(Actor* TActor);// 0x5ee868c
	bool KillUnit(byte BotCat, int BotType, bool ForbidenReborn);// 0x5ee857c
	bool KillCategoryUnit(byte BotCat, bool ForbidenReborn);// 0x5ee84a8
	void InitUnit(Actor* TActor, byte Category);// 0x5ee83f0
	void InitRelifePoint(out GameLevelDesc LevelDesc, RelifePoint[] PVERelifePoints);// 0x5ee8210
	void InitLuaLevelActors();// 0x5ee81fc
	void InitLevelAddObjs(out LevelData LevelData);// 0x5ee8120
	void Init();// 0x5ee810c
	void HandleGameLevelEnd(out GameLevelDesc LevelDesc);// 0x5ee8048
	void HandleEnterLevel(out GameLevelDesc InLevelDesc, Actor* OffsetActor);// 0x5ee7f3c
	Actor* GetUnit(byte Category, int TypeId);// 0x5ee7e74
	bool GetRelifeTrans(out const Vector NearVector, out Transform RelifeTrans);// 0x5ee7d70
	LevelData[] GetNearPosLevelList(int GetNum, int RandomNum, int ChapterType, Vector NearPos);// 0x5ee7b60
	bool GetNearPosLevel(Vector NearPos, int ChapterType, LevelData[] AvoidLevelList, out LevelData OutLevelData);// 0x5ee7840
	LevelData GetLoadedLevelData(out GameLevelDesc LevelDesc);// 0x5ee774c
	int GetAliveMonsterNum(byte SourceType);// 0x5ee76c0
	LevelData GetActiveLevelDataByLevelDesc(out GameLevelDesc LevelDesc);// 0x5ee75cc
	void EndLevelAddObjs(out LevelData LevelData);// 0x5ee74f0
	void ChangeAliveMonsterNumList(byte SourceType, int Addition);// 0x5ee7438
	void BroadRemoveEliteGroup(int LevelID, Vector pos);// 0x5ee7378
	void BroadAppendEliteGroup(int LevelID, Vector pos);// 0x5ee72b8
	void AdjustPosByOffsetActor(out LevelData LevelData, Transform OffsetTrans);// 0x5ee716c
	void ActiveRelifePoint(out GameLevelDesc LevelDesc, int ID, bool ActivePoint);// 0x5ee701c
<----------Generated by SSpawner v1.0.4---------->


Class: GameLevelDesc
	int ChapterID;//[Offset: 0x0, Size: 0x4]
	int LevelID;//[Offset: 0x4, Size: 0x4]
	FString Desc;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LevelData
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 0x18]
	FString[] TargetClassPaths;//[Offset: 0x18, Size: 0x10]
	FString LeveDirectorFilePath;//[Offset: 0x28, Size: 0x10]
	byte EndCondType;//[Offset: 0x38, Size: 0x1]
	FString EndCondPar;//[Offset: 0x40, Size: 0x10]
	bool IsLastLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int DiffcultPerc;//[Offset: 0x54, Size: 0x4]
	Vector[] TaskPointLocations;//[Offset: 0x58, Size: 0x10]
	RelifePoint[] PVERelifePointsInfo;//[Offset: 0x68, Size: 0x10]
	PVECircle[] PVECircleInfo;//[Offset: 0x78, Size: 0x10]
	MonsterWave[] MonsterWaveCfg;//[Offset: 0x88, Size: 0x10]
	Vector pos;//[Offset: 0x98, Size: 0xc]
	LevelObjets[] LevelAddObjs;//[Offset: 0xa8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RelifePoint
	int ID;//[Offset: 0x0, Size: 0x4]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	Transform Trans;//[Offset: 0x10, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: PVECircle
	int CircleID;//[Offset: 0x0, Size: 0x4]
	Vector2D targetPos;//[Offset: 0x4, Size: 0x8]
	float Radius;//[Offset: 0xc, Size: 0x4]
	float MoveTime;//[Offset: 0x10, Size: 0x4]
	float Pain;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterWave
	float WaveDelayTime;//[Offset: 0x0, Size: 0x4]
	MonsterGroup[] MonsterGroupList;//[Offset: 0x8, Size: 0x10]
	FString Desc;//[Offset: 0x18, Size: 0x10]
	byte EndCondType;//[Offset: 0x28, Size: 0x1]
	int EndCondPar;//[Offset: 0x2c, Size: 0x4]
	int ID;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterGroup
	FString Desc;//[Offset: 0x0, Size: 0x10]
	byte ChooseGroupSpotType;//[Offset: 0x10, Size: 0x1]
	int NearPlayTeamIdx;//[Offset: 0x14, Size: 0x4]
	ZMonsterSpotGroup*[] SpotGroupChooseList;//[Offset: 0x18, Size: 0x10]
	MonsterSpotGroup[] MonsterSpotGroupChooseList;//[Offset: 0x28, Size: 0x10]
	MonsterGeneratePlan[] PlanList;//[Offset: 0x38, Size: 0x10]
	int ID;//[Offset: 0x48, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ZMonsterSpotGroup.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x2d0, Size: 0x10]
	ZMonsterSpot*[] SpotList;//[Offset: 0x2e0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ZMonsterSpot.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x2d0, Size: 0x10]
	byte MonsterSpotType;//[Offset: 0x2e0, Size: 0x1]
	ZMonsterRoadPoint*[] RoadPointList;//[Offset: 0x2e8, Size: 0x10]
	byte SpotRadius;//[Offset: 0x2f8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ZSpotSceneComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ZMonsterRoadPoint.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x2cc, Size: 0x4]
	int Radius;//[Offset: 0x2d0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterSpotGroup
	FString Desc;//[Offset: 0x0, Size: 0x10]
	Vector pos;//[Offset: 0x10, Size: 0xc]
	MonsterSpot[] SpotList;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterSpot
	FString Desc;//[Offset: 0x0, Size: 0x10]
	byte MonsterSpotType;//[Offset: 0x10, Size: 0x1]
	Vector pos;//[Offset: 0x14, Size: 0xc]
	RoadPointInfo[] RoadPointList;//[Offset: 0x20, Size: 0x10]
	byte SpotRadius;//[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterGeneratePlan
	FString Desc;//[Offset: 0x0, Size: 0x10]
	int PlanWeight;//[Offset: 0x10, Size: 0x4]
	MonsterGenerateCfg[] PlanDetail;//[Offset: 0x18, Size: 0x10]
	int ID;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterGenerateCfg
	int MonsterID;//[Offset: 0x0, Size: 0x4]
	FString Desc;//[Offset: 0x8, Size: 0x10]
	byte SpotType;//[Offset: 0x18, Size: 0x1]
	int MonsterNum;//[Offset: 0x1c, Size: 0x4]
	float RandomGenerateDelayTime;//[Offset: 0x20, Size: 0x4]
	int ReBornTimes;//[Offset: 0x24, Size: 0x4]
	int ReBornDelay;//[Offset: 0x28, Size: 0x4]
	float GenerateDelayTime;//[Offset: 0x2c, Size: 0x4]
	int ID;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: LevelObjets
	class Object* Objects;//[Offset: 0x0, Size: 0x8]
	Transform Trans;//[Offset: 0x10, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: SingleLevelObjArray
	Actor*[] LevelObjs;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AliveMonsterNum
	int Num;//[Offset: 0x0, Size: 0x4]
	byte SourceType;//[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: LevelRelifePointInfo
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 0x18]
	RelifePointInfo[] RelifePointList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RelifePointInfo
	int ID;//[Offset: 0x0, Size: 0x4]
	Transform RelifeTrans;//[Offset: 0x10, Size: 0x30]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterParams
	int MonsterID;//[Offset: 0x0, Size: 0x4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	int ProduceID;//[Offset: 0x58, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: OnlyActorCompManagerComponent.ActorComponent.Object
	<FString,OnlyActorComponent*> CacheComponents;//[Offset: 0x110, Size: 0x50]
	OnlyActorComponent*[] CacheUpdateComponents;//[Offset: 0x160, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: OnlyActorComponent.ActorComponent.Object
	byte bCanEverUpdate;//[Offset: 0x110, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerSecurityInfoCollector.ActorComponent.Object
	int[] EnergyItemIDList;//[Offset: 0x110, Size: 0x10]
	int[] EnergySpeedUpPhaseIndexList;//[Offset: 0x120, Size: 0x10]
	bool bEnableDetailFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool bEnableDetailHurtFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	ClientCircleFlow CurCircleFlow;//[Offset: 0x138, Size: 0x158]
	ClientCircleFlow CollectCircleFlow;//[Offset: 0x290, Size: 0x158]
	HurtFlow CurHurtFlow;//[Offset: 0x3e8, Size: 0x120]
	ClientJumpFlow JumpFlow;//[Offset: 0x508, Size: 0xc0]
	ClientSecPlayerKillFlow SecPlayerKillFlow;//[Offset: 0x5c8, Size: 0x90]
	InexistentAvatarFlow InexistentAvatarFlow;//[Offset: 0x11f8, Size: 0x1e0]
	void StartOnPlane();// 0x5ff1808
	void RecordAirDropCount();// 0x5ff17f4
	void PlayerCanJump();// 0x5ff17e0
	void HandleSyncCircleInfo(int Index);// 0x5ff1764
	void HandleCharacterSafeZoneTips(float SafeZoneTime);// 0x5ff16e8
	void HandleCharacterCircleWaveOver(int Index);// 0x5ff166c
	void HandleCharacterCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x5ff1578
	void HandleCharacterBlueCircleRun(float BlueCircleRunTime);// 0x5ff14fc
	void HandleCharacterBlueCirclePreWarning(float BlueCirclePreWarningTime);// 0x5ff1480
	void HandleCharacterAttrChangedWithDetail(Actor* nowActor, FString AttrName, float ValueDelta, float ResultValue);// 0x5ff1324
	void ExitParachute();// 0x5ff1310
	void EnterParachute();// 0x5ff12fc
	void EnterJumping();// 0x5ff12e8
	void CalculatePlayerMoveData();// 0x5ff12d4
	void AddRecoveryItemFlow(uint32 ItemId);// 0x5ff1258
<----------Generated by SSpawner v1.0.4---------->


Class: ClientCircleFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 0x8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 0x10]
	FString PicUrl;//[Offset: 0x18, Size: 0x10]
	uint32 GameStartTime;//[Offset: 0x28, Size: 0x4]
	uint32 NewCircleBornTime;//[Offset: 0x2c, Size: 0x4]
	int NewCirclePositionX;//[Offset: 0x30, Size: 0x4]
	int NewCirclePositionY;//[Offset: 0x34, Size: 0x4]
	int NewCirclePositionRadius;//[Offset: 0x38, Size: 0x4]
	int NewCircleCount;//[Offset: 0x3c, Size: 0x4]
	int PlayerPositionX;//[Offset: 0x40, Size: 0x4]
	int PlayerPositionY;//[Offset: 0x44, Size: 0x4]
	int PlayerPositionZ;//[Offset: 0x48, Size: 0x4]
	int PlayerHP;//[Offset: 0x4c, Size: 0x4]
	uint32 OldCircleMoveTime;//[Offset: 0x50, Size: 0x4]
	uint32 OldCircleMoveEndTime;//[Offset: 0x54, Size: 0x4]
	uint32 PlayerOutTime;//[Offset: 0x58, Size: 0x4]
	int CirclePoisonCount;//[Offset: 0x5c, Size: 0x4]
	int CirclePoisonMin;//[Offset: 0x60, Size: 0x4]
	int CirclePoisonMax;//[Offset: 0x64, Size: 0x4]
	int CirclePoisonAvg;//[Offset: 0x68, Size: 0x4]
	int CirclePoisonTotal;//[Offset: 0x6c, Size: 0x4]
	int CirclePoisonDrop;//[Offset: 0x70, Size: 0x4]
	int CirclePoisonDead;//[Offset: 0x74, Size: 0x4]
	int RecoveryCount;//[Offset: 0x78, Size: 0x4]
	int RecoveryMin;//[Offset: 0x7c, Size: 0x4]
	int RecoveryMax;//[Offset: 0x80, Size: 0x4]
	int RecoveryTotal;//[Offset: 0x84, Size: 0x4]
	int EnergyRecoveryCount;//[Offset: 0x88, Size: 0x4]
	RecoveryItemCount[] RecoveryItemCounts;//[Offset: 0x90, Size: 0x10]
	int EnergyRecoveryMin;//[Offset: 0xa0, Size: 0x4]
	int EnergyRecoveryMax;//[Offset: 0xa4, Size: 0x4]
	int EnergyRecoveryTotal;//[Offset: 0xa8, Size: 0x4]
	int EnergyStartLv;//[Offset: 0xac, Size: 0x4]
	int EnergyStartTime;//[Offset: 0xb0, Size: 0x4]
	FString EnergyItemUse;//[Offset: 0xb8, Size: 0x10]
	int EnergyLvTimeInfo;//[Offset: 0xc8, Size: 0x4]
	FString EnergyRunFastTime;//[Offset: 0xd0, Size: 0x10]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xe0, Size: 0x10]
	int EnergyEndLv;//[Offset: 0xf0, Size: 0x4]
	int EnergyEndTime;//[Offset: 0xf4, Size: 0x4]
	int PlayerMoveDis;//[Offset: 0xf8, Size: 0x4]
	int PlayerSpeedMax;//[Offset: 0xfc, Size: 0x4]
	int PlayerSpeedAvg;//[Offset: 0x100, Size: 0x4]
	int PlayerCarSpeedMax;//[Offset: 0x104, Size: 0x4]
	int PlayerCarSpeedAvg;//[Offset: 0x108, Size: 0x4]
	int PlayerSquatMoveDis;//[Offset: 0x10c, Size: 0x4]
	int PlayerSquatMoveTime;//[Offset: 0x110, Size: 0x4]
	int PlayerCreepMoveDis;//[Offset: 0x114, Size: 0x4]
	int PlayerCreepMoveTime;//[Offset: 0x118, Size: 0x4]
	int PlayerRunMoveDis;//[Offset: 0x11c, Size: 0x4]
	int PlayerRunMoveTime;//[Offset: 0x120, Size: 0x4]
	int PlayerDriveMoveDis;//[Offset: 0x124, Size: 0x4]
	int PlayerDriveMoveTime;//[Offset: 0x128, Size: 0x4]
	int PlayerCar;//[Offset: 0x12c, Size: 0x4]
	int PlayerCameraDistanceMax;//[Offset: 0x130, Size: 0x4]
	uint32 SecCircleFlowID;//[Offset: 0x134, Size: 0x4]
	int RecordType;//[Offset: 0x138, Size: 0x4]
	byte AutoAimType;//[Offset: 0x13c, Size: 0x1]
	int AutoAimTime;//[Offset: 0x140, Size: 0x4]
	byte[] MrpcsFlowData;//[Offset: 0x148, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RecoveryItemCount
	uint32 ItemId;//[Offset: 0x0, Size: 0x4]
	uint32 Count;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0, Size: 0x10]
	int64 dtEventTime;//[Offset: 0x10, Size: 0x8]
	FString GameAppID;//[Offset: 0x18, Size: 0x10]
	FString OpenID;//[Offset: 0x28, Size: 0x10]
	int8 PlatID;//[Offset: 0x38, Size: 0x1]
	uint16 AreaID;//[Offset: 0x3a, Size: 0x2]
	FString ZoneID;//[Offset: 0x40, Size: 0x10]
	uint64 BattleID;//[Offset: 0x50, Size: 0x8]
	int64 ClientStartTime;//[Offset: 0x58, Size: 0x8]
	int MrpcsFlowcount_;//[Offset: 0x60, Size: 0x4]
	int[] MrpcsFlow;//[Offset: 0x68, Size: 0x10]
	FString UserName;//[Offset: 0x78, Size: 0x10]
	uint64 RoleID;//[Offset: 0x88, Size: 0x8]
	int8 RoleType;//[Offset: 0x90, Size: 0x1]
	FString EnemyOpenID;//[Offset: 0x98, Size: 0x10]
	FString EnemyUserName;//[Offset: 0xa8, Size: 0x10]
	uint64 EnemyRoleID;//[Offset: 0xb8, Size: 0x8]
	int EnemyRoleType;//[Offset: 0xc0, Size: 0x4]
	uint32 HurtTime;//[Offset: 0xc4, Size: 0x4]
	int HurtType;//[Offset: 0xc8, Size: 0x4]
	int HitType;//[Offset: 0xcc, Size: 0x4]
	int DamageStart;//[Offset: 0xd0, Size: 0x4]
	int DamageReduce;//[Offset: 0xd4, Size: 0x4]
	int ArmorDef;//[Offset: 0xd8, Size: 0x4]
	int HPstart;//[Offset: 0xdc, Size: 0x4]
	int HPEnd;//[Offset: 0xe0, Size: 0x4]
	int ArmorHPStart1;//[Offset: 0xe4, Size: 0x4]
	int ArmorHPEnd1;//[Offset: 0xe8, Size: 0x4]
	int ArmorHPStart2;//[Offset: 0xec, Size: 0x4]
	int ArmorHPEnd2;//[Offset: 0xf0, Size: 0x4]
	int CarHPStart;//[Offset: 0xf4, Size: 0x4]
	int CarHPEnd;//[Offset: 0xf8, Size: 0x4]
	int FallHeight;//[Offset: 0xfc, Size: 0x4]
	int HypoxiaTime;//[Offset: 0x100, Size: 0x4]
	int HypoxiaHurtTotal;//[Offset: 0x104, Size: 0x4]
	int PlayerKilled;//[Offset: 0x108, Size: 0x4]
	int ArmorKill;//[Offset: 0x10c, Size: 0x4]
	int CarKill;//[Offset: 0x110, Size: 0x4]
	int IfIsAI;//[Offset: 0x114, Size: 0x4]
	int CircleIndex;//[Offset: 0x118, Size: 0x4]
	uint32 HurtFlowID;//[Offset: 0x11c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 0x8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 0x10]
	FString MapName;//[Offset: 0x18, Size: 0x10]
	int8 WeatherID;//[Offset: 0x28, Size: 0x1]
	int64 GameStartTime;//[Offset: 0x30, Size: 0x8]
	uint32 StartJumpTime;//[Offset: 0x38, Size: 0x4]
	uint32 EndJumpTime;//[Offset: 0x3c, Size: 0x4]
	uint32 PlayerJumpTime;//[Offset: 0x40, Size: 0x4]
	uint32 PlayerOpenTime;//[Offset: 0x44, Size: 0x4]
	uint32 PlayerLandTime;//[Offset: 0x48, Size: 0x4]
	FString FollowPlayerUID;//[Offset: 0x50, Size: 0x10]
	uint32 ExitFollowTime;//[Offset: 0x60, Size: 0x4]
	int PlayerJumpPositionX;//[Offset: 0x64, Size: 0x4]
	int PlayerJumpPositionY;//[Offset: 0x68, Size: 0x4]
	int PlayerJumpPositionZ;//[Offset: 0x6c, Size: 0x4]
	int PlaneJumpPositionX;//[Offset: 0x70, Size: 0x4]
	int PlaneJumpPositionY;//[Offset: 0x74, Size: 0x4]
	int PlaneJumpPositionZ;//[Offset: 0x78, Size: 0x4]
	int PlayerLandPositionX;//[Offset: 0x7c, Size: 0x4]
	int PlayerLandPositionY;//[Offset: 0x80, Size: 0x4]
	int PlayerLandPositionZ;//[Offset: 0x84, Size: 0x4]
	uint32 PlayerLandDistance;//[Offset: 0x88, Size: 0x4]
	uint32 PlayerSpeedMax1;//[Offset: 0x8c, Size: 0x4]
	uint32 PlayerSpeedMax2;//[Offset: 0x90, Size: 0x4]
	FString AntsVoiceTeamID;//[Offset: 0x98, Size: 0x10]
	FString AntsVoiceRoomID;//[Offset: 0xa8, Size: 0x10]
	int AntsVoiceTeamMemberID;//[Offset: 0xb8, Size: 0x4]
	int AntsVoiceRoomMemberID;//[Offset: 0xbc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 0x8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 0x1]
	int GunID;//[Offset: 0xc, Size: 0x4]
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 0x4]
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 0x36]
	int LocationX;//[Offset: 0x4c, Size: 0x4]
	int LocationY;//[Offset: 0x50, Size: 0x4]
	int LocationZ;//[Offset: 0x54, Size: 0x4]
	int KilledLocationX;//[Offset: 0x58, Size: 0x4]
	int KilledLocationY;//[Offset: 0x5c, Size: 0x4]
	int KilledLocationZ;//[Offset: 0x60, Size: 0x4]
	int KilledTeamID;//[Offset: 0x64, Size: 0x4]
	int TeamID;//[Offset: 0x68, Size: 0x4]
	FString GameModeID;//[Offset: 0x70, Size: 0x10]
	uint64 PawnState;//[Offset: 0x80, Size: 0x8]
	uint64 KilledPawnState;//[Offset: 0x88, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 0x2]
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 0x2]
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 0x2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 0x2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 0x2]
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 0x2]
	int16 LeftMax;//[Offset: 0xc, Size: 0x2]
	int16 RightMax;//[Offset: 0xe, Size: 0x2]
	int16 HorizontalTendency;//[Offset: 0x10, Size: 0x2]
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 0x2]
	int16 TimePerSwitch;//[Offset: 0x14, Size: 0x2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 0x2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 0x2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 0x2]
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 0x2]
	int16 RecoilValueFail;//[Offset: 0x20, Size: 0x2]
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 0x2]
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 0x2]
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 0x2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 0x2]
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 0x2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 0x2]
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30, Size: 0x2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 0x2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 0x2]
<----------Generated by SSpawner v1.0.4---------->


Class: InexistentAvatarFlow
<----------Generated by SSpawner v1.0.4---------->


Class: AITargetInViewOffset
	Vector[] Offset;//[Offset: 0x0, Size: 0x10]
	Vector[] CrouchOffset;//[Offset: 0x10, Size: 0x10]
	Vector TargetLoc;//[Offset: 0x20, Size: 0xc]
	int CurrentOffsetIndex;//[Offset: 0x2c, Size: 0x4]
	bool bTargetInViewDueToOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	enum TargetPawnState;//[Offset: 0x31, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AIShootingPoseOffsetInfo
	AIShootingPoseOffsetDetailInfo[] ShootingPoseShootPointOffsetArray;//[Offset: 0x0, Size: 0x10]
	float CrouchToStandHeightOffset;//[Offset: 0x10, Size: 0x4]
	float ProneToStandHeightOffset;//[Offset: 0x14, Size: 0x4]
	<enum,Vector> ShootingPoseShootPointOffsetMap;//[Offset: 0x20, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: AIShootingPoseOffsetDetailInfo
	enum shootingPose;//[Offset: 0x0, Size: 0x1]
	Vector offsetInfo;//[Offset: 0x4, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeAIPlayerParams.GameModePlayerParams
	int8 AIType;//[Offset: 0x3bc, Size: 0x1]
	uint32 AILevel;//[Offset: 0x3c0, Size: 0x4]
	bool bMLAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1]
	bool bMLDelivery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 0x1]
	uint32 MLBotType;//[Offset: 0x3c8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerParams
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString PlanetailResLink;//[Offset: 0x8, Size: 0x10]
	uint64 UID;//[Offset: 0x18, Size: 0x8]
	FString OpenID;//[Offset: 0x20, Size: 0x10]
	int ZoneID;//[Offset: 0x30, Size: 0x4]
	int8 PlatID;//[Offset: 0x34, Size: 0x1]
	FName PlayerType;//[Offset: 0x38, Size: 0x8]
	FString PlayerName;//[Offset: 0x40, Size: 0x10]
	uint32 PlayerKey;//[Offset: 0x50, Size: 0x4]
	int TeamID;//[Offset: 0x54, Size: 0x4]
	int64 IdxInTeam;//[Offset: 0x58, Size: 0x8]
	uint64 PreTeamID;//[Offset: 0x60, Size: 0x8]
	int PlayerBornPointID;//[Offset: 0x68, Size: 0x4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	byte gender;//[Offset: 0x6e, Size: 0x1]
	FString PIC_URL;//[Offset: 0x70, Size: 0x10]
	int Level;//[Offset: 0x80, Size: 0x4]
	int Segment_Level;//[Offset: 0x84, Size: 0x4]
	int AceImprintShowId;//[Offset: 0x88, Size: 0x4]
	int AceImprintBaseId;//[Offset: 0x8c, Size: 0x4]
	int AvatarBoxId;//[Offset: 0x90, Size: 0x4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	uint64 MLAIDisplayUID;//[Offset: 0x98, Size: 0x8]
	GameModePlayerItem[] ItemList;//[Offset: 0xa0, Size: 0x10]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0xb0, Size: 0x10]
	int[] equip_plating_list;//[Offset: 0xc0, Size: 0x10]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0xd0, Size: 0x10]
	int RolewearIndex;//[Offset: 0xe0, Size: 0x4]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0xe8, Size: 0x10]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0xf8, Size: 0x10]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0x108, Size: 0x10]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0x118, Size: 0x10]
	VehicleAvatarData[] VehicleAdvanceAvatarList;//[Offset: 0x128, Size: 0x10]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x138, Size: 0xc]
	GameModeWeaponDIYPlanData[] WeaponDIYPlanData;//[Offset: 0x148, Size: 0x10]
	int VehicleSkinInReady;//[Offset: 0x158, Size: 0x4]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x160, Size: 0x48]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x1a8, Size: 0x38]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x1e0, Size: 0x20]
	GameModePlayerKnapsackExtInfo[] KnapsackExtInfoList;//[Offset: 0x200, Size: 0x10]
	GameModePlayeWeaponSchemeInfo[] WeaponSchemeInfoList;//[Offset: 0x210, Size: 0x10]
	int CurWeaponSchemeIndex;//[Offset: 0x220, Size: 0x4]
	int PveLevel;//[Offset: 0x224, Size: 0x4]
	int[] CharSkillList;//[Offset: 0x228, Size: 0x10]
	GameModePlayerBanChat banChat;//[Offset: 0x238, Size: 0x18]
	GameModePlayerBanChat banTarget;//[Offset: 0x250, Size: 0x18]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x268, Size: 0x10]
	AchievementPrize EquippedAchievementPrize;//[Offset: 0x278, Size: 0xc]
	int[] audioChat;//[Offset: 0x288, Size: 0x10]
	FName CurrentPlayerState;//[Offset: 0x298, Size: 0x8]
	FName CurrentCharacterState;//[Offset: 0x2a0, Size: 0x8]
	float SyncedTimestamp;//[Offset: 0x2a8, Size: 0x4]
	float DestinyValue;//[Offset: 0x2ac, Size: 0x4]
	float WarmScore;//[Offset: 0x2b0, Size: 0x4]
	float AIAllocMarkValue;//[Offset: 0x2b4, Size: 0x4]
	int LeaderCount;//[Offset: 0x2b8, Size: 0x4]
	uint64 LastGameLeaderUID;//[Offset: 0x2c0, Size: 0x8]
	uint64[] LastGameTeammatesUID;//[Offset: 0x2c8, Size: 0x10]
	uint64 LastGameBattleID;//[Offset: 0x2d8, Size: 0x8]
	float RatingScore;//[Offset: 0x2e0, Size: 0x4]
	bool bDoPlayerUseAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	float MaxRankingScore;//[Offset: 0x2e8, Size: 0x4]
	uint32 ObserverFlags;//[Offset: 0x2ec, Size: 0x4]
	uint64 WatchPlayerKey;//[Offset: 0x2f0, Size: 0x8]
	bool bIsHawkEyeSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	int HawkEyeSpectateMaxMatchCount;//[Offset: 0x2fc, Size: 0x4]
	int HawkEyeSpectateUsedMatchCount;//[Offset: 0x300, Size: 0x4]
	byte PlatformGender;//[Offset: 0x304, Size: 0x1]
	int planeAvatarId;//[Offset: 0x308, Size: 0x4]
	int DyeDebugFlag;//[Offset: 0x30c, Size: 0x4]
	FString Nation;//[Offset: 0x310, Size: 0x10]
	int MatchLabel;//[Offset: 0x320, Size: 0x4]
	int AnchorPlatColorID;//[Offset: 0x324, Size: 0x4]
	int AnchorPlatResID;//[Offset: 0x328, Size: 0x4]
	bool OnlyTeammateSeeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	int64 LastGameResultTime;//[Offset: 0x330, Size: 0x8]
	int64 CorpsID;//[Offset: 0x338, Size: 0x8]
	int64 CampID;//[Offset: 0x340, Size: 0x8]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 0x1]
	FString IpCountryStr;//[Offset: 0x350, Size: 0x10]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	int VeteranRecruitIndex;//[Offset: 0x364, Size: 0x4]
	int MatchStrategyLabel;//[Offset: 0x368, Size: 0x4]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0x370, Size: 0x10]
	int LandId;//[Offset: 0x380, Size: 0x4]
	int FollowType;//[Offset: 0x384, Size: 0x4]
	uint64 FollowUID;//[Offset: 0x388, Size: 0x8]
	uint32 TaskSyncToDsTs;//[Offset: 0x390, Size: 0x4]
	uint64 LuckmateUID;//[Offset: 0x398, Size: 0x8]
	int CollectedEventType;//[Offset: 0x3a0, Size: 0x4]
	FString GameAPPIDFromDS;//[Offset: 0x3a8, Size: 0x10]
	float RealHiddenScore;//[Offset: 0x3b8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0, Size: 0x4]
	FString Reason;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AchievementPrize
	int MedalAvatarID;//[Offset: 0x0, Size: 0x4]
	int NotifyTitleAvatarID;//[Offset: 0x4, Size: 0x4]
	int ScoreBoardAvatarID;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIControllerCachedData
	STExtraBaseCharacter* ControlledPawn;//[Offset: 0x0, Size: 0x8]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool TargetIsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	STExtraPlayerController* CacheNearPlayerController;//[Offset: 0x30, Size: 0x8]
	STExtraBaseCharacter* CacheDeliveryActingTarget;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AIShootMissInfo
	float MissMaxRangeTime;//[Offset: 0x0, Size: 0x4]
	float MissMinRangeTime;//[Offset: 0x4, Size: 0x4]
	float MissCDTime;//[Offset: 0x8, Size: 0x4]
	float MissResetTime;//[Offset: 0xc, Size: 0x4]
	float MissResetConfig;//[Offset: 0x10, Size: 0x4]
	bool bCanMissShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AIConditionHearingComponent.ActorComponent.Object
	SoundShieldForAI* CurrentSoundShield;//[Offset: 0x110, Size: 0x8]
	bool CanHearingInBox(Actor* TargetActor, Actor* SourceActor);// 0x5d3bce8
<----------Generated by SSpawner v1.0.4---------->


Class: SoundShieldForAI.Actor.Object
	Actor*[] PlayerPawns;//[Offset: 0x3f8, Size: 0x10]
	Actor*[] AIPawns;//[Offset: 0x408, Size: 0x10]
	int MaxCacheNum;//[Offset: 0x418, Size: 0x4]
	void OnPlayerPawnsOverlap(Actor* InActor, bool bEnter);// 0x6092810
	void OnAIPawnsOverlap(Actor* InActor, bool bEnter);// 0x6092750
	bool InSameSoundShield(Actor* InAIPawn, Actor* InPlayerPawn);// 0x6092680
<----------Generated by SSpawner v1.0.4---------->


Class: AIParachuteJumpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	Vector FocusTargetPos;//[Offset: 0x120, Size: 0xc]
	enum JumpStrategy;//[Offset: 0x12c, Size: 0x1]
	float JumpTime;//[Offset: 0x130, Size: 0x4]
	bool bUseSpecificInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	bool bOpenParachuteNotClearFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 0x1]
	bool bLandingPhaseSetControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 0x1]
	bool bOpenDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x137, Size: 0x1]
	float TargetDistanceThresholdForInput;//[Offset: 0x138, Size: 0x4]
	float MoveForwardInputValue;//[Offset: 0x13c, Size: 0x4]
	float MoveRightInputValue;//[Offset: 0x140, Size: 0x4]
	float ClearFocusHeight;//[Offset: 0x144, Size: 0x4]
	float OpenParachuteHeight;//[Offset: 0x148, Size: 0x4]
	FString TargetCityName;//[Offset: 0x150, Size: 0x10]
	float TargetDistance2Route;//[Offset: 0x160, Size: 0x4]
	int CityLevel;//[Offset: 0x164, Size: 0x4]
	float Deviation;//[Offset: 0x168, Size: 0x4]
	int[] Groups;//[Offset: 0x170, Size: 0x10]
	int AIStyle;//[Offset: 0x180, Size: 0x4]
	float ChangeTargetHeight;//[Offset: 0x188, Size: 0x4]
	Vector ChangeTargetPos;//[Offset: 0x18c, Size: 0xc]
	bool bTargetPosChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	int PlayerNumThresholdForChangeTarget;//[Offset: 0x19c, Size: 0x4]
	float AroundPlayerRange;//[Offset: 0x1a0, Size: 0x4]
	int CheckChangeTargetRemainTimes;//[Offset: 0x1a4, Size: 0x4]
	float TickShowDebugInfoDeltaTime;//[Offset: 0x1a8, Size: 0x4]
	float CurTickShowDebugInfoTime;//[Offset: 0x1ac, Size: 0x4]
	Color DebugLineColor;//[Offset: 0x1b0, Size: 0x4]
	float JumpTimePassed;//[Offset: 0x1b4, Size: 0x4]
	STExtraPlayerCharacter* FollowTarget;//[Offset: 0x1b8, Size: 0x8]
	float FollowDelayTime;//[Offset: 0x1c0, Size: 0x4]
	float ForwardDelayTime;//[Offset: 0x1c4, Size: 0x4]
	bool IsSmoothFlight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	float TurnVelocity;//[Offset: 0x1cc, Size: 0x4]
	bool JumpFromFixedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	Vector JumpPoint;//[Offset: 0x1d4, Size: 0xc]
	bool bKeepForwardInOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: AIHoleUpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	float OccludeBuildingActorByRemoveTime;//[Offset: 0x160, Size: 0x4]
	float OccludeBuildingActorInvalidDis;//[Offset: 0x164, Size: 0x4]
	float InvalidOccludeBuildingPosAgainCheckCD;//[Offset: 0x168, Size: 0x4]
	float OccludePosInvalidDis;//[Offset: 0x16c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIBuildingComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	<int,int> CanBuildActorNums;//[Offset: 0x140, Size: 0x50]
	float TotalCD;//[Offset: 0x190, Size: 0x4]
	float SoloCD;//[Offset: 0x194, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIFeatureInfo
	float HP;//[Offset: 0x0, Size: 0x4]
	float DamageScale;//[Offset: 0x4, Size: 0x4]
	float TakeDamageScale;//[Offset: 0x8, Size: 0x4]
	int DropID;//[Offset: 0xc, Size: 0x4]
	float[] HitRates;//[Offset: 0x10, Size: 0x10]
	<int,float> ThrownUsingProbability;//[Offset: 0x20, Size: 0x50]
	<float,float> EnemyHpHitRateMap;//[Offset: 0x70, Size: 0x50]
	<float,float> EnemyHpDamageRateMap;//[Offset: 0xc0, Size: 0x50]
	<float,float> ReviveEnemyHpDamageRateMap;//[Offset: 0x110, Size: 0x50]
	bool bNeedNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	bool bHasDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 0x1]
	Vector2D MissOnPurposeTimeRange;//[Offset: 0x164, Size: 0x8]
	Vector2D OutViewMissOnPurposeTimeRange;//[Offset: 0x16c, Size: 0x8]
	float MissOnPurposeCD;//[Offset: 0x174, Size: 0x4]
	float MissOnPurposeResetTime;//[Offset: 0x178, Size: 0x4]
	float MissOnPurposeHitRate;//[Offset: 0x17c, Size: 0x4]
	float NearDeathTargetStopFireTime;//[Offset: 0x180, Size: 0x4]
	float NearDeathTargetFixedHitRate;//[Offset: 0x184, Size: 0x4]
	bool bDoMissOnPurposeWhenNearDeathToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	float NearDeathTargetFixedDamageRate;//[Offset: 0x18c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIEquipSpawnItem
	enum itemType;//[Offset: 0x0, Size: 0x1]
	int ItemSpecificID;//[Offset: 0x4, Size: 0x4]
	int Count;//[Offset: 0x8, Size: 0x4]
	int MaxCount;//[Offset: 0xc, Size: 0x4]
	Vector2D ExtraConfigValue;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AIActingItem
	float StartSeconds;//[Offset: 0x0, Size: 0x4]
	float EndSeconds;//[Offset: 0x4, Size: 0x4]
	float DeadPercent;//[Offset: 0x8, Size: 0x4]
	int PlayerNumScale;//[Offset: 0xc, Size: 0x4]
	bool IsFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int[] WeaponIdList;//[Offset: 0x18, Size: 0x10]
	int FinalRestBotNum;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIBeginAttackEachOther
	float BeginAttackEachOtherTime;//[Offset: 0x0, Size: 0x4]
	float RightRatingSection;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DeliveryRatingConfig
	float DeliveryInterval;//[Offset: 0x0, Size: 0x4]
	float RightRatingSection;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIDeliveryAreaLimit
	Vector TopLeftVec;//[Offset: 0x0, Size: 0xc]
	Vector BottomRightVec;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: DeliveryCondition
	DeliveryConditionCheck* CheckCnd;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DeliveryConditionCheck.Object
	STExtraBaseCharacter* TargetPawn;//[Offset: 0x28, Size: 0x8]
	bool CheckDeliveryForBP(STExtraBaseCharacter* InTargerPawn);// 0x5e810d8
	bool CheckDelivery(STExtraBaseCharacter* InTargetPawn);// 0x5e81040
<----------Generated by SSpawner v1.0.4---------->


Class: SpecialAIDeliveryNumContainer
	int TeammateNum;//[Offset: 0x0, Size: 0x4]
	SpecialAIDeliveryNum[] DeliverNumCfg;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SpecialAIDeliveryNum
	int DeliveryNum;//[Offset: 0x0, Size: 0x4]
	int Weight;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: HotValueAttenuation
	float Corner;//[Offset: 0x0, Size: 0x4]
	float Center;//[Offset: 0x4, Size: 0x4]
	float UpDown;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: HotValueScale
	float Corner;//[Offset: 0x0, Size: 0x4]
	float Center;//[Offset: 0x4, Size: 0x4]
	float UpDown;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 0x4]
	float SpecialRatingDamageScale;//[Offset: 0x4, Size: 0x4]
	float FiringAccuracyRadius;//[Offset: 0x8, Size: 0x4]
	float SpecialFiringAccuracyRadius;//[Offset: 0xc, Size: 0x4]
	int AIFeedLimit;//[Offset: 0x10, Size: 0x4]
	float SectionRightValue;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIAttackAIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 0x4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 0x4]
	float SectionRightValue;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DeliveryPlayerConfig
	DeliveryItem[] DeliveryItem;//[Offset: 0x0, Size: 0x10]
	float RightRatingSection;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DeliveryItem
	int percent;//[Offset: 0x0, Size: 0x4]
	int DeliveryNum;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIAttackAnimalRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 0x4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 0x4]
	float SectionRightValue;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AIActingBPAssit.Object
	bool IsSmokeGrenadeActive(Actor* pSmokeGrenade);// 0x70644c4
	bool IsGrenadeHasBeenThrowedOut(Actor* pGrenade);// 0x70644c4
	float GetRealTimeSeconds();// 0x5d31cc0
<----------Generated by SSpawner v1.0.4---------->


Class: DSAIDropInfo
	uint64 BattleID;//[Offset: 0x0, Size: 0x8]
	int nts;//[Offset: 0x8, Size: 0x4]
	DSAIDropItem[] ais;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DSAIDropItem
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	int Time;//[Offset: 0x8, Size: 0x4]
	int8 hlv;//[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AIEquipSpawnGroupDataBase
	float RightTime;//[Offset: 0x0, Size: 0x4]
	AIEquipSpawnGroup[] AIEquipSpawnGroupList;//[Offset: 0x8, Size: 0x10]
	AIEquipSpawnItem[] AIMustPickUpItemList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AIEquipSpawnGroup
	AIEquipSpawnItem[] Item;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 0x4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 0x4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 0x4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 0x4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float MaxDiffServerClient;//[Offset: 0x14, Size: 0x4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bVerifyImpactPointDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 0x4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 0x4]
	float VerifyWeaponFireInfoTimeTorelate;//[Offset: 0x24, Size: 0x4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x2c, Size: 0x4]
	bool bVerifyMuzzleBlockTail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bVerifyBulletPosReverseDirBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	float VerifyTailExtend;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 0x10]
	FString AttrModifyItemName;//[Offset: 0x10, Size: 0x10]
	FString AttrName;//[Offset: 0x20, Size: 0x10]
	int AttrId;//[Offset: 0x30, Size: 0x4]
	int CompareId;//[Offset: 0x34, Size: 0x4]
	enum ModifierOp;//[Offset: 0x38, Size: 0x1]
	float ModifierValue;//[Offset: 0x3c, Size: 0x4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 0x8]
	float FinalAddValue;//[Offset: 0x8, Size: 0x4]
	uint32 CModifyUid;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WarPlayerStateScore
	int Rank;//[Offset: 0x0, Size: 0x4]
	int Score;//[Offset: 0x4, Size: 0x4]
	enum ScoreChangeReason;//[Offset: 0x8, Size: 0x1]
	int ScoreChangeCauserPlayerID;//[Offset: 0xc, Size: 0x4]
	int HighestScore;//[Offset: 0x10, Size: 0x4]
	int FollowScore;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AirAttackOrder
	uint16 waveIndex;//[Offset: 0x4, Size: 0x2]
	float FlightHeight;//[Offset: 0x8, Size: 0x4]
	float SeaLevelHeight;//[Offset: 0xc, Size: 0x4]
	uint32[] bombsInterval;//[Offset: 0x10, Size: 0x10]
	uint16 BombBaseDamage;//[Offset: 0x20, Size: 0x2]
	uint16 BombMinDamage;//[Offset: 0x22, Size: 0x2]
	Vector2D[] bombsPosition2D;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleMoveFlow
	uint64 RoleID;//[Offset: 0x0, Size: 0x8]
	FString OpenID;//[Offset: 0x8, Size: 0x10]
	int8 PlatID;//[Offset: 0x18, Size: 0x1]
	uint16 AreaID;//[Offset: 0x1a, Size: 0x2]
	FString ZoneID;//[Offset: 0x20, Size: 0x10]
	VehicleMovePoint[] PointList;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleMovePoint
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	int8 Type;//[Offset: 0x4, Size: 0x1]
	int X;//[Offset: 0x8, Size: 0x4]
	int Y;//[Offset: 0xc, Size: 0x4]
	int Z;//[Offset: 0x10, Size: 0x4]
	int Speed;//[Offset: 0x14, Size: 0x4]
	int8 VehicleN2oUse;//[Offset: 0x18, Size: 0x1]
	int8 VehicleCarPetUse;//[Offset: 0x19, Size: 0x1]
	int VehicleMoveDistance;//[Offset: 0x1c, Size: 0x4]
	int TimeStamp;//[Offset: 0x20, Size: 0x4]
	int8 RoleType;//[Offset: 0x24, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerPositionFlow
	PlayBaseInfo PlayerBaseInfo;//[Offset: 0x0, Size: 0x30]
	int FirstPointTimestamp;//[Offset: 0x30, Size: 0x4]
	IntPosition2D[] PointList;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayBaseInfo
	uint64 RoleID;//[Offset: 0x0, Size: 0x8]
	FString OpenID;//[Offset: 0x8, Size: 0x10]
	int8 PlatID;//[Offset: 0x18, Size: 0x1]
	uint16 AreaID;//[Offset: 0x1a, Size: 0x2]
	FString ZoneID;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: IntPosition2D
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: FatalDamageParameter
	FatalDamageStringParameter String;//[Offset: 0x0, Size: 0x70]
	int DamageType;//[Offset: 0x70, Size: 0x4]
	int AdditionalParam;//[Offset: 0x74, Size: 0x4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	int ResultHealthStatus;//[Offset: 0x7c, Size: 0x4]
	int Relationship;//[Offset: 0x80, Size: 0x4]
	int PreviousHealthStatus;//[Offset: 0x84, Size: 0x4]
	int realKillerNewKillNum;//[Offset: 0x88, Size: 0x4]
	uint32 CauserKey;//[Offset: 0x8c, Size: 0x4]
	uint32 VictimKey;//[Offset: 0x90, Size: 0x4]
	int causerAnchorPlatformResID;//[Offset: 0x94, Size: 0x4]
	int causerAnchorPlatformColorID;//[Offset: 0x98, Size: 0x4]
	int victimAnchorPlatformResID;//[Offset: 0x9c, Size: 0x4]
	int victimAnchorPlatformColorID;//[Offset: 0xa0, Size: 0x4]
	int realKillerAnchorPlatformResID;//[Offset: 0xa4, Size: 0x4]
	int realKillerAnchorPlatformColorID;//[Offset: 0xa8, Size: 0x4]
	int CauserWeaponAvatarID;//[Offset: 0xac, Size: 0x4]
	int CauserClothAvatarID;//[Offset: 0xb0, Size: 0x4]
	int CauserType;//[Offset: 0xb4, Size: 0x4]
	int VictimType;//[Offset: 0xb8, Size: 0x4]
	byte[] ExpandDataContent;//[Offset: 0xc0, Size: 0x10]
	int AssistNum;//[Offset: 0xd0, Size: 0x4]
	bool isCausedByDevliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: FatalDamageStringParameter
	FString CauserName;//[Offset: 0x0, Size: 0x10]
	FString VictimName;//[Offset: 0x10, Size: 0x10]
	FString FuzzyCauserName;//[Offset: 0x20, Size: 0x10]
	FString FuzzyVictimName;//[Offset: 0x30, Size: 0x10]
	FString RealKillerName;//[Offset: 0x40, Size: 0x10]
	FString CauserNation;//[Offset: 0x50, Size: 0x10]
	FString VictimNation;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: EmotePlayer
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	uint32 FollowPlayer;//[Offset: 0x4, Size: 0x4]
	int EmoteId;//[Offset: 0x8, Size: 0x4]
	Vector pos;//[Offset: 0xc, Size: 0xc]
	float Time;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponHitDisanceSectionArray
	int[] SectionArray;//[Offset: 0x0, Size: 0x10]
	enum CaculateType;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SIslandInactiveClearComponent.ActorComponent.Object
	float ComponentTickInterval;//[Offset: 0x110, Size: 0x4]
	float InactiveCheckGap;//[Offset: 0x114, Size: 0x4]
	float InactiveTimeForTipPreTime;//[Offset: 0x11c, Size: 0x4]
	float PreActiveTime;//[Offset: 0x120, Size: 0x4]
	float ClientSendActiveRPCGap;//[Offset: 0x128, Size: 0x4]
	bool bIsClientActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	enum SIslandActiveType;//[Offset: 0x12d, Size: 0x1]
	Vector PrePawnLoc;//[Offset: 0x130, Size: 0xc]
	Rotator PreControllerRotation;//[Offset: 0x13c, Size: 0xc]
	delegate OnInactiveTipInSocialIslandDelegate;//[Offset: 0x148, Size: 0x10]
	void ServerMarkPlayerActive();// 0x6072644
	void OnInactiveTipInSocialIslandDelegate__DelegateSignature(float RemainTime);// 0x70644c4
	void MarkPlayerActive();// 0x6072630
	void KickOutPlayer();// 0x607261c
	void ClientShowKickOutTip(float RemainTime);// 0x6072598
	void ClientCachedActiveState();// 0x6072584
	bool CheckForMovement();// 0x607254c
	void CheckForInactive();// 0x6072530
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterParachuteComponent.LuaInstancedActorComponent.ActorComponent.Object
	float CurrentFallSpeed;//[Offset: 0x1d4, Size: 0x4]
	float CurrentDiveRate;//[Offset: 0x1e0, Size: 0x4]
	float FreeFall_InputForwardTriggerThreshold;//[Offset: 0x1f4, Size: 0x4]
	float FreeFall_InputRightTriggerThreshold;//[Offset: 0x1f8, Size: 0x4]
	float FreeFall_AcceFall;//[Offset: 0x1fc, Size: 0x4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0x200, Size: 0x4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0x204, Size: 0x4]
	float FreeFall_AcceForward;//[Offset: 0x208, Size: 0x4]
	float FreeFall_MinForwardSpeed;//[Offset: 0x20c, Size: 0x4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x210, Size: 0x4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x214, Size: 0x4]
	float FreeFall_AcceRight;//[Offset: 0x218, Size: 0x4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x21c, Size: 0x4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x220, Size: 0x4]
	float FreeFall_MinPitchForwardAngle;//[Offset: 0x224, Size: 0x4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x228, Size: 0x4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x22c, Size: 0x4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x230, Size: 0x4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x234, Size: 0x4]
	float FreeFall_MinDiveAngle;//[Offset: 0x238, Size: 0x4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x23c, Size: 0x4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x240, Size: 0x4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 0x1]
	float Opened_AcceFall;//[Offset: 0x248, Size: 0x4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x24c, Size: 0x4]
	float Opened_AcceForward;//[Offset: 0x250, Size: 0x4]
	float Opened_MaxForwardSpeed;//[Offset: 0x254, Size: 0x4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x258, Size: 0x4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x25c, Size: 0x4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x260, Size: 0x4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x264, Size: 0x4]
	float Opened_AcceRight;//[Offset: 0x268, Size: 0x4]
	float Opened_MaxRightSpeed;//[Offset: 0x26c, Size: 0x4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x270, Size: 0x4]
	float Opened_MaxRollAngle;//[Offset: 0x274, Size: 0x4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x278, Size: 0x4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x27c, Size: 0x4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x280, Size: 0x4]
	float Opened_RotationInterpSpeed;//[Offset: 0x284, Size: 0x4]
	float ReliableRPCInterval;//[Offset: 0x288, Size: 0x4]
	float UseNewVerifyHeightInParachuteOpen;//[Offset: 0x28c, Size: 0x4]
	float OpenRealMoveAndWallCheckHight;//[Offset: 0x290, Size: 0x4]
	Vector Launch_InitSpeed;//[Offset: 0x2a4, Size: 0xc]
	float Launch_Time;//[Offset: 0x2b0, Size: 0x4]
	Vector Launch_SpeedRandomDelta;//[Offset: 0x2b4, Size: 0xc]
	Vector Launch_Accel;//[Offset: 0x2c0, Size: 0xc]
	bool Launch_AutoExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	float Launch_YawRandomDelta;//[Offset: 0x2d0, Size: 0x4]
	float Launch_WingUpAngle;//[Offset: 0x2d4, Size: 0x4]
	float Launch_WingForwardDecreaseRate;//[Offset: 0x2d8, Size: 0x4]
	float Launch_WingForwardDecreaseConstRate;//[Offset: 0x2dc, Size: 0x4]
	float Launch_WingForwardEnterFreeFallSpeed;//[Offset: 0x2e0, Size: 0x4]
	float Launch_WingForwardToUpRate;//[Offset: 0x2e4, Size: 0x4]
	float Launch_WingUpDampingRate;//[Offset: 0x2e8, Size: 0x4]
	float Launch_WingUpDampingConstRate;//[Offset: 0x2ec, Size: 0x4]
	float Launch_MaxWingUpSpeed;//[Offset: 0x2f0, Size: 0x4]
	float Launch_WingUpDropPlus;//[Offset: 0x2f4, Size: 0x4]
	delegate OnInitLaunch;//[Offset: 0x2f8, Size: 0x10]
	delegate OnResetLaunch;//[Offset: 0x308, Size: 0x10]
	delegate OnChangeMovementModeWhenLaunch;//[Offset: 0x318, Size: 0x10]
	delegate OnLanded;//[Offset: 0x328, Size: 0x10]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x338, Size: 0x4]
	float AllowMaxDistanceSqInParachuteOpen;//[Offset: 0x33c, Size: 0x4]
	float AllowMaxVelocitySqAtServer;//[Offset: 0x340, Size: 0x4]
	float MaxZAllowDistance;//[Offset: 0x344, Size: 0x4]
	float MaxZAllowDistanceNew;//[Offset: 0x348, Size: 0x4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	float FollowerDist;//[Offset: 0x370, Size: 0x4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x374, Size: 0x4]
	bool bLuaSetCheckClientPosVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	bool bGmSetUseServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1]
	bool bGmSetUseMaxForwardInputValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 0x1]
	bool bEanbleRadiouBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	bool bEanbleRadiouBlurDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1]
	MaterialInterface* RadiouBlurMat;//[Offset: 0x3f0, Size: 0x28]
	MaterialInterface* RadiouBlurMatCache;//[Offset: 0x418, Size: 0x8]
	float DistanceToJumpPlaneLoc;//[Offset: 0x424, Size: 0x4]
	float AutoParachuteStopMoveForwardDistance;//[Offset: 0x428, Size: 0x4]
	float AutoParachuteMoveForwardRate;//[Offset: 0x42c, Size: 0x4]
	float AutoParachuteOpenMoveForwardRate;//[Offset: 0x430, Size: 0x4]
	float AutoParachutePitchOffset;//[Offset: 0x434, Size: 0x4]
	float ParachuteContinuTime;//[Offset: 0x464, Size: 0x4]
	float ParachuteContinuTimeDsMore;//[Offset: 0x468, Size: 0x4]
	float ParachuteContinuStartTime;//[Offset: 0x46c, Size: 0x4]
	bool ParachuteStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	float CanbeMoreOpened_MaxForwardSpeed;//[Offset: 0x474, Size: 0x4]
	int ParachuteMoveListLength;//[Offset: 0x478, Size: 0x4]
	float AdjustParachuteTimeGap;//[Offset: 0x47c, Size: 0x4]
	int ErrorMoveTimeSendMaxTime;//[Offset: 0x480, Size: 0x4]
	ParachuteMoveState[] ParachuteMoveList;//[Offset: 0x488, Size: 0x10]
	bool VerifyClientTimeStamp(float TimeStamp, out const Vector Position, out const Vector Velocity);// 0x5e3935c
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x5e391e8
	void UpdateRadiouBlurState(float DeltaTime, float ThrottleInput, float SteerInput, enum State);// 0x5e390bc
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x5e38f48
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x5e38e58
	void UpdateLaunchRotation(float InputForward, float InputRight, float DeltaTime);// 0x5e38d68
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x5e38c3c
	void TriggerInputUtil(float InputForward, float InputRight, out int InputForwardTriggered, out int InputRightTriggered);// 0x5e38ae4
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator CameraRotation);// 0x5e389ac
	void StopParachute();// 0x5e38998
	void StartParachute();// 0x5e38984
	void SetParachuteVelocity(out const Vector NewVelocity);// 0x5e388fc
	void SetAutoParachuteLocation(out const Vector Location);// 0x5e38874
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x5e387f0
	void SendServerMoveAckToClientInternal(float TimeStamp, bool bAckGoodMove, out const Vector Position, out const Rotator Rotation, out const Vector Velocity);// 0x5e38640
	void SendClientMoveToServerAccurateInternal(float TimeStamp, float ThrottleInput, float SteerInput, float GlidingSpeed, enum State, Rotator CameraRotation, out const Vector Position, out const Rotator Rotation, out const Vector Velocity);// 0x5e383b8
	void ResetVelocity();// 0x5e383a4
	void RemoveRadiouBlur();// 0x5e38390
	void PostNetReceiveNewState();// 0x5e3837c
	Vector ParachuteMoveAfterVelocity(STExtraBaseCharacter* Character, float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation, out const Rotator CurrentRotation, out const Vector CurrentVelocity, out const Vector CurrentPosition, float GlidingSpeed, out Vector OutCurrentVelocity, out float OutCurrentGlidingSpeed);// 0x5e37fe8
	Rotator ParachuteMoveAfterRotation(STExtraBaseCharacter* Character, float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation, out const Rotator CurrentRotation, out const Vector CurrentVelocity);// 0x5e37d84
	Vector ParachuteMoveAfterPosition(STExtraBaseCharacter* Character, float DeltaTime, out const Vector CurrentVelocity, out const Vector CurrentPosition);// 0x5e37c24
	Vector ParachuteGetAfterPosition(STExtraBaseCharacter* Character, float DeltaTime, out const Vector CurrentVelocity, out const Vector CurrentPosition);// 0x5e37ac4
	void OnPreReconnectOnServer();// 0x5e37ab0
	void OnAsyncLoadRadiouBlurDone();// 0x5e37a9c
	static bool IsParachuteWindEnable();// 0x5e37a64
	bool IsAutoParachutePathPlanningEnable();// 0x5e37a2c
	bool IsAutoParachuteEnable();// 0x5e379f4
	void InvalidateAdjustFollowerLocation();// 0x5e379e0
	void InitRadiouBlurMat();// 0x5e379cc
	void InitParachuteContinuStart();// 0x5e379b8
	void GMParachuteAddServerPos(float X, float Y, float Z);// 0x5e378c8
	float GetReplicatedRightInput();// 0x5e37894
	float GetReplicatedForwardInput();// 0x5e37860
	Vector GetParachuteVelocity();// 0x5e37828
	Vector GetLaunchInitVelocity();// 0x5e377e8
	Vector GetCurVelocity();// 0x5e377b0
	float GetAutoParachuteMoveForwardRate();// 0x5e3777c
	Vector GetAutoParachuteLocation();// 0x5e37744
	void EnableAutoParachutePathPlanning(bool bEnable);// 0x5e376c0
	void EnableAutoParachute(bool bEnable);// 0x5e3763c
	void DebugParachuteDetail(FString Caller, out const Vector OldLocation, out const Rotator OldRotation, float DeltaSeconds);// 0x5e374b4
	void ClearParachuteStatusCache();// 0x5e374a0
	void CharacterSetParachuteState(enum State);// 0x5e3741c
	Vector CalWingUpVelocityUtil(Vector InCurVelocity, Rotator CurrentRotation, float InputForward, float InputRight, float DeltaTime, out Vector OutCurrentVelocity);// 0x5e37254
	Vector CalWingUpVelocity(float InputForward, float InputRight, float DeltaTime);// 0x5e37148
	Vector CalParachuteOpenedVelocityUtil(STExtraBaseCharacter* Character, Vector InCurVelocity, Rotator CurrentRotation, float InputForward, float InputRight, float DeltaTime, float GlidingSpeed, out Vector OutCurrentVelocity, out float OutCurrentGlidingSpeed);// 0x5e36eb8
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x5e36db4
	Vector CalLaunchVelocityUtil(Vector InCurVelocity, float InputForward, float InputRight, float DeltaTime, out Vector OutCurrentVelocity);// 0x5e36c2c
	Vector CalLaunchVelocity(float InputForward, float InputRight, float DeltaTime);// 0x5e36b20
	Vector CalFreeFallVelocityUtil(Vector InCurVelocity, Rotator CurrentRotation, float InputForward, float InputRight, float DeltaTime, out Vector OutCurrentVelocity);// 0x5e36958
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x5e36854
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x5e3671c
	void AdjustFollowerLocation();// 0x5e36708
	void AdjustClientParachuteTime(float NeedAdjustTimeconst, out const Vector Position, out const Rotator Rotation, out const Vector Velocity);// 0x5e3659c
	void AddRadiouBlur(float InWeight);// 0x5e36520
<----------Generated by SSpawner v1.0.4---------->


Class: ParachuteMoveState
	float TimeStamp;//[Offset: 0x0, Size: 0x4]
	float ThrottleInput;//[Offset: 0x4, Size: 0x4]
	float SteerInput;//[Offset: 0x8, Size: 0x4]
	Rotator CameraRotation;//[Offset: 0xc, Size: 0xc]
	Vector Position;//[Offset: 0x18, Size: 0xc]
	Vector Velocity;//[Offset: 0x24, Size: 0xc]
	Rotator Rotation;//[Offset: 0x30, Size: 0xc]
	enum State;//[Offset: 0x3c, Size: 0x1]
	float GlidingSpeed;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ObservingReplay.GameReplay.Object
	delegate OnRequestStreamsComplete;//[Offset: 0x230, Size: 0x10]
	delegate OnKillInfoDownloadComplete;//[Offset: 0x240, Size: 0x10]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x250, Size: 0x8]
	<FString,uint32> ReportSequenceMap;//[Offset: 0x270, Size: 0x50]
	FString ReplayServerURL;//[Offset: 0x2e0, Size: 0x10]
	byte TlogBatchVersion;//[Offset: 0x2f0, Size: 0x1]
	int64 TlogBatchMaxSize;//[Offset: 0x2f8, Size: 0x8]
	uint32 SendTlogInterval;//[Offset: 0x308, Size: 0x4]
	RecordTlogBatch RecordTlogBatch;//[Offset: 0x310, Size: 0x18]
	void RequestReplaysFromServer(FString URLString);// 0x5fb1498
	void ClearStreams();// 0x5fb1484
<----------Generated by SSpawner v1.0.4---------->


Class: GameReplay.Object
	UserWidget* GMUI;//[Offset: 0x40, Size: 0x8]
	class UserWidget* GMUIClass;//[Offset: 0x48, Size: 0x28]
	enum ReplayType;//[Offset: 0x70, Size: 0x1]
	delegate OnReplayReadyInitUIDelegate;//[Offset: 0x78, Size: 0x10]
	delegate OnReplayGotoTimeResetUIDelegate;//[Offset: 0x88, Size: 0x10]
	delegate OnReplayResetViewTargetDelegate;//[Offset: 0x98, Size: 0x10]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	STExtraPlayerController* PlayerController;//[Offset: 0x168, Size: 0x8]
	KillInfoRecordData[] RecordKillInfoDataArray;//[Offset: 0x170, Size: 0x10]
	WeaponRecordDataForReplay[] RecordWeaponInfoDataArray;//[Offset: 0x180, Size: 0x10]
	MLAIInfoRecordData[] RecordMLAIInfoDataArray;//[Offset: 0x1e8, Size: 0x10]
	PlayerEventInfoRecordData[] RecordPlayerEventInfoDataArray;//[Offset: 0x1f8, Size: 0x10]
	int64 ModInfoBatchMaxSize;//[Offset: 0x208, Size: 0x8]
	byte[] ModBinaryData;//[Offset: 0x210, Size: 0x10]
	bool StopRecordingReplay();// 0x5f04238
	bool StopPlay();// 0x5f041f8
	bool StartRecordingReplay();// 0x5f041b8
	void SetSpectatorName(FString SpectatorName, bool bGM);// 0x5f04040
	bool SetReplayTimeDilation(float InDilation);// 0x5f03fb0
	void SetReplayStreamer(FString InReplayStreamer);// 0x5f03e3c
	void SetIsGMSpectator(bool bGM);// 0x5f03dbc
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x5f03d40
	void SetCanChangeViewTarget(bool bCanChange);// 0x5f03cbc
	void ResetPlaybackData();// 0x5f03ca8
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x5f03c2c
	void ReplayOnWeaponChanged();// 0x5f03c18
	void ReplayOnSimulatedWeaponChanged();// 0x5f03c04
	void ReplayOnBulletNumChanged();// 0x5f03bf0
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x5f03b74
	bool PlayReplay();// 0x5f03b34
	bool PauseReplay(bool bPaused);// 0x5f03a94
	void LeaveFreeViewMode();// 0x5f03a78
	bool IsInRecordState();// 0x5f03a40
	bool IsInPlayState();// 0x5f03a08
	bool IsGMSpectator();// 0x5f039ec
	bool IsFastForwarding();// 0x5f039b4
	bool HaveRecordingData();// 0x5f03974
	void HandleChangeStatePC();// 0x5f03960
	STExtraBaseCharacter* GetViewCharacter();// 0x5f0392c
	SingleStrategyRecordFullInfo[] GetStrategyRecordArray(FString UID, int InStrategyTypeInReplay, bool bIsSort);// 0x5f03790
	FString GetSpectatorName();// 0x5f036ec
	float GetReplayRecordStartTime();// 0x5f036b8
	PlayerCameraManager* GetPlayerCameraManager();// 0x5f03684
	float GetCurrentReplayTotalTimeInSeconds();// 0x5f03650
	float GetCurrentReplayCurTimeInSeconds();// 0x5f0361c
	bool GetCanChangeViewTarget();// 0x5f035e4
	void EnterFreeViewMode();// 0x5f035c8
	void CreateGMUIIfNotExists();// 0x5f035b4
	void AddRecordPlayerEventInfo(FString PlayerUID, const uint32 EventType);// 0x5f034cc
	void AddRecordMLAIInfo(uint32 InPlayerKey, uint64 InUID, byte InType, out const <FString,FString> InAdditionalData);// 0x5f03330
<----------Generated by SSpawner v1.0.4---------->


Class: KillInfoRecordData
	FString Killer;//[Offset: 0x0, Size: 0x10]
	FString Victim;//[Offset: 0x10, Size: 0x10]
	bool bKillDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	uint64 KillTimeStampDemoTime;//[Offset: 0x28, Size: 0x8]
	uint64 KillTimeStampGameTime;//[Offset: 0x30, Size: 0x8]
	FString SafeLabel;//[Offset: 0x38, Size: 0x10]
	int SafeParam1;//[Offset: 0x48, Size: 0x4]
	int SafeParam2;//[Offset: 0x4c, Size: 0x4]
	float RecordTimestamp;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponRecordDataForReplay
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	byte HeadShoot;//[Offset: 0x4, Size: 0x1]
	byte LimbsShoot;//[Offset: 0x5, Size: 0x1]
	byte BodyShoot;//[Offset: 0x6, Size: 0x1]
	byte HandShoot;//[Offset: 0x7, Size: 0x1]
	byte FootShoot;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MLAIInfoRecordData
	float MLAITimeStamp;//[Offset: 0x0, Size: 0x4]
	uint32 PlayerKey;//[Offset: 0x4, Size: 0x4]
	uint64 UID;//[Offset: 0x8, Size: 0x8]
	byte Type;//[Offset: 0x10, Size: 0x1]
	<FString,FString> AdditionalData;//[Offset: 0x18, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerEventInfoRecordData
	FString PlayerUID;//[Offset: 0x0, Size: 0x10]
	uint64 RecordTimestamp;//[Offset: 0x10, Size: 0x8]
	uint32 EventType;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SingleStrategyRecordFullInfo
	int StrategyTypeInReplay;//[Offset: 0x0, Size: 0x4]
	SingleStrategyRecordInReplay SingleStrategyRecordInReplay;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SingleStrategyRecordInReplay
	byte CountValue;//[Offset: 0x0, Size: 0x1]
	uint16 ReplayTimeStampInSeconds;//[Offset: 0x2, Size: 0x2]
<----------Generated by SSpawner v1.0.4---------->


Class: RecordTlogBatch
	byte Version;//[Offset: 0x0, Size: 0x1]
	RecordTlog[] TlogArray;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RecordTlog
	FString UID;//[Offset: 0x0, Size: 0x10]
	byte EventId;//[Offset: 0x10, Size: 0x1]
	FString OpenID;//[Offset: 0x18, Size: 0x10]
	int64 TimeStamp;//[Offset: 0x28, Size: 0x8]
	float DSElapsedSeconds;//[Offset: 0x30, Size: 0x4]
	<FString,FString> KeyValueMap;//[Offset: 0x38, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: DailyTaskReportInfo
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 0x4]
	uint32 TaskSyncToDsTs;//[Offset: 0xc, Size: 0x4]
	DailyTaskStoreInfo[] TaskInfo;//[Offset: 0x10, Size: 0x10]
	DailyTaskAwardInfo[] RewardInfo;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DailyTaskAwardInfo
	int TaskId;//[Offset: 0x0, Size: 0x4]
	TaskAwardItemInfo[] AwardList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: TaskAwardItemInfo
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int ItemNum;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0, Size: 0x8]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: FatalDamageParameterCompress
	FString CauserName;//[Offset: 0x0, Size: 0x10]
	FString VictimName;//[Offset: 0x10, Size: 0x10]
	FString FuzzyCauserName;//[Offset: 0x20, Size: 0x10]
	FString FuzzyVictimName;//[Offset: 0x30, Size: 0x10]
	FString RealKillerName;//[Offset: 0x40, Size: 0x10]
	FString CauserNation;//[Offset: 0x50, Size: 0x10]
	FString VictimNation;//[Offset: 0x60, Size: 0x10]
	int DamageType;//[Offset: 0x70, Size: 0x4]
	int AdditionalParam;//[Offset: 0x74, Size: 0x4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	int ResultHealthStatus;//[Offset: 0x7c, Size: 0x4]
	int Relationship;//[Offset: 0x80, Size: 0x4]
	int PreviousHealthStatus;//[Offset: 0x84, Size: 0x4]
	int realKillerNewKillNum;//[Offset: 0x88, Size: 0x4]
	uint32 CauserKey;//[Offset: 0x8c, Size: 0x4]
	uint32 VictimKey;//[Offset: 0x90, Size: 0x4]
	int causerAnchorPlatformResID;//[Offset: 0x94, Size: 0x4]
	int causerAnchorPlatformColorID;//[Offset: 0x98, Size: 0x4]
	int victimAnchorPlatformResID;//[Offset: 0x9c, Size: 0x4]
	int victimAnchorPlatformColorID;//[Offset: 0xa0, Size: 0x4]
	int realKillerAnchorPlatformResID;//[Offset: 0xa4, Size: 0x4]
	int realKillerAnchorPlatformColorID;//[Offset: 0xa8, Size: 0x4]
	int CauserWeaponAvatarID;//[Offset: 0xac, Size: 0x4]
	int CauserClothAvatarID;//[Offset: 0xb0, Size: 0x4]
	int CauserType;//[Offset: 0xb4, Size: 0x4]
	int VictimType;//[Offset: 0xb8, Size: 0x4]
	byte[] ExpandDataContent;//[Offset: 0xc0, Size: 0x10]
	int AssistNum;//[Offset: 0xd0, Size: 0x4]
	bool isCausedByDevliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: NetworkReportActor.Actor.Object
	int LossRateArrayNum;//[Offset: 0x3f4, Size: 0x4]
	int MaxCacheLossRateArrayNum;//[Offset: 0x3f8, Size: 0x4]
	FString InPacketLossRateArrayStr;//[Offset: 0x400, Size: 0x10]
	FString OutPacketLossRateArrayStr;//[Offset: 0x410, Size: 0x10]
	void RPC_Server_SyncClientPkgLossArrayInfo(const byte[] InLoss, const byte[] OutLoss);// 0x68f64d8
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponSpecificHandler.WeaponLogicBaseComponent.ActorComponent.Object
	ItemDefineID ItemDefineID;//[Offset: 0x170, Size: 0x18]
	FName LogicSocket;//[Offset: 0x188, Size: 0x8]
	FName AttachSocket;//[Offset: 0x190, Size: 0x8]
	byte SurviveWeaponPropSlot;//[Offset: 0x198, Size: 0x1]
	float AIMinAttackDist;//[Offset: 0x19c, Size: 0x4]
	float AIMaxAttackDist;//[Offset: 0x1a0, Size: 0x4]
	float AIAttackDist;//[Offset: 0x1a4, Size: 0x4]
	ItemHandleBase* GetBackpackItemHandle();// 0x63739d8
	int GetAvailableBulletsNumInBackpack();// 0x63739a4
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x63757fc
	static int GetWeaponSkillID(STExtraWeapon* Weapon);// 0x6375780
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x6374e14
	void ProcessTriggerEvent(enum Event);// 0x6374d90
<----------Generated by SSpawner v1.0.4---------->


Class: SceneCompUpdateOptimizationItem
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0x170, Size: 0x8]
	WeaponStateBase* DefaultState;//[Offset: 0x178, Size: 0x8]
	<byte,WeaponStateBase*> StateMap;//[Offset: 0x180, Size: 0x50]
	WeaponStateBase* GetWeaponState(byte Type);// 0x63742a4
	WeaponStateBase* GetCurrentState();// 0x6374270
	byte GetCurrentFreshWeaponStateType();// 0x637423c
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0x170, Size: 0x10]
	delegate OnEndState;//[Offset: 0x180, Size: 0x10]
	bool bCanEnterAnyState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1]
	byte FreshWeaponStateType;//[Offset: 0x192, Size: 0x1]
	byte[] ConditionGateMap;//[Offset: 0x198, Size: 0x10]
	byte SpesificTargetState;//[Offset: 0x1a8, Size: 0x1]
	bool bSyncSpesificStateToServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1]
	bool TryChangeToSpesificTargetState();// 0x6373dbc
<----------Generated by SSpawner v1.0.4---------->


Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	delegate GrenadeAvatarEqiuped;//[Offset: 0x4e0, Size: 0x10]
	void PreChangeGrenadeAvatar(int InItemID);// 0x5f0ef30
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x5f0eea4
	FString GetItemAvatarHandlePath(int ItemId);// 0x70644c4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x70644c4
	int GetDefaultAvatarID(int InAvatarID);// 0x70644c4
	void AddAssetSoftObject(out SoftObjectPath[] FSoftObjectPathList);// 0x5f0ed84
<----------Generated by SSpawner v1.0.4---------->


Class: ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	delegate VehicleEquipedDefaultAvatarEvent;//[Offset: 0x2f0, Size: 0x10]
	bool bNeedCheckResExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	ItemDefineID DefaultCfg;//[Offset: 0x308, Size: 0x18]
	bool bEnableLobbyMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	MeshComponent* ItemBodyMesh;//[Offset: 0x328, Size: 0x8]
	NetItemAvatarData NetAvatarData;//[Offset: 0x330, Size: 0x20]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x428, Size: 0x8]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x430, Size: 0x8]
	int itemType;//[Offset: 0x438, Size: 0x4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x440, Size: 0x28]
	StaticMesh* MasterStaticMesh;//[Offset: 0x468, Size: 0x28]
	<FString,Object*> AssetObjectMap;//[Offset: 0x490, Size: 0x50]
	void VehicleEquipedDefaultAvatar__DelegateSignature(int AvatarID, int DefaultAvatarID);// 0x70644c4
	void SyncChangeItemAvatar(int InItemID);// 0x5f33db0
	void SetMasterStaticMeshPath(FString InPath, bool bForce);// 0x5f33cc0
	void SetMasterSkeletalMeshPath(FString InPath, bool bForce);// 0x5f33bd0
	void ResetItemAvatar();// 0x5f33bbc
	void RequestDownloadItemInBattle(int InItemID);// 0x5f33b38
	void ReportAvatarInfo(int InItemID);// 0x5f33abc
	void PreChangeItemAvatar(int InItemID);// 0x5f33a38
	void OnRep_ItemAvatarChanged();// 0x5f33a1c
	bool IsValidAvatar();// 0x5f339e4
	BackpackCommonAvatarHandle* GetValidAvatarHandle();// 0x5f339a8
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x5f338d8
	MeshComponent* GetItemBodyMesh();// 0x5f338bc
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance, MaterialInterface* MatBase);// 0x5f337f8
	void DownloadItemInBattleCallBack(uint32 ItemId, uint32 ErrorCode);// 0x5f3373c
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x5f3361c
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x5f33554
	void AsyncChangeItemAvatar(int InItemID);// 0x5f334d0
	bool ApplyMesh(MeshComponent* MeshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x5f333c4
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x5f332c4
	void AddAssetSoftObject(out SoftObjectPath[] ObjectPathList);// 0x5f331a4
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0x140, Size: 0x10]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0x150, Size: 0x28]
	StaticMesh* ItemStaticMesh;//[Offset: 0x178, Size: 0x28]
	class AnimInstance* ItemAnimBPPath;//[Offset: 0x1a0, Size: 0x28]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x5db10a0
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x5db0dec
	bool HandleDrop(int InCount, enum Reason);// 0x5db0d18
	bool HandleDisuse(enum Reason);// 0x5db0c80
	BackpackComponent* GetBackpackComponent();// 0x5db0c4c
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x5db0b80
<----------Generated by SSpawner v1.0.4---------->


Class: ItemAvatarData
	FName SlotID;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 0x28]
	MaterialInterface* LobbyMatInstance;//[Offset: 0x30, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: NetItemAvatarData
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 0x18]
	int UpdateFlag;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemAvatarMatPath
	FName SlotID;//[Offset: 0x0, Size: 0x8]
	SoftObjectPath MatInstancePath;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath MatBasePath;//[Offset: 0x20, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterCompOutOfVisionOptimizationItem
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x28, Size: 0x4]
	Vector2D Position;//[Offset: 0x2c, Size: 0x8]
	Vector2D Size;//[Offset: 0x34, Size: 0x8]
	Vector2D Origin;//[Offset: 0x3c, Size: 0x8]
	Vector2D ScreenPosition;//[Offset: 0x44, Size: 0x8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	float Opacity;//[Offset: 0x50, Size: 0x4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	SurviveHUD* HUDOwner;//[Offset: 0x58, Size: 0x8]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x60, Size: 0x8]
	Pawn* CharacterOwner;//[Offset: 0x68, Size: 0x8]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 0x1]
	float LastRenderTime;//[Offset: 0x74, Size: 0x4]
	Vector2D RenderPosition;//[Offset: 0x78, Size: 0x8]
	Vector2D RenderSize;//[Offset: 0x80, Size: 0x8]
	float RenderScale;//[Offset: 0x88, Size: 0x4]
	Vector2D CanvasCenter;//[Offset: 0x8c, Size: 0x8]
	Canvas* Canvas;//[Offset: 0x98, Size: 0x8]
	float AspectScale;//[Offset: 0xa0, Size: 0x4]
	Vector2D CanvasClip;//[Offset: 0xa4, Size: 0x8]
	StructProperty*[] RenderObjectList;//[Offset: 0xb0, Size: 0x10]
	bool ShouldDraw(bool bShowScores);// 0x5f207f0
	void SetHidden(bool bIsHidden);// 0x5f20764
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x5f20558
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x5f203fc
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x5f202c0
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x5f201c0
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x5f1fdec
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x5f1f82c
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x5f1f49c
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x5f1f3e0
	void Draw(float DeltaTime);// 0x5f1f35c
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x5f1f2c4
<----------Generated by SSpawner v1.0.4---------->


Class: SurviveHUD.HUD.Actor.Object
	FString LuaFilePath;//[Offset: 0x540, Size: 0x10]
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x550, Size: 0x1]
	Vector MarkerPosition;//[Offset: 0x554, Size: 0xc]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	bool bDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 0x1]
	bool ShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x562, Size: 0x1]
	bool OBShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x563, Size: 0x1]
	HitPerformData HitPerform;//[Offset: 0x568, Size: 0x90]
	bool bDrawHitIconEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1]
	Texture2D* HUDMainTexture;//[Offset: 0x600, Size: 0x8]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x608, Size: 0x8]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x610, Size: 0x8]
	bool PlayHudHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x620, Size: 0x10]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x630, Size: 0x10]
	SimpleCrossHairData[] PriorCrossHairList;//[Offset: 0x640, Size: 0x10]
	Texture2D* HUDPlayerTexture;//[Offset: 0x660, Size: 0x8]
	CanvasIcon Crosshair;//[Offset: 0x668, Size: 0x18]
	CanvasIcon ProgreesBar;//[Offset: 0x6e0, Size: 0x18]
	CanvasIcon BKProgreesBar;//[Offset: 0x6f8, Size: 0x18]
	CanvasIcon ProgressBarPlayer;//[Offset: 0x710, Size: 0x18]
	CanvasIcon Marker;//[Offset: 0x740, Size: 0x18]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x758, Size: 0x8]
	CanvasIcon WORLDMAP;//[Offset: 0x760, Size: 0x18]
	Texture2D* AimCrosshairTextrue;//[Offset: 0x778, Size: 0x8]
	float DateDrawOffsetX;//[Offset: 0x7ac, Size: 0x4]
	void SetShowDebugInfo(bool bNewDebugShow);// 0x625e438
	void SetHitPerformColor(byte Type, out const LinearColor Color);// 0x625e374
	void SetDrawDisableIcon(bool IsDrawDisableIcon);// 0x625e2e8
	void OnAsyncLoadingFinished();// 0x625e2d4
	bool IsValidDamageNumber(const Actor* DamageCauser, int DamageTypeId);// 0x625e200
	bool IsHitPerformDependDamageType(int DamageTypeId, Actor* HitActor);// 0x625e12c
	LinearColor GetPlayerNameColorByTeamID(int TeamID);// 0x625e094
	AkAudioEvent* GetHitSound(float Damage, bool IsHeadshot);// 0x625dfbc
	FString GetDateString();// 0x625df18
	LinearColor GetColorByTeamID(int TeamID);// 0x625de80
	FString[] GetCharacterAnimInfo(Character* InCharacter);// 0x625dd08
	void EnableCrosshair(bool bEnable);// 0x625dc88
	void DrawScreenString(FText Text, float X, float Y);// 0x625da04
	void DrawPickupInfo(float X, float Y);// 0x625d950
	void DrawCircleUFunction(Vector2D Center, float Radius, LinearColor Color);// 0x625d860
	void AddHitDamageNumberWithConfig(float Damage, const Actor* HitTarget, const STExtraPlayerController* PC, int ConfigIndex, bool bIsHeadshot, bool bIsDeadlyShot, bool bIsCareTeam);// 0x625d660
	void AddHitDamageNumber(float Damage, const Actor* HitTarget, bool IsHeadshot, int MyTeamID, int EnemyTeamID, int PlayerNumPerTeam);// 0x625d4ac
	void AddHitDamage(float Damage, bool IsHeadshot, out const DamageEvent DamageEvent, Actor* HitActor, bool bIgnoreDamageType);// 0x625d308
<----------Generated by SSpawner v1.0.4---------->


Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0, Size: 0x10]
	float DefaultSpread;//[Offset: 0x10, Size: 0x4]
	float SpreadMax;//[Offset: 0x14, Size: 0x4]
	float HeadExtraScale;//[Offset: 0x18, Size: 0x4]
	float AddSpreadScale;//[Offset: 0x1c, Size: 0x4]
	float SpreadDecreaseSpeed;//[Offset: 0x20, Size: 0x4]
	float DefaultOffset;//[Offset: 0x24, Size: 0x4]
	float DefaultAlpha;//[Offset: 0x28, Size: 0x4]
	float AlphaDecreaseSpeed;//[Offset: 0x2c, Size: 0x4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	LinearColor HitBodyDrawColor;//[Offset: 0x34, Size: 0x10]
	LinearColor HitHeadDrawColor;//[Offset: 0x44, Size: 0x10]
	LinearColor HitToDeathDrawColor;//[Offset: 0x54, Size: 0x10]
	AkAudioEvent* HeadShotSound;//[Offset: 0x68, Size: 0x8]
	AkAudioEvent* BodyShotSound;//[Offset: 0x70, Size: 0x8]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x78, Size: 0x8]
	float CurCrosshairSpread;//[Offset: 0x80, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SimpleCrossHairData
	FString Tag;//[Offset: 0x0, Size: 0x10]
	Texture2D* CrossHairTexture;//[Offset: 0x10, Size: 0x8]
	float Scale;//[Offset: 0x18, Size: 0x4]
	int Priority;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 0x8]
	float U;//[Offset: 0x8, Size: 0x4]
	float V;//[Offset: 0xc, Size: 0x4]
	float UL;//[Offset: 0x10, Size: 0x4]
	float VL;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: StructProperty.Property.Field.Object
<----------Generated by SSpawner v1.0.4---------->


Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x38, Size: 0x8]
	TextureUVs UVs;//[Offset: 0x40, Size: 0x10]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x58, Size: 0x10]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	Vector2D RenderOffset;//[Offset: 0x6c, Size: 0x8]
	float Rotation;//[Offset: 0x74, Size: 0x4]
	Vector2D RotPivot;//[Offset: 0x78, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float RenderPriority;//[Offset: 0xc, Size: 0x4]
	Vector2D Position;//[Offset: 0x10, Size: 0x8]
	Vector2D Size;//[Offset: 0x18, Size: 0x8]
	LinearColor RenderColor;//[Offset: 0x20, Size: 0x10]
	float RenderOpacity;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TextureUVs
	float U;//[Offset: 0x0, Size: 0x4]
	float V;//[Offset: 0x4, Size: 0x4]
	float UL;//[Offset: 0x8, Size: 0x4]
	float VL;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x48, Size: 0x18]
	Font* Font;//[Offset: 0x60, Size: 0x8]
	float TextScale;//[Offset: 0x68, Size: 0x4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	Vector2D ShadowDirection;//[Offset: 0x70, Size: 0x8]
	LinearColor ShadowColor;//[Offset: 0x78, Size: 0x10]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	LinearColor OutlineColor;//[Offset: 0x8c, Size: 0x10]
	byte HorzPosition;//[Offset: 0x9c, Size: 0x1]
	byte VertPosition;//[Offset: 0x9d, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 0x24]
<----------Generated by SSpawner v1.0.4---------->


Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 0x10]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 0x8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0x158, Size: 0x238]
	class AnimInstance* animBP;//[Offset: 0x390, Size: 0x8]
	class AnimInstance* animBPClass;//[Offset: 0x398, Size: 0x28]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x3c0, Size: 0x10]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x3d0, Size: 0x10]
	BackpackComponent* BackpackComp;//[Offset: 0x3e0, Size: 0x8]
	delegate OnEquipOrUnEquipToWeaponDelegate;//[Offset: 0x3e8, Size: 0x10]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x5de68c8
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x5de68ac
	void OnEquipOrUnEquipToWeaponDelegate__DelegateSignature(STExtraWeapon* Weapon, bool bIsEquip);// 0x70644c4
	bool IsVirtualAvatarHandle();// 0x5de686c
	void HandleEquipOrUnEquipToWeaponDelegate(STExtraWeapon* Weapon, bool bIsEquip);// 0x5de67a4
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x5de6728
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x5de6668
	int GetSubSlotID();// 0x5de662c
	int GetSlotID();// 0x5de65f0
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x5de6584
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x5de6414
	WeaponAttachmentConfig GetAttachmentConfig();// 0x5de63a8
	class Object GetAnimationBP();// 0x5de636c
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x5de625c
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 0x18]
	enum AttachmentSocketType;//[Offset: 0x18, Size: 0x1]
	enum SubSlot;//[Offset: 0x19, Size: 0x1]
	enum SightType;//[Offset: 0x1a, Size: 0x1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x20, Size: 0x10]
	WeaponAttachmentAttrListModifyWrapper[] SpecialWeaponAttachmentAttrModifys;//[Offset: 0x30, Size: 0x10]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x40, Size: 0x10]
	<int,FName> socketTypeToName;//[Offset: 0x50, Size: 0x50]
	WeaponMeshCfg MeshPackage;//[Offset: 0xa0, Size: 0x150]
	WeaponMeshCfg[] ExtMeshList;//[Offset: 0x1f0, Size: 0x10]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x200, Size: 0x10]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x210, Size: 0x10]
	ItemDefineID ParentID;//[Offset: 0x220, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]
	enum Op;//[Offset: 0x10, Size: 0x1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	float ModifyValue;//[Offset: 0x14, Size: 0x4]
	Object* ModifyResValue;//[Offset: 0x18, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAttachmentAttrListModifyWrapper
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0, Size: 0x18]
	FText DescValue;//[Offset: 0x18, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 0x10]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 0x150]
	WeaponMeshCfg[] ExtReplacedAttachmentCfgList;//[Offset: 0x160, Size: 0x10]
	int replacedAttachmentMatIndex;//[Offset: 0x170, Size: 0x4]
	AnimationAsset*[] replacedAttachmentAnimList;//[Offset: 0x178, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0, Size: 0x1]
	int PendantIndex;//[Offset: 0x4, Size: 0x4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10, Size: 0x60]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponPendantMap
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0, Size: 0x4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 0x4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 0x4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 0x4]
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 0x4]
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 0x4]
	float MaxGunRoot;//[Offset: 0x20, Size: 0x4]
	float MaxMuzzleGun;//[Offset: 0x24, Size: 0x4]
	float DistMuzzleGun;//[Offset: 0x28, Size: 0x4]
	float MuzzleHighCD;//[Offset: 0x2c, Size: 0x4]
	float AimFlyCD;//[Offset: 0x30, Size: 0x4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float MaxBackTraceSize;//[Offset: 0x38, Size: 0x4]
	bool bVerifyRpgShootInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bVerifyRpgShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<FName,FString> CrossHairNameAndTextureMap;//[Offset: 0x170, Size: 0x50]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x1c0, Size: 0x10]
	LinearColor MainTargetColor;//[Offset: 0x1d0, Size: 0x10]
	LinearColor SecondaryTargetColor;//[Offset: 0x1e0, Size: 0x10]
	LinearColor WeaponSightLockColor;//[Offset: 0x1f0, Size: 0x10]
	LinearColor WeaponSightLockHDRColor;//[Offset: 0x200, Size: 0x10]
	<int,int> SightTypeToIndex;//[Offset: 0x210, Size: 0x50]
	<byte,SightMaterialModify> SightMaterialModifyMap;//[Offset: 0x260, Size: 0x50]
	WeaponCrossHairPerformData[] CrossHairDataOverride;//[Offset: 0x2b0, Size: 0x10]
	float PistolCenterDownDis;//[Offset: 0x2c0, Size: 0x4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x2c8, Size: 0x4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x2d0, Size: 0x4]
	bool bForceHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	float RotateAngle;//[Offset: 0x2d8, Size: 0x4]
	STExtraPlayerController* PlayerController;//[Offset: 0x2e0, Size: 0x8]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x2f0, Size: 0x8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x2f8, Size: 0x8]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x300, Size: 0x8]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x308, Size: 0x8]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x310, Size: 0x8]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x318, Size: 0x8]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x320, Size: 0x8]
	Texture2D* CrossHairShotGun;//[Offset: 0x328, Size: 0x8]
	bool bInitAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x353, Size: 0x1]
	void UpdateComponentTick();// 0x5e5655c
	void SetPureCrossHairColor(bool Enable);// 0x5e564d8
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x5e56418
	void DrawSpreadEnd();// 0x5e56404
	void DrawDebugPointEnd();// 0x5e563f0
<----------Generated by SSpawner v1.0.4---------->


Class: SightMaterialModify
	SightMaterialModifyItem[] AimMaterialModify;//[Offset: 0x0, Size: 0x10]
	SightMaterialModifyItem[] NoAimMaterialModify;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SightMaterialModifyItem
	int MaterialID;//[Offset: 0x0, Size: 0x4]
	FName ParameterName;//[Offset: 0x8, Size: 0x8]
	LinearColor Value;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0x170, Size: 0x4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176, Size: 0x1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177, Size: 0x1]
	bool bDisableDsAntiDataReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableAddSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x180, Size: 0x8]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x200, Size: 0x8]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	void HandleOnWeaponStopFire();// 0x5e19ed0
	void HandleOnWeaponStartFire();// 0x5e19ebc
	bool CheckCloseDSTick();// 0x5e19e84
<----------Generated by SSpawner v1.0.4---------->


Class: MultiBulletComponent.WeaponLogicBaseComponent.ActorComponent.Object
	int FirstAddBulletID;//[Offset: 0x170, Size: 0x4]
	SupportUpBullet[] MultiBulletList;//[Offset: 0x178, Size: 0x10]
	delegate OnFirstBulletChangeDelegate;//[Offset: 0x188, Size: 0x10]
	ItemDefineID OriginalBulletDefineID;//[Offset: 0x198, Size: 0x18]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1b0, Size: 0x8]
	void SetFirstAddBullet(int BulletID);// 0x5f8b8e8
	void SetBulletIDListInClip(out BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x5f8b770
	void SetBulletAttr(int ReloadBulletID, float Damage);// 0x5f8b6b8
	void RemoveBulletIDListInClip(int RemoveNum, out BulletInClip CurBulletInClip, bool IsRevert);// 0x5f8b570
	void RefreshBulletIDListInClip(int Count, out BulletInClip CurBulletInClip);// 0x5f8b478
	void PreSetBulletIDListInClip(out BulletInClip NewBulletInClip, out BulletInClip CurBulletInClip);// 0x5f8b33c
	void OnRep_FirstAddBulletID();// 0x5f8b320
	void OnFirstBulletChangeDelegate__DelegateSignature();// 0x70644c4
	bool HasMultiBullet();// 0x5f8b2e8
	int GetShootBulletType();// 0x5f8b2b4
	int GetNextCostBulletIDFromBackpack(BackpackComponent* InBackPack);// 0x5f8b228
	int GetNextBulletID();// 0x5f8b1f4
	BackpackComponent* GetBackpackComponent();// 0x5f8b1c0
	float GetAdjustBulletMomentum();// 0x5f8b18c
	float GetAdjustBulletDamage();// 0x5f8b158
	int CostBulletFromBackpack(BackpackComponent* BackPack, int WantReloadNum, out BulletInWeapon[] CostBulletList);// 0x5f8b014
	void AddBulletIDListInClip(BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x5f8ae2c
<----------Generated by SSpawner v1.0.4---------->


Class: SupportUpBullet
	int UpBulletID;//[Offset: 0x0, Size: 0x4]
	int DefaultPriority;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GrenadeLaunchComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x170, Size: 0x8]
	float BulletSpeed;//[Offset: 0x178, Size: 0x4]
	int CurBulletNum;//[Offset: 0x17c, Size: 0x4]
	bool bUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	int MaxBulletNumInClip;//[Offset: 0x184, Size: 0x4]
	ItemDefineID BulletType;//[Offset: 0x188, Size: 0x18]
	bool CanUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x1a8, Size: 0x10]
	class CameraShake* ShootCameraShake;//[Offset: 0x1b8, Size: 0x8]
	float CameraShakeInnerRadius;//[Offset: 0x1c0, Size: 0x4]
	float CameraShakeOuterRadius;//[Offset: 0x1c4, Size: 0x4]
	float CameraShakFalloff;//[Offset: 0x1c8, Size: 0x4]
	AkAudioEvent* ShootSound;//[Offset: 0x1d0, Size: 0x8]
	float ReloadTime;//[Offset: 0x1d8, Size: 0x4]
	float ReloadTimeTactical;//[Offset: 0x1dc, Size: 0x4]
	float ReloadTimeMagOut;//[Offset: 0x1e0, Size: 0x4]
	float ReloadTimeMagIn;//[Offset: 0x1e4, Size: 0x4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1e8, Size: 0x8]
	BackpackComponent* OwnerBackPack;//[Offset: 0x1f0, Size: 0x8]
	void ShootGrenadeBullet(Vector StartLoc, Rotator StartRot, uint32 ShootID);// 0x5f0f834
	void SetUseGreanadeLaunch(bool bIsUse);// 0x5f0f7b0
	void RemoveBullet(int RemoveNum);// 0x5f0f734
	int ReloadGrenadeLaunch();// 0x5f0f700
	void OnRep_UseGrenadeLaunchState();// 0x5f0f6ec
	void OnRep_CurBulletNum();// 0x5f0f6d8
	void OnRep_CanUseGrenadeLaunch();// 0x5f0f6c4
	void LaunchGrenadeBullet(Transform Trans, out const ShootTimeData ShootTimeData);// 0x5f0f5a8
	bool JudgeMustReload();// 0x5f0f570
	bool IsUseGreanadeLaunch();// 0x5f0f538
	void HandleGrenadeLaunchEquip(bool bIsEquip);// 0x5f0f4b4
	BackpackComponent* GetBackpackComp();// 0x5f0f480
	void DoGrenadeLaunchStartReload();// 0x5f0f46c
	bool CheckCanReload();// 0x5f0f434
<----------Generated by SSpawner v1.0.4---------->


Class: EnergyAccumulateShootComponent.NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float StartAccMinThreshold;//[Offset: 0x9e0, Size: 0x4]
	float ReachMaxAccTime;//[Offset: 0x9e4, Size: 0x4]
	int BulletNumPerShoot;//[Offset: 0x9e8, Size: 0x4]
	int BulletImpactDamageEnergy;//[Offset: 0x9ec, Size: 0x4]
	float MaxOffsetShootDegree;//[Offset: 0x9f0, Size: 0x4]
	int BulletNumPerShootMaxEnergy;//[Offset: 0x9f4, Size: 0x4]
	int ComsumeBulletNumPerShootMaxEnergy;//[Offset: 0x9f8, Size: 0x4]
	int BulletImpactDamageMaxEnergy;//[Offset: 0x9fc, Size: 0x4]
	class STExtraShootWeaponBulletBase* EnergyBulletTemplate;//[Offset: 0xa00, Size: 0x8]
	class STExtraShootWeaponBulletBase* MaxEnergyBulletTemplate;//[Offset: 0xa08, Size: 0x8]
	byte PreShootWeaponStateToChange;//[Offset: 0xa10, Size: 0x1]
	bool bSpawnBulletOnSimulateClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 0x1]
	float CurAccEnergyPercent;//[Offset: 0xa14, Size: 0x4]
	Actor*[] NormalBulletCacheList;//[Offset: 0xa68, Size: 0x10]
	Actor*[] EnergyBulletCacheList;//[Offset: 0xa78, Size: 0x10]
	Actor*[] MaxEnergyBulletCacheList;//[Offset: 0xa88, Size: 0x10]
	void RPC_Multicast_ClientShootEnergyAccBullets(const ShootMultiBulletsParam[] LaunchParams, float InCurAccEnergyPercent);// 0x5ea8e50
	void RemoveBullet(STExtraShootWeaponBulletBase* Bullet);// 0x5ea8dd4
	bool IsMaxEnergy();// 0x5ea8dac
	float GetEnergyPercentByShootId(int ShootID);// 0x5ea8d20
	float GetAccEnergyPercentForAnim();// 0x5ea8ce4
<----------Generated by SSpawner v1.0.4---------->


Class: FillGasComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UpGasSpeed;//[Offset: 0x170, Size: 0x4]
	float DownGasSpeed;//[Offset: 0x174, Size: 0x4]
	float CostGasOneShoot;//[Offset: 0x178, Size: 0x4]
	float MaxGas;//[Offset: 0x17c, Size: 0x4]
	float GasAddDamageRate;//[Offset: 0x180, Size: 0x4]
	float MaxGasAngle;//[Offset: 0x184, Size: 0x4]
	float PostFillGasTime;//[Offset: 0x188, Size: 0x4]
	float GasUpdateInterval;//[Offset: 0x18c, Size: 0x4]
	int CurGas;//[Offset: 0x190, Size: 0x4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x198, Size: 0x8]
	void OnRep_CurGas();// 0x5edcf48
	void CostGassByShoot();// 0x5edcf34
	void CheckNeedRep();// 0x5edcf20
	void AddFillGass(float AddFillGasTime);// 0x5edcea4
<----------Generated by SSpawner v1.0.4---------->


Class: FireWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1b0, Size: 0x8]
	Pawn* WeaponOwner;//[Offset: 0x1d8, Size: 0x8]
	bool OpenPressBtnStay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<enum,AkAudioEvent*> ShootModeFireShotSoundDataMap;//[Offset: 0x1e8, Size: 0x50]
	AkAudioEvent* GunAdsShootSound;//[Offset: 0x238, Size: 0x8]
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x240, Size: 0x8]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x248, Size: 0x8]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x250, Size: 0x8]
	float CameraShakeInnerRadius;//[Offset: 0x258, Size: 0x4]
	float CameraShakeOuterRadius;//[Offset: 0x25c, Size: 0x4]
	float CameraShakFalloff;//[Offset: 0x260, Size: 0x4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	bool bNeedOptimizeMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266, Size: 0x1]
	ParticleSystem* MuzzleFX;//[Offset: 0x268, Size: 0x8]
	Vector LocalMuzzelFXScale;//[Offset: 0x270, Size: 0xc]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x280, Size: 0x8]
	Vector ScopeMuzzelFXScale;//[Offset: 0x288, Size: 0xc]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x298, Size: 0x8]
	Vector RemoteMuzzelFXScale;//[Offset: 0x2a0, Size: 0xc]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x2ac, Size: 0x10]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x2c0, Size: 0x8]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x2c8, Size: 0xc]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x2d8, Size: 0x8]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x2e0, Size: 0xc]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x2f0, Size: 0x8]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x2f8, Size: 0xc]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x304, Size: 0x10]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x318, Size: 0x8]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x320, Size: 0xc]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x330, Size: 0x8]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x338, Size: 0xc]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x348, Size: 0x8]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x350, Size: 0xc]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x35c, Size: 0x10]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x370, Size: 0x8]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x378, Size: 0xc]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x388, Size: 0x8]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x390, Size: 0xc]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x3a0, Size: 0x8]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x3a8, Size: 0xc]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	ParticleSystem* ShellDropFX;//[Offset: 0x3b8, Size: 0x8]
	Vector ShellDropFXScale;//[Offset: 0x3c0, Size: 0xc]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x3d0, Size: 0x8]
	Vector FPPShellDropFXScale;//[Offset: 0x3d8, Size: 0xc]
	float ShootLightCD;//[Offset: 0x3e4, Size: 0x4]
	float LastShootLightTime;//[Offset: 0x3e8, Size: 0x4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x3f0, Size: 0x8]
	int MaxOBBulletTrackCompNum;//[Offset: 0x3f8, Size: 0x4]
	float MaxFlyAngel;//[Offset: 0x3fc, Size: 0x4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x400, Size: 0x8]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x408, Size: 0x8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x410, Size: 0x8]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x418, Size: 0x8]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x420, Size: 0x10]
	Vector MuzzleFXOriginalScale;//[Offset: 0x430, Size: 0xc]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x43c, Size: 0x4]
	float LastMuzzleEffectTime;//[Offset: 0x440, Size: 0x4]
	float MuzzleEffectTimeInterval;//[Offset: 0x444, Size: 0x4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x458, Size: 0x10]
	bool bChangeShellDropRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	Rotator ShellDropRot;//[Offset: 0x46c, Size: 0xc]
	FName ChangeShellDropSocket;//[Offset: 0x478, Size: 0x8]
	bool bSimulateBulletOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	float bSimulateBulletMaxDistance;//[Offset: 0x484, Size: 0x4]
	float SnipperStayDistance;//[Offset: 0x488, Size: 0x4]
	float bSimulateBulletRadius;//[Offset: 0x48c, Size: 0x4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	bool ShellDropRotHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1]
	void ReloadAttr(int WeaponId);// 0x6063ef8
	void OnWeaponUnEquiped();// 0x6063ee4
	void OnWeaponLoadAvatarAllMeshDone(AvatarDIYComponent* AvatarDIYComponent);// 0x6063e68
	void OnWeaponEuiped();// 0x6063e54
	void HandleWeaponAction(byte Action);// 0x6063dd0
	STExtraShootWeapon* GetOwnerShootWeapon();// 0x6063d9c
	OBEffectBullet* GetOBEffectBullet();// 0x6063d68
	int GetAvailableOBEffectBulletNum();// 0x6063d34
	void CheckOptimizeMuzzleFX();// 0x6063d18
	void ChangeShellDropFx();// 0x6063d04
	void ActiveSoundByWeaponAction(byte Action);// 0x6063c88
	void ActiveShootLight();// 0x6063c74
	void ActiveLocalShellDropFX();// 0x6063c60
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x170, Size: 0x50]
	AkAudioEvent* ShellDropSound;//[Offset: 0x1c0, Size: 0x8]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x1c8, Size: 0x8]
	AkAudioEvent* DurabilityLossShootSound;//[Offset: 0x1d0, Size: 0x8]
	AkAudioEvent* ScopeSound;//[Offset: 0x1d8, Size: 0x8]
	AkAudioEvent* ScopeOutSound;//[Offset: 0x1e0, Size: 0x8]
	void HandleWeaponAction(byte Action);// 0x63629b8
<----------Generated by SSpawner v1.0.4---------->


Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 0x4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 0x4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 0x4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x3f4, Size: 0x4]
	bool bIgnoreEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x400, Size: 0x10]
	ParticleSystem* CurFXTemplate;//[Offset: 0x418, Size: 0x8]
	float CurMovingTime;//[Offset: 0x448, Size: 0x4]
	CurveFloat* SpeedCurve;//[Offset: 0x450, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AttrModifyComponent.ActorComponent.Object
	int ConfigAutoAddAttId;//[Offset: 0x200, Size: 0x4]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x2a8, Size: 0x10]
	uint32 AttrModifyStateList;//[Offset: 0x2b8, Size: 0x4]
	RepAttributeModify DynamicModifierRep;//[Offset: 0x330, Size: 0x18]
	RepAttributeModify DynamicModifierRepOnlyOwner;//[Offset: 0x348, Size: 0x18]
	delegate OnAttrModified;//[Offset: 0x380, Size: 0x10]
	delegate OnAttrRemoved;//[Offset: 0x390, Size: 0x10]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x3a0, Size: 0xa8]
	AttributeExpand[] AttributeExpands;//[Offset: 0x498, Size: 0x10]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x4a8, Size: 0x50]
	enum ActorAttrType;//[Offset: 0x4f8, Size: 0x1]
	ModAttrSimulateSyncItem[] ModSimulateSyncList;//[Offset: 0x608, Size: 0x10]
	delegate OnNeedSetSpeedOverLimit;//[Offset: 0x720, Size: 0x10]
	void SetValueToAttributeSafety(FString AttrName, float Value);// 0x6479ae8
	void SetOrignalValueToAttribute(FString AttrName, float Value);// 0x6479a00
	void SetAttrModifyStateValue(int Index, bool Value);// 0x6479940
	void SetAttributeMaxValue(FString AttrName, float MaxValue);// 0x6479858
	void ResponeAttrValue(FString AttrName, float FinalValue);// 0x6479738
	void RequestAttrValue(FString AttrName);// 0x647965c
	bool RemoveModifyItemFromCache(uint32 ModifyUID);// 0x64795cc
	void RemoveAttrListener(FString AttrName, SluaBPVar Listener);// 0x6479490
	void RemoveAllDynamicModifier(bool bForce);// 0x647940c
	bool RegisterModifyAbleAttr(out AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x647929c
	void OnRep_ModSimulateSyncList();// 0x6479288
	void OnRep_DynamicModifier();// 0x6479274
	void OnRep_AttrModifyStateList();// 0x6479260
	void OnNeedSetSpeedOverLimit__DelegateSignature();// 0x70644c4
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x70644c4
	bool IsAttrModifyStateValidIndex(int Index);// 0x64791d0
	bool HasDynamicModifier(FString AttrModifyId);// 0x6479114
	AttrModifyModDataSubsystem* GetSubsystem();// 0x64790e0
	FString GetMaxAttrName(FString AttrName);// 0x6478fc4
	bool GetAttrModifyStateValue(int Index);// 0x6478f34
	int GetAttrModifyStateNum();// 0x6478f18
	AttrModifyItem GetAttrModifyItemByItemName(FString ItemName);// 0x6478ccc
	float GetAttributeValue(FString AttrName);// 0x6478c14
	float GetAttributeOrignalValue(FString AttrName);// 0x6478b5c
	bool EnableAttrModifierByIndex(int ModifyConfigIndex);// 0x6478acc
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x647898c
	bool DisableAttrModifierByIndex(int ModifyConfigIndex);// 0x64788fc
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x64787bc
	bool DisableAllAttrModifier(bool bForce);// 0x6478724
	void ClearAllAttrModify();// 0x6478710
	void AddValueToAttribute(FString AttrName, float Value);// 0x6478628
	uint32 AddModifyItemAndCache(FString AttrName, enum CModifyType, float CValue, bool bEnable, Object* Causer, bool oldModify);// 0x6478430
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem, bool RepOnlyOwner);// 0x64782bc
	uint32 AddBModifyAndCacheWithCParam(FString AttrName, enum CModifyType, float CValue);// 0x6478188
	uint32 AddBModifyAndCache(FString AttrName, enum ModifyType, float Value);// 0x6478054
	void AddAttrListener(FString AttrName, SluaBPVar Listener);// 0x6477f18
<----------Generated by SSpawner v1.0.4---------->


Class: RepAttributeModify
<----------Generated by SSpawner v1.0.4---------->


Class: AttrDynamicModifier
	<FString,AttrDynamicModifyTarget> ModifyAttrs;//[Offset: 0x0, Size: 0x50]
	<FString,AttrDynamicModifyConfig> ModifyConfigs;//[Offset: 0x50, Size: 0x50]
	AttrModifyComponent* Component;//[Offset: 0xa0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AttrDynamicModifyTarget
	AttrDynamicModifyItem[] List;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AttrDynamicModifyItem
	Object* Causer;//[Offset: 0x1c, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AttrDynamicModifyConfig
	bool IsOneceModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool HasLimitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool HasMaxAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	FString AttrName;//[Offset: 0x8, Size: 0x10]
	FString LimitAttrName;//[Offset: 0x18, Size: 0x10]
	FString MaxAttrName;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AttributeExpand
	FString AttrName;//[Offset: 0x0, Size: 0x10]
	FString AttrDesc;//[Offset: 0x10, Size: 0x10]
	int RelateTypeId;//[Offset: 0x20, Size: 0x4]
	FString RelateGroup;//[Offset: 0x28, Size: 0x10]
	float Value;//[Offset: 0x38, Size: 0x4]
	int nValue;//[Offset: 0x3c, Size: 0x4]
	byte bValue;//[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: RelateAttributeGroup
	<int,FString> RelateAttributes;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: ModAttrSimulateSyncItem
	int AttrId;//[Offset: 0x0, Size: 0x4]
	float FinalValue;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SluaBPVar
<----------Generated by SSpawner v1.0.4---------->


Class: AttrRegisterItem
	int AttrId;//[Offset: 0x0, Size: 0x4]
	FString AttrName;//[Offset: 0x8, Size: 0x10]
	enum AttrVariableType;//[Offset: 0x18, Size: 0x1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 0x10]
	Actor* AffectedActor;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AttrModifyModDataSubsystem.GameInstanceSubsystem.Subsystem.Object
<----------Generated by SSpawner v1.0.4---------->


Class: GameInstanceSubsystem.Subsystem.Object
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAttrModifyConfig
	int ID;//[Offset: 0x0, Size: 0x4]
	FString ModifyConfigID;//[Offset: 0x8, Size: 0x10]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]
	enum Op;//[Offset: 0x10, Size: 0x1]
	float ModifyValue;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x170, Size: 0x8]
	float ShootRateCheckInterval;//[Offset: 0x190, Size: 0x4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1]
	float ShootRateCheckMulCoff;//[Offset: 0x198, Size: 0x4]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x19c, Size: 0x4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x1f4, Size: 0x4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x1f8, Size: 0x4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x1fc, Size: 0x4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x200, Size: 0x4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x204, Size: 0x4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x208, Size: 0x4]
	float ShootTimeMuzzleDistThres;//[Offset: 0x20c, Size: 0x4]
	float ShootTimeMuzzleZThres;//[Offset: 0x210, Size: 0x4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 0x1]
	float TimeLineCheckDnBorder;//[Offset: 0x218, Size: 0x4]
	float TimeLineCheckUpBorder;//[Offset: 0x21c, Size: 0x4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x220, Size: 0x4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x228, Size: 0x4]
	float TolerateFlyTime;//[Offset: 0x22c, Size: 0x4]
	float TolerateFlyDis;//[Offset: 0x230, Size: 0x4]
	float DeCon6SpanTime;//[Offset: 0x304, Size: 0x4]
	void OnWeaponShootHit(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x635821c
<----------Generated by SSpawner v1.0.4---------->


Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte AvatarDamagePosition;//[Offset: 0xbd, Size: 0x1]
	float DamageImpulse;//[Offset: 0xd8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SimulateBulletHitInfoData
	Vector_NetQuantize10 ImpactPoint;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 0xc]
	Vector_NetQuantize10 ShootMomentMuzzlePos;//[Offset: 0x24, Size: 0xc]
	byte SurfaceType;//[Offset: 0x30, Size: 0x1]
	Actor* Actor;//[Offset: 0x34, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x3c, Size: 0x8]
	byte HitBodyType;//[Offset: 0x44, Size: 0x1]
	byte ImpactEffectMask;//[Offset: 0x45, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ReplayStartFireInfo
	StartFireInfo ClientStartFire;//[Offset: 0x0, Size: 0x18]
	enum DsLastRequestFireRet;//[Offset: 0x18, Size: 0x1]
	uint32 DsNextFireMiniShootID;//[Offset: 0x1c, Size: 0x4]
	uint32 DsCurClipID;//[Offset: 0x20, Size: 0x4]
	int DsCurClipNum;//[Offset: 0x24, Size: 0x4]
	int ClientRequestClipNum;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BulletHitInfoUploadDataInReplay
	enum VertifyRes;//[Offset: 0x0, Size: 0x1]
	enum VertifySubType;//[Offset: 0x1, Size: 0x1]
	BulletHitInfoUploadData UploadData;//[Offset: 0x10, Size: 0x110]
	CharacterHistoryData VictimHistoryData;//[Offset: 0x120, Size: 0x9c]
	ShootTimeData ShootTimeData;//[Offset: 0x1c0, Size: 0xa0]
	uint32 CurrentUserCmdSequence;//[Offset: 0x260, Size: 0x4]
	uint32 UniqueId;//[Offset: 0x264, Size: 0x4]
	enum[] StatData;//[Offset: 0x268, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: NextFireMinShootDataInReplay
	uint32 NextFireMinShootID;//[Offset: 0x0, Size: 0x4]
	BulletHitInfoUploadData UploadData;//[Offset: 0x10, Size: 0x110]
<----------Generated by SSpawner v1.0.4---------->


Class: SecurityLogHitTargetInfo
<----------Generated by SSpawner v1.0.4---------->


Class: CameraOffsetData
	Vector SocketOffset;//[Offset: 0x0, Size: 0xc]
	Vector TargetOffset;//[Offset: 0xc, Size: 0xc]
	float SpringArmLength;//[Offset: 0x18, Size: 0x4]
	float AdditiveOffsetFov;//[Offset: 0x1c, Size: 0x4]
	float FixedFov;//[Offset: 0x20, Size: 0x4]
	float BeginInterpSpeed;//[Offset: 0x24, Size: 0x4]
	float EndInterpSpeed;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x3f4, Size: 0xc]
	Vector LowThrowOffset;//[Offset: 0x400, Size: 0xc]
	byte ThrowMode;//[Offset: 0x40c, Size: 0x1]
	float PredictLineVelocityScale;//[Offset: 0x410, Size: 0x4]
	float MaxSimTime;//[Offset: 0x414, Size: 0x4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x418, Size: 0x30]
	float GrenadeRadius;//[Offset: 0x448, Size: 0x4]
	Vector PredictLineStartLocation;//[Offset: 0x44c, Size: 0xc]
	Vector PredictLineStartVelocity;//[Offset: 0x458, Size: 0xc]
	Vector LauncheVelocity;//[Offset: 0x464, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 0x10]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector HitActorLocation;//[Offset: 0x14, Size: 0xc]
	Rotator HitActorRotation;//[Offset: 0x20, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0, Size: 0x4]
	uint32 ClipID;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponOverHeatingComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float MaxTemperature;//[Offset: 0x170, Size: 0x4]
	float MinShootInterval;//[Offset: 0x174, Size: 0x4]
	float CoolDownSpeed;//[Offset: 0x178, Size: 0x4]
	float HeatingSpeedPerBullet;//[Offset: 0x17c, Size: 0x4]
	float CoolDownDelay;//[Offset: 0x180, Size: 0x4]
	float CurrentTemperature;//[Offset: 0x184, Size: 0x4]
	CurveFloat* ShootIntervalScaleCurve;//[Offset: 0x188, Size: 0x8]
	FName MuzzleEffectParam;//[Offset: 0x190, Size: 0x8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x198, Size: 0x8]
	void HandleWeaponOnShoot();// 0x636d028
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 0x10]
	int[] BorrowedSeat;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0, Size: 0x8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	float HitSelfModifier;//[Offset: 0x41c, Size: 0x4]
	float HitSelfImpactReduce;//[Offset: 0x420, Size: 0x4]
	float HitOthersModifier;//[Offset: 0x424, Size: 0x4]
	float HitOthersImpactRaise;//[Offset: 0x428, Size: 0x4]
	float HitCharacterModifier;//[Offset: 0x42c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleDamageComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0x1d8, Size: 0x8]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0x1e0, Size: 0x4]
	float ImpactModifier;//[Offset: 0x1e4, Size: 0x4]
	float ImpactAbsorption;//[Offset: 0x1e8, Size: 0x4]
	float ImpactAbsorptionPassenger;//[Offset: 0x1ec, Size: 0x4]
	float ImpactModifierUpsideDown;//[Offset: 0x1f0, Size: 0x4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0x1f4, Size: 0x4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0x1f8, Size: 0x4]
	float HitIgnoreImpulseThreshold;//[Offset: 0x1fc, Size: 0x4]
	class Actor[] HitIgnoreClasses;//[Offset: 0x200, Size: 0x10]
	bool PushCharacterSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	float PushCharacterForwardVectorStrength;//[Offset: 0x214, Size: 0x4]
	float PushCharacterRightVectorStrength;//[Offset: 0x218, Size: 0x4]
	float PushCharacterTopVectorStrength;//[Offset: 0x21c, Size: 0x4]
	float ApplyImpluseSpeed;//[Offset: 0x220, Size: 0x4]
	<Actor*,float> VehicleImpluseCharacterTimes;//[Offset: 0x228, Size: 0x50]
	float VehicleImpluseCharacterCooldownTime;//[Offset: 0x278, Size: 0x4]
	float DamageCharacterCD;//[Offset: 0x27c, Size: 0x4]
	float PassengerProtectTime;//[Offset: 0x280, Size: 0x4]
	float DamageSelfCD;//[Offset: 0x288, Size: 0x4]
	bool bIgnoreVehicleSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	float HitDamageSelfMaxFactor;//[Offset: 0x294, Size: 0x4]
	float HitDamagePassengerMaxHP;//[Offset: 0x298, Size: 0x4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x2a0, Size: 0x4]
	float DamageReduce;//[Offset: 0x2a4, Size: 0x4]
	float fHitEventInterval;//[Offset: 0x2a8, Size: 0x4]
	delegate OnVehicleHitOthers;//[Offset: 0x2b0, Size: 0x10]
	bool bEnableVehicleExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	bool bShouldPlayExplosionEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	float ExplosionBaseDamage;//[Offset: 0x2c4, Size: 0x4]
	float ExplosionMinimumDamage;//[Offset: 0x2c8, Size: 0x4]
	float ExplosionRadiusInner;//[Offset: 0x2cc, Size: 0x4]
	float ExplosionRadiusOuter;//[Offset: 0x2d0, Size: 0x4]
	float ExplosionDamageFalloff;//[Offset: 0x2d4, Size: 0x4]
	float ExplosionBaseMomentumMag;//[Offset: 0x2d8, Size: 0x4]
	class DamageType* ExplosionDamageType;//[Offset: 0x2e0, Size: 0x8]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x2f0, Size: 0x8]
	<Actor*,float> VehicleDamageCharacterTimes;//[Offset: 0x2f8, Size: 0x50]
	bool bProcessVehicleDamageCharacterOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	float VehicleDamageCharacterCooldownTime;//[Offset: 0x34c, Size: 0x4]
	float HitStoneVelocityDamp;//[Offset: 0x354, Size: 0x4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x360, Size: 0x40]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x3a8, Size: 0x8]
	Vector2D ImpactModifierVehicle;//[Offset: 0x3b0, Size: 0x8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x3b8, Size: 0x8]
	float ImpactAbsorptionVehicle;//[Offset: 0x3c0, Size: 0x4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x3c4, Size: 0x4]
	float DotProductFrontThreshold;//[Offset: 0x3c8, Size: 0x4]
	float DotProductRearThreshold;//[Offset: 0x3cc, Size: 0x4]
	float ImpactModifierFront;//[Offset: 0x3d0, Size: 0x4]
	float ImpactModifierRear;//[Offset: 0x3d4, Size: 0x4]
	float ImpactModifierFrontSide;//[Offset: 0x3d8, Size: 0x4]
	float ImpactModifierRearSide;//[Offset: 0x3dc, Size: 0x4]
	Vector2D DamageCorrection;//[Offset: 0x3e0, Size: 0x8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x3e8, Size: 0x4]
	float SameCampDamangeLimit;//[Offset: 0x3ec, Size: 0x4]
	bool bDebugVehicleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	<Actor*,float> CustomImpulseHitTimes;//[Offset: 0x3f8, Size: 0x50]
	bool bProcessCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool bOnlyPlayerCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1]
	float CustomImpulseCooldownTime;//[Offset: 0x44c, Size: 0x4]
	<FString,VehicleCustomImpulse> CustomImpulseComponentMap;//[Offset: 0x450, Size: 0x50]
	VehicleCustomImpulseFilter mFilter;//[Offset: 0x4a0, Size: 0x28]
	float OverlapPushSimpleCharacterMinSpeed;//[Offset: 0x4c8, Size: 0x4]
	float OverlapHitSimpleCharacterMinSpeed;//[Offset: 0x4cc, Size: 0x4]
	float ServerValidateDistance;//[Offset: 0x4d0, Size: 0x4]
	Vector DefaultVehicleHitBoxExtent;//[Offset: 0x4d4, Size: 0xc]
	<enum,Vector> VehicleHitBoxExtents;//[Offset: 0x4e0, Size: 0x50]
	float ResponseSimpleCharacterRate;//[Offset: 0x530, Size: 0x4]
	float ResponseSimpleCharacterAccumulate;//[Offset: 0x534, Size: 0x4]
	void TickHandleSimpleCharacterOverlap(float DeltaSeconds);// 0x63094a4
	void ServerHandleOnVehicleResponseSimpleCharacter(STExtraSimpleCharacter* OtherActor, Vector NormalImpulse, float HitSpeed, bool bChangeState);// 0x630931c
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x6309210
	bool ScriptShouldCauseDamage(float InDamage, PrimitiveComponent* InPrimComp, STExtraBaseCharacter* InCharacter);// 0x70644c4
	void OnVehicleOverlapSimpleCharacter(STExtraSimpleCharacter* OverlappedTarget);// 0x6309194
	void OnVehicleHitSimpleCharacter(STExtraSimpleCharacter* OtherActor, PrimitiveComponent* PrimVehicle, PrimitiveComponent* PrimOther, Vector NormalImpulse, out const HitResult Hit);// 0x6308fd8
	void OnCustomImpulseComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x6308e14
	void HandleOnVehicleResponseSimpleCharacter(STExtraSimpleCharacter* OtherActor, Vector NormalImpulse, float HitSpeed, bool bChangeState);// 0x6308cdc
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x6308b5c
	bool GetOverlappedSimpleCharacter(out STExtraSimpleCharacter*[] OverlappedSimpleCharacter);// 0x6308a90
<----------Generated by SSpawner v1.0.4---------->


Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 0xc]
	Quat Quaternion;//[Offset: 0x10, Size: 0x10]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 0xc]
	byte Flags;//[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleCustomImpulse
	class Actor[] IgnoreClasses;//[Offset: 0x0, Size: 0x10]
	VehicleCustomImpulseFilter[] ImpulseFilters;//[Offset: 0x10, Size: 0x10]
	class DamageType* DamageType;//[Offset: 0x20, Size: 0x8]
	bool bApplyImpulseWhileDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bApplyImpulseWhileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bUseHitActorAsDamageInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleCustomImpulseFilter
	class Actor* ImpulseAbsorberType;//[Offset: 0x0, Size: 0x8]
	bool bApplyRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bApplyImpulseAsVelocityChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	float MaxDamagingImpulseMagnituge;//[Offset: 0xc, Size: 0x4]
	float MaxImpulseDamage;//[Offset: 0x10, Size: 0x4]
	float ImpulseStrength;//[Offset: 0x14, Size: 0x4]
	float RadialImpulseStrength;//[Offset: 0x18, Size: 0x4]
	float ImpulseRadius;//[Offset: 0x1c, Size: 0x4]
	byte ImpulseFalloffType;//[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleCommonComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0x1d8, Size: 0x10]
	delegate VehicleFuelChangedDelegate;//[Offset: 0x1e8, Size: 0x10]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0x1f8, Size: 0x10]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0x208, Size: 0x10]
	delegate OnHPPreChange;//[Offset: 0x218, Size: 0x10]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0x228, Size: 0x10]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0x238, Size: 0x10]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	<int,float> DamageFactor;//[Offset: 0x250, Size: 0x50]
	float HPMax;//[Offset: 0x2a0, Size: 0x4]
	float HP;//[Offset: 0x2a4, Size: 0x4]
	<enum,float> DamageScaleMap;//[Offset: 0x2a8, Size: 0x50]
	bool ShowHealthUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	int UGCHUDStatus;//[Offset: 0x2fc, Size: 0x4]
	float[] WheelsCurrentHP;//[Offset: 0x300, Size: 0x10]
	bool CanMaintained;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool CanGasCan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312, Size: 0x1]
	float FuelMax;//[Offset: 0x314, Size: 0x4]
	float Fuel;//[Offset: 0x318, Size: 0x4]
	bool bCanOilInStation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	bool ShowFuelUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d, Size: 0x1]
	int FuelIntervalCount;//[Offset: 0x320, Size: 0x4]
	float DelayDestroySeconds;//[Offset: 0x328, Size: 0x4]
	float FuelConsumeFactor;//[Offset: 0x32c, Size: 0x4]
	MaterialDamage[] MaterialDamageConfig;//[Offset: 0x330, Size: 0x10]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x348, Size: 0x10]
	VehicleDamageRecord[] DamageRecords;//[Offset: 0x358, Size: 0x10]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x630103c
	void TranslateFuelToReplicatedRatio();// 0x6301028
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x6300e48
	void TakeDamageByBoneNameInner(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x6300c54
	void TakeDamageByBoneName(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x6300a60
	void SetUGCHUDStatus(int Status);// 0x63009e4
	void SetHPMax(float InHPmax, bool bChangeHP);// 0x6300924
	void SetHPFuel(float InHP, float InFuel);// 0x6300870
	void SetHP(float InHP);// 0x63007f8
	void SetFuel(float InFuel);// 0x630077c
	void SetDelayDestroySeconds(float InSeconds);// 0x6300700
	void RPC_Multicast_VehicleTakeDamage(float Damage, int LeftHP, int DamageType, Actor* DamageCauser);// 0x63005cc
	void RefreshWheelState();// 0x63005b8
	void OnRep_WheelsCurrentHP();// 0x63005a4
	void OnRep_HP();// 0x6300590
	void OnRep_Fuel();// 0x630057c
	bool NoFuel();// 0x6300544
	void Maintenance(float addpercenthp, bool fixtire);// 0x6300484
	bool IsDontDamage();// 0x6300468
	bool IsDontConsumeFuel();// 0x630044c
	bool IsDestroyed();// 0x6300414
	int GetWheelsHPNum();// 0x63003e0
	float GetWheelHPMax(int WheelIdx);// 0x6300354
	float GetWheelHP(int WheelIdx);// 0x63002c8
	float GetVehicleHPMax();// 0x6300294
	float GetVehicleHP();// 0x6300260
	int GetUGCHUDStatus();// 0x630022c
	float GetFuelMax();// 0x63001f8
	float GetFuelConsumeFactor();// 0x63001c4
	float GetFuel();// 0x6300190
	float GetDelayDestroySeconds();// 0x630015c
	bool CanVehicleBeMaintence();// 0x6300140
	bool CanVehicleBeGasCan();// 0x6300124
	void CalculateDestroyVehicleWheelFlow(Controller* Instigator);// 0x63000a8
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialDamage
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]
	float DamageScale;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0, Size: 0x4]
	bool DontDamageWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleDamageRecord
	Controller* Instigator;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Damage;//[Offset: 0xc, Size: 0x4]
	int DamageType;//[Offset: 0x10, Size: 0x4]
	int AdditionalParam;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	delegate OnContactWater;//[Offset: 0x2d0, Size: 0x10]
	delegate OnEnterWater;//[Offset: 0x2e0, Size: 0x10]
	bool bUseBuoyancyEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	OceanManager* OceanManager;//[Offset: 0x2f8, Size: 0x8]
	float MeshDensity;//[Offset: 0x300, Size: 0x4]
	float FluidDensity;//[Offset: 0x304, Size: 0x4]
	float FluidLinearDamping;//[Offset: 0x308, Size: 0x4]
	float FluidAngularDamping;//[Offset: 0x30c, Size: 0x4]
	Vector VelocityDamper;//[Offset: 0x310, Size: 0xc]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	float MaxUnderwaterVelocity;//[Offset: 0x320, Size: 0x4]
	float TestPointRadius;//[Offset: 0x324, Size: 0x4]
	Vector[] TestPoints;//[Offset: 0x328, Size: 0x10]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1]
	bool SnapToSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a, Size: 0x1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33b, Size: 0x1]
	float[] PointDensityOverride;//[Offset: 0x340, Size: 0x10]
	StructBoneOverride[] BoneOverride;//[Offset: 0x350, Size: 0x10]
	bool bEnableZOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 0x1]
	bool DrawDebugSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x362, Size: 0x1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x363, Size: 0x1]
	float StayUprightStiffness;//[Offset: 0x364, Size: 0x4]
	float StayUprightDamping;//[Offset: 0x368, Size: 0x4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x36c, Size: 0xc]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	float WaveForceMultiplier;//[Offset: 0x37c, Size: 0x4]
	SceneComponent* UpdatedComponent;//[Offset: 0x380, Size: 0x8]
	byte TickGroup;//[Offset: 0x388, Size: 0x1]
	bool EnableCustomWaveForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 0x1]
	Vector CustomWaveForceTestPointOffset;//[Offset: 0x38c, Size: 0xc]
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x398, Size: 0x10]
	PhysicsConstraintComponent* UprightConstraintComp;//[Offset: 0x560, Size: 0x8]
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x9d275d8
	void OnEnterWaterDelegate__DelegateSignature(bool IsUnderWater);// 0x70644c4
	void OnContactWaterDelegate__DelegateSignature(bool IsContactingWater);// 0x70644c4
	void NativeSetEnableCustomWaveForce(bool bEnable);// 0x9d27554
	bool IsFloatingOnWater();// 0x9d27530
	bool IsEntirelyUnderWater();// 0x9d274f4
	bool IsContactedWater();// 0x9d274d0
	void EndableUprightConstraint(bool bEnable);// 0x9d2744c
	bool CheckPointInWater(Vector Point, bool isWorldPosition);// 0x9d27378
<----------Generated by SSpawner v1.0.4---------->


Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1]
	Vector GlobalWaveDirection;//[Offset: 0x3f8, Size: 0xc]
	float GlobalWaveSpeed;//[Offset: 0x404, Size: 0x4]
	float GlobalWaveAmplitude;//[Offset: 0x408, Size: 0x4]
	float DistanceCheckAbove;//[Offset: 0x40c, Size: 0x4]
	float DistanceCheckBelow;//[Offset: 0x410, Size: 0x4]
	WaveParameter[] WaveClusters;//[Offset: 0x418, Size: 0x10]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x428, Size: 0x10]
	float NetWorkTimeOffset;//[Offset: 0x438, Size: 0x4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1]
	float ModulationStartHeight;//[Offset: 0x440, Size: 0x4]
	float ModulationMaxHeight;//[Offset: 0x444, Size: 0x4]
	float ModulationPower;//[Offset: 0x448, Size: 0x4]
	Landscape* Landscape;//[Offset: 0x450, Size: 0x8]
	Texture2D* HeightmapTexture;//[Offset: 0x458, Size: 0x8]
	bool bShouldCorrectTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1]
	Box[] WaterBoxes;//[Offset: 0x490, Size: 0x10]
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	Transform[] WaterTransforms;//[Offset: 0x4a8, Size: 0x10]
	Vector[] WaterBoxExtends;//[Offset: 0x4b8, Size: 0x10]
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x9d28afc
	LinearColor GetHeightmapPixel(float U, float V);// 0x9d28a34
<----------Generated by SSpawner v1.0.4---------->


Class: WaveParameter
	float Rotation;//[Offset: 0x0, Size: 0x4]
	float Length;//[Offset: 0x4, Size: 0x4]
	float Amplitude;//[Offset: 0x8, Size: 0x4]
	float Steepness;//[Offset: 0xc, Size: 0x4]
	float TimeScale;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0, Size: 0x14]
	WaveParameter Wave02;//[Offset: 0x14, Size: 0x14]
	WaveParameter Wave03;//[Offset: 0x28, Size: 0x14]
	WaveParameter Wave04;//[Offset: 0x3c, Size: 0x14]
	WaveParameter Wave05;//[Offset: 0x50, Size: 0x14]
	WaveParameter Wave06;//[Offset: 0x64, Size: 0x14]
	WaveParameter Wave07;//[Offset: 0x78, Size: 0x14]
	WaveParameter Wave08;//[Offset: 0x8c, Size: 0x14]
<----------Generated by SSpawner v1.0.4---------->


Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float Density;//[Offset: 0x8, Size: 0x4]
	float TestRadius;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WaterBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AcceptHigherZ;//[Offset: 0x79c, Size: 0x4]
	Vector Direction;//[Offset: 0x7a0, Size: 0xc]
	float SpeedValue;//[Offset: 0x7ac, Size: 0x4]
	float WaveForceMultiplier;//[Offset: 0x7b0, Size: 0x4]
	TrippleWaveParameter[] TrippleWaveClusters;//[Offset: 0x7b8, Size: 0x10]
	float TimeScaleOffset;//[Offset: 0x7c8, Size: 0x4]
	float Offset;//[Offset: 0x7cc, Size: 0x4]
	bool UseSplineDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 0x1]
	float SpeedAttenuationFromSpline;//[Offset: 0x7d4, Size: 0x4]
	bool UseSplineZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 0x1]
	float ZOffset;//[Offset: 0x7dc, Size: 0x4]
	float CellSizeX;//[Offset: 0x7e0, Size: 0x4]
	float CellSizeY;//[Offset: 0x7e4, Size: 0x4]
	<float,WaterBoxCell> Cells;//[Offset: 0x7e8, Size: 0x50]
	int KeyFactor;//[Offset: 0x838, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TrippleWaveParameter
	WaveParameter WaveCluster0;//[Offset: 0x0, Size: 0x14]
	WaveAdjust WaveAdjust0;//[Offset: 0x14, Size: 0x8]
	WaveParameter WaveCluster1;//[Offset: 0x1c, Size: 0x14]
	WaveAdjust WaveAdjust1;//[Offset: 0x30, Size: 0x8]
	WaveParameter WaveCluster2;//[Offset: 0x38, Size: 0x14]
	WaveAdjust WaveAdjust2;//[Offset: 0x4c, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: WaveAdjust
	float TimeScaleOffset;//[Offset: 0x0, Size: 0x4]
	float Offset;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WaterBoxCell
	Vector WaveDirection;//[Offset: 0x0, Size: 0xc]
	float WaveZ;//[Offset: 0xc, Size: 0x4]
	Vector PushForceDirection;//[Offset: 0x10, Size: 0xc]
	float Speed;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x2d0, Size: 0x8]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x2d8, Size: 0x8]
	Actor* ConstraintActor2;//[Offset: 0x2e0, Size: 0x8]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x2e8, Size: 0x8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x300, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x308, Size: 0x10]
	ConstraintInstance ConstraintInstance;//[Offset: 0x318, Size: 0x1b8]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x8df3d9c
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x8df3d18
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x8df3c60
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x8df3ba8
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x8df3af0
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x8df3a68
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x8df3954
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x8df38cc
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x8df37b8
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x8df36c8
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x8df3600
	void SetDisableCollision(bool bDisableCollision);// 0x8df357c
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x8df34b8
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x8df33a0
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x8df32c0
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x8df3198
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x8df3110
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x8df3040
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x8df2fbc
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x8df2eec
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x8df2e34
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x8df2d7c
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x8df2cc4
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x8df2c3c
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x8df2b6c
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x8df2a7c
	void SetAngularDriveMode(byte DriveMode);// 0x8df2a00
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x8df2938
	bool IsBroken();// 0x8df2900
	float GetCurrentTwist();// 0x8df28cc
	float GetCurrentSwing2();// 0x8df2898
	float GetCurrentSwing1();// 0x8df2864
	Transform GetConstraintWorldTransform(byte Frame);// 0x8df27c0
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x8df26e4
	void BreakConstraint();// 0x8df26d0
<----------Generated by SSpawner v1.0.4---------->


Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleSyncComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0x1d8, Size: 0x10]
	delegate OnActorHitFromClient;//[Offset: 0x1e8, Size: 0x10]
	float MinCorrectionInterval;//[Offset: 0x1f8, Size: 0x4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0x1fc, Size: 0x4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x200, Size: 0x4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x204, Size: 0x4]
	float SendingToServerIntervalAtClient;//[Offset: 0x208, Size: 0x4]
	float SendingReliableHitToServerInterval;//[Offset: 0x20c, Size: 0x4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x210, Size: 0x4]
	float AllowMaxLinearSpeedRatio;//[Offset: 0x214, Size: 0x4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0x218, Size: 0x4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0x21c, Size: 0x4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0x220, Size: 0x4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0x224, Size: 0x4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0x228, Size: 0x4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0x22c, Size: 0x4]
	float IdleForceUpdateThreshold;//[Offset: 0x230, Size: 0x4]
	float IdleForceSyncInterval;//[Offset: 0x234, Size: 0x4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	float StaticFixLocation;//[Offset: 0x23c, Size: 0x4]
	float StaticFixAngel;//[Offset: 0x240, Size: 0x4]
	float StaticStopFixTorelence;//[Offset: 0x244, Size: 0x4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x248, Size: 0x4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 0x1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 0x1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x250, Size: 0x4]
	float SimulatedFloorUpDistance;//[Offset: 0x254, Size: 0x4]
	float MaxAllowJumpHeight;//[Offset: 0x258, Size: 0x4]
	float MaxSyncSpeedZDelta;//[Offset: 0x25c, Size: 0x4]
	float MaxSyncSpeedZDeltaStep1;//[Offset: 0x260, Size: 0x4]
	STExtraVehicleBase* VehicleOwner;//[Offset: 0x268, Size: 0x8]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x370, Size: 0x58]
	VehicleHitRewindThreshold VehicleHitRewindThreshold;//[Offset: 0x410, Size: 0x18]
	bool bEnableValidateVelNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	float VelZThreshold_ValidateGround;//[Offset: 0x42c, Size: 0x4]
	float GroundSinTolerance;//[Offset: 0x430, Size: 0x4]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x6329730
	void ServerMoveUnreliably_Vehicle4W(int InCorrectionId, float TimeStamp, const VehicleNetMovement4W Movement);// 0x6329570
	void ServerMoveReliably_Vehicle4W(int InCorrectionId, float TimeStamp, const VehicleNetMovement4W Movement);// 0x63293b0
	void ServerHit_Vehicle4W(int InCorrectionId, float TimeStamp, const VehicleNetHit4W Movement);// 0x6329234
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x632908c
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x6328ebc
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x6328cec
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x6328aa0
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x63288ac
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x63286b0
	void SendClientHitPointToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, PrimitiveComponent* HitActorComponent, const Vector_NetQuantize100 NormalImpulse, const Vector_NetQuantize100 HitPoint);// 0x63283d8
	void SendClientHitCharacterToServerReliably(float ServerTimeStamp, const Vector_NetQuantize100 VehicleLocation, const Vector_NetQuantizeNormal VehicleRotator, float VehicleVelocitySize, const Vector_NetQuantize100 AngularVelocity, STExtraBaseCharacter* HitCharacter, float HitTimeStamp, const Vector_NetQuantize100 HitLocation);// 0x6328178
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x6327ff8
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x6327e78
	void OnDriverRide();// 0x6327e64
	void HandleProtectionEnable(bool InEnable);// 0x6327de0
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x6327ce4
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x6327b70
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x6327a74
	void HandleOnDSOptimGrayPublishFlagsChanged();// 0x6327a60
	Actor*[] GetRiders();// 0x63279bc
	bool GetPrimitiveCompRigidBodyState(PrimitiveComponent* PrimitiveComp, out RigidBodyState OutState, FName BoneName);// 0x6327884
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x63277ec
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x6327704
	void DragUnderGround();// 0x63276f0
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x63275dc
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x632747c
	bool CheckAndLoadLandscape(float DeltaTime);// 0x63273ec
	void ApplyRigidBodyState(out RigidBodyState NewState);// 0x6327348
	bool AdjustFloorPosition(out const Vector ClientLocation, out const Actor*[] Riders, out Vector OutLocation);// 0x63271d8
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleSyncPostPhysxTick.TickFunction
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleHitRewindThreshold
	float ValidDeltaSeconds;//[Offset: 0x0, Size: 0x4]
	float VehicleRewindDistance;//[Offset: 0x4, Size: 0x4]
	float VehicleRewindAngle;//[Offset: 0x8, Size: 0x4]
	float VelocitySize;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityInDegreesSize;//[Offset: 0x10, Size: 0x4]
	float HitCharacterDistance;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleNetMovement4W
	bool IsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	RigidVehicleMovement Movement;//[Offset: 0x4, Size: 0x30]
	RigidVehicleMovement LandMovement;//[Offset: 0x34, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: RigidVehicleMovement
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector LinVel;//[Offset: 0x18, Size: 0xc]
	Vector AngVel;//[Offset: 0x24, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleNetHit4W
	Actor* OtherActor;//[Offset: 0x0, Size: 0x8]
	Vector Impulse;//[Offset: 0x8, Size: 0xc]
	Vector ImpactPoint;//[Offset: 0x14, Size: 0xc]
	RigidVehicleMovement Movement;//[Offset: 0x20, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: VehBackpackItem
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int ItemCount;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 0x1]
	byte ViewYaw;//[Offset: 0x1, Size: 0x1]
	byte ViewRoll;//[Offset: 0x2, Size: 0x1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x378, Size: 0x4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x37c, Size: 0x4]
	float StayTimeBeforeReturning;//[Offset: 0x380, Size: 0x4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 0x1]
	bool bMeshRootVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 0x1]
	float ArmOriginProbeSize;//[Offset: 0x388, Size: 0x4]
	Rotator RelativeToOwnerRotator;//[Offset: 0x38c, Size: 0xc]
	Rotator SmartCamRotationExtra;//[Offset: 0x398, Size: 0xc]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1]
	float MinPitch;//[Offset: 0x3b0, Size: 0x4]
	float MinSmartPitch;//[Offset: 0x3b4, Size: 0x4]
	float MaxPitch;//[Offset: 0x3b8, Size: 0x4]
	float SmartPitchInputFactor;//[Offset: 0x3bc, Size: 0x4]
	float SmartYawInputFactor;//[Offset: 0x3c0, Size: 0x4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1]
	float RevoerTimefromFreeTime;//[Offset: 0x3c8, Size: 0x4]
	CameraComponent* CameraComponent;//[Offset: 0x3f0, Size: 0x8]
	bool bKeepCameraLagWhenSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	bool bNoFixCameraLagWhenSpecator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	float ResultMinPitch;//[Offset: 0x41c, Size: 0x4]
	float ResultMaxPitch;//[Offset: 0x420, Size: 0x4]
	Vector ArmOriginOffset;//[Offset: 0x424, Size: 0xc]
	bool bIsAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	float SocketOffsetInterpSpeed;//[Offset: 0x454, Size: 0x4]
	float CurAdditiveOffsetFov;//[Offset: 0x458, Size: 0x4]
	float FieldOfViewInterpSpeed;//[Offset: 0x45c, Size: 0x4]
	float LeaveMaxDistance;//[Offset: 0x460, Size: 0x4]
	float LeaveMaxTime;//[Offset: 0x464, Size: 0x4]
	float MaxDistanceStayTime;//[Offset: 0x470, Size: 0x4]
	float ApproachTime;//[Offset: 0x478, Size: 0x4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x488, Size: 0x8]
	float FreeCamRotationReturnRate;//[Offset: 0x490, Size: 0x4]
	bool bUseReverseMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	void UseBackupCameraData(bool bUse);// 0x6323c94
	void SetSteerCameraYaw(float InSteerCameraYaw, bool bRelativeToStartYaw);// 0x6323bd4
	void SetSmartCameraInput(float Yaw, float Pitch);// 0x6323b20
	void SetSmartCameraAutoReturn(bool bEnabled);// 0x6323a9c
	void SetFreeCameraInput(Rotator deltaRot);// 0x6323a20
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x632399c
	void SetBackupCameraData(out const CameraOffsetData CameraData);// 0x63238e0
	void ResetSmartCamera();// 0x63238cc
	float GetSteerCameraYaw(bool bRelativeToStartYaw);// 0x6323838
	Rotator GetLookRotation();// 0x6323800
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x63236a8
	void EnableCameraProcess(bool Enable, Vector FSocketOffsetModifier, float fFOVModifier);// 0x63235a4
	void DelayRotationLagEnabledEnd();// 0x6323590
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x632348c
	bool BackupCameraDataUsed();// 0x6323450
	void AddSmartCameraInput(float Yaw, float Pitch);// 0x632339c
<----------Generated by SSpawner v1.0.4---------->


Class: VehiclePickableComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	class PickUpWrapperActor* PickupWrapperClass;//[Offset: 0x1d8, Size: 0x8]
	bool bEnablePickupInClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	PickUpWrapperActor* PickupVehicle;//[Offset: 0x1e8, Size: 0x8]
	void PickupBy(STExtraPlayerCharacter* InCharacter);// 0x70644c4
	void OnRep_PickupVehicle();// 0x6314efc
	bool CanBePickedUp();// 0x6314ebc
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAntiCheatTask.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ESTAINoiseEventParams
	enum NoiseType;//[Offset: 0x0, Size: 0x1]
	float Loudness;//[Offset: 0x4, Size: 0x4]
	float StartAttenuationDist;//[Offset: 0x8, Size: 0x4]
	float MaxRange;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STBuffSystemComponent.ActorComponent.Object
	float RPCSyncInterval;//[Offset: 0x118, Size: 0x4]
	delegate OnClientAddBuffEvent;//[Offset: 0x120, Size: 0x10]
	delegate OnClientRemoveBuffEvent;//[Offset: 0x130, Size: 0x10]
	delegate OnClientUpdateBuffEvent;//[Offset: 0x140, Size: 0x10]
	delegate OnAddBuffEvent;//[Offset: 0x150, Size: 0x10]
	<int,UAEBlackboard*> BuffBlackboardMap;//[Offset: 0x160, Size: 0x50]
	BuffIncNetArray SyncBriefs;//[Offset: 0x1b0, Size: 0x20]
	BuffIncNetArray SyncRefBriefs;//[Offset: 0x1d0, Size: 0x20]
	BuffIncNetArray OwnerSyncBriefs;//[Offset: 0x1f0, Size: 0x20]
	BuffIncNetArray OwnerSyncRefBriefs;//[Offset: 0x210, Size: 0x20]
	<int> BriefRemoveInstIds;//[Offset: 0x230, Size: 0x50]
	void UpdateClientBuff(ClientSyncBrief Brief);// 0x649df10
	void RemoveClientBuff(int InstID);// 0x649de94
	void RemoveBuff(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x649dd64
	void RemoveAllBuffs();// 0x649dd50
	void OnRep_SyncBriefs();// 0x649dd3c
	void OnRep_OwnerSyncBriefs();// 0x649dd28
	void OnClientUpdateBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x70644c4
	void OnClientRemoveBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x70644c4
	void OnClientAddBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x70644c4
	void OnAddBuffEvent__DelegateSignature(int BuffID, int SkillID, bool IsExist, Actor* Causer);// 0x70644c4
	bool HasSkillID(int SkillID);// 0x649dc98
	bool HasBuff(int BuffID);// 0x649dc08
	BuffConfigSubsystem* GetSubsystem();// 0x649dbd4
	STBuff* GetSTBuffByBuffID(int BuffID);// 0x649db48
	byte GetRealOwnerRoleSafety();// 0x649db0c
	BuffInstInfo[] GetBuffInfoByBuffID(int BuffID);// 0x649da18
	bool GetBuffInfo(int InstID, out BuffInstInfo OutBuff);// 0x649d930
	float GetBuffDuration(int InstID, int CauseSkillID);// 0x649d86c
	float GetBuffDSEndTime(int InstID, int CauseSkillID);// 0x649d7a8
	BuffInstInfo[] GetAllBuffInfo();// 0x649d704
	void ClearBuffs(bool bClearAll, bool bImmediately);// 0x649d634
	bool ChangeDuration(int InstID, float Duration);// 0x649d568
	int AddBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID, int Level);// 0x649d3f0
<----------Generated by SSpawner v1.0.4---------->


Class: BuffIncNetArray
	BuffNetArrayUnit[] IncArray;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BuffNetArrayUnit
	ClientSyncBrief Unit;//[Offset: 0x0, Size: 0x28]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ClientSyncBrief
	int InstID;//[Offset: 0x0, Size: 0x4]
	byte LayerCount;//[Offset: 0x4, Size: 0x1]
	byte Level;//[Offset: 0x5, Size: 0x1]
	int BuffID;//[Offset: 0x8, Size: 0x4]
	int CauseSkillID;//[Offset: 0xc, Size: 0x4]
	Actor* CauseActor;//[Offset: 0x10, Size: 0x8]
	float SyncTime;//[Offset: 0x18, Size: 0x4]
	float Duration;//[Offset: 0x1c, Size: 0x4]
	float EndTime;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BuffConfigSubsystem.GameInstanceSubsystem.Subsystem.Object
	<int,BuffTableRow> Table;//[Offset: 0x60, Size: 0x50]
	<FString,class Object> BuffClassMap;//[Offset: 0xb0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: BuffTableRow
	int BuffID;//[Offset: 0x0, Size: 0x4]
	int MaxLayer;//[Offset: 0x4, Size: 0x4]
	float Duration;//[Offset: 0x8, Size: 0x4]
	FString BuffType;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	FString IconPath;//[Offset: 0x30, Size: 0x10]
	FString BPPath;//[Offset: 0x40, Size: 0x10]
	FString Desc;//[Offset: 0x50, Size: 0x10]
	<FString> MutexBuffTypes;//[Offset: 0x60, Size: 0x50]
	<FString> ExcludeBuffTypes;//[Offset: 0xb0, Size: 0x50]
	enum RefreshType;//[Offset: 0x100, Size: 0x1]
	enum ReActionType;//[Offset: 0x101, Size: 0x1]
	enum TargetType;//[Offset: 0x102, Size: 0x1]
	enum MultiCauserHanleType;//[Offset: 0x103, Size: 0x1]
	enum MultiSkillHandleType;//[Offset: 0x104, Size: 0x1]
	enum ClientSyncType;//[Offset: 0x105, Size: 0x1]
	float ClientSyncInterval;//[Offset: 0x108, Size: 0x4]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	bool IsOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1]
	bool bNeedShowInUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 0x1]
	int LocalizeDescID;//[Offset: 0x110, Size: 0x4]
	int TipsOnAddBuff;//[Offset: 0x114, Size: 0x4]
	int ModeOpen;//[Offset: 0x118, Size: 0x4]
	FString ModeStrings;//[Offset: 0x120, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: STBuff.Object
	int BuffID;//[Offset: 0x40, Size: 0x4]
	FString BuffName;//[Offset: 0x48, Size: 0x10]
	FString Desc;//[Offset: 0x58, Size: 0x10]
	int LayerMax;//[Offset: 0x68, Size: 0x4]
	float Duration;//[Offset: 0x6c, Size: 0x4]
	float ClientSyncInterval;//[Offset: 0x70, Size: 0x4]
	enum ClientSyncType;//[Offset: 0x74, Size: 0x1]
	enum TargetType;//[Offset: 0x75, Size: 0x1]
	enum RefreshType;//[Offset: 0x76, Size: 0x1]
	enum ReActionType;//[Offset: 0x77, Size: 0x1]
	enum MultiCauserHandleType;//[Offset: 0x78, Size: 0x1]
	enum MultiSkillHandleType;//[Offset: 0x79, Size: 0x1]
	bool IsExecuteOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	bool RemoveAllLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]
	STBuffAction*[] Actions;//[Offset: 0x80, Size: 0x10]
	bool bNeedShowBuffInBuffList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	int LocalizeDescID;//[Offset: 0x94, Size: 0x4]
	FString IconPath;//[Offset: 0x98, Size: 0x10]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	int TipsOnAddBuff;//[Offset: 0xac, Size: 0x4]
	DataProviderBase*[] DataProviders;//[Offset: 0xb0, Size: 0x10]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0xc0, Size: 0x50]
	int InstancedNodesTotalSize;//[Offset: 0x110, Size: 0x4]
	void Tick(ActorComponent* BuffSystemComponent, int InstID, float DetalTime, float TimeSeconds);// 0x6499f1c
	void ResetActionExecute(ActorComponent* BuffSystemComponent, int InstID);// 0x6499e64
	void Initialize(ActorComponent* BuffSystemComponent, int InstID);// 0x6499dac
	void End(ActorComponent* BuffSystemComponent, int InstID);// 0x6499cf4
	void Destroy(ActorComponent* BuffSystemComponent, int InstID);// 0x6499c3c
	bool CopyActions();// 0x6499c04
	void ChangeNotify(ActorComponent* BuffSystemComponent, int InstID);// 0x6499b4c
<----------Generated by SSpawner v1.0.4---------->


Class: STBuffAction.Object
	float ExecuteDelay;//[Offset: 0x40, Size: 0x4]
	int ArrayIndex;//[Offset: 0x44, Size: 0x4]
	STBuff* OwnerBuff;//[Offset: 0x48, Size: 0x8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x50, Size: 0x8]
	int CurInstID;//[Offset: 0x58, Size: 0x4]
	void Tick(ActorComponent* BuffSystemComponent, int InstID, float DetalTime);// 0x649ad1c
	void SetEnabled(ActorComponent* BuffSystemComponent, int InstID, bool Enabled);// 0x649ac20
	void ResetExecute(ActorComponent* BuffSystemComponent, int InstID, bool IgnoreEnd);// 0x649ab24
	void OnTick(float DetalTime);// 0x649aaa0
	void OnResetExecute(bool IgnoreEnd);// 0x649aa14
	void OnInitialize();// 0x649a9f8
	void OnExecute();// 0x649a9dc
	void OnEnd();// 0x649a9c0
	void OnDestroy();// 0x649a9a4
	void OnCheckLinkActionEnabled();// 0x649a988
	void OnChangeNotify();// 0x649a96c
	void Initialize(ActorComponent* BuffSystemComponent, int InstID);// 0x649a8b4
	byte GetRealOwnerRole();// 0x649a878
	Actor* GetOwner();// 0x649a844
	Actor* GetCauser();// 0x649a810
	void End(ActorComponent* BuffSystemComponent, int InstID);// 0x649a758
	void Destroy(ActorComponent* BuffSystemComponent, int InstID);// 0x649a6a0
	STBuffAction* CopyAction(Object* Outer);// 0x649a60c
	void CheckLinkActionEnabled(ActorComponent* BuffSystemComponent, int InstID);// 0x649a554
	void ChangeNotify(ActorComponent* BuffSystemComponent, int InstID);// 0x649a49c
<----------Generated by SSpawner v1.0.4---------->


Class: DataProviderBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BuffInstInfo
	int BuffID;//[Offset: 0x0, Size: 0x4]
	int InstID;//[Offset: 0x4, Size: 0x4]
	int CauseSkillID;//[Offset: 0x8, Size: 0x4]
	byte LayerCount;//[Offset: 0xc, Size: 0x1]
	float EndTime;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x540, Size: 0x10]
	delegate OnVehicleAvatarPreChange;//[Offset: 0x550, Size: 0x10]
	delegate OnEndChangeItemAvatar;//[Offset: 0x560, Size: 0x10]
	delegate OnServerAvatarEquiped;//[Offset: 0x570, Size: 0x10]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	ParticleGroup AppliedParticlesGroup;//[Offset: 0x588, Size: 0x30]
	bool bHasLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	bool CanChangeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 0x1]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x5c0, Size: 0x10]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x5d8, Size: 0x10]
	FName FrontMatSlotName;//[Offset: 0x5e8, Size: 0x8]
	FName TailMatSlotName;//[Offset: 0x5f0, Size: 0x8]
	FName FPPMatSlotName;//[Offset: 0x5f8, Size: 0x8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x600, Size: 0x8]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x608, Size: 0x8]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x610, Size: 0x8]
	BackpackVehicleAvatarHandle* VehicleAvatarHandle;//[Offset: 0x618, Size: 0x8]
	BackpackVehicleAvatarHandle* DefaultVehicleAvatarHandle;//[Offset: 0x620, Size: 0x8]
	VehicleAvatarPropretyHandle* DefaultPropertyHandle;//[Offset: 0x628, Size: 0x8]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x630, Size: 0x8]
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]
	bool ForceLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 0x1]
	WheeledVehicleMovementComponent* VehicleMovementComponent;//[Offset: 0x678, Size: 0x8]
	bool NeedTickModifyMatParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1]
	float DownDetectLength;//[Offset: 0x684, Size: 0x4]
	PlayerController* LocalPC;//[Offset: 0x688, Size: 0x8]
	bool HasWelComeLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	void WakeUpVehicle();// 0x62f5d88
	void VehicleAvatarPreChangeDelegate__DelegateSignature(int AvatarID);// 0x70644c4
	bool TriggerSelectRandomAvatar();// 0x62f5d48
	void PreChangeVehicleBrokenAvatar();// 0x62f5d2c
	void PreChangeVehicleAvatar(int InItemID);// 0x62f5cb0
	void PreChangeAvatarFPP();// 0x62f5c9c
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x62f5c10
	void OverrideVehiclePhysX();// 0x62f5bfc
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x70644c4
	SoftObjectPath GetVehicleFPPStaticMeshPath();// 0x62f5b84
	SoftObjectPath GetVehicleFPPSkeletalMeshPath();// 0x62f5b0c
	ItemAvatarMatPath[] GetVehicleFPPMatPath();// 0x62f5aa8
	ItemAvatarMatPath[] GetVehicleBrokenMatPath();// 0x62f5a3c
	BackpackVehicleAvatarHandle* GetVehicleAvatarHandle();// 0x62f5a20
	FName GetReflectionCubeName_Lobby();// 0x70644c4
	FName GetReflectionCubeName();// 0x62f59ec
	SoftObjectPath GetItemDefaultSkeletalMeshPath();// 0x62f596c
	FString GetItemAvatarHandlePath(int ItemId);// 0x70644c4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x70644c4
	int GetDefaultAvatarID();// 0x62f5938
	BackpackVehicleAvatarHandle* GetDefaultAvatarHandle();// 0x62f5904
	int GetCurrentAvatarID();// 0x62f58d0
	void ExitFPPVehicle();// 0x62f58bc
	void EnterFPPVehicle(bool InEnterFPPInVehicle);// 0x62f5838
	void EndChangeItemAvatarDelegate__DelegateSignature();// 0x70644c4
	void DestroyWelcomeLight();// 0x62f5824
	void CreateWelcomeLight();// 0x62f5810
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x62f56f0
	void ClearVehicleLightEffect();// 0x70644c4
	void CheckWelcomeLightConditionIsSatisfy(float DeltaTime);// 0x62f5674
	bool CheckIsNeedEnterFPPVehicle();// 0x62f563c
	bool CheckBrokenMesh();// 0x62f5604
	bool CheckAvatarChanged();// 0x62f55cc
	void CheckAndOpenWelcomeLight();// 0x62f55b8
	bool CanPlayerSee();// 0x62f5580
	void AsyncLoadPropertyHandle();// 0x62f556c
	void ApplyReflectionCubemap(MeshComponent* MeshComp);// 0x62f54f0
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x62f53f0
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum[] SupportChangeTypes;//[Offset: 0x1d0, Size: 0x10]
	ItemAvatarData[] BrokenMatData;//[Offset: 0x1e0, Size: 0x10]
	SkeletalMesh* SkeletalMeshBroken;//[Offset: 0x1f0, Size: 0x28]
	StaticMesh* StaticMeshBroken;//[Offset: 0x218, Size: 0x28]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x240, Size: 0x28]
	StaticMesh* FPPStaticMesh;//[Offset: 0x268, Size: 0x28]
	ItemAvatarData[] FPPMatData;//[Offset: 0x290, Size: 0x10]
	<FName,ParticleSoftWrapperArray> ParticleSfx;//[Offset: 0x2a0, Size: 0x50]
	ParticleAsset[] ShowParticles;//[Offset: 0x2f0, Size: 0x10]
	ParticleSystem* ExplosionParticle;//[Offset: 0x300, Size: 0x28]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x328, Size: 0x28]
	ParticleSystem* LightEffect;//[Offset: 0x350, Size: 0x28]
	<FName,Texture*> RefelectionCubemaps;//[Offset: 0x378, Size: 0x50]
	bool IsLowDeviceLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	VehCharAnimDataWrapper[] VehCharAnimData;//[Offset: 0x3d0, Size: 0x10]
	class AnimInstance* VehicleAnim;//[Offset: 0x3e0, Size: 0x28]
	VehicleMatParamModifyCfg[] MatModifyByVelocityCfg;//[Offset: 0x408, Size: 0x10]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	VehDecalCfg DecalCfg;//[Offset: 0x420, Size: 0x78]
<----------Generated by SSpawner v1.0.4---------->


Class: VehCharAnimDataWrapper
	FName AnimCompTag;//[Offset: 0x0, Size: 0x8]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehCharAnimData
	byte VehAnimType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleMatParamModifyCfg
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	enum Usage;//[Offset: 0x9, Size: 0x1]
	RuntimeFloatCurve ParamModifyCurve;//[Offset: 0x10, Size: 0x78]
	enum TargetType;//[Offset: 0x88, Size: 0x1]
	CurveVector* VectorCurve;//[Offset: 0x90, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: VehDecalCfg
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float NeedParkTime;//[Offset: 0x4, Size: 0x4]
	MaterialInterface* DecalMaterial;//[Offset: 0x8, Size: 0x28]
	Texture* DecalTexture;//[Offset: 0x30, Size: 0x28]
	Vector2D UVScale;//[Offset: 0x58, Size: 0x8]
	Vector2D UVOffset;//[Offset: 0x60, Size: 0x8]
	Vector DecalSize;//[Offset: 0x68, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAvatarPropretyHandle.Object
	int AvatarID;//[Offset: 0x30, Size: 0x4]
	VehicleAvatarProperty AvatarProperty;//[Offset: 0x38, Size: 0x130]
	class STExtraVehicleBase* OwnerVehicleClass;//[Offset: 0x168, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAvatarProperty
	SkeletalMesh* TPPMesh;//[Offset: 0x0, Size: 0x28]
	SkeletalMesh* FPPMesh;//[Offset: 0x28, Size: 0x28]
	WheelSetup[] WheelSetups;//[Offset: 0x50, Size: 0x10]
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x60, Size: 0x10]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x70, Size: 0x10]
	VehicleTransmissionData GearSetup;//[Offset: 0x80, Size: 0x30]
	Vector CenterOfMassOffset;//[Offset: 0xb0, Size: 0xc]
	VehicleNeutralThrottleConfig NeutralThrottleConfig;//[Offset: 0xc0, Size: 0x70]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x931, Size: 0x1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x932, Size: 0x1]
	int MasterCompLODLevel;//[Offset: 0x934, Size: 0x4]
	int VehicleSkinID;//[Offset: 0x938, Size: 0x4]
	delegate OnNetAvatarDataChanged;//[Offset: 0x940, Size: 0x10]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 0x1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x958, Size: 0x28]
	class AnimInstance* BaseAnimBP;//[Offset: 0x980, Size: 0x28]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x9a8, Size: 0x10]
	delegate OnStyleEquippedEvent;//[Offset: 0x9b8, Size: 0x10]
	delegate OnStyleUnequippedEvent;//[Offset: 0x9c8, Size: 0x10]
	delegate OnServerAvatarEquiped;//[Offset: 0x9d8, Size: 0x10]
	enum[] AccessoryPartSlotTypes;//[Offset: 0x9e8, Size: 0x10]
	FName FrontMatSlotName;//[Offset: 0x9f8, Size: 0x8]
	FName TailMatSlotName;//[Offset: 0xa00, Size: 0x8]
	FName FPPMatSlotName;//[Offset: 0xa08, Size: 0x8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0xa10, Size: 0x8]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0xa18, Size: 0x8]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0xa20, Size: 0x8]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0xa28, Size: 0x8]
	void WakeUpVehicle();// 0x62ebfa4
	void UpdateStaticMeshLOD(int MasterLODLevel);// 0x62ebf28
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x62ebe08
	void SetVehicleAvatarNormalMode();// 0x62ebdf4
	void SetVehicleAvatarFPPMode();// 0x62ebde0
	void SetVehicleAvatarBroken();// 0x62ebdcc
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x62ebc60
	void SetMasterBaseMeshPath(FString InPath);// 0x62ebbb8
	void SetMasterBaseMeshAnimBP(FString InPath);// 0x62ebb10
	void ResetAdvanceVehicleSkinID();// 0x62ebaf4
	void RemoveAllEquippedStyle();// 0x62ebae0
	bool ProcessHandleUnequip(enum InSlotType);// 0x62eba50
	bool ProcessHandleEquip(enum InSlotType);// 0x62eb9c0
	void PreProcessBeforeLoadMesh();// 0x62eb9a4
	void PostProcessAfterLoadMesh();// 0x62eb988
	void PerChangeVehicleAvatar_Old(int InVehicleSkinID);// 0x62eb90c
	void PerChangeVehicleAvatar(int InVehicleSkinID);// 0x62eb890
	void OverrideVehiclePhysX();// 0x62eb87c
	void OnStyleUnequippedEvent__DelegateSignature(int OldStyleID);// 0x70644c4
	void OnStyleEquippedEvent__DelegateSignature(int NewStyleID, int OldStyleID);// 0x70644c4
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x70644c4
	void OnRep_BodySlotStateChanged();// 0x62eb860
	void OnNetAvatarDataChanged__DelegateSignature();// 0x70644c4
	VehicleStyleData MakeVehicleStyleData(int InStyleID);// 0x70644c4
	bool IsValidAvatar();// 0x62eb828
	int IsStyleHasModelConfig(out const VehicleStyleData InStyleData);// 0x62eb754
	bool IsAvatarFPPMode();// 0x62eb71c
	bool IsAvatarBroken();// 0x62eb6e4
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x62eb64c
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x62eb5b4
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID);// 0x62eb51c
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID);// 0x62eb484
	bool InitVehicleAvatar_Old(out const VehicleAvatarData InVehicleAvatarData);// 0x62eb38c
	bool InitVehicleAvatar(out const VehicleAvatarData InVehicleAvatarData, bool bUpdateFlag);// 0x62eb24c
	void InitMasterComponent();// 0x62eb238
	void Initialize();// 0x62eb21c
	void InitialAvatarParam();// 0x62eb208
	int HasStyleEquipped(int InStyleID);// 0x62eb17c
	int HasEquippedSameStyle(int InStyleID);// 0x62eb0f0
	bool HandleUnequipStyle(int InStyleID);// 0x62eb060
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x62eafa0
	bool HandleEquipStyle(int InStyleID);// 0x62eaf10
	SkeletalMeshComponent* GetVehicleWheelMeshComp();// 0x62eaedc
	MeshComponent* GetVehicleBodyMeshComp();// 0x62eaea8
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x62eada0
	FName GetReflectionCubeName_Lobby();// 0x70644c4
	FName GetReflectionCubeName();// 0x62ead6c
	bool CanBeMeshMerge(int SlotID);// 0x62eacdc
	void ApplyReflectionCubemap(MeshComponent* MeshComp, ItemHandleBase* InItemHandle);// 0x62eac28
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleStyleData
	int StyleID;//[Offset: 0x0, Size: 0x4]
	enum SlotType;//[Offset: 0x4, Size: 0x1]
	VehicleStyle[] MutilStyles;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleStyle
	enum StyleType;//[Offset: 0x0, Size: 0x1]
	int StyleValue;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: EffectComponent.ActorComponent.Object
	delegate EffectGraphChangeDelegate;//[Offset: 0x1a8, Size: 0x10]
	bool NeedWaitStartFireRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x5e90364
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x5e9018c
	void S2A_EndEffectGraph(int UID);// 0x5e90108
	int GetGraphsNum();// 0x5e900e4
	void C2S_SyncWeaponBulletNum(Actor* WeaponActor, int ClientLastFireID, uint32 ClipID, BulletInClip InCurBulletInClip);// 0x5e8fdf4
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x5e8fbe4
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAIComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleAINavStateChangedDelegate;//[Offset: 0x1d8, Size: 0x10]
	delegate VehicleAINavStateAllowableDistanceChangedDelegate;//[Offset: 0x1e8, Size: 0x10]
	STExtraVehicleAIController* VehicleAIController;//[Offset: 0x238, Size: 0x8]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x240, Size: 0x8]
	AINavStateData AutoDriver_AINavStateData;//[Offset: 0x248, Size: 0x38]
	bool AutoDriver_EnableNoDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	float AutoDriver_MaxAllowableDistanceSquared;//[Offset: 0x284, Size: 0x4]
	float CheckAllowableDistanceInter;//[Offset: 0x288, Size: 0x4]
	Vector[] AutoDrive_RouteList;//[Offset: 0x290, Size: 0x10]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x2a0, Size: 0x10]
	void StopMoveByHandrake();// 0x62f0bbc
	void StopAutoDriving();// 0x62f0ba8
	bool StartAutoDriving();// 0x62f0b70
	void ServerSetAutoDriverTarget(Vector TargetPosition);// 0x62f0abc
	void OnRep_AutoDriver_AINavStateData();// 0x62f0aa8
	bool IsReachDest();// 0x62f0a70
	bool IsAutoDriving();// 0x62f0a38
	bool HasAutoDriveTarget();// 0x62f0a00
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x62f09cc
	STExtraVehicleAIController* GetVehicleAIController();// 0x62f0998
	int GetCurrentTargetWaypointIdx();// 0x62f0964
	Vector GetAutoDriveTarget();// 0x62f092c
	void EndAutoDriving();// 0x62f0918
	void ClearAutoDriveTarget();// 0x62f0904
	bool CanAutoDrivingNoDriver();// 0x62f08cc
	bool CanAutoDriving();// 0x62f0894
	bool AllowableDistanceAutoDriving(bool CheckDriveTarget);// 0x62f07fc
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleAIController.AIController.Controller.Actor.Object
	FName IsDestroyedBlackboardKeyName;//[Offset: 0x500, Size: 0x8]
	FName AIPawnTag;//[Offset: 0x508, Size: 0x8]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x510, Size: 0x8]
	VehicleAIComponent* VehicleAIComp;//[Offset: 0x518, Size: 0x8]
	void StandaloneSetBTRun(bool runBT);// 0x622f14c
	void StandaloneRePosses(STExtraWheeledVehicle* Vehicle, bool restartBT);// 0x622f08c
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x622f010
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x622efdc
	VehicleAIComponent* GetVehicleAIComp();// 0x622efa8
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleAIManager.Actor.Object
	delegate OnPostVehicleBehaviorInit;//[Offset: 0x3f8, Size: 0x10]
	bool bOnlySpawnInSafetyZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	bool bQueueSpawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1]
	DataTable* VehicleSpawnDataTable;//[Offset: 0x410, Size: 0x28]
	FName AIPawnTag;//[Offset: 0x438, Size: 0x8]
	int MaxConcurrentVehicles;//[Offset: 0x440, Size: 0x4]
	int MaxVehiclesPerGame;//[Offset: 0x444, Size: 0x4]
	float SpawnPointCooldown;//[Offset: 0x44c, Size: 0x4]
	FName CurrentPathKeyName;//[Offset: 0x450, Size: 0x8]
	FName CurrentPathInputKeyKeyName;//[Offset: 0x458, Size: 0x8]
	FName PreviousPathInputKeyKeyName;//[Offset: 0x460, Size: 0x8]
	FName IsPathingInReverseKeyName;//[Offset: 0x468, Size: 0x8]
	FName IsStoppedKeyName;//[Offset: 0x470, Size: 0x8]
	FName IsDebugForceStoppedKeyName;//[Offset: 0x478, Size: 0x8]
	enum AvoidanceMode;//[Offset: 0x480, Size: 0x1]
	float InitRetryDelay;//[Offset: 0x484, Size: 0x4]
	int MaxInitRetries;//[Offset: 0x488, Size: 0x4]
	QueuedVehicleSpawn[] QueuedVehicleSpawns;//[Offset: 0x498, Size: 0x10]
	STExtraVehicleAISpawner*[] VehicleSpawns;//[Offset: 0x4a8, Size: 0x10]
	STExtraAIWaypointSegment*[] VehiclePaths;//[Offset: 0x4b8, Size: 0x10]
	<PathPoint,bool> PathPointPlayZoneStatus;//[Offset: 0x4c8, Size: 0x50]
	<PathPoint,PathInputPlayZoneDistanceQuery> PathPointPlayZoneDistances;//[Offset: 0x518, Size: 0x50]
	<STExtraVehicleAISpawner*,float> LastVehicleSpawnTimes;//[Offset: 0x568, Size: 0x50]
	<FString,float> AllVehiclesDestroyedTimeMap;//[Offset: 0x5b8, Size: 0x50]
	float PreviousMatchTime;//[Offset: 0x608, Size: 0x4]
	<FName,Object*> CacheUObjectMap;//[Offset: 0x610, Size: 0x50]
	<FString,ActiveVehicleList> ActiveVehiclesMap;//[Offset: 0x670, Size: 0x50]
	AutoDriveAIDataRow[] AutoDriveAIADataSet;//[Offset: 0x988, Size: 0x10]
	STExtraAIWaypointSegment* SegmentStart;//[Offset: 0x998, Size: 0x8]
	int SegmentPointIdxStart;//[Offset: 0x9a0, Size: 0x4]
	STExtraAIWaypointSegment* SegmentEnd;//[Offset: 0x9a8, Size: 0x8]
	int SegmentPointIdxEnd;//[Offset: 0x9b0, Size: 0x4]
	bool bVehicleAIForcecNoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 0x1]
	bool bVehicleAIShowIconInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b5, Size: 0x1]
	float fVehicleHPScaleForTowTeam;//[Offset: 0x9b8, Size: 0x4]
	float fVehicleHPScaleForFourTeam;//[Offset: 0x9bc, Size: 0x4]
	bool bSyncBuildPathGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]
	bool bDebugAllWayPointKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c1, Size: 0x1]
	bool bDebugAllLinkPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c2, Size: 0x1]
	bool bDebugFindPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c3, Size: 0x1]
	int DSSwitchId_SemiTruck;//[Offset: 0x9c4, Size: 0x4]
	int DSSwitchId_ModelY;//[Offset: 0x9c8, Size: 0x4]
	void ProcessPathPlayZoneStatus();// 0x622ff4c
	void OnPostVehicleBehaviorInit__DelegateSignature(STExtraVehicleAIController* AIController, Pawn* VehiclePawn);// 0x70644c4
	void MulticastDrawPathPointDebug(Vector PointLocation, int ForwardPlayZoneDistance, int ReversePlayZoneDistance);// 0x622fe54
<----------Generated by SSpawner v1.0.4---------->


Class: QueuedVehicleSpawn
	Guid ID;//[Offset: 0x0, Size: 0x10]
	FString SpawnId;//[Offset: 0x10, Size: 0x10]
	class Pawn* VehicleClass;//[Offset: 0x20, Size: 0x8]
	BehaviorTree* BehaviorTree;//[Offset: 0x28, Size: 0x8]
	BlackboardData* BlackboardData;//[Offset: 0x30, Size: 0x8]
	SpawnFilter SpawnSettings;//[Offset: 0x38, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: SpawnFilter
	bool bLimitSpawnPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName[] ValidSpawnPoints;//[Offset: 0x8, Size: 0x10]
	FName[] InvalidSpawnPoints;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleAISpawner.Actor.Object
	Guid ID;//[Offset: 0x3f4, Size: 0x10]
	FString SpawnTag;//[Offset: 0x408, Size: 0x10]
	bool bIsSingleUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	SceneComponent* SpawnPoint;//[Offset: 0x420, Size: 0x8]
	WaypointNetworkConnection StartingPath;//[Offset: 0x428, Size: 0x10]
	float InitializeVehicleBehaviorDelay;//[Offset: 0x438, Size: 0x4]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1]
	PathPoint[] spawnWayPaths;//[Offset: 0x440, Size: 0x10]
	bool bStartEngineWhenSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x458, Size: 0x8]
	void PostSpawnAI(Pawn* SpawnedVehicle);// 0x6233118
	void OnSpawnAI(Pawn* SpawnedVehicle);// 0x6233094
<----------Generated by SSpawner v1.0.4---------->


Class: WaypointNetworkConnection
	STExtraAIWaypointSegment* ConnectedSegment;//[Offset: 0x0, Size: 0x8]
	int WaypointIndex;//[Offset: 0x8, Size: 0x4]
	bool bPathSegmentInReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraAIWaypointSegment.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1]
	bool bAlwaysDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f5, Size: 0x1]
	SplineComponent* WaypointsSpline;//[Offset: 0x3f8, Size: 0x8]
	<int,WaypointNetworkConnectionList> ConnectedSegments;//[Offset: 0x400, Size: 0x50]
	<int,NodeTargetSpeedOverrides> TargetSpeedOverridesMap;//[Offset: 0x450, Size: 0x50]
	Pawn*[] PawnsOnForwardPath;//[Offset: 0x4a0, Size: 0x10]
	Pawn*[] PawnsOnReversePath;//[Offset: 0x4b0, Size: 0x10]
	void DrawDebug(float DrawTime);// 0x60f0ce4
<----------Generated by SSpawner v1.0.4---------->


Class: WaypointNetworkConnectionList
	WaypointNetworkConnection[] Connections;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: NodeTargetSpeedOverrides
	float ForwardTargetSpeedOverride;//[Offset: 0x0, Size: 0x4]
	float ForwardMaxSpeedOverride;//[Offset: 0x4, Size: 0x4]
	float ReverseTargetSpeedOverride;//[Offset: 0x8, Size: 0x4]
	float ReverseMaxSpeedOverride;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PathPoint
	STExtraAIWaypointSegment* Path;//[Offset: 0x0, Size: 0x8]
	int InputKey;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PathInputPlayZoneDistanceQuery
	int ForwardDistance;//[Offset: 0x0, Size: 0x4]
	bool bForwardQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	int ReverseDistance;//[Offset: 0x8, Size: 0x4]
	bool bReverseQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ActiveVehicleList
	Pawn*[] Vehicles;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AutoDriveAIDataRow
	class Pawn* VehicleClass;//[Offset: 0x0, Size: 0x28]
	BehaviorTree* BehaviorTreeAsset;//[Offset: 0x28, Size: 0x28]
	BlackboardData* BlackboardDataAsset;//[Offset: 0x50, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: AINavStateData
	int CurrentTargetWaypointIdx;//[Offset: 0x0, Size: 0x4]
	Vector TargetPosition;//[Offset: 0x4, Size: 0xc]
	Vector StartPosition;//[Offset: 0x10, Size: 0xc]
	int[] PathWayPoints;//[Offset: 0x20, Size: 0x10]
	int PathWayPointNum;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TrailerRepMovement
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x2cc, Size: 0x4]
	float TriggerInterval;//[Offset: 0x2d0, Size: 0x4]
	float MaxAllowedValidationDiff;//[Offset: 0x2d4, Size: 0x4]
	void OnTriggered();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleTrailerComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnLinkStateChange;//[Offset: 0x1d8, Size: 0x10]
	delegate OnTrailerLinkStateChange;//[Offset: 0x1e8, Size: 0x10]
	int MaxTrailerNum;//[Offset: 0x208, Size: 0x4]
	<enum,int> LinkFailedTips;//[Offset: 0x210, Size: 0x50]
	float Timer_TrailerPoll;//[Offset: 0x260, Size: 0x4]
	Vector LinkerPoint;//[Offset: 0x264, Size: 0xc]
	float ExtentTimes4Distance;//[Offset: 0x270, Size: 0x4]
	float RepDistanceErrorSq;//[Offset: 0x274, Size: 0x4]
	float LowSpeedRepDistanceErrorSq;//[Offset: 0x278, Size: 0x4]
	float LowSpeed4RepDistanceError;//[Offset: 0x27c, Size: 0x4]
	RepTrailerLinkState ReplicatedLinkState;//[Offset: 0x280, Size: 0x10]
	VehicleTrailerComponent* CandidatePrev;//[Offset: 0x290, Size: 0x8]
	CameraOffsetData CameraDta;//[Offset: 0x2c0, Size: 0x2c]
	void TryUnlink();// 0x632e584
	void TryLink();// 0x632e570
	void TrailerPoll();// 0x632e55c
	void TrailerLinkStateChangeDelegate__DelegateSignature(VehicleTrailerComponent* Trailer, enum LinkState);// 0x70644c4
	void ServerUnlink();// 0x632e4fc
	void ServerLink();// 0x632e49c
	void ServerForceLinkTo(VehicleTrailerComponent* PrevTrailer);// 0x632e420
	void OnRep_LinkState(out const RepTrailerLinkState LastLinkState);// 0x632e394
	void OnMeshPhysicsCreated();// 0x632e380
	void OnLinkConstraintBroken(int ConstraintIndex);// 0x632e304
	void OnHealthStateChanged(enum HealthState);// 0x632e288
	void OnDriverChanged(STExtraPlayerCharacter* OldDriver, STExtraPlayerCharacter* NewDriver);// 0x632e1d4
	void LinkStateChangeDelegate__DelegateSignature(enum LinkState);// 0x70644c4
	bool IsTrailer();// 0x632e198
	bool HasTrailer();// 0x632e15c
	int GetTrailerNum();// 0x632e128
	VehicleTrailerComponent* GetPrev();// 0x632e0f0
	VehicleTrailerComponent* GetNext();// 0x632e0b8
	enum GetLinkState();// 0x632e09c
	VehicleTrailerComponent* GetHead();// 0x632e068
<----------Generated by SSpawner v1.0.4---------->


Class: RepTrailerLinkState
	enum LinkState;//[Offset: 0x0, Size: 0x1]
	VehicleTrailerComponent* Prev;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0x170, Size: 0x10]
	float SeekAreaPixelSize;//[Offset: 0x180, Size: 0x4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0x184, Size: 0x8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0x18c, Size: 0x8]
	float ScopeInDelayTime;//[Offset: 0x194, Size: 0x4]
	float InitialLockFrameLength;//[Offset: 0x198, Size: 0x4]
	float FinalLockFrameLength;//[Offset: 0x19c, Size: 0x4]
	float MaxSeekDeistance;//[Offset: 0x1a0, Size: 0x4]
	float LineTraceTargetMaxDistance;//[Offset: 0x1a4, Size: 0x4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x1a8, Size: 0x4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x1ac, Size: 0x4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x1b0, Size: 0x4]
	float TraceTargetInterval;//[Offset: 0x1b4, Size: 0x4]
	float TraceTargetIntervalNoLaserTrace;//[Offset: 0x1b8, Size: 0x4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x1c0, Size: 0x50]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x210, Size: 0x50]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x260, Size: 0x50]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x2b0, Size: 0x8]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x2b8, Size: 0x8]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x2c0, Size: 0x8]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x2c8, Size: 0x8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x2d0, Size: 0x8]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x2e0, Size: 0x10]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x2f0, Size: 0x10]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x300, Size: 0x10]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x320, Size: 0x4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x324, Size: 0x4]
	float CurTraceTargetCountTime;//[Offset: 0x328, Size: 0x4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	bool bSeekAndLockAlwaysValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 0x1]
	bool bSeekAndLockWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 0x1]
	bool bSeekAndLockToVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32f, Size: 0x1]
	bool bSeekAndLockToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	Actor* LastLockSoundTaget;//[Offset: 0x3b8, Size: 0x8]
	void ShowEnemyLaunchRocketTips();// 0x60593f8
	void SetCurrentLockTarget(Actor* InTarget);// 0x605937c
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x605928c
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x60591dc
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x60590ec
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x605903c
	void RemoveTargetList(Actor*[] TargetList);// 0x6058f08
	void RemoveTarget(Actor* Target);// 0x6058e8c
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0x70644c4
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0x70644c4
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0x70644c4
	void InitComplete();// 0x6058e78
	void HandleTargetOutOfSeekArea();// 0x6058e64
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x6058de0
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x6058d5c
	enum GetCurrentSeekAndLockStage();// 0x6058d20
	Actor* GetCurrentLockTarget();// 0x6058cec
	bool CheckTargetIsVisible(Actor* Target);// 0x6058c54
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x6058bc4
	void AddTarget(Actor* Target);// 0x6058b48
<----------Generated by SSpawner v1.0.4---------->


Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0, Size: 0x4]
	float ShrinkSpeed;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	float TolerateDistanceFractor;//[Offset: 0x114, Size: 0x4]
	float MaxPacketLossRate;//[Offset: 0x118, Size: 0x4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0x11c, Size: 0x4]
	int MaxTotalMoveCheatTimes;//[Offset: 0x120, Size: 0x4]
	int MaxTotalPassWallTimes;//[Offset: 0x124, Size: 0x4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0x128, Size: 0x4]
	float SecondsSinceLastTeleport2SkipCheckDSAverageSpeed;//[Offset: 0x12c, Size: 0x4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int MaxShootPointPassWall;//[Offset: 0x134, Size: 0x4]
	int MaxGunPosErrorTimes;//[Offset: 0x138, Size: 0x4]
	int MaxMuzzleHeightTime;//[Offset: 0x13c, Size: 0x4]
	int MaxLocusFailTime;//[Offset: 0x140, Size: 0x4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x144, Size: 0x4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x148, Size: 0x4]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x150, Size: 0x28]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x1e8, Size: 0x90]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x278, Size: 0x88]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x300, Size: 0x3c]
	ClientMoveSpeedCheck ClientMoveSpeedCheck;//[Offset: 0x340, Size: 0x28]
	RealtimeMoveSpeedCheck RealtimeMoveSpeedCheck;//[Offset: 0x368, Size: 0x24]
	float MaxJumpHeight;//[Offset: 0x390, Size: 0x4]
	Character* CharacterOwner;//[Offset: 0x398, Size: 0x8]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	void SetJumpLimitorJumpDistanceScale(const float InValue);// 0x5f8a4dc
	void SetJumpLimitorCheckLowSpeedVehicle(const bool bCheck);// 0x5f8a458
	void SetJumpLimitorCheckLowSpeedThreshold(const float SpeedThreshold);// 0x5f8a3dc
	void SetJumpLimitorCheckLowSpeedNonVehicle(const bool bCheck);// 0x5f8a358
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x5f8a274
	void RefreshRealMaxJumpHeight();// 0x5f8a260
	void Ping2Server(float ServerTime, float ClientTime, const Vector_NetQuantize100 ClientLoc, float MaxSpeed);// 0x5f8a0f4
	void Ping2Client(float ServerTime);// 0x5f8a070
	void OnPreReconnectOnServer();// 0x5f8a05c
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x5f89dcc
	float GetSpeedFromTimeredLocationData();// 0x5f89d98
	void DebugDrawLine(const Vector Start, const Vector End);// 0x5f89ce8
	void ClearJumpLimit();// 0x5f89cd4
<----------Generated by SSpawner v1.0.4---------->


Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0, Size: 0x4]
	uint32 bIgnoreCheck;//[Offset: 0x4, Size: 0x4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x8, Size: 0x4]
	float CheckTimeSpeedIntervel;//[Offset: 0xc, Size: 0x4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x10, Size: 0x4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x14, Size: 0x4]
	float MaxPublishForbidMoveTime;//[Offset: 0x18, Size: 0x4]
	float ServerSendPingIntervel;//[Offset: 0x1c, Size: 0x4]
	float MaxMoveSpeedValue;//[Offset: 0x20, Size: 0x4]
	int MaxSpeedSplitNum;//[Offset: 0x24, Size: 0x4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x28, Size: 0x4]
	float MaxClientSpeed;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0, Size: 0x4]
	float DataSampleInterval;//[Offset: 0x4, Size: 0x4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 0x4]
	float CheatLockTime;//[Offset: 0xc, Size: 0x4]
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 0x4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x80, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ClientTimeSpeedCheck
	float CheckTimeDeltaInterval;//[Offset: 0x24, Size: 0x4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x28, Size: 0x4]
	float MaxPublishForbidMoveTime;//[Offset: 0x2c, Size: 0x4]
	float MaxServerTimeDelta;//[Offset: 0x30, Size: 0x4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x34, Size: 0x4]
	int MaxProcessCounterOneFrame;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ClientMoveSpeedCheck
	float ThresholdScale;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: RealtimeMoveSpeedCheck
<----------Generated by SSpawner v1.0.4---------->


Class: ShovelInfo
<----------Generated by SSpawner v1.0.4---------->


Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0x110, Size: 0x8]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0x118, Size: 0x8]
	void HandleOwnerDeath(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x5df3304
<----------Generated by SSpawner v1.0.4---------->


Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0x110, Size: 0x4]
	float TileRemovalRadius;//[Offset: 0x114, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0, Size: 0x1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ActorAttributeComponent.ActorComponent.Object
	FString tableName;//[Offset: 0x110, Size: 0x10]
	void UpdateAttribute(int TemplateID);// 0x5d2f910
	void InitializeFollow();// 0x5d2f8f4
	void Initialize(Actor* Actor);// 0x5d2f870
<----------Generated by SSpawner v1.0.4---------->


Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0, Size: 0x1]
	int8 Disabled;//[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0x110, Size: 0x8]
	float UpdateHitBoxDeltaTime;//[Offset: 0x118, Size: 0x4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	Transform[] StandHitBoxesTransform;//[Offset: 0x120, Size: 0x10]
	Transform[] ProneHitBoxesTransform;//[Offset: 0x130, Size: 0x10]
	PrimitiveComponent*[] StandHitBoxes;//[Offset: 0x140, Size: 0x10]
	PrimitiveComponent*[] ProneHitBoxes;//[Offset: 0x150, Size: 0x10]
	FString HitBox_Stand_Tag;//[Offset: 0x168, Size: 0x10]
	FString HitBox_Prone_Tag;//[Offset: 0x178, Size: 0x10]
	bool bDebugCollisionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	OpenCollisionLODAngle[] ConfigCollisionDistSqAngles;//[Offset: 0x190, Size: 0x10]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x1a4, Size: 0x4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x1a8, Size: 0x4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x1ac, Size: 0x4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x1b0, Size: 0x4]
	bool bCloseCharacterMeshCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]
	BodyTypeDef ProneBodyDef;//[Offset: 0x1b8, Size: 0x8]
	BodyTypeDef StandBodyDef;//[Offset: 0x1c0, Size: 0x8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x1c8, Size: 0x8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x1d0, Size: 0x8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x1d8, Size: 0x8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x1e0, Size: 0x50]
	float PawnCollisionCountdown;//[Offset: 0x230, Size: 0x4]
	bool bRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	float BoxCollisionCountdown;//[Offset: 0x238, Size: 0x4]
	bool bRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x5fb6730
	void UpdateAllInstanceBodyTransform(int Type);// 0x5fb66ac
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x5fb6620
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x5fb6580
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x5fb64c0
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x5fb635c
	byte GetCurHitPartJudgementType();// 0x5fb6328
	void CloseBodyBulletCollision();// 0x5fb630c
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef BodyDef);// 0x5fb617c
<----------Generated by SSpawner v1.0.4---------->


Class: OpenCollisionLODAngle
	float DistSq;//[Offset: 0x0, Size: 0x4]
	float Angle;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TurnAroundViewComponent.ActorComponent.Object
	FocusTargetItem FocusTurnData;//[Offset: 0x158, Size: 0x38]
	bool bTurnOnlyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	Character* MyChar;//[Offset: 0x1c0, Size: 0x8]
	void OnRep_FocusTurnTargetChange();// 0x627bd84
<----------Generated by SSpawner v1.0.4---------->


Class: FocusTargetItem
	Actor* Actor;//[Offset: 0x0, Size: 0x8]
	Vector Position;//[Offset: 0x8, Size: 0xc]
	bool IsStartTurnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float TurnTargetVelocity;//[Offset: 0x18, Size: 0x4]
	Rotator LastActorRotation;//[Offset: 0x1c, Size: 0xc]
	FString CurveName;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0x110, Size: 0x1]
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0x118, Size: 0x50]
	TickListItem[] NeedTickComponentList;//[Offset: 0x168, Size: 0x10]
	byte RoleBits;//[Offset: 0x178, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: TickListItem
	ActorComponent* Comp;//[Offset: 0x0, Size: 0x8]
	enum RoleType;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterMaterialComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterHasGunBodyOffsetList
	CharacterPeekBodyOffsetList NormalBodyOffsetList;//[Offset: 0x0, Size: 0xd8]
	CharacterPeekBodyOffsetList HasGunGunBodyOffsetList;//[Offset: 0xd8, Size: 0xd8]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterPeekBodyOffsetList
	CharacterBodyOffset NormalBodyOffsetList;//[Offset: 0x0, Size: 0x48]
	CharacterBodyOffset LeftPeekBodyOffsetList;//[Offset: 0x48, Size: 0x48]
	CharacterBodyOffset RightPeekBodyOffsetList;//[Offset: 0x90, Size: 0x48]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0, Size: 0xc]
	Vector FootOffset;//[Offset: 0xc, Size: 0xc]
	Vector TPPCameraOffset;//[Offset: 0x18, Size: 0xc]
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 0xc]
	Vector UpperArmL;//[Offset: 0x30, Size: 0xc]
	Vector UpperArmR;//[Offset: 0x3c, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: ActivitySyncData
	bool bIsDuringActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIsMovementDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Vector AttachedOffsetLocation;//[Offset: 0x4, Size: 0xc]
	Rotator AttachedOffsetRotation;//[Offset: 0x10, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0, Size: 0x1]
	float TotalTime;//[Offset: 0x4, Size: 0x4]
	float AttachWeaponTime;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 0x8]
	FString SwitchGroupName;//[Offset: 0x8, Size: 0x10]
	FString SwitchValue;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: STCharacterNearDeathComp.ActorComponent.Object
	bool bHasFallInWaterFully;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1]
	float BreathMax;//[Offset: 0x164, Size: 0x4]
	float AssistAccountableDuration;//[Offset: 0x168, Size: 0x4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0x16c, Size: 0x4]
	bool bNearDeathOnSinglePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0x178, Size: 0x8]
	int MaxDeathTimes;//[Offset: 0x180, Size: 0x4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	int NDStatusEnterTimes;//[Offset: 0x188, Size: 0x4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x190, Size: 0x8]
	float EnterNearDeathSeconds;//[Offset: 0x198, Size: 0x4]
	float Breath;//[Offset: 0x19c, Size: 0x4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0x1a0, Size: 0x4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0x1a4, Size: 0x4]
	float NDDecreaseRate;//[Offset: 0x1a8, Size: 0x4]
	Controller* EventInstigatorRecorded;//[Offset: 0x1b0, Size: 0x8]
	Actor* DamageCauserRecorded;//[Offset: 0x1b8, Size: 0x8]
	DamageEvent DamageEventRecorded;//[Offset: 0x1c0, Size: 0x10]
	delegate OnPreEnterNearDeath;//[Offset: 0x1d8, Size: 0x10]
	delegate OnEnterNearDeathState;//[Offset: 0x1e8, Size: 0x10]
	delegate OnLeaveNearDeathState;//[Offset: 0x1f8, Size: 0x10]
	float BeCarriedReduceRate;//[Offset: 0x208, Size: 0x4]
	float BeEnemyCarriedReduceRate;//[Offset: 0x20c, Size: 0x4]
	bool bEnableSwimWhileDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	bool bIsBeingRemotelyRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 0x1]
	float SetHealthSafety(float AddVal);// 0x60e5510
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x60e5404
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x60e52f8
	void ResetDataOnRespawn();// 0x60e52e4
	void RescueFinishSuccessfully();// 0x60e52d0
	void OnRep_BreathChanged();// 0x60e52bc
	bool IsNearDeathInvincible();// 0x60e5284
	bool IsHealthAlive();// 0x60e524c
	bool IsHaveLastBreathStatus();// 0x60e5214
	bool IsFinishedLastBreathStatus();// 0x60e51dc
	void InitializeOwner(Pawn* TempPawn);// 0x60e5160
	bool GotoLastBreathStatus(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, bool IsHeadshot);// 0x60e4fbc
	Controller* GetRecordedEventInstigator();// 0x60e4fa0
	float GetBreathMax();// 0x60e4f84
	float GetBreath();// 0x60e4f68
	void EnterSwimWhileDying();// 0x60e4f54
	void EnableDirectlyDie(bool bEnable);// 0x60e4ed0
	void DoFinishLastBreath();// 0x60e4ebc
	void DidFinishLastBreath();// 0x60e4ea8
	void ClearNearDeathTeammate();// 0x60e4e94
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x60e4dc4
	void AddDeadBuff();// 0x60e4db0
<----------Generated by SSpawner v1.0.4---------->


Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0x154, Size: 0x4]
	int SelfRescueWanderingRadius;//[Offset: 0x158, Size: 0x4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0x15c, Size: 0x4]
	anPickerData FanData;//[Offset: 0x160, Size: 0x14]
	STExtraBaseCharacter* RescueWho;//[Offset: 0x190, Size: 0x8]
	STExtraBaseCharacter* CarryWho;//[Offset: 0x198, Size: 0x8]
	float RescueingStatusStartTimeSeconds;//[Offset: 0x1a0, Size: 0x4]
	float RestoringDuration;//[Offset: 0x1bc, Size: 0x4]
	float SelfRestoringDuration;//[Offset: 0x1c0, Size: 0x4]
	FString DurationAttrModifyRef;//[Offset: 0x1c8, Size: 0x10]
	FString SelfDurationAttrModifyRef;//[Offset: 0x1d8, Size: 0x10]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x1e8, Size: 0x8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x1f0, Size: 0x8]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x60e67a8
	void WaitingConfirmState_ActOnUnsatisfied();// 0x60e6794
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x60e6718
	bool WaitingConfirmCarryState_IsConditionSatisfied();// 0x60e66e0
	void WaitingConfirmCarryState_ActOnUnsatisfied();// 0x60e66cc
	void WaitingConfirmCarryState_ActOnSatisfied(float DeltaTime);// 0x60e6650
	void TickAsHelper(float DeltaTime);// 0x60e65d4
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x60e6524
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x60e64a8
	void SelectedCarryEnemyTargetChangeNotifyHUD(Pawn* previousTarget);// 0x60e642c
	bool RescueingState_IsConditionSatisfied();// 0x60e63f4
	void RescueingState_ActOnUnsatisfied();// 0x60e63e0
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x60e6364
	void RescueingProcessFinished();// 0x60e6350
	void RefreshTargetChangeNotifyHUD();// 0x60e633c
	bool PlayerConfirmToRescueClientSide();// 0x60e6304
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x60e6238
	void OnRep_IsRescueingOtherStatusChange();// 0x60e6224
	bool IsInRescueingStatus();// 0x60e61ec
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer);// 0x60e6138
	float GetRestoringDuration();// 0x60e6104
	void DrawDebugFan();// 0x60e60f0
	void ClearTimerWaitingRescueProcessToFinish();// 0x60e60dc
<----------Generated by SSpawner v1.0.4---------->


Class: anPickerData
	float Radius;//[Offset: 0x0, Size: 0x4]
	float Angle;//[Offset: 0x4, Size: 0x4]
	float Offset;//[Offset: 0x8, Size: 0x4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0x110, Size: 0x8]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0x118, Size: 0x8]
	STExtraBaseCharacter* Target;//[Offset: 0x128, Size: 0x8]
	float CanFollowDist;//[Offset: 0x130, Size: 0x4]
	float QuitFollowAngleInput;//[Offset: 0x134, Size: 0x4]
	float QuitFollowDist;//[Offset: 0x138, Size: 0x4]
	float PointDensityTimeInterval;//[Offset: 0x13c, Size: 0x4]
	float DistThrehold;//[Offset: 0x140, Size: 0x4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x148, Size: 0x8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x150, Size: 0x8]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x190, Size: 0x10]
	TargetKeyOperation* CurOp;//[Offset: 0x1a0, Size: 0x8]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x60daea8
	void WaitingConfirmState_ActOnUnsatisfied();// 0x60dae94
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x60dae18
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x60dad8c
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x60dad10
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x60dac94
	bool PlayerStopFollow();// 0x60dac5c
	bool PlayerConfirmToFollow();// 0x60dac24
	void InitializeOwner(Pawn* _TempPawn);// 0x60daba8
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x60dab2c
	bool FollowingState_IsConditionSatisfied();// 0x60daaf4
	void FollowingState_ActOnUnsatisfied();// 0x60daae0
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x60daa64
<----------Generated by SSpawner v1.0.4---------->


Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x6266818
	byte Start();// 0x62667dc
	bool IsValidate();// 0x626679c
	void DebugDraw(Color DebugColor, bool isPersist);// 0x62666d8
	void Awake();// 0x62666bc
<----------Generated by SSpawner v1.0.4---------->


Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x88, Size: 0x8]
	STExtraBaseCharacter* Target;//[Offset: 0x90, Size: 0x8]
	byte Update(float DeltaTime);// 0x6265628
	FString ToString();// 0x6265584
	void TaskRemoved();// 0x6265568
	byte Start();// 0x626552c
	bool IsValidate();// 0x62654ec
	bool IsReachable();// 0x62654ac
	byte Finish();// 0x6265470
	void DebugDraw(Color DebugColor, bool isPersist);// 0x62653ac
	void Awake();// 0x6265390
<----------Generated by SSpawner v1.0.4---------->


Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x4a4, Size: 0x4]
	float SpringArmLengthModifier2;//[Offset: 0x4a8, Size: 0x4]
	float SpringArmLengthModifier3;//[Offset: 0x4ac, Size: 0x4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x4b0, Size: 0x8]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	bool bUseHitPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 0x1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e2, Size: 0x1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e3, Size: 0x1]
	float ResultMinPitch;//[Offset: 0x4e4, Size: 0x4]
	float ResultMaxPitch;//[Offset: 0x4e8, Size: 0x4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 0x1]
	bool bCameraTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 0x1]
	float FreeCamRotationReturnRate;//[Offset: 0x500, Size: 0x4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x504, Size: 0x2c]
	CameraOffsetData ProneCameraData;//[Offset: 0x530, Size: 0x2c]
	CameraOffsetData IndoorCameraData;//[Offset: 0x55c, Size: 0x2c]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x588, Size: 0x2c]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x5b4, Size: 0x2c]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x5e0, Size: 0x2c]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x60c, Size: 0x2c]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x638, Size: 0x2c]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x664, Size: 0x2c]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x690, Size: 0x2c]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x6bc, Size: 0x2c]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x6e8, Size: 0x2c]
	CameraOffsetData VaultCameraData;//[Offset: 0x714, Size: 0x2c]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x740, Size: 0x2c]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x76c, Size: 0x2c]
	CameraOffsetData InFireBalloonCameraData;//[Offset: 0x798, Size: 0x2c]
	CameraOffsetData ShoulderLeftCameraData;//[Offset: 0x7c4, Size: 0x2c]
	CameraOffsetData ShoulderRightCameraData;//[Offset: 0x7f0, Size: 0x2c]
	CameraOffsetData PeekLeftCameraDataInShoudler;//[Offset: 0x81c, Size: 0x2c]
	CameraOffsetData PeekRightCameraDataInShoudler;//[Offset: 0x848, Size: 0x2c]
	CameraOffsetData AirBorneStartCameraData;//[Offset: 0x874, Size: 0x2c]
	CameraOffsetData AirBorneFlyingCameraData;//[Offset: 0x8a0, Size: 0x2c]
	CameraOffsetData AirBorneSuperFlyingCameraData;//[Offset: 0x8cc, Size: 0x2c]
	float SocketOffsetInterpSpeedInShoulder;//[Offset: 0x8f8, Size: 0x4]
	float TargetOffsetInterpSpeedInShoulder;//[Offset: 0x8fc, Size: 0x4]
	float ArmLengthInterpSpeedInShoulder;//[Offset: 0x900, Size: 0x4]
	CameraOffsetData InsectCameraData;//[Offset: 0x904, Size: 0x2c]
	CameraOffsetData SkillCameraData;//[Offset: 0x930, Size: 0x2c]
	bool bIsGunShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 0x1]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95d, Size: 0x1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x960, Size: 0x2c]
	CameraOffsetData CustomCameraData;//[Offset: 0x98c, Size: 0x2c]
	bool NeedTraceHeadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 0x1]
	bool bUseFixedTraceTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b9, Size: 0x1]
	bool bAllwaysDoTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ba, Size: 0x1]
	bool bTraceRealCameraLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bb, Size: 0x1]
	Vector TraceTagetLocation;//[Offset: 0x9bc, Size: 0xc]
	float AdditionalSocketOffetZMax;//[Offset: 0x9cc, Size: 0x4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x9d0, Size: 0x8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x9d8, Size: 0x8]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x9e0, Size: 0x4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x9e4, Size: 0x4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1, Size: 0x1]
	bool bNoFixCameraLagWhenSpecator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f2, Size: 0x1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f3, Size: 0x1]
	float OffsetCountTime;//[Offset: 0x9f4, Size: 0x4]
	float OffSetDurTime;//[Offset: 0x9f8, Size: 0x4]
	float RevertMoveSpeed;//[Offset: 0x9fc, Size: 0x4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0xa00, Size: 0x8]
	Transform PrevRelativeTrans;//[Offset: 0xa10, Size: 0x30]
	Vector PrevRelativeSocketLocation;//[Offset: 0xa40, Size: 0xc]
	Quat PrevRelativeSocketRotation;//[Offset: 0xa50, Size: 0x10]
	void SetSelfieCameraDefRotation();// 0x5e647e8
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x5e64764
	void SetCustomCameraDataValueEnable(CameraOffsetData InCustomCameraData, bool IsEnable);// 0x5e64664
	void SetCustomCameraDataEnable(out CameraOffsetData CustomCameraData, bool IsEnable);// 0x5e64558
	void SetCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x5e64498
	void ResetFreeCamera();// 0x5e64484
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x5e6432c
	void DelayRotationLagEnabledEnd();// 0x5e64318
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x5e64250
	void DelayRotationBackLagEnabledEnd();// 0x5e6423c
	void DelayRotationBackLagEnabled(bool bEnabled, float Time, out const Rotator InRotation);// 0x5e6412c
	void AddAdditiveCameraOffset(out const Transform Transform, float FOV, bool bAdd);// 0x5e63ffc
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool bForceUseTargetArmLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	float GlobalTargetArmLength;//[Offset: 0x37c, Size: 0x4]
	float SocketOffsetInterpSpeed;//[Offset: 0x380, Size: 0x4]
	float TargetOffsetInterpSpeed;//[Offset: 0x384, Size: 0x4]
	float ArmLengthInterpSpeed;//[Offset: 0x388, Size: 0x4]
	float SpringArmInterpSpeedScale;//[Offset: 0x38c, Size: 0x4]
	float FieldOfViewInterpSpeed;//[Offset: 0x390, Size: 0x4]
	CameraOffsetData CurCameraData;//[Offset: 0x3e0, Size: 0x2c]
	CameraOffsetData DefaultCameraData;//[Offset: 0x40c, Size: 0x2c]
	float CurAdditiveOffsetFov;//[Offset: 0x438, Size: 0x4]
	<byte,bool> CurActiveDataMap;//[Offset: 0x440, Size: 0x50]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	PlayerController* CachedPC;//[Offset: 0x498, Size: 0x8]
	void OnRespawned();// 0x622514c
	bool HasActiveCameraOffsetData(byte InDataType);// 0x62250bc
	Rotator GetTargetRotation();// 0x622507c
	float GetCameraTargetArmLength();// 0x6225040
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x6224ee8
	void ClearCameraData();// 0x6224ecc
<----------Generated by SSpawner v1.0.4---------->


Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0, Size: 0x4]
	Vector AkLocation;//[Offset: 0x4, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: DamageCauserRecordData
	Controller* Causer;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Damage;//[Offset: 0xc, Size: 0x4]
	int StatusChangeMargin;//[Offset: 0x10, Size: 0x4]
	int DamageType;//[Offset: 0x14, Size: 0x4]
	int AdditionalParam;//[Offset: 0x18, Size: 0x4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int WeaponId;//[Offset: 0x20, Size: 0x4]
	int FloorType;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x814, Size: 0x1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x815, Size: 0x1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x818, Size: 0x4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x81c, Size: 0x4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x820, Size: 0x4]
	bool bUGCServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 0x1]
	bool bServerMoveCheckPassBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x825, Size: 0x1]
	Box PassBound;//[Offset: 0x828, Size: 0x1c]
	bool bAbandonReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x844, Size: 0x1]
	float MaxPrisonmentMove;//[Offset: 0x848, Size: 0x4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 0x1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84d, Size: 0x1]
	bool bPlatformIgnoreNullBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84e, Size: 0x1]
	float MaxFollowPlatformDistance;//[Offset: 0x850, Size: 0x4]
	bool bFixedMoveByCurveVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 0x1]
	float fStopParachuteForbbitClientAdjustSeconds;//[Offset: 0x858, Size: 0x4]
	bool bAdjustZErrorForLandscapeFirstLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 0x1]
	bool bForbiddenDragOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 0x1]
	bool bUnderGroundForbiddenDragOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x885, Size: 0x1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x886, Size: 0x1]
	bool bNotUseClientMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x887, Size: 0x1]
	bool bNotUseClientCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 0x1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x88c, Size: 0x4]
	float EnterShovelCD;//[Offset: 0x890, Size: 0x4]
	float DSEnterShovelCD;//[Offset: 0x894, Size: 0x4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x898, Size: 0x4]
	float MaxShovelFloorAngle;//[Offset: 0x89c, Size: 0x4]
	float UseVelocityDirMinSpeed;//[Offset: 0x8a0, Size: 0x4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x8a4, Size: 0x4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x8a8, Size: 0x4]
	float DefaultShovelingSpeed;//[Offset: 0x8ac, Size: 0x4]
	float DefaultShovelingDCC;//[Offset: 0x8b0, Size: 0x4]
	float ExtraShovelingDCC1;//[Offset: 0x8b4, Size: 0x4]
	float ExtraShovelingDCC2;//[Offset: 0x8b8, Size: 0x4]
	float ExtraShovelingDCC3;//[Offset: 0x8bc, Size: 0x4]
	float MinusGradeShovelingACC;//[Offset: 0x8c0, Size: 0x4]
	float MinusGradeShovelingDCC;//[Offset: 0x8c4, Size: 0x4]
	float MaxShovelingSpeed;//[Offset: 0x8c8, Size: 0x4]
	float StopShovelingSpeed;//[Offset: 0x8d0, Size: 0x4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x8d4, Size: 0x4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x8d8, Size: 0x4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x8dc, Size: 0x4]
	float ShovelingFPPFovVaule;//[Offset: 0x8e0, Size: 0x4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x8e4, Size: 0x4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x8e8, Size: 0x4]
	float ShovelingTPPFovVaule;//[Offset: 0x8ec, Size: 0x4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x8f0, Size: 0x4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x8f4, Size: 0x4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x8f8, Size: 0x4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x8fc, Size: 0x4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x900, Size: 0x4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x904, Size: 0x4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x908, Size: 0x4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x910, Size: 0x18]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x928, Size: 0x8]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x930, Size: 0x8]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x938, Size: 0x8]
	bool bIgnoreClientMovementModeErrorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x940, Size: 0x1]
	bool bIgnoreClientMovementModeSkillChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x940, Size: 0x1]
	float nowShovelingSpeed;//[Offset: 0x944, Size: 0x4]
	Rotator ShovelingRotation;//[Offset: 0x948, Size: 0xc]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954, Size: 0x1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x955, Size: 0x1]
	byte ShovelingPrePoseState;//[Offset: 0x957, Size: 0x1]
	float PreShovelFov;//[Offset: 0x958, Size: 0x4]
	delegate OnClientAdjustPosition;//[Offset: 0x978, Size: 0x10]
	delegate OnPhysicsFlyForwordAdjust;//[Offset: 0x988, Size: 0x10]
	delegate OnCharacterServerMoveDelegate;//[Offset: 0x998, Size: 0x10]
	delegate OnShovelStateChangeForBP;//[Offset: 0x9a8, Size: 0x10]
	delegate PostServerMoveDelegate;//[Offset: 0x9b8, Size: 0x10]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x9d0, Size: 0x8]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 0x1]
	float TimeSpeedFactor;//[Offset: 0x9dc, Size: 0x4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 0x1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e2, Size: 0x1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x9e4, Size: 0x4]
	bool bIgnoreChangingMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8, Size: 0x1]
	bool bIgnoreMovementBaseMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e9, Size: 0x1]
	bool bEnableAdjustFloorHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ea, Size: 0x1]
	bool bEnableJumpOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9eb, Size: 0x1]
	float JumpOffVelocityFactor;//[Offset: 0x9ec, Size: 0x4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 0x1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1, Size: 0x1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x9f4, Size: 0x4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9f8, Size: 0x1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9f8, Size: 0x1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x9fc, Size: 0x4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0xa00, Size: 0x4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0xa04, Size: 0x4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0xa08, Size: 0x4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0xa0c, Size: 0x4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0xa10, Size: 0x4]
	HitResult WalkHit;//[Offset: 0xa18, Size: 0x98]
	float WalkSpeedCurveScale;//[Offset: 0xab0, Size: 0x4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0xab8, Size: 0x8]
	float ProneFloorAngle;//[Offset: 0xac0, Size: 0x4]
	float ProneFloorZ;//[Offset: 0xac4, Size: 0x4]
	float JumpFloorAngle;//[Offset: 0xac8, Size: 0x4]
	float JumpFloorZ;//[Offset: 0xacc, Size: 0x4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0xad0, Size: 0x4]
	float ResolvePenetrationAdjustment;//[Offset: 0xad4, Size: 0x4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 0x1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0xadc, Size: 0x4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0xae0, Size: 0x4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xafc, Size: 0x1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafd, Size: 0x1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xafe, Size: 0x1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0xb00, Size: 0x4]
	bool ForceSimulatedOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb04, Size: 0x1]
	float AdjustRotationWhenProneFailedThrehold;//[Offset: 0xb08, Size: 0x4]
	bool bUGCDragOnGroundEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba8, Size: 0x1]
	float CurrentEnterShovelCD;//[Offset: 0xc0c, Size: 0x4]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc10, Size: 0x1]
	float CheckDistanceAhead;//[Offset: 0xc14, Size: 0x4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc18, Size: 0x1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0xc1c, Size: 0x4]
	float BaseSolvedWallCheckDistance;//[Offset: 0xc34, Size: 0x4]
	float BaseSolvedWallTraceDistance;//[Offset: 0xc38, Size: 0x4]
	float BaseSolvedWallOutDistance;//[Offset: 0xc3c, Size: 0x4]
	float BaseSolvedWallMoveWithForwardCos;//[Offset: 0xc40, Size: 0x4]
	bool bStepUpHardIgnoreEdgeTolerance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc44, Size: 0x1]
	float fStepDownEdgeToleranceRate;//[Offset: 0xc48, Size: 0x4]
	float fStepDownSuccessEdgeToleranceRate;//[Offset: 0xc4c, Size: 0x4]
	float MaxBaseStepUpHeight;//[Offset: 0xc50, Size: 0x4]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc54, Size: 0x1]
	CharacterDistanceSquareTickInternal[] AIDSTickDistanceInternal;//[Offset: 0xc58, Size: 0x10]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c, Size: 0x1]
	CharacterDistanceSquareTickInternal[] AIDSPhysicsQueryDistanceInternal;//[Offset: 0xc78, Size: 0x10]
	float DSAIDistanceOptimizeEnhanceAngle;//[Offset: 0xc88, Size: 0x4]
	float AIMovementSimulatePredictTime;//[Offset: 0xca0, Size: 0x4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0xca8, Size: 0x8]
	float SimulateNotReceiveMoveResetSeconds;//[Offset: 0xcc0, Size: 0x4]
	bool bResetSimulateWhenObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc4, Size: 0x1]
	float ResetSimulateXYDist;//[Offset: 0xcc8, Size: 0x4]
	float ResetSimulateZDist;//[Offset: 0xccc, Size: 0x4]
	float SimulateNotReceiveStopPredictionSeconds;//[Offset: 0xcd0, Size: 0x4]
	float MaxFlyAcceleration;//[Offset: 0xce4, Size: 0x4]
	uint32 LastAckBadMoveSequence;//[Offset: 0xd10, Size: 0x4]
	bool bAdjustAllowablePositionWithSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd14, Size: 0x1]
	float ResetAllowablePositionMaxSpeedTime;//[Offset: 0xd18, Size: 0x4]
	float DefaultMaxWalkSpeed;//[Offset: 0xd28, Size: 0x4]
	SimulateRepData[] CacheSimulateRepMoves;//[Offset: 0xd30, Size: 0x10]
	float SimulateInterpolateSmoothAccelerateNum;//[Offset: 0xd48, Size: 0x4]
	int nMaxSimulateCacheNum;//[Offset: 0xd84, Size: 0x4]
	float fServerMoveNetLagScaleSecMin;//[Offset: 0xd8c, Size: 0x4]
	float fServerMoveNetLagScaleSecMax;//[Offset: 0xd90, Size: 0x4]
	float fServerMoveAllowDiscrepancySquare;//[Offset: 0xd94, Size: 0x4]
	float fSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xd98, Size: 0x4]
	float fNoSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xd9c, Size: 0x4]
	float fLessThanSkipProxyPredictionOnNetUpdateCosTheta;//[Offset: 0xda0, Size: 0x4]
	float fSimulatePredictionNoAttenuationSec;//[Offset: 0xda4, Size: 0x4]
	float fSimulatePredictionAttenuationSecMax;//[Offset: 0xda8, Size: 0x4]
	float fSimulatePredictionAttenuationRate;//[Offset: 0xdac, Size: 0x4]
	float fSimulatePredictionAttenuationRateNearlyNoChg;//[Offset: 0xdb0, Size: 0x4]
	SimulateDragThesholds[] SimulateDragThesholds;//[Offset: 0xdb8, Size: 0x10]
	ServerMoveData[] CacheServerMoves;//[Offset: 0xdd0, Size: 0x10]
	ServerMoveData[] BatchServerMoves;//[Offset: 0xde0, Size: 0x10]
	ServerMoveData LastServerMove;//[Offset: 0xe00, Size: 0x50]
	ServerMoveData ProcessServerMove;//[Offset: 0xe50, Size: 0x50]
	float ServerBatchMoveDeltaTimeRateMax;//[Offset: 0xea0, Size: 0x4]
	float ServerBatchMoveDeltaMax;//[Offset: 0xea4, Size: 0x4]
	ServerReceiveMove LastServerReceiveMove;//[Offset: 0xec0, Size: 0x1c]
	float ServerMoveNetErrorInternal;//[Offset: 0xedc, Size: 0x4]
	float DSMoveSpeedLimitOverMaxSpeedTimes;//[Offset: 0xee4, Size: 0x4]
	float DSMoveSpeedLimitDeltaSecondsMax;//[Offset: 0xee8, Size: 0x4]
	float DSMoveSpeedLimitIsWeakNetPingMSec;//[Offset: 0xeec, Size: 0x4]
	float DSMoveSpeedLimitLowFPSRate;//[Offset: 0xef0, Size: 0x4]
	bool bAllowDSSpeedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf40, Size: 0x1]
	bool bShouldChekckSpeedOverLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf48, Size: 0x1]
	ResolvePenetrationMoveData ResolvePenetrationData;//[Offset: 0xf50, Size: 0x90]
	delegate OnResolvePenetrationDelegate;//[Offset: 0xfe0, Size: 0x10]
	float CacheLastValidMoveDistanceSq;//[Offset: 0xff0, Size: 0x4]
	float CacheLastValidMaxDistance;//[Offset: 0xff4, Size: 0x4]
	ResolvePenetrationParams ResolvePenetrationParams;//[Offset: 0xff8, Size: 0x58]
	float EngineResolvePenetrationMaxDistanceSq;//[Offset: 0x1050, Size: 0x4]
	float PushAwayForbidSetBaseSeconds;//[Offset: 0x1054, Size: 0x4]
	int PenetrationUnResolveCount;//[Offset: 0x1058, Size: 0x4]
	float PenetrationUnResolveDistanceSq;//[Offset: 0x105c, Size: 0x4]
	bool bResolvePenetrationAdjustClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1060, Size: 0x1]
	float CheckResolvePenetrationSeconds;//[Offset: 0x1064, Size: 0x4]
	float ResolvePenetrationSwitchPoseCD;//[Offset: 0x1070, Size: 0x4]
	float CheckResolvePenetrationDepth;//[Offset: 0x1080, Size: 0x4]
	float CheckResolvePenetrationDistance;//[Offset: 0x1084, Size: 0x4]
	DirectMoveData DirectMoveData;//[Offset: 0x10a0, Size: 0x40]
	CustomSkillMoveData AirJumpData;//[Offset: 0x10e0, Size: 0x38]
	PrimitiveComponent* CurrentClientMovementBase;//[Offset: 0x1130, Size: 0x8]
	float ComputeFloorConsiderClientPosDiffSizeSqMax;//[Offset: 0x1140, Size: 0x4]
	float SkilAirJumpJoystickForceSize;//[Offset: 0x1160, Size: 0x4]
	SimulateDragData SimulateDragData;//[Offset: 0x1164, Size: 0x28]
	float CanntMoveAdjustFlySpeedSize;//[Offset: 0x11a0, Size: 0x4]
	bool bTrustClientLandingOnMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b8, Size: 0x1]
	bool bPassWallCheckOnMovingPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b9, Size: 0x1]
	bool bAllowBeBlewUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ba, Size: 0x1]
	float BlewSpeedRatio;//[Offset: 0x11bc, Size: 0x4]
	float IgnoreAllBlowTime;//[Offset: 0x11c0, Size: 0x4]
	float IgnoreLastBlowTime;//[Offset: 0x11c4, Size: 0x4]
	float BlendingAdjustTime;//[Offset: 0x11c8, Size: 0x4]
	bool bAllowBePushedAway;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11cc, Size: 0x1]
	float NearPushBaseDistance;//[Offset: 0x11d0, Size: 0x4]
	float TangentialSpeedRatio;//[Offset: 0x11d4, Size: 0x4]
	float NormalSpeedRatio;//[Offset: 0x11d8, Size: 0x4]
	bool bBlockedByStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11dc, Size: 0x1]
	bool bIgnoreSelfBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11dd, Size: 0x1]
	float MinMoveDeltaTime;//[Offset: 0x1208, Size: 0x4]
	float MaxServerMoveDistFrame;//[Offset: 0x120c, Size: 0x4]
	float MaxServerMoveSpanTimeFrame;//[Offset: 0x1210, Size: 0x4]
	float MaxServerMoveBustFrameTime;//[Offset: 0x1214, Size: 0x4]
	bool bUseNewActorMarkTeleportTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1248, Size: 0x1]
	float SkipMarkTeleportTimeVehicleSpeed;//[Offset: 0x124c, Size: 0x4]
	<enum,FString> SpecialMovePaths;//[Offset: 0x1250, Size: 0x50]
	<byte,enum> CustomMoveModeToSpecialMoveType;//[Offset: 0x12a0, Size: 0x50]
	<enum,SpecialMoveBaseObj*> SpecialObjes;//[Offset: 0x12f0, Size: 0x50]
	bool UpdatedComponentWithBase(float DeltaSeconds, Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x60df8c4
	void ToggleUserCmdDelta(bool Val);// 0x60df810
	void TimeSpeedCheck(bool Val);// 0x60df75c
	void SeverReportSimulateDrag(int OldDragCount, int DragCount, int ShakeCount);// 0x60df634
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x60df588
	void SetPushBase(PrimitiveComponent* NewBase, const FName BoneName, bool bPushedByBase, bool bNotifyActor);// 0x60df43c
	void SetProneFloorZ(float InProneFloorZ);// 0x60df3c0
	void SetProneFloorAngle(float InProneFloorAngle);// 0x60df344
	void SetPassBoundBox(out Vector BoxMin, out Vector BoxMax);// 0x60df268
	void SetOpenServerControlPunish(const bool bIsOpen, float RemainingSeconds);// 0x60df1a0
	void SetLastTickFrameCounter(uint64 Frame);// 0x60df124
	void SetJumpFloorZ(float InJumpFloorZ);// 0x60df0a8
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x60df02c
	void SetImmedSendMoveFrameCounter(uint64 Frame);// 0x60defb0
	void SetClientReceiveServerStateTimestamp(float TimeStamp);// 0x60def34
	void SetBase(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x60dee34
	void ServerUserMoveCmdOld(int ClientApplySequence, const byte[] UserCmdDelta);// 0x60ded24
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x60deaf4
	void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, FName ClientBoneName, const byte[] UserCmd);// 0x60de934
	void ServerStartBlowUpCharacter(float TimeStamp, int BlowID, Vector_NetQuantize10 LaunchVel, Actor* HitActor, PrimitiveComponent* HitComponent);// 0x60de788
	void SendClientPenetrationToServer();// 0x60de728
	void ResetSimulateMoveCaches(bool bDestroy);// 0x60de6a4
	void ReleaseServerMoveCache();// 0x60de690
	void RefreshCharacterWithBase();// 0x60de67c
	void ProcessCacheSimulateRepMove(float DeltaSeconds, bool bReset);// 0x60de5bc
	void Ping2Server(float ServerTime, float ClientTime);// 0x60de4e4
	void Ping2Client(float ServerTime);// 0x60de468
	bool PhysMoveByCurve(out const Vector DeltaMove, float DeltaSeconds);// 0x60de38c
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x60de2c8
	void OnRespawned();// 0x60de2ac
	void OnRecycled();// 0x60de290
	void OnRecoverOnServer();// 0x60de274
	void OnPreReconnectOnServer();// 0x60de260
	void OnClientCloseUserCmdDelta();// 0x60de24c
	void MaybeGotoFalling();// 0x60de238
	void K2_SaveBaseLocation();// 0x60de224
	float K2_GetProneFloorZ();// 0x60de1f0
	float K2_GetProneFloorAngle();// 0x60de1bc
	FString K2_GetMovementName();// 0x60de110
	float K2_GetJumpFloorZ();// 0x60de0dc
	float K2_GetJumpFloorAngle();// 0x60de0a8
	bool IsWalkable(out const HitResult Hit);// 0x60ddfbc
	bool IsStandingOnBase();// 0x60ddf84
	bool IsSimulateWeakNetworkOptimize();// 0x60ddf4c
	bool IsProning();// 0x60ddf14
	bool IsOpenServerControlPunish();// 0x60ddef8
	bool IsNearPushBase();// 0x60ddec0
	bool IsInImmedSendMoveFrame();// 0x60dde88
	bool IsBeingPushed();// 0x60dde50
	bool IsBeingBlew();// 0x60dde18
	bool IsAutonomousWeakNetworkOptimize();// 0x60ddde0
	bool IsActorShouldMarkTeleportTime(Actor* PtrActor);// 0x60ddd50
	uint32 GetUserCmdSequence();// 0x60ddd1c
	STExtraBaseCharacter* GetSTCharacter();// 0x60ddce8
	enum GetSpecialMoveTypebyCustomMovemode(byte CustomMovmentMode);// 0x60ddc5c
	SpecialMoveBaseObj* GetSpecialMoveObjBySpecialMoveType(enum specialMoveType);// 0x60ddbd0
	SpecialMoveBaseObj* GetSpecialMoveObjByCustomMovementMode(byte CustomMovmentMode);// 0x60ddb44
	PrimitiveComponent* GetRealStandingBase();// 0x60ddb10
	Vector GetPendingImpulse();// 0x60ddae8
	float GetMaxBrakingDeceleration();// 0x60ddaac
	Vector GetLocationOffsetToBase();// 0x60dda74
	uint64 GetLastTickFrameCounter();// 0x60dda40
	float GetLastServerMoveTime();// 0x60dda0c
	uint32 GetLastAckBadMoveSequence();// 0x60dd9d8
	float GetJogFactor();// 0x60dd9a4
	bool GetIsOpenShovelingAbility();// 0x60dd96c
	Vector GetImpartedMovementBaseVelocity();// 0x60dd92c
	uint64 GetImmedSendMoveFrameCounter();// 0x60dd8f8
	bool GetHistoryValidLocationAndRotation(out Vector OutLoc, out Rotator OutRot, enum MoveIndex);// 0x60dd7c8
	float GetHasPredictionSeconds(Vector PredictionDeltaLoc, Vector PredictionVelocity);// 0x60dd700
	Vector GetComputeFloorDistStartLocation();// 0x60dd6c8
	float GetClientCurrentSeconds();// 0x60dd694
	Vector GetBaseLocation();// 0x60dd65c
	AirBorneMoveObj* GetAirBornMoveObj();// 0x60dd628
	Vector GetAcceleration();// 0x60dd5f0
	bool FindResolvePenetrationHistoryMove(out Vector FindLoc, out Rotator FindRot, enum HistoryIndex);// 0x60dd4c0
	void ExitMultipleMove(float CompensateTime);// 0x60dd43c
	void EnterDirectMove(out const DirectMoveData InDirectMoveData);// 0x60dd368
	void EnterAirJump(out const CustomSkillMoveData InMoveData);// 0x60dd2a8
	bool DragOnGround(float DeltaTime);// 0x60dd218
	void DisableSimulateCorrection(bool bDisable);// 0x60dd194
	void DelayCheckResolvePenatration(float DelayTime);// 0x60dd118
	void DebugMovementDetail(FString Caller, out const Vector OldLocation, out const Rotator OldRotation, float DeltaSeconds, bool bForceLog);// 0x60dcf4c
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x60dcd10
	void ClientUserMoveCmdAck(int Sequence);// 0x60dcc94
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x60dca18
	void CheckResolvePenatration(float DeltaTime);// 0x60dc99c
	void ChangePhysxShapeFlag();// 0x60dc988
	Vector CalcBlowUpVelocity(Vector HitNormal, Vector HitCompVelocity);// 0x60dc8bc
	float CalcAllowablePositionErrorScaleWithSpeed();// 0x60dc888
	void CacheSimulateRepMove(out const RepMovement RepMove, float ServerTimeStamp);// 0x60dc7b0
	void BPSetDefaultMovementMode();// 0x60dc79c
	void ApplyImpulse(Vector ImpulseVelocity);// 0x60dc718
	void AllowDSSpeedCheck(bool bAllow);// 0x60dc694
	bool AllowClientLocationWithDSPrediction(out const Vector InClientLoc, float NetLagDiffScale);// 0x60dc5b8
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterDistanceSquareTickInternal
	float DistanceSquare;//[Offset: 0x0, Size: 0x4]
	float TickInternal;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SimulateRepData
	RepMovement RepMovement;//[Offset: 0x18, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: SimulateDragThesholds
	float ScreenSize;//[Offset: 0x0, Size: 0x4]
	float DragDistanceSq;//[Offset: 0x4, Size: 0x4]
	float ShakeVelocityDiffSize;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ServerMoveData
	PrimitiveComponent* ClientMovementBase;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ServerReceiveMove
<----------Generated by SSpawner v1.0.4---------->


Class: ResolvePenetrationMoveData
	PrimitiveComponent* PushAwayBase;//[Offset: 0x10, Size: 0x8]
	ResolvePenetrationHistoryMoveData HistoryMoveData;//[Offset: 0x18, Size: 0x1c]
<----------Generated by SSpawner v1.0.4---------->


Class: ResolvePenetrationHistoryMoveData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector ValidLocation;//[Offset: 0x4, Size: 0xc]
	Rotator ValidRotation;//[Offset: 0x10, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: DirectMoveData.CustomSkillMoveData
	bool bOverrideZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bHandleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	float InertiaRatio;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CustomSkillMoveData
	bool bManualExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float Distance;//[Offset: 0x4, Size: 0x4]
	float TotalTime;//[Offset: 0x8, Size: 0x4]
	CurveFloat* SpeedCurve;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SimulateDragData
	float ReportSimulateDragConfigSeconds;//[Offset: 0x0, Size: 0x4]
	float ReportSimulateDragSeconds;//[Offset: 0x4, Size: 0x4]
	float ReportSimulateDragTimer;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SpecialMoveBaseObj.LuaObject.Object
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0xa0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AirBorneMoveObj.SpecialMoveBaseObj.LuaObject.Object
	float FlyForwordMaxSpeed;//[Offset: 0xac, Size: 0x4]
	float FlyRightMaxSpeed;//[Offset: 0xb0, Size: 0x4]
	float FlyBackMaxSpeed;//[Offset: 0xb4, Size: 0x4]
	float ForwardAccel;//[Offset: 0xb8, Size: 0x4]
	float RightAccel;//[Offset: 0xbc, Size: 0x4]
	float MaxBrakingDeceleration;//[Offset: 0xc0, Size: 0x4]
	float FlyUpStartSpeed;//[Offset: 0xc4, Size: 0x4]
	float FlyUpStartDecel;//[Offset: 0xc8, Size: 0x4]
	float FlyUpStartTime;//[Offset: 0xcc, Size: 0x4]
	float FlyMaxUpHeight;//[Offset: 0xd0, Size: 0x4]
	float FlyUpUniformSpeed;//[Offset: 0xd4, Size: 0x4]
	float FlyDownUniformSpeed;//[Offset: 0xd8, Size: 0x4]
	float FlyQucikExitSpeed;//[Offset: 0xdc, Size: 0x4]
	float LandHeight;//[Offset: 0xe0, Size: 0x4]
	float WindFieldDecel;//[Offset: 0xe4, Size: 0x4]
	float WindFieldDecelDuration;//[Offset: 0xe8, Size: 0x4]
	float SuperFlyMaxSpeed;//[Offset: 0xec, Size: 0x4]
	float SuperFlyMaxAccel;//[Offset: 0xf0, Size: 0x4]
	float SuperFlyMaxBrakingDeceleration;//[Offset: 0xf4, Size: 0x4]
	float SuperFlyUpMaxAngle;//[Offset: 0xf8, Size: 0x4]
	float FlyMaxHight;//[Offset: 0xfc, Size: 0x4]
	float SuperFlyMaxHight;//[Offset: 0x100, Size: 0x4]
	float FlyAbsoluteMaxHight;//[Offset: 0x104, Size: 0x4]
	bool bEnableHorVerMut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	float ModGravityScale;//[Offset: 0x10c, Size: 0x4]
	bool UseModeGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	FString ModFlySpeedScaleAttrName;//[Offset: 0x118, Size: 0x10]
	bool bQuickExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bBuff2VelocityXY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	bool bBuff2VelocityZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 0x1]
	delegate OnPreFlyStateChange;//[Offset: 0x130, Size: 0x10]
	delegate OnFlyStateChange;//[Offset: 0x140, Size: 0x10]
	delegate OnFlyLanded;//[Offset: 0x150, Size: 0x10]
	delegate OnFlyMoveingStateChange;//[Offset: 0x160, Size: 0x10]
	delegate OnMoveMentStateChange;//[Offset: 0x170, Size: 0x10]
	bool CurrentFlyMoveing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1]
	void StopFly();// 0x5d4ad54
	void SkillAddImpulse(Vector ImpulseVelocity);// 0x5d4acd8
	void SetWindFieldVelocity(Vector InVelocity);// 0x5d4ac5c
	void SetState(byte FlyState);// 0x5d4abe0
	void RealSetState(byte FlyState, bool ForceChange);// 0x5d4ab18
	void OnCharacterJumped();// 0x5d4ab04
	float GetRealTimePawnHeiht();// 0x5d4aac8
	enum GetFlyMoveState();// 0x5d4aa94
	byte GetCustomMoveStateByFlyState(byte FlyState);// 0x5d4aa08
	byte GetCurrentFlyState();// 0x5d4a9d4
	void EnterFly();// 0x5d4a9b8
	void DoubleTerminalFlySetState(byte FlyState, bool ForceChange);// 0x5d4a8f0
	bool BeforeApplyNetworkMovementModeDell(const byte ReceivedMode);// 0x5d4a858
<----------Generated by SSpawner v1.0.4---------->


Class: SimLocalViewData
	float ViewPitch;//[Offset: 0x0, Size: 0x4]
	float ViewYaw;//[Offset: 0x4, Size: 0x4]
	float ViewRoll;//[Offset: 0x8, Size: 0x4]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SimViewData
	uint16 ViewPitch;//[Offset: 0x0, Size: 0x2]
	uint16 ViewYaw;//[Offset: 0x2, Size: 0x2]
	byte ViewRoll;//[Offset: 0x4, Size: 0x1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0, Size: 0x4]
	int AnchorPlatColorID;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InteractiveMoveActor.LuaActor.Actor.Object
	class InteractiveActorMoveComponent* MoveComponent;//[Offset: 0x4c0, Size: 0x8]
	byte InteractiveMoveType;//[Offset: 0x4c8, Size: 0x1]
	bool InFPPViewPitchLimitMaxEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 0x1]
	float InFPPViewPitchLimitMin;//[Offset: 0x4cc, Size: 0x4]
	float InFPPViewPitchLimitMax;//[Offset: 0x4d0, Size: 0x4]
	float InFPPViewYawLimit;//[Offset: 0x4d4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InteractiveActorMoveComponent.MovementComponent.ActorComponent.Object
	InteractiveMoveActor* TargetActor;//[Offset: 0x150, Size: 0x8]
	void OnRep_TargetActorNotify(InteractiveMoveActor* IMActor);// 0x5f2bb64
	bool IsTakeOverJump();// 0x5f2bb24
	bool IsInInteractiveState();// 0x5f2bae4
	void HandleJumpInput();// 0x5f2bac8
	void HandleEnterInput();// 0x5f2baac
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0x110, Size: 0x4]
	int DetectThreshold;//[Offset: 0x114, Size: 0x4]
	float FoldFactor;//[Offset: 0x118, Size: 0x4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0x120, Size: 0x8]
	Vector BoxHalfSize;//[Offset: 0x130, Size: 0xc]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0x13c, Size: 0xc]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0x148, Size: 0xc]
	Vector QEoffsetPeekLeft;//[Offset: 0x154, Size: 0xc]
	Vector QEoffsetPeekRight;//[Offset: 0x160, Size: 0xc]
	float StaticTraceLengthOffset;//[Offset: 0x16c, Size: 0x4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x170, Size: 0xc]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x17c, Size: 0xc]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x188, Size: 0xc]
	int FoldFactorDelt;//[Offset: 0x194, Size: 0x4]
	int FoldFactorDeltChange;//[Offset: 0x198, Size: 0x4]
	int TraceDis;//[Offset: 0x19c, Size: 0x4]
	float TickDeltTime;//[Offset: 0x1a0, Size: 0x4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1]
	Actor*[] SweepIgnoreActors;//[Offset: 0x1b0, Size: 0x10]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x5fe11dc
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x5fe10a8
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0x158, Size: 0x10]
	float OnVehicleWaterSufaceOffset;//[Offset: 0x168, Size: 0x4]
	float MaxBreathAmount;//[Offset: 0x16c, Size: 0x4]
	float DrowningHurtHight;//[Offset: 0x170, Size: 0x4]
	float SwimWaterNearHeight;//[Offset: 0x174, Size: 0x4]
	float SwimWaterBodyOffset;//[Offset: 0x178, Size: 0x4]
	float SwimWaterSufaceOffset;//[Offset: 0x17c, Size: 0x4]
	float BreathVauleChangeoffset;//[Offset: 0x180, Size: 0x4]
	float OpBreathVauleChangeoffset;//[Offset: 0x184, Size: 0x4]
	float BreathDeltaTime;//[Offset: 0x188, Size: 0x4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0x18c, Size: 0x4]
	float MinSpeedScale;//[Offset: 0x190, Size: 0x4]
	float MaxCrouchWaterHeight;//[Offset: 0x194, Size: 0x4]
	float MaxProneWaterHeight;//[Offset: 0x198, Size: 0x4]
	float DeadInWaterLocZOffset;//[Offset: 0x19c, Size: 0x4]
	float RollMaxAngle;//[Offset: 0x1a0, Size: 0x4]
	float DistoVolume;//[Offset: 0x1a4, Size: 0x4]
	bool ResetEnterWaterWhenVolumeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	float DefaultWaterHeight;//[Offset: 0x1ac, Size: 0x4]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x1c8, Size: 0x8]
	bool AdjustCharacterInvalidHeightInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	float CheckCharacterInWaterInternal;//[Offset: 0x1d4, Size: 0x4]
	float CharacterInWaterInvalidHeight;//[Offset: 0x1d8, Size: 0x4]
	CharacterMovementComponent* OwnerMovementComp;//[Offset: 0x1e0, Size: 0x8]
	STExtraBaseCharacter* OwnerPlayerCharater;//[Offset: 0x1e8, Size: 0x8]
	PhysicsVolume* UnderWaterBox;//[Offset: 0x1f0, Size: 0x8]
	float DyingSwimSpeedRate;//[Offset: 0x1f8, Size: 0x4]
	bool bDyingSwimChangeCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc, Size: 0x1]
	bool bAutoSyncSwimSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 0x1]
	bool bAutoStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x205, Size: 0x1]
	void UpdateSwimCollisionHeightCpp();// 0x5ff2adc
	void SyncSwimSpeedFromCharacter();// 0x5ff2ac8
	void PlayerHealthStatusChange();// 0x5ff2ab4
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x5ff2a38
	void OnPawnExitParachute();// 0x5ff2a24
	void LeaveWater();// 0x5ff2a10
	bool IsEnterWaterSuface();// 0x5ff29d8
	Actor* GetWaterObject();// 0x5ff29a4
	void EnterWater_BluePrint();// 0x70644c4
	void EnterWater(Actor* WaterObject);// 0x5ff2928
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 0x4]
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 0x4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 0x4]
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x5e0, Size: 0x4]
	float AttachCheckDistance;//[Offset: 0x5e4, Size: 0x4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x5e8, Size: 0x4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x5ec, Size: 0x4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x5f0, Size: 0x8]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x610, Size: 0x10]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x620, Size: 0x10]
	int LastCreateFailedWeaponID;//[Offset: 0x638, Size: 0x4]
	ItemDefineID LastClientDestroyWeaponID;//[Offset: 0x640, Size: 0x18]
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x5e3d504
	void UpdateDataWhenBagChangedOnAutonomous();// 0x5e3d4f0
	void RPC_Server_MarkWeaponDestroy(const ItemDefineID ID);// 0x5e3d43c
	void RPC_Client_ResyncWeaponSpawnData(const SpawnAndBackpackWeaponReplicatedData[] SpawnWeaponData);// 0x5e3d300
	void OnRecoverOnServer();// 0x5e3d2e4
	void OnReconnectOnServer();// 0x5e3d2c8
	void OnReconnectOnClient();// 0x5e3d2ac
	void OnDisconnectToClientOnServer();// 0x5e3d298
	int GetBagLevel();// 0x5e3d25c
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerVehAnimList
	int FrameCounter;//[Offset: 0x4, Size: 0x4]
	AnimationAsset* IdleAnim;//[Offset: 0x8, Size: 0x8]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0x10, Size: 0x8]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x18, Size: 0x8]
	AnimationAsset* IdleMotorBikeDirverLeaningAnim;//[Offset: 0x20, Size: 0x8]
	AnimationAsset* IdleMotorBikeDirverLeaningLowSpeedAnim;//[Offset: 0x28, Size: 0x8]
	AnimationAsset* MotorBikeDirverLeaningGroundPitchAnim;//[Offset: 0x30, Size: 0x8]
	AnimationAsset* PassengerMotorBikeIdleBaseDriverOffAnim;//[Offset: 0x38, Size: 0x8]
	AnimationAsset* PassengerMotorBikeIdleBaseWithGunDriverOffAnim;//[Offset: 0x40, Size: 0x8]
	AnimationAsset* PassengerMotorBikeIdleBaseWithMeleeDriverOffAnim;//[Offset: 0x48, Size: 0x8]
	AnimationAsset* PassengerMotorBikeIdleBaseWithThrowObjDriverOffAnim;//[Offset: 0x50, Size: 0x8]
	AnimationAsset* PassengerDriverOffAimAim;//[Offset: 0x58, Size: 0x8]
	AnimationAsset* PassengerMotorBikeIdleLeaningAnim;//[Offset: 0x60, Size: 0x8]
	AnimationAsset* PassengerMotorBikeIdleBaseDriverOnAnim;//[Offset: 0x68, Size: 0x8]
	AnimationAsset* PassengerMotorBikeIdleBaseWithGunDriverOnAnim;//[Offset: 0x70, Size: 0x8]
	AnimationAsset* PassengerMotorBikeIdleBaseWithMeleeDriverOnAnim;//[Offset: 0x78, Size: 0x8]
	AnimationAsset* PassengerMotorBikeIdleBaseWithThrowObjDriverOnAnim;//[Offset: 0x80, Size: 0x8]
	AnimationAsset* LeanOutAnim;//[Offset: 0x88, Size: 0x8]
	AnimationAsset* LeanInAnim;//[Offset: 0x90, Size: 0x8]
	AnimationAsset* AimAnim;//[Offset: 0x98, Size: 0x8]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0xa0, Size: 0x8]
	AnimationAsset* WeaponAimAddition;//[Offset: 0xa8, Size: 0x8]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0xb0, Size: 0x8]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0xb8, Size: 0x8]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0xc0, Size: 0x8]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0xc8, Size: 0x8]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0xd0, Size: 0x8]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0xd8, Size: 0x8]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0xe0, Size: 0x8]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0xe8, Size: 0x8]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0xf0, Size: 0x8]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0xf8, Size: 0x8]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x100, Size: 0x8]
	AnimationAsset* Ski_Falling;//[Offset: 0x108, Size: 0x8]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x110, Size: 0x8]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x118, Size: 0x8]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0x120, Size: 0x8]
	AnimationAsset* VehicleWeaponEquipAnim;//[Offset: 0x128, Size: 0x8]
	AnimationAsset* VehicleWeaponUnEquipAnim;//[Offset: 0x130, Size: 0x8]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0x138, Size: 0x8]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0x140, Size: 0x8]
	AnimationAsset* MotorgliderSteerAnim;//[Offset: 0x148, Size: 0x8]
	AnimationAsset* MotorgliderIdleAnim;//[Offset: 0x150, Size: 0x8]
	AnimationAsset* VehicleDriverForwardAnim;//[Offset: 0x158, Size: 0x8]
	AnimationAsset* DyingInVehicleIdleAnim;//[Offset: 0x160, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimVehParamList
	int FrameCounter;//[Offset: 0x0, Size: 0x4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	float VacateHight;//[Offset: 0x8, Size: 0x4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	Rotator VehViewRotation;//[Offset: 0x10, Size: 0xc]
	Vector VehMoveVelocity;//[Offset: 0x1c, Size: 0xc]
	enum SeatWeaponHoldType;//[Offset: 0x28, Size: 0x1]
	enum SeatSpecialType;//[Offset: 0x29, Size: 0x1]
	enum VehicleType;//[Offset: 0x2a, Size: 0x1]
	float LeanOutPercentage;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0, Size: 0x4]
	float Durability;//[Offset: 0x4, Size: 0x4]
	float DamageReduceScale;//[Offset: 0x8, Size: 0x4]
	float DamageReduceScaleExtra;//[Offset: 0xc, Size: 0x4]
	float DamageReduceScaleIgnoreDurability;//[Offset: 0x10, Size: 0x4]
	float BrokenArmorDamageReduceScale;//[Offset: 0x14, Size: 0x4]
	float DurabilityReduceScale;//[Offset: 0x18, Size: 0x4]
	FString BodyDurabilityIndexName;//[Offset: 0x20, Size: 0x10]
	float MomentumResistance;//[Offset: 0x30, Size: 0x4]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackReplayData
	float TPlanTotalValue;//[Offset: 0x0, Size: 0x4]
	BackpackReplayItem[] ReplayItems;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackReplayItem
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	uint64 InstanceID;//[Offset: 0x8, Size: 0x8]
	uint64 ItemState;//[Offset: 0x10, Size: 0x8]
	bool bMarkDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 0x10]
	float EnergyMax;//[Offset: 0x10, Size: 0x4]
	float EnergyCurrent;//[Offset: 0x14, Size: 0x4]
	float EnergyPredict;//[Offset: 0x18, Size: 0x4]
	float AttenuationPeriod;//[Offset: 0x1c, Size: 0x4]
	float AttenuationAmount;//[Offset: 0x20, Size: 0x4]
	float PassedDeltaTime;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0, Size: 0x4]
	FString BuffName;//[Offset: 0x8, Size: 0x10]
	int BuffID;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x158, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0, Size: 0x10]
	byte ShowType;//[Offset: 0x10, Size: 0x1]
	float Value;//[Offset: 0x14, Size: 0x4]
	float LimitValue;//[Offset: 0x18, Size: 0x4]
	FString MaxAttrName;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SecuryInfoComponent.ActorComponent.Object
	GameBaseInfo GameBaseInfo;//[Offset: 0x1a0, Size: 0x90]
	UAEGameMode* UAEGM;//[Offset: 0x230, Size: 0x8]
	void ServerSendGameStartFlow(out const ClientGameStartFlow ClientGameStartFlow);// 0x6054910
	void ServerSendGameEndFlow(out const ClientGameEndFlow ClientGameEndFlow);// 0x6054854
	void ReportVoiceTeamQuit(const VoiceTeamQuit teamQuit);// 0x605474c
	void ReportVoiceTeamCreate(const VoiceTeamCreate teamCreate);// 0x6054644
	void ReportVerifyInfoFlow();// 0x60545e4
	void ReportSecAttackFlow(const SecAttackFlow SecAttackFlow);// 0x605450c
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x6054420
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x605433c
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x6054264
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x6054184
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x60540ac
	void ReportGameSetting(const GameSetting GameSetting);// 0x6053fb8
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x6053ed8
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x6053e00
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x6053d20
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x6053c40
	void ReportAimFlow(const AimFlow AimFlow);// 0x6053b60
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x6053ad4
	void GetWeaponProperty(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int WeaponId, out int BulletID, out int BulletNum);// 0x605392c
	void CheckSendGameStartFlow();// 0x6053918
	void CheckSendGameEndFlow();// 0x6053904
	FString BuildRecoveryItemCountString(out const RecoveryItemCount[] RecoveryItemCounts);// 0x60537d8
<----------Generated by SSpawner v1.0.4---------->


Class: UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	Object* UtilsPtr;//[Offset: 0x538, Size: 0x8]
	float GridCheckSize;//[Offset: 0x540, Size: 0x4]
	float DeepCheckSize;//[Offset: 0x544, Size: 0x4]
	float HeightCheckSize;//[Offset: 0x548, Size: 0x4]
	int MaxPlayerLimit;//[Offset: 0x54c, Size: 0x4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 0x1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55d, Size: 0x1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55e, Size: 0x1]
	bool bUseDefaultResultRules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55f, Size: 0x1]
	int AntiDataCD;//[Offset: 0x560, Size: 0x4]
	int WeatherID;//[Offset: 0x564, Size: 0x4]
	FString WeatherName;//[Offset: 0x568, Size: 0x10]
	int RoomMode;//[Offset: 0x578, Size: 0x4]
	int SeasonIdx;//[Offset: 0x57c, Size: 0x4]
	float MeteorShowerRatio;//[Offset: 0x580, Size: 0x4]
	FString ItemTableName;//[Offset: 0x588, Size: 0x10]
	FString ItemClassPath;//[Offset: 0x598, Size: 0x10]
	FString ReplayPushURL;//[Offset: 0x5a8, Size: 0x10]
	int ReplayType;//[Offset: 0x5b8, Size: 0x4]
	FString ReplayTitle;//[Offset: 0x5c0, Size: 0x10]
	enum EnableObserverEnemyTrace;//[Offset: 0x5d0, Size: 0x1]
	FString[] ItemSpawnTableList;//[Offset: 0x5d8, Size: 0x10]
	FString[] IgnoreItemClassPathList;//[Offset: 0x5e8, Size: 0x10]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x5f8, Size: 0x10]
	<uint64,CharacterMoveDragData> CharacterMoveDragDataMap;//[Offset: 0x608, Size: 0x50]
	<uint64,ParachuteDragData> ParachuteDragDataMap;//[Offset: 0x658, Size: 0x50]
	<uint64,VehicleMoveDragData> VehicleMoveDrag;//[Offset: 0x6a8, Size: 0x50]
	<uint64,CharacterShootVerifyData> CharacterShootVerifyDataMap;//[Offset: 0x6f8, Size: 0x50]
	<uint64,CharacterShootVerifyStat> CharacterShootVerifyStatMap;//[Offset: 0x748, Size: 0x50]
	uint32 ServerStartTime;//[Offset: 0x798, Size: 0x4]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79c, Size: 0x1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79d, Size: 0x1]
	FString PickupBoxConfigClassPath;//[Offset: 0x7a0, Size: 0x10]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 0x1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x7b8, Size: 0x10]
	FString VehicleTableName;//[Offset: 0x7c8, Size: 0x10]
	FString VehicleClassPath;//[Offset: 0x7d8, Size: 0x10]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 0x1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e9, Size: 0x1]
	Vector RegionCenter;//[Offset: 0x7ec, Size: 0xc]
	float RegionRadius;//[Offset: 0x7f8, Size: 0x4]
	<FString,float> BattleCustomConfig;//[Offset: 0x800, Size: 0x50]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x850, Size: 0x4]
	int AINoRepTimeInReady;//[Offset: 0x854, Size: 0x4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x858, Size: 0x8]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 0x1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x864, Size: 0x4]
	float NearDeathDecreateBreathRate;//[Offset: 0x868, Size: 0x4]
	float RescueOtherRestoreDuration;//[Offset: 0x86c, Size: 0x4]
	float RescueSelfRestoreDuration;//[Offset: 0x870, Size: 0x4]
	float DeadTombBoxLifeSpan;//[Offset: 0x874, Size: 0x4]
	int DefaultPlayerBornPointID;//[Offset: 0x878, Size: 0x4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 0x1]
	bool bEnableDSTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87d, Size: 0x1]
	FString NetObjectPathNameMappingCSV;//[Offset: 0x880, Size: 0x10]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x890, Size: 0x10]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x8a0, Size: 0x8]
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x8a8, Size: 0x10]
	Actor*[] DynamicTriggers;//[Offset: 0x8b8, Size: 0x10]
	int IsGameModeFpp;//[Offset: 0x8c8, Size: 0x4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc, Size: 0x1]
	DynamicLoadItem[] DynamicLoadItemArray;//[Offset: 0x8d0, Size: 0x10]
	<DynamicLoadItem,DynamicLoadActors> DynamicLoadItemMap;//[Offset: 0x8e0, Size: 0x50]
	VehicleAvatarReplaceCfg[] VehicleAvatarReplaceCfgList;//[Offset: 0x930, Size: 0x10]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 0x1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x941, Size: 0x1]
	int[] BuffEffectIDArray;//[Offset: 0x948, Size: 0x10]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x958, Size: 0x10]
	int[] DynamicLevelArray;//[Offset: 0x968, Size: 0x10]
	FString RoomType;//[Offset: 0x978, Size: 0x10]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x988, Size: 0x1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x989, Size: 0x1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98a, Size: 0x1]
	int ZoneID;//[Offset: 0x98c, Size: 0x4]
	int nClientType;//[Offset: 0x990, Size: 0x4]
	int MainModeID;//[Offset: 0x994, Size: 0x4]
	delegate OnGameModeStateChanged;//[Offset: 0x9e0, Size: 0x10]
	delegate SendTeammateResultWhenChicken;//[Offset: 0xae0, Size: 0x10]
	delegate HaveSentTeamBattleResult;//[Offset: 0xaf0, Size: 0x10]
	delegate SendTeamBattleResult;//[Offset: 0xb00, Size: 0x10]
	delegate SendGameStopJoin;//[Offset: 0xc10, Size: 0x10]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1020, Size: 0x1]
	bool[] EnabledCollectedEventDataEventIds;//[Offset: 0x1028, Size: 0x10]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1088, Size: 0x1]
	float OBInfoTimeStep;//[Offset: 0x1230, Size: 0x4]
	AirDropBoxInOb[] AirDropBoxInfoList;//[Offset: 0x1260, Size: 0x10]
	UAEPlayerController*[] KickFlagControllerList;//[Offset: 0x1270, Size: 0x10]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0x1280, Size: 0x10]
	class UAEAdvertisementActor* AdvertisementActorBP;//[Offset: 0x1368, Size: 0x8]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0x1370, Size: 0x10]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0x1380, Size: 0x10]
	MissionBoardConfig[] MissionBoardConfigList;//[Offset: 0x1390, Size: 0x10]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a0, Size: 0x1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0x13a8, Size: 0x10]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0x13b8, Size: 0x10]
	FString GrenadeEffectPath;//[Offset: 0x13c8, Size: 0x10]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d8, Size: 0x1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d9, Size: 0x1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13da, Size: 0x1]
	bool bOpenAnniversaryActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13db, Size: 0x1]
	FString FestivalAirDropBoxMesh;//[Offset: 0x13e0, Size: 0x10]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f0, Size: 0x1]
	float FestivalAirDropProb;//[Offset: 0x13f4, Size: 0x4]
	float MonsterDropPar;//[Offset: 0x13f8, Size: 0x4]
	float SceneDropParam;//[Offset: 0x13fc, Size: 0x4]
	uint32 DSOpenSwtich;//[Offset: 0x1400, Size: 0x4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x1408, Size: 0x8]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0x1410, Size: 0x8]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1418, Size: 0x1]
	uint32[] NeedReplayPlayers;//[Offset: 0x1420, Size: 0x10]
	SeasonStatueData[] SeasonStatueList;//[Offset: 0x1430, Size: 0x10]
	FString SeasonStatueClassPath;//[Offset: 0x1440, Size: 0x10]
	FString StatueBaseClassPath;//[Offset: 0x1450, Size: 0x10]
	StatueBaseData StatueBaseInfo;//[Offset: 0x1460, Size: 0x68]
	int BattleStopJoin;//[Offset: 0x14c8, Size: 0x4]
	int nSignalGunEffectId;//[Offset: 0x14cc, Size: 0x4]
	CharacterOverrideAttrData[] CharacterOverrideAttrs;//[Offset: 0x14d0, Size: 0x10]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1580, Size: 0x1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0x1588, Size: 0x10]
	bool bStandAloneGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1618, Size: 0x1]
	bool bStandAloneLuaGenAIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1619, Size: 0x1]
	int StandAloneTestPlayerKey;//[Offset: 0x161c, Size: 0x4]
	FName StandAloneTestPlayerType;//[Offset: 0x1620, Size: 0x8]
	void WriteStatistics();// 0x691d93c
	void SyncPlayerNames();// 0x691d920
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x691d800
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x691d708
	void SetVehicleReportEntry(uint32 InUniqueID, VehicleReportEntry InEntry);// 0x691d560
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x691d470
	void SetMaxWeaponReportNum(int Num);// 0x691d3f8
	void SetKillerPlayerKey(Controller* VictimPlayer, uint32 KillerPlayerKey);// 0x691d338
	void SetGameEndReportData();// 0x691d31c
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x691d260
	void RetrieveBattleData(out BattleData OutBattleData);// 0x691d1cc
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x691d110
	void ResetGameParamsFromGameMode();// 0x691d0f4
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x691d038
	bool ReportCollectedEventDataWithPlayerValidation(UAEPlayerController* UAEPlayerController, byte EventId, delegate CollectReportedEventDataCallback);// 0x691cf10
	bool ReportCollectedEventDataWithPlayersValidation(World* World, byte EventId, delegate CollectReportedEventDataCallback);// 0x691cde8
	bool ReportCollectedEventData(out const FString UID, byte EventId, out const CollectedEventData Data);// 0x691cc30
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x691cb74
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x691caf0
	void RefreshWorldActiveRange();// 0x691cad4
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x691ca14
	void RefreshPlayerNames(uint32 InPlayerKey, FString InPlayerName, int TeamID, bool IsLogin, uint64 UID, int IdxInTeam);// 0x691c798
	int RecoardAlivePlayerNum();// 0x691c75c
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x691c6c8
	void OnStandAloneGameEnd();// 0x691c6ac
	void OnReportNetworkData();// 0x691c690
	void OnPlayerFiring(uint32 InPlayerKey);// 0x691c60c
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x691c588
	void OnPlayerBreathChange(uint32 InPlayerKey, float InBreath);// 0x691c4c8
	void OnObserverLogout(UAEPlayerController* InController);// 0x691c444
	void OnObserverLogin(UAEPlayerController* InController);// 0x691c3c0
	void OnMsg(FString Msg);// 0x691c310
	void OnAirDropBoxLanded(int boxId, out const Vector pos);// 0x691c244
	void OnAirDropBoxEmpty(int boxId);// 0x691c1c0
	void NotifyPlayerExitWhenNotStarted(uint32 PlayerKey, FName PlayerType, FString Reason);// 0x691c094
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage, FName ParamState);// 0x691bdb8
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x691bcf8
	void NotifyGameModeParamsChanged(out const GameModeParams GameModeParams);// 0x691bc64
	void NotifyGameModeLuckmate(int64 MyUID, int64 LuckmateUID);// 0x691bba8
	void NotifyGameModeInit();// 0x691bb8c
	void NotifyExistPlayerReEnter(uint32 PlayerKey);// 0x691bb08
	void NotifyAIPlayerEnter(uint32 PlayerKey, bool IsMLAI);// 0x691ba40
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x691b938
	float ModifyVehicleDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* VictimVehicle, Actor* DamageCauser);// 0x691b798
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x691b5f8
	void Killed(Controller* Killer, Controller* VictimPlayer, Actor* DamageCauser, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x691b46c
	bool IsSatisfyGeneratorArea(out const Vector Location);// 0x691b3d0
	bool IsPlayerCollectedEventDataReportingEnabled(UAEPlayerController* UAEPlayerController);// 0x691b340
	bool IsCollectedEventEnabled(byte EventId);// 0x691b2b0
	void InitWorldActiveRange();// 0x691b294
	void InitSeasonStatue();// 0x691b278
	void InitMissionBoard();// 0x691b25c
	void InitGenerator();// 0x691b240
	void InitGameParamsFromGameMode();// 0x691b224
	void InitDynamicTriggers();// 0x691b208
	void InitDynamicBuildingGroups();// 0x691b1ec
	void InitBornWithApple();// 0x691b1d0
	void Heartbeat();// 0x691b1bc
	bool HasVehicleReportEntry(uint32 InUniqueID);// 0x691b0c0
	bool HasDynamicBuildingGroup();// 0x691b088
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int Count);// 0x691af18
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x691ae5c
	VehicleReportEntry GetVehicleReportEntry(uint32 InUniqueID);// 0x691ad0c
	int GetSurvivingTeamCount();// 0x691acd0
	int GetSurvivingCharacterCount();// 0x691ac94
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x691ab64
	void GetPlayerRealtimeVerifyInfo(uint32 PlayerKey, out RealtimeVerifyInfo RealtimeVerifyInfo);// 0x691aa58
	UAEPlayerController* GetPlayerControllerWithUID(uint64 UID);// 0x691a9cc
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x691a89c
	void GetPlayerAndRealAiNum(out HeartBeatData Data);// 0x691a804
	UAEPlayerController*[] GetObserverControllerList();// 0x691a760
	void GetMonsterNum(out HeartBeatData Data);// 0x691a6c8
	int GetMaxWeaponReportNum();// 0x691a6ac
	Vector GetClassicPlaneDirection();// 0x691a66c
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x691a5a4
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x691a4dc
	PlayerController* FindPlayerControllerByUId(uint64 UID);// 0x691a448
	Controller* FindControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x691a380
	void DestroyNoActiveWorldActor(out Vector Location, out float Radius);// 0x691a298
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x691a214
	void DestroyAllPickUpObjs();// 0x691a200
	void DeleteSeasonStatue();// 0x691a1e4
	void DeleteDynamicLoadItem();// 0x691a1c8
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x691a144
	void CreateDynamicBuildingGroups(Vector Offset);// 0x691a0c8
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameMode* UAEGameMode, UAEPlayerController* UAEPlayerController, byte EventId);// 0x70644c4
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x6919f94
	void AddAirDropBox(int boxId, out const Vector pos);// 0x6919ec8
<----------Generated by SSpawner v1.0.4---------->


Class: LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	FString LuaFilePath;//[Offset: 0x528, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterMoveDragData
	CharacterMoveDrag[] Drag;//[Offset: 0x0, Size: 0x10]
	CharacterSimulateMoveDrag[] SimulateDrag;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterMoveDrag
	int Minute;//[Offset: 0x0, Size: 0x4]
	<byte,int> ReasonCount;//[Offset: 0x8, Size: 0x50]
	DistanceDragData[] ExceedsDistances;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DistanceDragData
	float CX;//[Offset: 0x0, Size: 0x4]
	float CY;//[Offset: 0x4, Size: 0x4]
	float CZ;//[Offset: 0x8, Size: 0x4]
	float SX;//[Offset: 0xc, Size: 0x4]
	float SY;//[Offset: 0x10, Size: 0x4]
	float SZ;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterSimulateMoveDrag
	int Minute;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	int DragCount;//[Offset: 0x8, Size: 0x4]
	int ShakeCount;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ParachuteDragData
	uint32 MyDrag;//[Offset: 0x0, Size: 0x4]
	uint32 OtherDrag;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterShootVerifyData
	<byte,int> ShootVerifyFailed;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterShootVerifyStat
	<byte,int> ShootVerifyStat;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: UAEOBState.PlayerState.Info.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicTriggerConfig
	DynamicTriggerTransform[] Transforms;//[Offset: 0x0, Size: 0x10]
	FString TriggerClassPath;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicTriggerTransform
	Vector Loc;//[Offset: 0x0, Size: 0xc]
	Rotator Rot;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicLoadItem
	DynamicBuildingGroupTransform[] TransArray;//[Offset: 0x0, Size: 0x10]
	int ActID;//[Offset: 0x10, Size: 0x4]
	FString Path;//[Offset: 0x18, Size: 0x10]
	bool IsClearAfterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool IsPlayerStartPot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int[] PosIdxList;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicBuildingGroupTransform
	float LocX;//[Offset: 0x0, Size: 0x4]
	float LocY;//[Offset: 0x4, Size: 0x4]
	float LocZ;//[Offset: 0x8, Size: 0x4]
	float RotX;//[Offset: 0xc, Size: 0x4]
	float RotY;//[Offset: 0x10, Size: 0x4]
	float RotZ;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicLoadActors
	Actor*[] ActorArray;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAvatarReplaceCfg
	int OriginID;//[Offset: 0x0, Size: 0x4]
	int[] SkinIDList;//[Offset: 0x8, Size: 0x10]
	float[] ProbabilityDistribute;//[Offset: 0x18, Size: 0x10]
	int MaxNum;//[Offset: 0x28, Size: 0x4]
	int CurrentNum;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	FString LuaFilePath;//[Offset: 0x468, Size: 0x10]
	bool bMultiAdvertisement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	<byte,Texture2D*> IdTextureMap;//[Offset: 0x480, Size: 0x50]
	StaticMesh* StaticMesh;//[Offset: 0x4d0, Size: 0x8]
	FString StaticMeshPath;//[Offset: 0x4d8, Size: 0x10]
	FrontendHUD* FrontendHUD;//[Offset: 0x4e8, Size: 0x8]
	int ID;//[Offset: 0x4f0, Size: 0x4]
	float NetCullDistance;//[Offset: 0x4f4, Size: 0x4]
	void SetStaticMeshPath(FString InMeshPath);// 0x6908c30
	void SetStaticMesh(StaticMesh* InStaticMesh);// 0x6908bac
	void SetScale(Vector inScale);// 0x6908b28
	void SetId(int InputID);// 0x6908aac
	void SetCulDistance(float CulDistance);// 0x6908a28
	void RequestHttpImageByUrl(FString PicUrl);// 0x6908980
	void ReplaceTexture(Texture2D* Texture);// 0x6908904
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x6908814
	void OnRep_MeshPath();// 0x70644c4
	void OnRep_Id();// 0x70644c4
	void OnClientLoadMesh();// 0x70644c4
	void InitImageDownloadUtil();// 0x6908800
<----------Generated by SSpawner v1.0.4---------->


Class: AdvertisementActorConfig
	FString ResPath;//[Offset: 0x0, Size: 0x10]
	FString HttpImgPath;//[Offset: 0x10, Size: 0x10]
	Vector Loc;//[Offset: 0x20, Size: 0xc]
	Rotator Rot;//[Offset: 0x2c, Size: 0xc]
	Vector Scale;//[Offset: 0x38, Size: 0xc]
	int ID;//[Offset: 0x44, Size: 0x4]
	int CulDistance;//[Offset: 0x48, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MissionBoardConfig
	FString ResPath;//[Offset: 0x0, Size: 0x10]
	Vector Loc;//[Offset: 0x10, Size: 0xc]
	Rotator Rot;//[Offset: 0x1c, Size: 0xc]
	Vector Scale;//[Offset: 0x28, Size: 0xc]
	float Progress;//[Offset: 0x34, Size: 0x4]
	FString CountOrTime;//[Offset: 0x38, Size: 0x10]
	int TipId;//[Offset: 0x48, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bCanBackupVehicleSpotDatas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x2e0, Size: 0x10]
	byte RegionType;//[Offset: 0x2f0, Size: 0x1]
	BackupVehicleSpotData[] BackupVehicleSpotDatas;//[Offset: 0x2f8, Size: 0x10]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x308, Size: 0x10]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x318, Size: 0x10]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x330, Size: 0x50]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x380, Size: 0x50]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x3d0, Size: 0x50]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x420, Size: 0x60]
	UAEDataTable* VehicleDataTable;//[Offset: 0x480, Size: 0x8]
	bool bRemovableMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	<VehicleSpotObject*> PauseVehicleSpotObjectSet;//[Offset: 0x4a0, Size: 0x50]
	Actor*[] GeneratedActorArray;//[Offset: 0x4f0, Size: 0x10]
	delegate OnVehicleGeneratedDelegate;//[Offset: 0x508, Size: 0x10]
	delegate OnVehicleGenerateEndDelegate;//[Offset: 0x518, Size: 0x10]
	void WriteVehicleSpotStatisticsFromSpotFile();// 0x693f31c
	void WriteVehicleSpotStatisticsDatas_V15();// 0x693f308
	void WriteVehicleSpotStatisticsDatas();// 0x693f2f4
	void WriteVehicleClassStatisticsDatas_V15();// 0x693f2e0
	void WriteVehicleClassStatisticsDatas();// 0x693f2cc
	void WriteAllVehicleStatisticsDatasToLog();// 0x693f2b8
	void WriteAllVehicleStatisticsDatas_V15();// 0x693f2a4
	void WriteAllVehicleStatisticsDatas();// 0x693f290
	void SetAllVehicleNumRate(<FString,float> Rates);// 0x693f138
	void ResumeGenerate();// 0x693f124
	void RegisterVehicleGenerateSpawnData(out const VehicleGenerateSpawnData Data);// 0x693f044
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x693efc0
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x693ee2c
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x693ec9c
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x693eb08
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x693e978
	void RandomGroups();// 0x693e95c
	void PauseGenerate();// 0x693e948
	void LoadVehicleGenerateTable();// 0x70644c4
	bool GMGenerateAllVehicleSpot(FString VehiclePath);// 0x693e808
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoWithCategory(out VehicleSpotProperty SpotProperty, FString Category);// 0x693e52c
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType, FString InCategory);// 0x693e364
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out const VehicleSpotProperty SpotProperty, FString InCategory);// 0x693e110
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x693df24
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x693dd98
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x693dc0c
	int GetAlreadyGeneratedVehicleNum();// 0x693dbf0
	void GenerateSpotOnTick(float DeltaTime);// 0x693db6c
	void EndGenerate();// 0x693db58
	void EnableRemovableMode();// 0x693db44
	bool DynamicSpawnVehicleBySpotId(int ID, FString Category);// 0x693d9bc
	void DeleteGroups();// 0x693d9a8
	bool CanDynamicSpawnVehicle(Vector SpawnLocation, Vector TestLocationOffset, Vector TestBoxSize);// 0x693d898
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x693d670
	void AddVehicleClassCount(FString Path, bool IsValid, int Count);// 0x693d4bc
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x2f0, Size: 0x1]
	byte RegionType;//[Offset: 0x2f1, Size: 0x1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 0x1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3, Size: 0x1]
	float RandomRotationMin;//[Offset: 0x2f4, Size: 0x4]
	float RandomRotationMax;//[Offset: 0x2f8, Size: 0x4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x300, Size: 0x28]
	bool IsEnableVehicleSpawnRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	float VehicleSpawnRestoreOffset;//[Offset: 0x32c, Size: 0x4]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x6941d10
	bool GenerateSpot();// 0x6941cd0
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0, Size: 0x10]
	FString VehiclePath;//[Offset: 0x10, Size: 0x10]
	float FuelPercent;//[Offset: 0x20, Size: 0x4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BackupVehicleSpotData
	int ID;//[Offset: 0x0, Size: 0x4]
	byte SpotGroupType;//[Offset: 0x4, Size: 0x1]
	byte SpotType;//[Offset: 0x5, Size: 0x1]
	Vector SpotGenerateLoc;//[Offset: 0x8, Size: 0xc]
	Rotator SpotRotator;//[Offset: 0x14, Size: 0xc]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 0x1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x8, Size: 0x10]
	int FuelPercentMin;//[Offset: 0x18, Size: 0x4]
	int FuelPercentMax;//[Offset: 0x1c, Size: 0x4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	byte RandomType;//[Offset: 0x21, Size: 0x1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x24, Size: 0x4]
	int TotalCountRangeMin;//[Offset: 0x28, Size: 0x4]
	int TotalCountRangeMax;//[Offset: 0x2c, Size: 0x4]
	float ProbabilityPersent;//[Offset: 0x30, Size: 0x4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 0x1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x8, Size: 0x10]
	int TotalCountRangeMin;//[Offset: 0x18, Size: 0x4]
	int TotalCountRangeMax;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0, Size: 0x1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0, Size: 0x10]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 0x4]
	FString VehicleType;//[Offset: 0x8, Size: 0x10]
	FString VehiclePath;//[Offset: 0x18, Size: 0x10]
	int VehicleWeight;//[Offset: 0x28, Size: 0x4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 0x10]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0x10, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x8, Size: 0x1]
	FString VehiclePath;//[Offset: 0x10, Size: 0x10]
	float VehicleLocationX;//[Offset: 0x20, Size: 0x4]
	float VehicleLocationY;//[Offset: 0x24, Size: 0x4]
	float VehicleLocationZ;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x8, Size: 0x10]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int AllVehicleCount;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleSpotObject.Object
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x70, Size: 0x28]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0x98, Size: 0x8]
	void OnVehicleGenerateEnd();// 0x6941988
<----------Generated by SSpawner v1.0.4---------->


Class: SeasonStatueData
	FString Name;//[Offset: 0x0, Size: 0x10]
	Vector Loc;//[Offset: 0x10, Size: 0xc]
	Rotator Rot;//[Offset: 0x1c, Size: 0xc]
	Vector Scale;//[Offset: 0x28, Size: 0xc]
	FString Nation;//[Offset: 0x38, Size: 0x10]
	int AGender;//[Offset: 0x48, Size: 0x4]
	int Head;//[Offset: 0x4c, Size: 0x4]
	int Hair;//[Offset: 0x50, Size: 0x4]
	int WeaponId;//[Offset: 0x54, Size: 0x4]
	int[] AvatarList;//[Offset: 0x58, Size: 0x10]
	GameModePlayerItem[] AvatarWithAdditionList;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: StatueBaseData
	FString ClassPath;//[Offset: 0x0, Size: 0x10]
	FString MatPath;//[Offset: 0x10, Size: 0x10]
	FString TeamFlag;//[Offset: 0x20, Size: 0x10]
	FString TeamName;//[Offset: 0x30, Size: 0x10]
	Vector Loc;//[Offset: 0x40, Size: 0xc]
	Rotator Rot;//[Offset: 0x4c, Size: 0xc]
	Vector Scale;//[Offset: 0x58, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterOverrideAttrData
	FString AttrName;//[Offset: 0x0, Size: 0x10]
	float AttrValue;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0, Size: 0x8]
	FString CorpsName;//[Offset: 0x8, Size: 0x10]
	int Icon;//[Offset: 0x18, Size: 0x4]
	int SegmentLevel;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleReportEntry
	uint32 VehicleID;//[Offset: 0x0, Size: 0x4]
	int VehicleShapeType;//[Offset: 0x4, Size: 0x4]
	bool IsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float FirstAttackedTime;//[Offset: 0xc, Size: 0x4]
	float LastAttackedTime;//[Offset: 0x10, Size: 0x4]
	bool Drived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0, Size: 0x10]
	int RemainTeamCount;//[Offset: 0x10, Size: 0x4]
	int RemainAlivePlayerCount;//[Offset: 0x14, Size: 0x4]
	float PlaneDirectionX;//[Offset: 0x18, Size: 0x4]
	float PlaneDirectionY;//[Offset: 0x1c, Size: 0x4]
	<FString,FString> PlayersLogoutTime;//[Offset: 0x20, Size: 0x50]
	<FString,float> PlayersOnlineTime;//[Offset: 0x70, Size: 0x50]
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0xc0, Size: 0x10]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0, Size: 0x10]
	int CorpsHeadIcon;//[Offset: 0x10, Size: 0x4]
	int KilledNum;//[Offset: 0x14, Size: 0x4]
	int SegmentLevel;//[Offset: 0x18, Size: 0x4]
	int RealtimeRank;//[Offset: 0x1c, Size: 0x4]
	int DefeatPlayerNum;//[Offset: 0x20, Size: 0x4]
	float TotalDamage;//[Offset: 0x24, Size: 0x4]
	float SurvivalTime;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleData
	int WatcherNum;//[Offset: 0x0, Size: 0x4]
	int CircleNum;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CollectedEventData
	<FString,FString> KeyValueMap;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeParams
	FName CurrentGameModeState;//[Offset: 0x0, Size: 0x8]
	int MaxKillTime;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: RealtimeVerifyInfo
	uint16 AreaID;//[Offset: 0x0, Size: 0x2]
	int8 PlatID;//[Offset: 0x2, Size: 0x1]
	FString ZoneID;//[Offset: 0x8, Size: 0x10]
	int HitCountsNoAI;//[Offset: 0x18, Size: 0x4]
	int HeadshotCountsNoAI;//[Offset: 0x1c, Size: 0x4]
	int ShotCounts;//[Offset: 0x20, Size: 0x4]
	int Kills;//[Offset: 0x24, Size: 0x4]
	int PrisonBreaks;//[Offset: 0x28, Size: 0x4]
	int JumpMaxHeight2;//[Offset: 0x2c, Size: 0x4]
	int SkeletonLengthCheckInvaildNum;//[Offset: 0x30, Size: 0x4]
	int MuzzleAndOwnerPosInVaildNum;//[Offset: 0x34, Size: 0x4]
	int ImpactActorPosOffsetBigNum;//[Offset: 0x38, Size: 0x4]
	int TotalImpactCharacterNum;//[Offset: 0x3c, Size: 0x4]
	int WeaponScopeHeightBigNum;//[Offset: 0x40, Size: 0x4]
	int WeaponScopeDisBigNum;//[Offset: 0x44, Size: 0x4]
	int OwnerHeadAndMuzzleBlockNum;//[Offset: 0x48, Size: 0x4]
	int ImpactPointAndBulletDisBigNum;//[Offset: 0x4c, Size: 0x4]
	int ShootVerifyInvalidNum;//[Offset: 0x50, Size: 0x4]
	float TotalSkeletonLengthMax;//[Offset: 0x54, Size: 0x4]
	int TimeAccTimes;//[Offset: 0x58, Size: 0x4]
	int SpeedQuickCheck;//[Offset: 0x5c, Size: 0x4]
	float ShootVerifyClientHitAABBCount;//[Offset: 0x60, Size: 0x4]
	float ShootVerifyDSAABBMissCount;//[Offset: 0x64, Size: 0x4]
	float PlayerZ;//[Offset: 0x68, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: HeartBeatData
	int AlivePlayerNum;//[Offset: 0x0, Size: 0x4]
	int AINum;//[Offset: 0x4, Size: 0x4]
	int MonsterNum;//[Offset: 0x8, Size: 0x4]
	int ConnectionNum;//[Offset: 0xc, Size: 0x4]
	int OnlineNum;//[Offset: 0x10, Size: 0x4]
	int HighPingNum;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ClientGameStartFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 0x8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 0x10]
	FString MapName;//[Offset: 0x18, Size: 0x10]
	int8 WeatherID;//[Offset: 0x28, Size: 0x1]
	FString ItemList;//[Offset: 0x30, Size: 0x10]
	int8 TeamType;//[Offset: 0x40, Size: 0x1]
	int TeamID;//[Offset: 0x44, Size: 0x4]
	FString TeamPlayer1;//[Offset: 0x48, Size: 0x10]
	FString TeamPlayer2;//[Offset: 0x58, Size: 0x10]
	FString TeamPlayer3;//[Offset: 0x68, Size: 0x10]
	uint32 SecGameStartFlowFlowID;//[Offset: 0x78, Size: 0x4]
	FString AntsVoiceTeamID;//[Offset: 0x80, Size: 0x10]
	FString AntsVoiceRoomID;//[Offset: 0x90, Size: 0x10]
	int AntsVoiceTeamMemberID;//[Offset: 0xa0, Size: 0x4]
	int AntsVoiceRoomMemberID;//[Offset: 0xa4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ClientGameEndFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 0x8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 0x10]
	FString ClientVersion;//[Offset: 0x18, Size: 0x10]
	uint32 OverTime;//[Offset: 0x28, Size: 0x4]
	int8 EndType;//[Offset: 0x2c, Size: 0x1]
	byte KillCount;//[Offset: 0x2d, Size: 0x1]
	byte AssistsCount;//[Offset: 0x2e, Size: 0x1]
	byte DropCount;//[Offset: 0x2f, Size: 0x1]
	byte SaveCount;//[Offset: 0x30, Size: 0x1]
	byte RebornCount;//[Offset: 0x31, Size: 0x1]
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32, Size: 0x1]
	int GoldGet;//[Offset: 0x34, Size: 0x4]
	int DiamondGet;//[Offset: 0x38, Size: 0x4]
	int ExpGet;//[Offset: 0x3c, Size: 0x4]
	byte WinRank;//[Offset: 0x40, Size: 0x1]
	byte TotalPlayers;//[Offset: 0x41, Size: 0x1]
	int PlayerRank;//[Offset: 0x44, Size: 0x4]
	int RankEnd;//[Offset: 0x48, Size: 0x4]
	int TeamID;//[Offset: 0x4c, Size: 0x4]
	FString TeamPlayer1;//[Offset: 0x50, Size: 0x10]
	FString TeamPlayer2;//[Offset: 0x60, Size: 0x10]
	FString TeamPlayer3;//[Offset: 0x70, Size: 0x10]
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	byte TeamPlayer1Kill;//[Offset: 0x81, Size: 0x1]
	byte TeamPlayer2Kill;//[Offset: 0x82, Size: 0x1]
	byte TeamPlayer3Kill;//[Offset: 0x83, Size: 0x1]
	uint32 GameEndFlowID;//[Offset: 0x84, Size: 0x4]
	byte RoundCircleCount;//[Offset: 0x88, Size: 0x1]
	int[] UseQuickMsgIDArray;//[Offset: 0x90, Size: 0x10]
	int[] UseQuickMsgCountArray;//[Offset: 0xa0, Size: 0x10]
	int[] UseWheelMsgIDArray;//[Offset: 0xb0, Size: 0x10]
	int[] UseWheelMsgCountArray;//[Offset: 0xc0, Size: 0x10]
	int[] InexistentAvatarStat;//[Offset: 0xd0, Size: 0x10]
	int[] InexistentAvatarInBornStat;//[Offset: 0xe0, Size: 0x10]
	int[] InexistentWeaponAvatarStat;//[Offset: 0xf0, Size: 0x10]
	int[] InexistentVehicleAvatarStat;//[Offset: 0x100, Size: 0x10]
	int InexistentPlaneAvatarStat;//[Offset: 0x110, Size: 0x4]
	int InexistentEmoteAvatarStat;//[Offset: 0x114, Size: 0x4]
	byte ShowMsgCnt;//[Offset: 0x118, Size: 0x1]
	byte UserConfirmCnt;//[Offset: 0x119, Size: 0x1]
	byte UserCancelCnt;//[Offset: 0x11a, Size: 0x1]
	byte UserDoNothingCnt;//[Offset: 0x11b, Size: 0x1]
	float FPSBeforeAdapt;//[Offset: 0x11c, Size: 0x4]
	float FPSAfterAdapt;//[Offset: 0x120, Size: 0x4]
	float TeammateMicrophoneTime;//[Offset: 0x124, Size: 0x4]
	float TeammateSpeakerTime;//[Offset: 0x128, Size: 0x4]
	float EnemyMicrophoneTime;//[Offset: 0x12c, Size: 0x4]
	float EnemySpeakerTime;//[Offset: 0x130, Size: 0x4]
	float TeammateInterphoneTime;//[Offset: 0x134, Size: 0x4]
	float EnemyInterphoneTime;//[Offset: 0x138, Size: 0x4]
	byte PlayerUseQuickSight;//[Offset: 0x13c, Size: 0x1]
	byte PlayerUseShoulderCnt;//[Offset: 0x13d, Size: 0x1]
	int PlayerMoveSpeedMax;//[Offset: 0x140, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VoiceTeamQuit
	FString AntsVoiceTeamID;//[Offset: 0x0, Size: 0x10]
	FString AntsVoiceRoomID;//[Offset: 0x10, Size: 0x10]
	int AntsVoiceTeamMemberID;//[Offset: 0x20, Size: 0x4]
	int AntsVoiceRoomMemberID;//[Offset: 0x24, Size: 0x4]
	uint64 UID;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: VoiceTeamCreate
	FString AntsVoiceTeamID;//[Offset: 0x0, Size: 0x10]
	FString AntsVoiceRoomID;//[Offset: 0x10, Size: 0x10]
	int AntsVoiceTeamMemberID;//[Offset: 0x20, Size: 0x4]
	int AntsVoiceRoomMemberID;//[Offset: 0x24, Size: 0x4]
	uint64 UID;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SecAttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 0x10]
	int64 dtEventTime;//[Offset: 0x10, Size: 0x8]
	FString GameAppID;//[Offset: 0x18, Size: 0x10]
	FString OpenID;//[Offset: 0x28, Size: 0x10]
	int8 PlatID;//[Offset: 0x38, Size: 0x1]
	uint16 AreaID;//[Offset: 0x3a, Size: 0x2]
	FString ZoneID;//[Offset: 0x40, Size: 0x10]
	uint64 BattleID;//[Offset: 0x50, Size: 0x8]
	int64 ClientStartTime;//[Offset: 0x58, Size: 0x8]
	uint64 RoleID;//[Offset: 0x60, Size: 0x8]
	FString TargetUserName;//[Offset: 0x68, Size: 0x10]
	FString TargetOpenID;//[Offset: 0x78, Size: 0x10]
	uint64 TargetRoleID;//[Offset: 0x88, Size: 0x8]
	FString HitPart;//[Offset: 0x90, Size: 0x10]
	int GunID;//[Offset: 0xa0, Size: 0x4]
	byte PlayerKill;//[Offset: 0xa4, Size: 0x1]
	uint64 AttackFlowID;//[Offset: 0xa8, Size: 0x8]
	int KillAICnt;//[Offset: 0xb0, Size: 0x4]
	int KillRealPlayerCnt;//[Offset: 0xb4, Size: 0x4]
	int16 BulletDown;//[Offset: 0xb8, Size: 0x2]
<----------Generated by SSpawner v1.0.4---------->


Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0, Size: 0x1]
	byte[] MrpcsFlowData;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting
	uint64 RoleID;//[Offset: 0x0, Size: 0x8]
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8, Size: 0x2c]
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x34, Size: 0x8]
	GameSetting_Operate Operate;//[Offset: 0x3c, Size: 0x8]
	GameSetting_Vehicle Vehicle;//[Offset: 0x44, Size: 0x8]
	GameSetting_Sensibility Sensibility;//[Offset: 0x4c, Size: 0x88]
	GameSetting_PickUp PickUp;//[Offset: 0xd8, Size: 0x40]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0, Size: 0x4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	int SingleShotWeaponShootMode;//[Offset: 0x8, Size: 0x4]
	int ShotGunShootMode;//[Offset: 0xc, Size: 0x4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int LRShootMode;//[Offset: 0x14, Size: 0x4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int LeftHandFire;//[Offset: 0x1c, Size: 0x4]
	int Gyroscope;//[Offset: 0x20, Size: 0x4]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool ShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0, Size: 0x4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting_Operate
	int FireMode;//[Offset: 0x0, Size: 0x4]
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0, Size: 0x4]
	int DrivingViewMode;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0, Size: 0x4]
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4, Size: 0xc]
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10, Size: 0x28]
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x38, Size: 0x28]
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x60, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0, Size: 0x4]
	float ParachuteEye;//[Offset: 0x4, Size: 0x4]
	float CamFpFreeEye;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0, Size: 0x4]
	float CamLensSenNoneSniperFP;//[Offset: 0x4, Size: 0x4]
	float CamLensSenRedDotSniper;//[Offset: 0x8, Size: 0x4]
	float CamLensSen2XSniper;//[Offset: 0xc, Size: 0x4]
	float CamLensSen3XSniper;//[Offset: 0x10, Size: 0x4]
	float CamLensSen4XSniper;//[Offset: 0x14, Size: 0x4]
	float CamLensSen6XSniper;//[Offset: 0x18, Size: 0x4]
	float CamLensSen8XSniper;//[Offset: 0x1c, Size: 0x4]
	float CamLensSenShoulderSniper;//[Offset: 0x20, Size: 0x4]
	float CamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0, Size: 0x4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4, Size: 0x4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8, Size: 0x4]
	float FireCamLensSen2XSniper;//[Offset: 0xc, Size: 0x4]
	float FireCamLensSen3XSniper;//[Offset: 0x10, Size: 0x4]
	float FireCamLensSen4XSniper;//[Offset: 0x14, Size: 0x4]
	float FireCamLensSen6XSniper;//[Offset: 0x18, Size: 0x4]
	float FireCamLensSen8XSniper;//[Offset: 0x1c, Size: 0x4]
	float FireCamLensSenShoulderSniper;//[Offset: 0x20, Size: 0x4]
	float FireCamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0, Size: 0x4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4, Size: 0x4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x8, Size: 0x4]
	float GyroscopeSen2XSniper;//[Offset: 0xc, Size: 0x4]
	float GyroscopeSen3XSniper;//[Offset: 0x10, Size: 0x4]
	float GyroscopeSen4XSniper;//[Offset: 0x14, Size: 0x4]
	float GyroscopeSen6XSniper;//[Offset: 0x18, Size: 0x4]
	float GyroscopeSen8XSniper;//[Offset: 0x1c, Size: 0x4]
	float GyroscopeShoulderSniper;//[Offset: 0x20, Size: 0x4]
	float GyroscopeShoulderSniperFP;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	GameSetting_PickUp_Drug Drug;//[Offset: 0x4, Size: 0x18]
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x1c, Size: 0x10]
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0, Size: 0x4]
	int Bandage;//[Offset: 0x4, Size: 0x4]
	int PainKiller;//[Offset: 0x8, Size: 0x4]
	int Adrenaline;//[Offset: 0xc, Size: 0x4]
	int EnergyDrink;//[Offset: 0x10, Size: 0x4]
	int FirstAidKit;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0, Size: 0x4]
	int ShockBomb;//[Offset: 0x4, Size: 0x4]
	int SmokeBomb;//[Offset: 0x8, Size: 0x4]
	int GrenadeFragmented;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameSetting_PickUp_WeaponBullet
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	int BulletCount;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 0x10]
	int64 dtEventTime;//[Offset: 0x10, Size: 0x8]
	FString GameAppID;//[Offset: 0x18, Size: 0x10]
	FString OpenID;//[Offset: 0x28, Size: 0x10]
	uint16 AreaID;//[Offset: 0x38, Size: 0x2]
	int8 PlatID;//[Offset: 0x3a, Size: 0x1]
	FString ZoneID;//[Offset: 0x40, Size: 0x10]
	uint64 BattleID;//[Offset: 0x50, Size: 0x8]
	int64 ClientStartTime;//[Offset: 0x58, Size: 0x8]
	int MrpcsFlowcount_;//[Offset: 0x60, Size: 0x4]
	int[] MrpcsFlow;//[Offset: 0x68, Size: 0x10]
	FString UserName;//[Offset: 0x78, Size: 0x10]
	uint64 RoleID;//[Offset: 0x88, Size: 0x8]
	int8 RoleType;//[Offset: 0x90, Size: 0x1]
	FString TargetOpenID;//[Offset: 0x98, Size: 0x10]
	FString TargetUserName;//[Offset: 0xa8, Size: 0x10]
	uint64 TargetRoleID;//[Offset: 0xb8, Size: 0x8]
	int8 TargetRoleType;//[Offset: 0xc0, Size: 0x1]
	FString GunName;//[Offset: 0xc8, Size: 0x10]
	FString GunPartsType;//[Offset: 0xd8, Size: 0x10]
	int8 SightType;//[Offset: 0xe8, Size: 0x1]
	int BulletSpeed;//[Offset: 0xec, Size: 0x4]
	int8 MagazineMax;//[Offset: 0xf0, Size: 0x1]
	int8 MagazineLeft;//[Offset: 0xf1, Size: 0x1]
	int ShotFrequency;//[Offset: 0xf4, Size: 0x4]
	int BulletDamage;//[Offset: 0xf8, Size: 0x4]
	int16 BulletDown;//[Offset: 0xfc, Size: 0x2]
	byte BulletDamageReduce;//[Offset: 0xfe, Size: 0x1]
	int Recoil;//[Offset: 0x100, Size: 0x4]
	int ReloadTime;//[Offset: 0x104, Size: 0x4]
	FString PlayerState;//[Offset: 0x108, Size: 0x10]
	byte ShotPose;//[Offset: 0x118, Size: 0x1]
	byte FireType;//[Offset: 0x119, Size: 0x1]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11a, Size: 0x1]
	byte Sideways;//[Offset: 0x11b, Size: 0x1]
	int ShootingDeviationX;//[Offset: 0x11c, Size: 0x4]
	int ShootingDeviationY;//[Offset: 0x120, Size: 0x4]
	uint32 ZeroDistance;//[Offset: 0x124, Size: 0x4]
	uint32 ShotTime;//[Offset: 0x128, Size: 0x4]
	int HitTime;//[Offset: 0x12c, Size: 0x4]
	int PlayerPositionX;//[Offset: 0x130, Size: 0x4]
	int PlayerPositionY;//[Offset: 0x134, Size: 0x4]
	int PlayerPositionZ;//[Offset: 0x138, Size: 0x4]
	int GunPositionX;//[Offset: 0x13c, Size: 0x4]
	int GunPositionY;//[Offset: 0x140, Size: 0x4]
	int GunPositionZ;//[Offset: 0x144, Size: 0x4]
	int BulletsBornPositionX;//[Offset: 0x148, Size: 0x4]
	int BulletsBornPositionY;//[Offset: 0x14c, Size: 0x4]
	int BulletsBornPositionZ;//[Offset: 0x150, Size: 0x4]
	uint32 LastHitTime;//[Offset: 0x154, Size: 0x4]
	uint32 BulletFlyDistance;//[Offset: 0x158, Size: 0x4]
	uint32 BulletFlyTime;//[Offset: 0x15c, Size: 0x4]
	int HitPositionX;//[Offset: 0x160, Size: 0x4]
	int HitPositionY;//[Offset: 0x164, Size: 0x4]
	int HitPositionZ;//[Offset: 0x168, Size: 0x4]
	byte HitPart;//[Offset: 0x16c, Size: 0x1]
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16d, Size: 0x1]
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16d, Size: 0x1]
	byte BulletCost;//[Offset: 0x16e, Size: 0x1]
	int HPstart;//[Offset: 0x170, Size: 0x4]
	int HPEnd;//[Offset: 0x174, Size: 0x4]
	int ArmorHPStart;//[Offset: 0x178, Size: 0x4]
	int ArmorHPEnd;//[Offset: 0x17c, Size: 0x4]
	int CarHPStart;//[Offset: 0x180, Size: 0x4]
	int CarHPEnd;//[Offset: 0x184, Size: 0x4]
	byte PlayerKill;//[Offset: 0x188, Size: 0x1]
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x189, Size: 0x1]
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x189, Size: 0x1]
	int RecoilMoveX;//[Offset: 0x18c, Size: 0x4]
	int RecoilMoveY;//[Offset: 0x190, Size: 0x4]
	int WeaponAimFOV;//[Offset: 0x194, Size: 0x4]
	int BulletDamageDebuff;//[Offset: 0x198, Size: 0x4]
	int BulletDamageBuff;//[Offset: 0x19c, Size: 0x4]
	uint32 AtackFlowID;//[Offset: 0x1a0, Size: 0x4]
	int AutoAimSpeed;//[Offset: 0x1a4, Size: 0x4]
	int AutoAimSpeedRateMax;//[Offset: 0x1a8, Size: 0x4]
	int AutoAimRangeMax;//[Offset: 0x1ac, Size: 0x4]
	int AutoAimRangeRateMax;//[Offset: 0x1b0, Size: 0x4]
	int GunID;//[Offset: 0x1b4, Size: 0x4]
	int IfIsOnCar;//[Offset: 0x1b8, Size: 0x4]
	bool InMoveablePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1]
	int KillAICnt;//[Offset: 0x1c0, Size: 0x4]
	int KillRealPlayerCnt;//[Offset: 0x1c4, Size: 0x4]
	float CameraRotationX;//[Offset: 0x1c8, Size: 0x4]
	float CameraRotationY;//[Offset: 0x1cc, Size: 0x4]
	float CameraRotationZ;//[Offset: 0x1d0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AimFlow
	FString GameSvrId;//[Offset: 0x0, Size: 0x10]
	int64 dtEventTime;//[Offset: 0x10, Size: 0x8]
	FString GameAppID;//[Offset: 0x18, Size: 0x10]
	FString OpenID;//[Offset: 0x28, Size: 0x10]
	uint16 AreaID;//[Offset: 0x38, Size: 0x2]
	int8 PlatID;//[Offset: 0x3a, Size: 0x1]
	FString ZoneID;//[Offset: 0x40, Size: 0x10]
	uint64 BattleID;//[Offset: 0x50, Size: 0x8]
	int64 ClientStartTime;//[Offset: 0x58, Size: 0x8]
	int MrpcsFlowcount_;//[Offset: 0x60, Size: 0x4]
	int[] MrpcsFlow;//[Offset: 0x68, Size: 0x10]
	FString UserName;//[Offset: 0x78, Size: 0x10]
	uint64 RoleID;//[Offset: 0x88, Size: 0x8]
	int8 RoleType;//[Offset: 0x90, Size: 0x1]
	int AimTime;//[Offset: 0x94, Size: 0x4]
	FString ShotCDTime;//[Offset: 0x98, Size: 0x10]
	int ShotCount;//[Offset: 0xa8, Size: 0x4]
	int ShotHitCount;//[Offset: 0xac, Size: 0x4]
	int ShotHeadHitCount;//[Offset: 0xb0, Size: 0x4]
	int ShotPersonHitCount;//[Offset: 0xb4, Size: 0x4]
	int ShotPersonKillCount;//[Offset: 0xb8, Size: 0x4]
	FString HitDistance;//[Offset: 0xc0, Size: 0x10]
	FString HitEachDistance;//[Offset: 0xd0, Size: 0x10]
	FString HitAngle;//[Offset: 0xe0, Size: 0x10]
	FString HitEachCdTime;//[Offset: 0xf0, Size: 0x10]
	FString HitPartInfo;//[Offset: 0x100, Size: 0x10]
	FString PlayerState;//[Offset: 0x110, Size: 0x10]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	int8 SightType;//[Offset: 0x121, Size: 0x1]
	uint32 AimFlowID;//[Offset: 0x124, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeStateChangedParams
	FName GameModeState;//[Offset: 0x0, Size: 0x8]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: RepVehicleAttachment
	STExtraVehicleBase* Vehicle;//[Offset: 0x0, Size: 0x8]
	FName AttachSocket;//[Offset: 0x8, Size: 0x8]
	byte SeatIndex;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
	FName UnderWaterFogTagName;//[Offset: 0x2d0, Size: 0x8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x2d8, Size: 0x8]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x2e0, Size: 0x30]
	AkAudioEvent* SfxInWater;//[Offset: 0x310, Size: 0x8]
	AkAudioEvent* SfxOutWater;//[Offset: 0x318, Size: 0x8]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x320, Size: 0x4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x324, Size: 0x4]
	float HDRUnderWaterFogDensity;//[Offset: 0x328, Size: 0x4]
	float NormalUnderWaterFogDensity;//[Offset: 0x32c, Size: 0x4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x330, Size: 0x8]
	WaterSwimActor*[] WaterSwimObjs;//[Offset: 0x338, Size: 0x10]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x348, Size: 0x10]
	<ExponentialHeightFogComponent*,bool> SceneFogOriginalStates;//[Offset: 0x358, Size: 0x50]
	CameraComponent* LastActiveCamComp;//[Offset: 0x3a8, Size: 0x8]
	PostProcessVolume* UnderWaterPPV;//[Offset: 0x3b8, Size: 0x8]
	void RefreshUnderWaterEffect(bool bUnderWater);// 0x622ea78
	void OnToggleUnderWaterPPV(bool bUseCacheUnderWater);// 0x622e9f4
	void OnExponentialHeightFogComponentCreate(ExponentialHeightFogComponent* Component);// 0x622e978
	bool IsCameraUnderWater();// 0x622e940
	void AddWaterSwimActor(WaterSwimActor* Actor);// 0x622e8c4
	void AddSceneFogComponent(ExponentialHeightFog* SceneFogActor);// 0x622e848
<----------Generated by SSpawner v1.0.4---------->


Class: WaterSwimActor.Actor.Object
	float Damage;//[Offset: 0x3f4, Size: 0x4]
	float interval;//[Offset: 0x3f8, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x400, Size: 0x8]
	class Pawn[] DamageFilters;//[Offset: 0x408, Size: 0x10]
	int[] BuffIDs;//[Offset: 0x418, Size: 0x10]
	int[] SkillBuffIDs;//[Offset: 0x428, Size: 0x10]
	BoxComponent* WaterBoxComp;//[Offset: 0x438, Size: 0x8]
	bool IsLocationInWater(out const Vector Location);// 0x6351970
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight);// 0x6351880
<----------Generated by SSpawner v1.0.4---------->


Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x440, Size: 0x550]
	float Priority;//[Offset: 0x990, Size: 0x4]
	float BlendRadius;//[Offset: 0x994, Size: 0x4]
	float BlendWeight;//[Offset: 0x998, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x99c, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x99c, Size: 0x1]
	void RemoveBlendable(interface class InBlendableObject);// 0x8e0d670
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x8e0d530
<----------Generated by SSpawner v1.0.4---------->


Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0, Size: 0x4]
	float SteerInput;//[Offset: 0x4, Size: 0x4]
	int8 State;//[Offset: 0x8, Size: 0x1]
	Rotator CameraRotation;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: SlideMoveData
	float ThrottleInput;//[Offset: 0x0, Size: 0x4]
	float SteerInput;//[Offset: 0x4, Size: 0x4]
	Vector LocalVelocity;//[Offset: 0x8, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x218, Size: 0x10]
	void ReleaseParachuteAnimAssets();// 0x690aca0
	void OnParachuteAnimAsyncLoadingFinished(FString AnimLoaded);// 0x690ab6c
	void OnAnimListAsyncLoadingFinished();// 0x690ab58
	bool HasAnimAsyncLoadingFinished();// 0x690ab20
	void HandleAsyncLoadingFinishedEvent();// 0x690ab0c
	FString GetOwnerName();// 0x690aa60
	AnimationAsset* GetCharacterParachuteAnim(byte AnimType, int AnimOverrideType);// 0x690a998
<----------Generated by SSpawner v1.0.4---------->


Class: CharParachuteAnimData
	byte ParachuteAnimType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset* ParachuteAnimSoftPtr;//[Offset: 0x8, Size: 0x28]
	AnimationAsset* ParachuteAnim;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STReplicatedMoveState
	Vector_NetQuantizeWithDelta Location;//[Offset: 0x0, Size: 0x20]
	byte Roll;//[Offset: 0x20, Size: 0x1]
	uint32 View;//[Offset: 0x24, Size: 0x4]
	Vector_NetQuantizeWithDelta Velocity;//[Offset: 0x28, Size: 0x20]
<----------Generated by SSpawner v1.0.4---------->


Class: Vector_NetQuantizeWithDelta.Vector
<----------Generated by SSpawner v1.0.4---------->


Class: ParachuteFollowComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0, Size: 0x1]
	int LeaderIdx;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: LastEmoteInfo
	int EmoteId;//[Offset: 0x0, Size: 0x4]
	int AreaID;//[Offset: 0x4, Size: 0x4]
	float EmoteTime;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0x160, Size: 0x8]
	FName ScopeAimCameraSocketName;//[Offset: 0x168, Size: 0x8]
	FName FPPSocketName;//[Offset: 0x170, Size: 0x8]
	FName BoltActionCurveName;//[Offset: 0x178, Size: 0x8]
	float ScopeZoomSpringArmLength;//[Offset: 0x180, Size: 0x4]
	float BoltActionHoldTimeDefault;//[Offset: 0x188, Size: 0x4]
	float BoltActionFov;//[Offset: 0x18c, Size: 0x4]
	float ScopeZoomAlpha;//[Offset: 0x190, Size: 0x4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0x198, Size: 0x50]
	float ScopeZoomSpeed;//[Offset: 0x1e8, Size: 0x4]
	<int,ScopeZoomConfig> ScopeZoomConfigMap;//[Offset: 0x1f0, Size: 0x50]
	float ScopeFovMin;//[Offset: 0x240, Size: 0x4]
	float ScopeFovMax;//[Offset: 0x244, Size: 0x4]
	int CurrentPlayAnimIndex;//[Offset: 0x248, Size: 0x4]
	DollyZoomParam ZoomScopeParam;//[Offset: 0x24c, Size: 0xc]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x260, Size: 0x50]
	<FName,float> ScopeZoomMap;//[Offset: 0x2b0, Size: 0x50]
	float TanHalfFOV;//[Offset: 0x304, Size: 0x4]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool IsRearSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	FName SourceScopeAimCameraSocketName;//[Offset: 0x310, Size: 0x8]
	FName TargetScopeAimCameraSocketName;//[Offset: 0x318, Size: 0x8]
	void UpdateScopeCameraOffsets(out DollyZoomParam Param, bool IsAngledSight);// 0x5df54e4
	float SwitchSightConfigMaterial();// 0x70644c4
	void SwitchScopeMeshAnim(byte Type);// 0x5df5468
	void SwitchRearSightTimelineUpdate(float Alpha);// 0x5df53ec
	void SwitchRearSightTimelineFinish(int TargetRearSightSocketIndex);// 0x5df5370
	void SwitchRearSight(bool IsBegin);// 0x5df52e4
	void SwitchCameraMode(byte Mode);// 0x5df5268
	float SwitchAngledSightConfigMaterial(bool forceSwitch);// 0x70644c4
	void StopScopeIn();// 0x70644c4
	float ShowReflectorSightTPPMaterial(bool forceADSState);// 0x70644c4
	float ShowAngledSightTPPMaterial(bool forceADSState);// 0x70644c4
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x5df51a0
	void SetTagCulling(bool IsUse);// 0x70644c4
	void SetNearClipPlane(bool EnableNearClip);// 0x5df511c
	void ScopingChange(bool InValue);// 0x5df5098
	void Scoping(byte NewType);// 0x5df501c
	void ScopeZoomUpdate(float Alpha);// 0x5df4fa0
	void ScopeZoomTick(float DeltaTime);// 0x5df4f24
	void ScopeTimelineUpdate(float Alpha);// 0x5df4ea8
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* Entity);// 0x5df4df4
	void ScopeOutLogic();// 0x5df4de0
	void ScopeOutEnd();// 0x70644c4
	void ScopeOut(byte NewType);// 0x5df4d64
	void ScopeNotHandFold();// 0x5df4d50
	void ScopeInterrupt(byte NewType);// 0x5df4cd4
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* Entity);// 0x5df4c20
	void ScopeInLogic();// 0x5df4c0c
	void ScopeInEnd();// 0x70644c4
	void ScopeInContinue();// 0x5df4bf8
	void ScopeInAfterTimeline();// 0x5df4be4
	void ScopeIn(byte NewType);// 0x5df4b68
	void ScopeHandFold();// 0x5df4b54
	void PlayScopeInTimeline();// 0x70644c4
	bool IsUseZoomScope();// 0x5df4b1c
	bool IsRPGScopeIn();// 0x5df4ae4
	bool IsCurWeaponAttachedAngledSight();// 0x5df4aac
	bool IsAngledSightBySlot(byte Slot);// 0x5df4a1c
	bool IsAngledSight();// 0x5df49dc
	void InterruptBoltAction();// 0x5df49c8
	void InitScopeZoom(int WeaponId, int ScopeID);// 0x5df4914
	bool HaveAngledSightBySlot(byte Slot);// 0x5df4884
	bool HaveAngledSight();// 0x5df484c
	byte GetSightType();// 0x5df4818
	float GetScopeZoomValue(int WeaponId, int ScopeID);// 0x5df4754
	FName GetScopeZoomKey(int WeaponId, int ScopeID);// 0x5df4690
	MaterialInstance* GetScopeMaterialOverride(STExtraShootWeapon* Weapon);// 0x70644c4
	float GetScopeFov(STExtraWeapon* Weapon, bool bIsAngled);// 0x70644c4
	MeshComponent* GetScopeCameraAttachTarget(bool IsAngled);// 0x5df45f4
	FName GetScopeAimCameraSocketName();// 0x5df45c0
	ScopeZoomConfig GetCurScopeZoomConfig();// 0x5df458c
	STExtraWeapon* GetCurScopeWeapon();// 0x5df4558
	void GetCurrentScopeZoomFov(out float MinFov, out float CurFov);// 0x5df4474
	byte GetCurrentESTEScopeState();// 0x5df4458
	void CalculateDollyZoomParam(float SpringOffset, float MinFov, float CurFov, out DollyZoomParam Param);// 0x5df4318
	void BoltAction(float DeltaSeconds);// 0x5df429c
	void AttachToSightKeepTransform();// 0x70644c4
	void AttachToSight();// 0x70644c4
	void ApplyDollyZoomParam(out const DollyZoomParam Param, bool bSyncToPawn);// 0x5df41bc
	void ActiveComponentTickable();// 0x5df41a8
<----------Generated by SSpawner v1.0.4---------->


Class: ScopeZoomConfig
	int DisplayMaxScale;//[Offset: 0x0, Size: 0x4]
	int DisplayMinScale;//[Offset: 0x4, Size: 0x4]
	CurveFloat* FovCurve;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DollyZoomParam
	float FOV;//[Offset: 0x0, Size: 0x4]
	float Scale;//[Offset: 0x4, Size: 0x4]
	float Offset;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x218, Size: 0x10]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x228, Size: 0x10]
	CharacterShieldAnimData[] CharacterShieldAnimEditList;//[Offset: 0x238, Size: 0x10]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x248, Size: 0x10]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x258, Size: 0x10]
	CurveFloat* FallingIKCurve;//[Offset: 0x268, Size: 0x8]
	CharacterShovelAnimData[] CharacterShovelEditList;//[Offset: 0x270, Size: 0x10]
	CharacterShovelAnimData[] CharacterShovelEditListFPP;//[Offset: 0x280, Size: 0x10]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x290, Size: 0x10]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x2a0, Size: 0x10]
	bool IsInitByBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool EnablePreLoadingFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 0x1]
	GetAnimUtil GetAnimUtil;//[Offset: 0x2b8, Size: 0x20]
	void SetAnimListMapValueData(out const AnimationAsset* AnimPtr, out AnimListMapValueData AnimListValue);// 0x69177e0
	bool OnPreLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x6917584
	void OnAsyncLoadingFinishedNew2(AsyncLoadCharAnimParams LoadingParam);// 0x6917334
	void OnAsyncLoadingFinishedNew(AsyncLoadCharAnimParams LoadingParam);// 0x69170e4
	void InitAnimListMap(bool IsFPP);// 0x6917060
	PlayerAnimData[] GetCharacterShovelAnim();// 0x6916fbc
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x6916ec8
	AnimationAsset* GetAnimationAsset(out const AnimationAsset* AnimPtr);// 0x6916de4
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	FName AnimTypeName;//[Offset: 0x8, Size: 0x8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 0x30]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 0x30]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x8, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterShieldAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	FName AnimTypeName;//[Offset: 0x8, Size: 0x8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 0x30]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 0x30]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 0x1]
	FName JumpTypeName;//[Offset: 0x8, Size: 0x8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10, Size: 0x30]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x40, Size: 0x30]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x70, Size: 0x30]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xa0, Size: 0x30]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xd0, Size: 0x30]
	ChararacterJumpPhaseData JumpPhase_GrenadeJump;//[Offset: 0x100, Size: 0x30]
	ChararacterJumpPhaseData JumpPhase_GrenadeJump;//[Offset: 0x130, Size: 0x30]
	ChararacterJumpPhaseData JumpPhase_GrenadeFall;//[Offset: 0x160, Size: 0x30]
	ChararacterJumpPhaseData JumpPhase_GrenadeFall;//[Offset: 0x190, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 0x1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterShovelAnimData
	CharacterShovelPhaseData ShovelPhase_Enter;//[Offset: 0x0, Size: 0x30]
	CharacterShovelPhaseData ShovelPhase_Shoveling;//[Offset: 0x30, Size: 0x30]
	CharacterShovelPhaseData ShovelPhase_Leave;//[Offset: 0x60, Size: 0x30]
	CharacterShovelPhaseData ShovelPhase_Crouch_Leave;//[Offset: 0x90, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterShovelPhaseData
	enum ShovelPhase;//[Offset: 0x0, Size: 0x1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0, Size: 0x4]
	byte ModifyAnimListType;//[Offset: 0x4, Size: 0x1]
	byte AnimType;//[Offset: 0x5, Size: 0x1]
	byte PoseType;//[Offset: 0x6, Size: 0x1]
	byte JumpType;//[Offset: 0x7, Size: 0x1]
	byte JumpPhase;//[Offset: 0x8, Size: 0x1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterVehAnimModifyData
	enum VehicleType;//[Offset: 0x0, Size: 0x1]
	int SeatIdx;//[Offset: 0x4, Size: 0x4]
	byte VehicleAnimType;//[Offset: 0x8, Size: 0x1]
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: GetAnimUtil
	SoftObjectPath[] PendingList;//[Offset: 0x0, Size: 0x10]
	UAECharacterAnimListSubSystem* AnimListSubSystem;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: UAECharacterAnimListSubSystem.WorldSubsystem.Subsystem.Object
<----------Generated by SSpawner v1.0.4---------->


Class: AsyncLoadCharAnimParams
<----------Generated by SSpawner v1.0.4---------->


Class: UAEChaCustomAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	bool bLoadAnimOnBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	int CharacterAnimOverrideType;//[Offset: 0x224, Size: 0x4]
	<FString,FName> CharAnimEnumName;//[Offset: 0x228, Size: 0x50]
	CharCustomAnimData[] CharCustomAnimDataList;//[Offset: 0x278, Size: 0x10]
	<FString,FName> CharFeatureAnimInstanceEnumName;//[Offset: 0x288, Size: 0x50]
	CharCustomAnimInstacneData[] CharCustomAnimInstanceDataList;//[Offset: 0x2d8, Size: 0x10]
	void SetCharacterAnimOverrideType(int AnimOverrideType);// 0x6909f78
	void ReleaseCustomAnimAssets();// 0x6909f64
	bool HasAnimAsyncLoadingFinished();// 0x6909f2c
	FString GetOwnerName();// 0x6909e80
	class AnimInstance GetCharacterCustomAnimInstance(FString AnimName);// 0x6909dc8
	AnimationAsset* GetCharacterCustomAnim(FString AnimName);// 0x6909d10
	BlendSpace1D* GetBlendSpace1D(FString AnimAssetName);// 0x6909c58
	BlendSpace* GetBlendSpace(FString AnimAssetName);// 0x6909ba0
	AnimSequence* GetAnimSequence(FString AnimAssetName);// 0x6909ae8
	AnimMontage* GetAnimMontage(FString AnimAssetName);// 0x6909a30
	AimOffsetBlendSpace* GetAimOffsetBlendSpace(FString AnimAssetName);// 0x6909978
	void CallRequestLoadAnimAssets();// 0x6909964
<----------Generated by SSpawner v1.0.4---------->


Class: CharCustomAnimData
	UAEBlackboardKeySelector CustomAnimType;//[Offset: 0x0, Size: 0x8]
	AnimationAsset* CustomAnimSoftPtr;//[Offset: 0x8, Size: 0x28]
	AnimationAsset* CustomAnim;//[Offset: 0x30, Size: 0x8]
	FString CustomAnimName;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CharCustomAnimInstacneData
	UAEBlackboardKeySelector CustomAnimInstacneType;//[Offset: 0x0, Size: 0x8]
	class AnimInstance* CustomAnimInstacneSoftPtr;//[Offset: 0x8, Size: 0x8]
	FString CustomAnimInstanceName;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: InteractionEmoteConfig
	int SelfEmoteId;//[Offset: 0x0, Size: 0x4]
	int OtherEmoteId;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerRespawnData
	byte RespawnCount;//[Offset: 0x0, Size: 0x1]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterHide
	bool bCharacterHideIngame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bStopCharacterTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCloseCharacterCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	byte nRepFlag;//[Offset: 0x3, Size: 0x1]
	float fScale;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerMantleComponent.LuaActorComponent.ActorComponent.Object
	bool bPrintLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bCheckState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	bool bHoldingVaultButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	float NowBlockDis;//[Offset: 0x26c, Size: 0x4]
	float NowBlockHeight;//[Offset: 0x270, Size: 0x4]
	float NowAfterBlockMaxFallingHeight;//[Offset: 0x274, Size: 0x4]
	float NowCrossBlockMaxDis;//[Offset: 0x278, Size: 0x4]
	float NowBlockLength;//[Offset: 0x27c, Size: 0x4]
	Actor* checkActor;//[Offset: 0x280, Size: 0x8]
	Vector HitPoint;//[Offset: 0x288, Size: 0xc]
	PrimitiveComponent* VaultingComponent;//[Offset: 0x298, Size: 0x8]
	Vector BlockDir;//[Offset: 0x2a0, Size: 0xc]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	bool IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1]
	float CapsuleRadius;//[Offset: 0x2b0, Size: 0x4]
	float CapsuleHalfHeight;//[Offset: 0x2b4, Size: 0x4]
	float maxCheckDis;//[Offset: 0x2b8, Size: 0x4]
	float MaxCheckOppSiteDis;//[Offset: 0x2bc, Size: 0x4]
	float UnActiveMaxAngle;//[Offset: 0x2c0, Size: 0x4]
	float MaxCheckHeight;//[Offset: 0x2c4, Size: 0x4]
	float MaxJumpLength;//[Offset: 0x2c8, Size: 0x4]
	float heightoffsetcheck;//[Offset: 0x2cc, Size: 0x4]
	float HeightForwardCheck;//[Offset: 0x2d0, Size: 0x4]
	float minVaultHeight;//[Offset: 0x2d4, Size: 0x4]
	float minCheckHeight;//[Offset: 0x2d8, Size: 0x4]
	float JumpValueMinDisToland;//[Offset: 0x2dc, Size: 0x4]
	float SpeedDisRatio;//[Offset: 0x2e0, Size: 0x4]
	float JumpOverMinHeightDiff;//[Offset: 0x2e4, Size: 0x4]
	float MinCrossBlockDis;//[Offset: 0x2e8, Size: 0x4]
	float MinCrossBlockDisForSlide;//[Offset: 0x2ec, Size: 0x4]
	float ExtraCheckFallingHeight;//[Offset: 0x2f0, Size: 0x4]
	bool bAllowGrabWhenUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool bAllowVaultOnMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	float nowMaxX;//[Offset: 0x2f8, Size: 0x4]
	float nowMinFallingY;//[Offset: 0x2fc, Size: 0x4]
	float realStartZ;//[Offset: 0x300, Size: 0x4]
	Vector oppositeHitPoint;//[Offset: 0x304, Size: 0xc]
	Vector upHitPoint;//[Offset: 0x310, Size: 0xc]
	float AfterBlockMaxFallingHeightoffset;//[Offset: 0x31c, Size: 0x4]
	float blockledgeZ;//[Offset: 0x320, Size: 0x4]
	float CurHeightToLand;//[Offset: 0x324, Size: 0x4]
	Vector PlayerStartPosition;//[Offset: 0x328, Size: 0xc]
	Rotator PlayerRotation;//[Offset: 0x334, Size: 0xc]
	Vector PlayerStartDir;//[Offset: 0x340, Size: 0xc]
	float LastStandDis;//[Offset: 0x34c, Size: 0x4]
	float lastwalkDis;//[Offset: 0x350, Size: 0x4]
	float lastsprintDis;//[Offset: 0x354, Size: 0x4]
	float DeltaTime;//[Offset: 0x358, Size: 0x4]
	float CountTime;//[Offset: 0x35c, Size: 0x4]
	bool IsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	float realStartTime;//[Offset: 0x364, Size: 0x4]
	bool IsEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	float offsetSpeed;//[Offset: 0x36c, Size: 0x4]
	float nowAnimSpeed;//[Offset: 0x370, Size: 0x4]
	float animSpeedChangeTime;//[Offset: 0x374, Size: 0x4]
	float animChangeSpeedRate;//[Offset: 0x378, Size: 0x4]
	bool IsInStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	bool waitStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1]
	float stopVaultOppDis;//[Offset: 0x380, Size: 0x4]
	Vector DataStartPos;//[Offset: 0x384, Size: 0xc]
	FString NowVaultKey;//[Offset: 0x390, Size: 0x10]
	bool bClimbMovableActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	STExtraPlayerCharacter* PlayerPawn;//[Offset: 0x3a8, Size: 0x8]
	byte NowDrawDebugType;//[Offset: 0x3b0, Size: 0x1]
	byte gunSlot;//[Offset: 0x3b1, Size: 0x1]
	bool IsPreUseSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 0x1]
	byte PreUseSkillWeaponSlot;//[Offset: 0x3b3, Size: 0x1]
	bool IsPreUseMedicine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	bool IsChangeMontageSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 0x1]
	bool iswondowbroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b6, Size: 0x1]
	float windowsbrokenoffsetdis;//[Offset: 0x3b8, Size: 0x4]
	float ShouldAdjustHeight;//[Offset: 0x3bc, Size: 0x4]
	float MoveSeconds;//[Offset: 0x3c0, Size: 0x4]
	Vector StartOffsetToBase;//[Offset: 0x3c4, Size: 0xc]
	float StartZToBase;//[Offset: 0x3d0, Size: 0x4]
	<FString,VaultDataParam> VaultDataMap;//[Offset: 0x3d8, Size: 0x50]
	VaultDataParam NowVaultData;//[Offset: 0x428, Size: 0x68]
	VaultCheckRule[] CheckRuleListCPP;//[Offset: 0x490, Size: 0x10]
	UAEWindowComponent*[] VaultWindows;//[Offset: 0x4a0, Size: 0x10]
	bool bControlCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 0x1]
	float CameraUpperThanBlock;//[Offset: 0x4b4, Size: 0x4]
	bool bEnableAutoVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	bool bAutoVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 0x1]
	float AutoVaultMaxHeightToLand;//[Offset: 0x4c4, Size: 0x4]
	bool bCheckObstacleNotZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 0x1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ea, Size: 0x1]
	bool bResetCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 0x1]
	bool bUseEndPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 0x1]
	float EndPositionTolerance;//[Offset: 0x4f0, Size: 0x4]
	bool bEnableVaultOnMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 0x1]
	bool bEnableVaultFollowMovingObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f5, Size: 0x1]
	float VaultCheckInterval;//[Offset: 0x4f8, Size: 0x4]
	delegate OnVaultCheckFlagChange;//[Offset: 0x520, Size: 0x10]
	delegate OnVaultFailFromDS;//[Offset: 0x530, Size: 0x10]
	<byte,VaultAnimDataPath> VaultAnimPathMap;//[Offset: 0x540, Size: 0x50]
	AnimMontage* VaultMontage;//[Offset: 0x590, Size: 0x8]
	AnimMontage* TeamVaultMontage;//[Offset: 0x598, Size: 0x8]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x5a8, Size: 0x8]
	bool VaultOnBase();// 0x5fe6318
	void VaultLeave(enum State);// 0x5fe629c
	bool VaultFromCPP();// 0x5fe625c
	bool VaultFollowBase();// 0x5fe6224
	void VaultFail();// 0x5fe6208
	bool VaultCheckCPP();// 0x5fe61d0
	void UpdateVault_BluePrint();// 0x5fe61b4
	void UpdatePosition();// 0x5fe6198
	void UpdateMontageSpeed();// 0x5fe6184
	void TpsVaultUpdate();// 0x5fe6170
	void StopVaultAndReverse();// 0x5fe615c
	void StartVault();// 0x5fe6148
	void StartLoadVaultAnim();// 0x5fe6134
	void StartAsyncLoadVaultAnimRes(bool IsTDM);// 0x5fe60b0
	void StartAsyncLoadTeamVaultAnimRes();// 0x5fe6094
	void SetVaultData(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossmaxFalling, float crossmaxDis, Vector InHitPoint, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x5fe5ce4
	void SetPlayerStartPositionInternal(Vector InStartPosition, bool UseInputStart);// 0x5fe5c24
	void SetLimitPostion(float XValue, float ZValue);// 0x5fe5b70
	void SetEnd();// 0x5fe5b5c
	void ServerRPC_VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Actor* WindowActor, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x5fe5798
	void ServerRPC_StopVault();// 0x5fe5738
	void ServerRPC_RequestVault(float dis, float Height, float Length, const int VaultId, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Actor* WindowActor, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x5fe53ac
	void ServerCrossingBlockCheck(Vector StartPos, float blockdis, float blockheight, Rotator movedir, out bool Result);// 0x5fe5234
	void ServerBlockDisCheck(Vector InHitPoint, FString Key, Vector StartPos, float blockdis, float blockheight, float blocklength, Actor* InCheckActor, out bool Result);// 0x5fe4fd4
	void ResetCheck();// 0x5fe4fc0
	void ReceiveStartVault();// 0x5fe4fa4
	void ReceiveEndVault();// 0x5fe4f88
	void OnRespawned_BlueprintImpl();// 0x70644c4
	void MulticastRPC_VaultFail();// 0x5fe4f6c
	void MulticastRPC_VaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x5fe4c54
	void MulticastRPC_StopVault();// 0x5fe4c38
	void MulticastRPC_DoVault(float dis, float Height, float Length, const int VaultId, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Rotator movedir, PrimitiveComponent* InVaultingComponent);// 0x5fe4954
	void LeaveAvoidSimulateCharacterShake();// 0x5fe4940
	void JumpVaultCheck(out bool Result);// 0x5fe48b4
	void jumpFromUI();// 0x5fe48a0
	void IsValidVault(out bool IsValid);// 0x5fe4814
	FString GetVaultKeyByBlockHeight(float Height);// 0x5fe4718
	void GetRealStartZHeight(out float ResStartZ);// 0x5fe468c
	void GetPlayerStartPositionInternal(bool bRelationLoc, out Vector StartPos);// 0x5fe45b8
	void GetNowOppSideDis(out float Result);// 0x5fe452c
	void GetNowData(bool IsInFalling, out bool IsGet);// 0x5fe4454
	void GetDataStartPosition(out Vector StartPos);// 0x5fe43cc
	float GetCurHeightToLand();// 0x5fe4398
	void GetCrossMaxBlockDisOffset(out bool Result);// 0x5fe430c
	void GetCrossMaxBlockDisForward(out bool Result);// 0x5fe4280
	void GetCrossBlockMaxFallingHeight(out bool Result);// 0x5fe41f4
	byte GetCharacterSubTypeForAnim();// 0x5fe41b8
	void ForwardTestObjectType(Actor* Actor, ActorComponent* Comp, out bool Result);// 0x5fe40b8
	void FindWindowGlass(Vector CheckStart, Vector CheckEnd);// 0x5fe4000
	void EnterAvoidSimulateCharacterShake();// 0x5fe3fec
	void EndVaultCPP();// 0x5fe3fd8
	void EncodeVaultKeyToNumber(FString VaultKey, out int VaultId);// 0x5fe3ee0
	void EnableCulling(bool bEnable);// 0x5fe3e5c
	void DoVaultIgnoreStateCPP();// 0x5fe3e48
	void DoVaultCPP();// 0x5fe3e34
	void DecodeNumberToVaultKey(out const int VaultId, out FString VaultKey);// 0x5fe3d20
	void DealBrokenWindows();// 0x5fe3d0c
	void CheckVaultingWindow();// 0x5fe3cf8
	void CheckUpLengthBlock(out bool Result);// 0x5fe3c6c
	void CheckNowisJumpAnimation(float Height, float thcikLength, out bool Result, out bool ishasAnimation);// 0x5fe3b14
	void CheckIsValidByHeightCheckDis(float nowheight, float checkDis, out bool IsValid);// 0x5fe3a14
	void CheckHeight(float Height, out bool IsActive, out Vector Point);// 0x5fe38f8
	void CheckForward(out bool IsActive);// 0x5fe386c
	void CheckCanVault(out bool IsActive);// 0x5fe37d8
	bool CheckCanStandOn();// 0x5fe37a0
	void CacultLimitData();// 0x5fe378c
	void AutoVaultInternal();// 0x5fe3778
	void AutoVault(STExtraBaseCharacter* Char, out const HitResult Impact);// 0x5fe366c
	void AsyncLoadVaultAnimResFinish(byte PawnSubType);// 0x5fe35f0
<----------Generated by SSpawner v1.0.4---------->


Class: VaultDataParam
	int ID;//[Offset: 0x0, Size: 0x4]
	FString montageSectionName;//[Offset: 0x8, Size: 0x10]
	CurveFloat* upCurve;//[Offset: 0x18, Size: 0x8]
	CurveFloat* forwardCurve;//[Offset: 0x20, Size: 0x8]
	float blockdis;//[Offset: 0x28, Size: 0x4]
	float blockheight;//[Offset: 0x2c, Size: 0x4]
	float blokcThicklength;//[Offset: 0x30, Size: 0x4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool forceStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float CountTime;//[Offset: 0x38, Size: 0x4]
	float playSpeed;//[Offset: 0x3c, Size: 0x4]
	float speedChangeTime;//[Offset: 0x40, Size: 0x4]
	float changeSpeedRate;//[Offset: 0x44, Size: 0x4]
	bool standState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool walkState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool SprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool isPutUpGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	float BreakWindowDelayTime;//[Offset: 0x4c, Size: 0x4]
	bool isCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float MinCancelVTimer;//[Offset: 0x54, Size: 0x4]
	float MaxCancelVTimer;//[Offset: 0x58, Size: 0x4]
	bool fallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	float fallingvaultMinHeight;//[Offset: 0x60, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VaultCheckRule
	float CheckHeight;//[Offset: 0x0, Size: 0x4]
	float standCheckDis;//[Offset: 0x4, Size: 0x4]
	float walkCheckDis;//[Offset: 0x8, Size: 0x4]
	float sprintCheckDis;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VaultAnimDataPath
	FString VaultAnimPath;//[Offset: 0x0, Size: 0x10]
	FString TeamVaultAnimPath;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimParamsComponent.ActorComponent.Object
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x248, Size: 0x8]
	AnimInstanceContainer* LocomotionAnimContainer;//[Offset: 0x250, Size: 0x8]
	AnimInstanceContainer* FeatureMoveAnimContainer;//[Offset: 0x258, Size: 0x8]
	AnimInstanceContainer* FeatureNearDeathAnimContainer;//[Offset: 0x260, Size: 0x8]
	AnimInstanceContainer* FeatureHitAnimContainer;//[Offset: 0x268, Size: 0x8]
	AnimInstanceContainer* VehicleAnimContainer;//[Offset: 0x270, Size: 0x8]
	AnimInstanceContainer* SkillAnimContainer;//[Offset: 0x278, Size: 0x8]
	AnimInstanceContainer* GetVehicleAnimContainer();// 0x5d68e44
	AnimInstanceContainer* GetSkillAnimContainer();// 0x5d68e10
	AnimInstanceContainer* GetLocomotionAnimContainer();// 0x5d68ddc
	AnimInstanceContainer* GetFeatureNearDeathAnimContainer();// 0x5d68da8
	AnimInstanceContainer* GetFeatureMoveAnimContainer();// 0x5d68d74
	AnimInstanceContainer* GetFeatureHitAnimContainer();// 0x5d68d40
<----------Generated by SSpawner v1.0.4---------->


Class: InjuryParticleAttachOffset
	byte MovementMode;//[Offset: 0x0, Size: 0x1]
	Transform AttachTransform;//[Offset: 0x10, Size: 0x30]
	byte AttachLocationType;//[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: NetCarryBackState
	enum State;//[Offset: 0x0, Size: 0x1]
	enum DetachMethod;//[Offset: 0x1, Size: 0x1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x8, Size: 0x8]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STCharacterCarryBackComp.LuaActorComponent.ActorComponent.Object
	FString ActorComponentName;//[Offset: 0x1d8, Size: 0x10]
	int CarryBackSkillID;//[Offset: 0x1e8, Size: 0x4]
	int PutDownSkillID;//[Offset: 0x1ec, Size: 0x4]
	int DSSwitchId;//[Offset: 0x1f0, Size: 0x4]
	enum State;//[Offset: 0x1f4, Size: 0x1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x1f8, Size: 0x8]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x200, Size: 0x8]
	enum DetachMethod;//[Offset: 0x208, Size: 0x1]
	delegate OnEnterCarryBackState;//[Offset: 0x210, Size: 0x10]
	delegate OnExitCarryBackState;//[Offset: 0x220, Size: 0x10]
	delegate OnEnterBeCarriedBackState;//[Offset: 0x230, Size: 0x10]
	delegate OnExitBeCarriedBackState;//[Offset: 0x240, Size: 0x10]
	bool bEnableBPInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	SkillReplaceCharAnimData[] AnimDataList;//[Offset: 0x270, Size: 0x10]
	float CorrectTickInterval;//[Offset: 0x280, Size: 0x4]
	bool bEnableTranformCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	bool bEnableCollisionCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]
	float FrontAngleRangeThreshold;//[Offset: 0x288, Size: 0x4]
	float BackAngleRangeThreshold;//[Offset: 0x28c, Size: 0x4]
	delegate OnStartCorrectCarryBack;//[Offset: 0x298, Size: 0x10]
	STExtraVehicleBase* CarryToTargetVehicle;//[Offset: 0x2a8, Size: 0x8]
	void TryPreLoadVehicleCharAnim(const byte InAnimType);// 0x60d9660
	void StopPutDown();// 0x60d964c
	void StopCarryBack(enum InDetachMethod);// 0x60d95c8
	void StopBePutDown();// 0x60d95b4
	void StopBeCarriedBack(enum InDetachMethod);// 0x60d9530
	void StartPrePutDown();// 0x60d9514
	void StartPrepareCarryToVehicle();// 0x60d94f8
	void StartPrepareBeCarriedToVehicle();// 0x60d94dc
	void StartPreCarryBack(STExtraBaseCharacter* InCharacter);// 0x60d9458
	void StartPreBePutDown();// 0x60d943c
	void StartPreBeCarriedBack(STExtraBaseCharacter* InCharacter);// 0x60d93b8
	void StartCorrectBeCarriedState(bool bInEnableTranformCorrect, bool bInEnableCollisionCorrect);// 0x60d92e8
	void SetCarryToTargetVehicle(STExtraVehicleBase* InVehicleActor);// 0x60d9264
	void SetCarryBackState(enum InState, STExtraBaseCharacter* InCarryBackCharacter, STExtraBaseCharacter* InBeCarriedBackCharacter);// 0x60d9174
	void ResetCarryBackState();// 0x60d9160
	void ReplaceCharacterAnimation(bool bReplace);// 0x60d90dc
	void PutDownSomebody(bool bFront);// 0x60d9058
	void PutDownFailed();// 0x60d9044
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x60d8f50
	void LocalPutDownFailed();// 0x60d8f34
	void LocalExitCarryToVehicleState(enum InDetachMethod);// 0x60d8eb0
	void LocalExitCarryBackState(enum InDetachMethod);// 0x60d8e2c
	void LocalExitBeCarriedToVehicle(enum InDetachMethod);// 0x60d8da8
	void LocalExitBeCarriedBackState(enum InDetachMethod);// 0x60d8d24
	void LocalEnterPutDownState();// 0x60d8d08
	void LocalEnterCarryToVehicleState();// 0x60d8cec
	void LocalEnterCarryBackState();// 0x60d8cd0
	void LocalEnterBePutDownState();// 0x60d8cb4
	void LocalEnterBeCarriedToVehicleState();// 0x60d8c98
	void LocalEnterBeCarriedBackState();// 0x60d8c7c
	void LocalCompleteCarryBackState();// 0x60d8c60
	void LocalCompleteBeCarriedBackState();// 0x60d8c44
	void LocalCarryToVehicleFailed();// 0x60d8c28
	void LocalCarryBackFailed();// 0x60d8c0c
	bool IsValidToVehicle();// 0x60d8bcc
	bool IsInCarryBackState();// 0x60d8b94
	bool IsInBeCarriedBackState();// 0x60d8b5c
	bool IsCarryBackEnable();// 0x60d8b24
	void HandleCarrySkillEndEvent(enum StopReason, int SkillID);// 0x60d8a64
	STExtraVehicleBase* GetCarryToTargetVehicle();// 0x60d8a28
	void ExecuteCarryToVehicle(const enum InDirType);// 0x60d89ac
	void ExecuteBeCarriedToVehicle(const enum InDirType);// 0x60d8930
	void CompletePutDown(bool bFront);// 0x60d88a4
	void CompleteCarryBack();// 0x60d8888
	void CompleteBePutDown(bool bFront);// 0x60d87fc
	void CompleteBeCarriedBack();// 0x60d87e0
	bool CheckCanCarryBack(STExtraBaseCharacter* InCharacter);// 0x60d8748
	void CarryToVehicleFinished(const enum InDirType);// 0x60d86c4
	void CarryToVehicleFailed();// 0x60d86b0
	void CarryBackStateDelegate__DelegateSignature();// 0x70644c4
	void CarryBackSomebody();// 0x60d869c
	void CarryBackFailed();// 0x60d8688
	bool CanCarryToVehicle(STExtraVehicleBase* InVehicleActor);// 0x60d85f0
	int CalculateDirOfCarryToVehInternal(Actor* InVehicleActor);// 0x60d855c
	int CalculateDirOfCarryToVeh();// 0x60d8520
	void BPOnCarryBackCharacterStateInterrupted(int stateID, int InterruptedBy);// 0x70644c4
	void BPOnBeCarriedBackCharacterStateInterrupted(int stateID, int InterruptedBy);// 0x70644c4
	void BePutDownBySomebody(bool bFront);// 0x60d849c
	void BeCarriedToVehicleFinished(const enum InDirType);// 0x60d8418
	void BeCarriedBackBySomebody();// 0x60d8404
<----------Generated by SSpawner v1.0.4---------->


Class: SkillReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x8, Size: 0x10]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicOptimizeActorComponents.LuaActorComponent.ActorComponent.Object
	<ActorComponent*,DynamicOptimizeComponentFull> DormantFullComponents;//[Offset: 0x220, Size: 0x50]
	<ActorComponent*,DynamicOptimizeComponentTick> DormantTickComponents;//[Offset: 0x270, Size: 0x50]
	ActorComponent*[] DormantFullForDebug;//[Offset: 0x2c0, Size: 0x10]
	ActorComponent*[] DormantTickForDebug;//[Offset: 0x2d0, Size: 0x10]
	FName NotDestroy;//[Offset: 0x2f0, Size: 0x8]
	void SetComponentTickDirectly(ActorComponent* InComponent, bool bTick);// 0x5e874b0
	void OnRespawned();// 0x5e87494
	bool IsComponentDormant(ActorComponent* InComponent, enum DormantType);// 0x5e873c8
	FString[] GetDestoryComponentNames();// 0x5e87298
	FString GetComponentName(ActorComponent* InComponent);// 0x5e871a4
	void DormantComponent(ActorComponent* InComponent, enum DormantType, FString Reason);// 0x5e87080
	void DestroyUnuseComponent(ActorComponent* InComponent, FString Reason);// 0x5e86f98
	void AwakeComponent(ActorComponent* InComponent, enum DormantType, FString Reason, bool bForceRelateTransform);// 0x5e86e30
	void AwakeAllComponents();// 0x5e86e1c
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicOptimizeComponentFull
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bSkipUpdateChildTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	byte CollisionType;//[Offset: 0x7, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bReplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bTickEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	FString Reason;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicOptimizeComponentTick
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString Reason;//[Offset: 0x8, Size: 0x10]
	bool bTickEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnGameModeEnterFlying;//[Offset: 0x2280, Size: 0x10]
	delegate OnGameModeExitFlying;//[Offset: 0x2290, Size: 0x10]
	FString LogicAreaDataPath;//[Offset: 0x22a0, Size: 0x10]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22bc, Size: 0x1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d0, Size: 0x1]
	bool bOpenVehicleAnti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d1, Size: 0x1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d2, Size: 0x1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x22d4, Size: 0x4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d8, Size: 0x1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x22dc, Size: 0x4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x22e0, Size: 0x8]
	float DragOnGroundDownTraceDistance;//[Offset: 0x22e8, Size: 0x4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x22ec, Size: 0x4]
	bool EnableAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f0, Size: 0x1]
	CrowdManagerComponent* CrowdManager;//[Offset: 0x2310, Size: 0x8]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2318, Size: 0x1]
	delegate OnGameModeEnterPlane;//[Offset: 0x2320, Size: 0x10]
	float GameModeStateReadyEnterTime;//[Offset: 0x2340, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bUseSpawnSpotAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x163c, Size: 0x1]
	bool bUseSpawnActorAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x163d, Size: 0x1]
	bool bSpawnAdjustCollisionConsiderHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x163e, Size: 0x1]
	int DefaultRevivalCount;//[Offset: 0x1640, Size: 0x4]
	bool ReducePlayersNumAfterDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1644, Size: 0x1]
	int DefaultBuyLifeCount;//[Offset: 0x1648, Size: 0x4]
	bool EnableTeamMotivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164c, Size: 0x1]
	GameModeParms GameModeParms;//[Offset: 0x1650, Size: 0x1b0]
	STExtraPlayerStart*[] STEPlayerStartsList;//[Offset: 0x1800, Size: 0x10]
	<int,BornPlayerStartData> BornIDToPlayerStartsMap;//[Offset: 0x1810, Size: 0x50]
	enum GameModeType;//[Offset: 0x1860, Size: 0x1]
	enum GameModeSubType;//[Offset: 0x1861, Size: 0x1]
	AIActingComponent* AIActingComp;//[Offset: 0x1868, Size: 0x8]
	GameStatisComponent* GameStatisComp;//[Offset: 0x1870, Size: 0x8]
	int bEnableAIPolicyDecisionLog;//[Offset: 0x1878, Size: 0x4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0x187c, Size: 0x4]
	bool IsDestroyNoActiveWorldActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1880, Size: 0x1]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0x1884, Size: 0x4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0x1888, Size: 0x4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0x188c, Size: 0x4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1890, Size: 0x1]
	FString SubAISuffix;//[Offset: 0x1898, Size: 0x10]
	int MlAIType;//[Offset: 0x18a8, Size: 0x4]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0x18b0, Size: 0x8]
	class AIController* AIControllerClass;//[Offset: 0x18b8, Size: 0x8]
	class AIController* NewAIControllerClass;//[Offset: 0x18c0, Size: 0x8]
	byte WorldLoadedType;//[Offset: 0x18c8, Size: 0x1]
	int MaxNoConsiderActorNum;//[Offset: 0x18cc, Size: 0x4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0x18d0, Size: 0x4]
	int PlayerNumPerTeam;//[Offset: 0x18d4, Size: 0x4]
	bool IgnoreWorldLevelProbeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d8, Size: 0x1]
	bool IsRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d9, Size: 0x1]
	FString GameModeDisplayName;//[Offset: 0x18e0, Size: 0x10]
	float CircleSpeedMultiplicator;//[Offset: 0x18f0, Size: 0x4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f4, Size: 0x1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f5, Size: 0x1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f6, Size: 0x1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f7, Size: 0x1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f8, Size: 0x1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18f9, Size: 0x1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18fa, Size: 0x1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18fb, Size: 0x1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18fc, Size: 0x1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18fd, Size: 0x1]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18fe, Size: 0x1]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18ff, Size: 0x1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1900, Size: 0x1]
	int[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0x1908, Size: 0x10]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0x1918, Size: 0x4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191c, Size: 0x1]
	bool bEnableArmorEquipmentToBeAutoDroped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191d, Size: 0x1]
	FString GameModeConfigPath;//[Offset: 0x1920, Size: 0x10]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1930, Size: 0x1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1931, Size: 0x1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1932, Size: 0x1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1933, Size: 0x1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1934, Size: 0x1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1935, Size: 0x1]
	GameModeParam CurPlaneRouteData;//[Offset: 0x1938, Size: 0x58]
	Vector BornLocation;//[Offset: 0x1990, Size: 0xc]
	Vector AIBornLocation;//[Offset: 0x199c, Size: 0xc]
	float BornRadius;//[Offset: 0x19a8, Size: 0x4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0x19ac, Size: 0x1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0x19ad, Size: 0x1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0x19b0, Size: 0x4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0x19b4, Size: 0x4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x19b8, Size: 0x8]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c0, Size: 0x1]
	float MaxAIAllowJumpRadius;//[Offset: 0x19e0, Size: 0x4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0x19e4, Size: 0x4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19e8, Size: 0x1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0x19f0, Size: 0x8]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f8, Size: 0x1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19f9, Size: 0x1]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0x1a00, Size: 0x8]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0x1a08, Size: 0x8]
	SeasonStatueBase* StatueBaseActor;//[Offset: 0x1a10, Size: 0x8]
	float OverrideBackpackCapacity;//[Offset: 0x1a18, Size: 0x4]
	bool bOverrideBackpackCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1c, Size: 0x1]
	FString LuaModPath;//[Offset: 0x1a20, Size: 0x10]
	FString LuaSubMod;//[Offset: 0x1a30, Size: 0x10]
	FString[] CustomWidgets;//[Offset: 0x1a40, Size: 0x10]
	FString CustomUIName;//[Offset: 0x1a50, Size: 0x10]
	GameModeState* CurrentState;//[Offset: 0x1a60, Size: 0x8]
	GameModeState*[] AllGameModeStates;//[Offset: 0x1a68, Size: 0x10]
	GameModeState* GameModeStateActive;//[Offset: 0x1a78, Size: 0x8]
	GameModeState* GameModeStateReady;//[Offset: 0x1a80, Size: 0x8]
	GameModeState* GameModeStateFighting;//[Offset: 0x1a88, Size: 0x8]
	GameModeState* GameModeStateFinished;//[Offset: 0x1a90, Size: 0x8]
	FName CurGameModeState;//[Offset: 0x1a98, Size: 0x8]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ab0, Size: 0x1]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x1ab8, Size: 0x8]
	EventReportComponent* EventReportComponent;//[Offset: 0x1ac0, Size: 0x8]
	Actor* PlanePawn;//[Offset: 0x1ac8, Size: 0x8]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad0, Size: 0x1]
	GameModeProbeComponent*[] AllProbeComps;//[Offset: 0x1ad8, Size: 0x10]
	AIProbeComponent* RegisterAIProbe;//[Offset: 0x1ae8, Size: 0x8]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0x1af0, Size: 0x8]
	float OutBoundDamage;//[Offset: 0x1af8, Size: 0x4]
	AIGroupManagerComponent* AIGroupManagerComp;//[Offset: 0x1b98, Size: 0x8]
	AnimalTeleportComponent* AnimalTeleportComp;//[Offset: 0x1ba0, Size: 0x8]
	<uint32,byte> AISpawnTypeCache;//[Offset: 0x1ba8, Size: 0x50]
	PlaneComponent* PlaneComp;//[Offset: 0x1bf8, Size: 0x8]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0x1c00, Size: 0x8]
	RespawnItemConfig* DefaultGeneratePlayerItemConfig;//[Offset: 0x1c08, Size: 0x8]
	ShowVehicleComponent* ShowVehicle;//[Offset: 0x1c10, Size: 0x8]
	delegate OnVehicleDamageInfo;//[Offset: 0x1c18, Size: 0x10]
	delegate OnSpawnAISuccessDelegate;//[Offset: 0x1c68, Size: 0x10]
	delegate OnTerminatorEndGameDelegate;//[Offset: 0x1d28, Size: 0x10]
	PlaneTypes[] SeasonPlanes;//[Offset: 0x1d38, Size: 0x10]
	int MatchGoal;//[Offset: 0x1da4, Size: 0x4]
	bool bIsNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da8, Size: 0x1]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x1dc8, Size: 0x50]
	ItemAttach[] ItemAttachListCfg;//[Offset: 0x1e18, Size: 0x10]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e28, Size: 0x1]
	RespawnItemConfigInst[] RespawnItemConfigList;//[Offset: 0x1e30, Size: 0x10]
	RespawnItemConfig* RespawnItemConfig;//[Offset: 0x1e40, Size: 0x8]
	FakePlayerCustomComponent* FakePlayerCustomComponent;//[Offset: 0x1e48, Size: 0x8]
	FName FeatureDefaultPawnName;//[Offset: 0x1e50, Size: 0x8]
	FName FeaturePlayerControllerName;//[Offset: 0x1e58, Size: 0x8]
	FName FeatureWeaponName;//[Offset: 0x1e60, Size: 0x8]
	bool CallTeamMateStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e68, Size: 0x1]
	bool CircleDefaultActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e69, Size: 0x1]
	int VehicleExplosionLifeSpan;//[Offset: 0x1e6c, Size: 0x4]
	bool IsEnableReqEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e70, Size: 0x1]
	bool IsEnableReqExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e71, Size: 0x1]
	bool IsEnableReqChangeVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e72, Size: 0x1]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e73, Size: 0x1]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e74, Size: 0x1]
	bool bEnableDSAITickRateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e75, Size: 0x1]
	DSTickRateOptimize DSTickRateOptimizeConfig;//[Offset: 0x1e78, Size: 0x10]
	float DelaySpawnVehicleTime;//[Offset: 0x1e88, Size: 0x4]
	float DelayDestroyVehicleTime;//[Offset: 0x1e8c, Size: 0x4]
	int MaxAllowSpawnVehicleCount;//[Offset: 0x1e90, Size: 0x4]
	bool bIgnorePlayerStartWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e94, Size: 0x1]
	<uint32,Actor*> PlayerVehicleInReady;//[Offset: 0x1e98, Size: 0x50]
	int MaxVehiclesInReady;//[Offset: 0x1ee8, Size: 0x4]
	int MaxVehiclesPerGroupInReady;//[Offset: 0x1eec, Size: 0x4]
	int MaxWingmanInReady;//[Offset: 0x1ef0, Size: 0x4]
	int MaxWingmanPerGroupInReady;//[Offset: 0x1ef4, Size: 0x4]
	bool EnableSuperCarPreTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef8, Size: 0x1]
	int SuperCarNum;//[Offset: 0x1efc, Size: 0x4]
	int MaxGroups;//[Offset: 0x1f00, Size: 0x4]
	int MaxPlayersPerGroup;//[Offset: 0x1f04, Size: 0x4]
	<int,GroupPlayers> PlayersInGroup;//[Offset: 0x1f08, Size: 0x50]
	PVSNetRelevantHelper* PVSNetRelevantHelper;//[Offset: 0x2148, Size: 0x8]
	bool bDelayAddPawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2150, Size: 0x1]
	bool bMLAIAsHuman;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2151, Size: 0x1]
	STExtraPlayerController*[] WaitAddWeaponPlayerList;//[Offset: 0x2158, Size: 0x10]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0x2168, Size: 0x10]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2178, Size: 0x1]
	<uint64,PlayerController*> PlayerMap;//[Offset: 0x2180, Size: 0x50]
	bool bNeedBroadcastFatalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d0, Size: 0x1]
	bool bNeedBroadcastLastBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d1, Size: 0x1]
	<int,AIControllerList> AIDeathResIDToControllerList;//[Offset: 0x21d8, Size: 0x50]
	AIPawnPoolItem[] AILivingPawnForPool;//[Offset: 0x2228, Size: 0x10]
	bool bEnablePacketSimulationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2238, Size: 0x1]
	int MinPacketSimulationLag;//[Offset: 0x223c, Size: 0x4]
	float CaculateConnectionsAvgLagTimer;//[Offset: 0x2240, Size: 0x4]
	int ConnectionsAvgLag;//[Offset: 0x2244, Size: 0x4]
	float CaculateConnectionsAvgLagTime;//[Offset: 0x2248, Size: 0x4]
	FString[] ReasonsToSend;//[Offset: 0x2250, Size: 0x10]
	bool bAIDropBulletInClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2260, Size: 0x1]
	bool bDropAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2261, Size: 0x1]
	bool bOnlyDropMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2262, Size: 0x1]
	float DistanceCullFactor;//[Offset: 0x2264, Size: 0x4]
	float CheckDestoryActorTime;//[Offset: 0x2268, Size: 0x4]
	bool bReCalcCharacterNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x226c, Size: 0x1]
	bool bInvincibleIgnorePoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x226d, Size: 0x1]
	float RemainReadyStateTimeForceSpawnMLAI;//[Offset: 0x2270, Size: 0x4]
	Vector2D TimerSpawnMLAITime;//[Offset: 0x2274, Size: 0x8]
	bool IsRegisterDropItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x227c, Size: 0x1]
	bool bMlAITraining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x227d, Size: 0x1]
	void UseRoomCustomCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x5dffa64
	void UseFixedCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x5dff920
	void StopAllFakePlayerAIBehaviorTree();// 0x5dff90c
	void StatisticsVehicleDamage(float Damage, int DamageTypeId, Actor* DamageCauser, Controller* InstigatorController, Controller* VictimController, bool bIsFatalHealthCost, Actor* VictimVehicle);// 0x5dff714
	bool SpawnTeammateAIWithPlayerKey(uint32 PlayerKey);// 0x5dff684
	bool SpawnMLAIWithPlayerKeyRet(uint32 PlayerKey, int TeamID, uint32 Level, bool bDelivery, bool bTeammate);// 0x5dff4f8
	void SpawnAllAI();// 0x5dff4e4
	bool SpawnAIAtPosiotn(int TeamID, float PosiX, float PosiY, float PosiZ, int WeaponId);// 0x5dff368
	void SpawnAI(int Num);// 0x5dff2ec
	bool ShouldDisableRoomCircleConfig();// 0x5dff2ac
	void SetStateLeftTime(int leftTime);// 0x5dff228
	void SetGameEndReportData();// 0x5dff20c
	void SetCharacterCustomEnd(UAECharacter* Character);// 0x5dff190
	void SetAITypeCache(uint32 PlayerKey, byte AIType);// 0x5dff0d8
	void RevisePlayerTombBoxDropWrapperList(STExtraBaseCharacter* Character, out PickUpItemData[] OutItemDataList, STExtraBaseCharacter* DamageCauser, int InstanceIDCnt);// 0x5dfef68
	void RestartPlayer(Controller* NewPlayer);// 0x5dfeee4
	void ResetGameMode();// 0x5dfeec8
	void RemoveUnuseComponent(SubSystemConfig InSubSystemConfig);// 0x5dfee14
	void RegisterComponentInternal(enum InSubSystemId, ActorComponent* NewComp, bool bAddToRoot);// 0x5dfed10
	void RefreshNetworkObject(Actor* Actor, Vector Loction);// 0x5dfec50
	void OnVehicleKill(int DamageTypeId, Actor* DamageCauser);// 0x5dfeb90
	void OnReportNetworkData();// 0x5dfeb74
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x5dfeaf0
	void OnGameModeStateChange();// 0x5dfead4
	void OnGameEnterReady();// 0x5dfeab8
	void OnGameEnterFinish();// 0x5dfea9c
	void OnGameEnterFight();// 0x5dfea80
	void OnGameEnterActive();// 0x5dfea64
	void OnAirDropBoxDestroy(int boxId);// 0x5dfe9e8
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x5dfe8e0
	bool IsVisualFieldFeatureSupported();// 0x5dfe8a8
	bool IsSubAIMode();// 0x5dfe870
	bool IsRevivalGameMode(STExtraPlayerState* PlayerState);// 0x5dfe7d8
	bool IsRestartPlayerUsePawnRotation();// 0x5dfe798
	bool IsPlayerCanSelfRevival(STExtraPlayerState* PlayerState);// 0x5dfe700
	bool IsFeatureSupported(enum SubSystemType);// 0x5dfe670
	bool IsCanJump(PlayerController* PC);// 0x5dfe5d8
	void InitlializeRespawnItemConfig();// 0x5dfe5c4
	void InitialGameModeState();// 0x5dfe5b0
	void HandleGameEnd();// 0x5dfe594
	void GotoReadyState();// 0x5dfe580
	void GotoFinishedState();// 0x5dfe564
	void GotoFightingState();// 0x5dfe548
	void GotoActiveState();// 0x5dfe534
	void GMGameModeGotoFightingState();// 0x5dfe520
	void GetPlayerRealtimeVerifyInfo(uint32 PlayerKey, out RealtimeVerifyInfo RealtimeVerifyInfo);// 0x5dfe414
	int GetMonsterCount();// 0x5dfe3e0
	class Object GetGlobalOverrideClass(class Object InComponentClass);// 0x5dfe354
	STExtraBaseCharacter* GetFirstAlivePlayerCharacter();// 0x5dfe318
	byte GetDefaultAIType(uint32 PlayerKey);// 0x5dfe28c
	int GetCurWeatherPhaseIndex();// 0x5dfe250
	GameModeState* GetCurrentState();// 0x5dfe21c
	GameModeParam GetCurPlaneRouteData();// 0x5dfe138
	FName GetCurGameModeState();// 0x5dfe11c
	GameModeState*[] GetAllGameModeStates();// 0x5dfe078
	AIWorldVolume* GetAIWorldVolume();// 0x5dfe044
	AIWorldSoundManagerComponent* GetAIWorldSoundManagerComponent();// 0x5dfe010
	byte GetAITypeCache(uint32 PlayerKey, bool bDeleteIfGet);// 0x5dfdf40
	void GenerateRespawnItemsForAllPlayers();// 0x5dfdf2c
	PlayerController* FindPlayerControllerByUId(uint64 UID);// 0x5dfde98
	FakePlayerAIController* FindAIControllerWithPlayerKey(uint32 PlayerKey);// 0x5dfde0c
	void ExecuteCVarConfig();// 0x5dfddf8
	void DropItemRegisterAIPickupPoint(Actor* PickUpActor);// 0x5dfdd7c
	void CreatePVSNetRelevant();// 0x5dfdd68
	void CreateGameModeComponents();// 0x5dfdd4c
	STExtraBaseCharacter* CreateBaseCharacter(FakePlayerAIController* InAIController);// 0x5dfdcb8
	ActorComponent* CreateAndRegisterComponent(SubSystemConfig InSubSystemConfig);// 0x5dfdbf4
	Actor* ChoosePlayerStartByTeamId(int TeamID);// 0x5dfdb60
	bool CheckNoHumanExist();// 0x5dfdb20
	bool CheckMatchGoalAchieved();// 0x5dfdae0
	void CheckInitGameTriggerEnv();// 0x5dfdacc
	bool CheckGameEnd();// 0x5dfda8c
	void ChangeStateGM(FName TargetGameModeState);// 0x5dfda10
	bool CanFinishWhenAllNearDeathInSelfRevival(STExtraPlayerState* PlayerState);// 0x5dfd978
	bool CanEnterObserve(STExtraPlayerState* PlayerState);// 0x5dfd8e0
	void CalculateGameTerminatorInfo(Controller* Killer, Controller* VictimPlayer);// 0x5dfd824
	void CaculateConnectionsAvgLag(float DeltaTime);// 0x5dfd7a8
	void BPSpawnAI(int Num);// 0x5dfd72c
<----------Generated by SSpawner v1.0.4---------->


Class: GamemodeAIDataAsset.DataAsset.Object
	bool bUseTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	FString AIEquipmentTableName;//[Offset: 0x38, Size: 0x10]
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x48, Size: 0x10]
	bool bUseSpecificEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int SpecificEquipId;//[Offset: 0x5c, Size: 0x4]
	float RandomStartJumpTime;//[Offset: 0x60, Size: 0x4]
	float RandomEndJumpTime;//[Offset: 0x64, Size: 0x4]
	float JumpRadius;//[Offset: 0x68, Size: 0x4]
	float JumpHeight;//[Offset: 0x6c, Size: 0x4]
	float RandomAccelerateStart;//[Offset: 0x70, Size: 0x4]
	float RandomAccelerateEnd;//[Offset: 0x74, Size: 0x4]
	float OpenParachuteHeight;//[Offset: 0x78, Size: 0x4]
	float CheckOpenParachuteFreq;//[Offset: 0x7c, Size: 0x4]
	float CloseParachuteHeight;//[Offset: 0x80, Size: 0x4]
	float CheckCloseParachuteFreq;//[Offset: 0x84, Size: 0x4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x88, Size: 0x4]
	float WhiteCircleRaduisCanPrne;//[Offset: 0x8c, Size: 0x4]
	float WhiteCircleRaduisMedicine;//[Offset: 0x90, Size: 0x4]
	float StopdeliverTime;//[Offset: 0x94, Size: 0x4]
	float NoCirlceRadius;//[Offset: 0x98, Size: 0x4]
	float TraceHeight;//[Offset: 0x9c, Size: 0x4]
	float RangeMin;//[Offset: 0xa0, Size: 0x4]
	float RangeMax;//[Offset: 0xa4, Size: 0x4]
	float OriginCheckSquare;//[Offset: 0xa8, Size: 0x4]
	float DestCheckSquare;//[Offset: 0xac, Size: 0x4]
	int HouseCheckTimes;//[Offset: 0xb0, Size: 0x4]
	Vector2D FlyToCenterOfCircle;//[Offset: 0xb4, Size: 0x8]
	float FlyToCircleRadius;//[Offset: 0xbc, Size: 0x4]
	float FlyToCircleOutRadius;//[Offset: 0xc0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CrowdManagerComponent.ActorComponent.Object
	float TimeHorizon;//[Offset: 0x110, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x114, Size: 0x4]
	float CohesionWeight;//[Offset: 0x118, Size: 0x4]
	float AlignmentWeight;//[Offset: 0x11c, Size: 0x4]
	float ArriveWeight;//[Offset: 0x120, Size: 0x4]
	float PushedWeight;//[Offset: 0x124, Size: 0x4]
	float SeparationWeight;//[Offset: 0x128, Size: 0x4]
	bool bPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	bool bSingleTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 0x1]
	bool bOpenAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f, Size: 0x1]
	float DragDistanceWhenStuck;//[Offset: 0x130, Size: 0x4]
	float DetermineAgentStuckTime;//[Offset: 0x134, Size: 0x4]
	float DetermineAgentStuckDistSq;//[Offset: 0x138, Size: 0x4]
	<Actor*,int> actor2AgentIndex;//[Offset: 0x958, Size: 0x50]
	void SetQueryInterfaceBlueprint(AIWorldVolume* Query);// 0x5e57464
	void RemoveCrowdAgentBlueprint(Actor* Owner);// 0x5e573e8
	void MoveToPositionBlueprint(Actor* Agent, out const Vector Position, float stopRadius);// 0x5e572dc
	void AddCrowdAgentBlueprint(Actor* Owner, float AgentRadius, float SegmentRadius, float Height, float MaxSpeed, float MaxForce, float queryNeighborRadius, float queryBoundaryRadius);// 0x5e570c8
<----------Generated by SSpawner v1.0.4---------->


Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x440, Size: 0x10]
	FString HousePathFilePath;//[Offset: 0x450, Size: 0x10]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	FString LogicAreaFilePath;//[Offset: 0x468, Size: 0x10]
	bool bTestOccupiedOcclusionPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	bool bDrawNavModifierProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x4c8, Size: 0x50]
	ItemSpotSceneComponent* LastRegisteredItemSpot;//[Offset: 0x568, Size: 0x8]
	<Actor*,STBuffApplifierSpreading*> AllBuffApplifierSpreadings;//[Offset: 0x770, Size: 0x50]
	void RemoveDamageableActor(DamageableActor* DamageableActor);// 0x5d58754
	Vector GetSpreadingCenter(Actor* InActor);// 0x5d586c4
	void BreakWall(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x5d58604
	void BreakHouse(Vector LogicAreaLoc);// 0x5d58588
	void AddDamageableActor(DamageableActor* DamageableActor);// 0x5d5850c
<----------Generated by SSpawner v1.0.4---------->


Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x430, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STBuffApplifierSpreading.Actor.Object
	Actor* ParentGrenade;//[Offset: 0x3f8, Size: 0x8]
	SceneComponent* SceneRoot;//[Offset: 0x410, Size: 0x8]
	Rotator[] InitialTraceArray;//[Offset: 0x418, Size: 0x10]
	int StepsPerTick;//[Offset: 0x428, Size: 0x4]
	int SpreadDirectionCount;//[Offset: 0x42c, Size: 0x4]
	int MaxInstanceCount;//[Offset: 0x430, Size: 0x4]
	int MaxMaterialAdditiveInstanceCount;//[Offset: 0x434, Size: 0x4]
	float InitialTraceLenClamp;//[Offset: 0x438, Size: 0x4]
	FName BlockingTag;//[Offset: 0x440, Size: 0x8]
	float NormalLimitZ;//[Offset: 0x448, Size: 0x4]
	float GroundTraceNormalScale_Start;//[Offset: 0x44c, Size: 0x4]
	float InitialGroundTraceHeightZ;//[Offset: 0x450, Size: 0x4]
	float ConcurrentGroundTraceHeightZ;//[Offset: 0x454, Size: 0x4]
	float ProcessedHitLenClamp;//[Offset: 0x458, Size: 0x4]
	float SphereRadius;//[Offset: 0x45c, Size: 0x4]
	float SpreadXY;//[Offset: 0x460, Size: 0x4]
	float SpreadZ;//[Offset: 0x464, Size: 0x4]
	class TslDamageField* DamageFieldClass;//[Offset: 0x468, Size: 0x8]
	float DamageTickInterval;//[Offset: 0x470, Size: 0x4]
	bool bModifyEffectLifetime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 0x1]
	float InitialEffectLifetime;//[Offset: 0x478, Size: 0x4]
	float MinEffectLifetimeForStart;//[Offset: 0x47c, Size: 0x4]
	float EffectLifetimeVariation;//[Offset: 0x480, Size: 0x4]
	byte[] InterestedSurfaceTypes;//[Offset: 0x488, Size: 0x10]
	float DamageFieldOffGround;//[Offset: 0x498, Size: 0x4]
	bool bMergeTwoBurningGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	SphereComponent*[] BlockerArray;//[Offset: 0x4b8, Size: 0x10]
	SphereComponent*[] MaterialBlockerArray;//[Offset: 0x4c8, Size: 0x10]
	TslDamageField*[] DamageFieldArray;//[Offset: 0x4d8, Size: 0x10]
	STExtraBaseCharacter*[] CharacterInEffectArray;//[Offset: 0x4e8, Size: 0x10]
	float VehicleWarOverlapCheckInternal;//[Offset: 0x590, Size: 0x4]
	int VehicleWarInnerSkillID;//[Offset: 0x594, Size: 0x4]
	int VehicleWarOuterSkillID;//[Offset: 0x598, Size: 0x4]
	void TickDamageFields();// 0x60c5550
	void SetParentGrenade(Actor* Val);// 0x60c54d4
	void SetMaxMaterialAdditiveInstanceCount(int Val);// 0x60c545c
	void SetLastImpactVelocity(Vector InVelocity);// 0x60c53dc
	void SetInitialEffectLifetime(float Val);// 0x60c5364
	Vector GetSpreadingCenter();// 0x60c532c
	Actor* GetParentGrenade();// 0x60c5310
	int GetMaxMaterialAdditiveInstanceCount();// 0x60c52f4
	float GetInitialEffectLifetime();// 0x60c52d8
	TslDamageField*[] GetDamageFields();// 0x60c5234
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x60c5094
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x60c4f60
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x60c4e2c
<----------Generated by SSpawner v1.0.4---------->


Class: TslDamageField.Actor.Object
	Actor* ParentGrenade;//[Offset: 0x400, Size: 0x8]
	void SetParentGrenade(Actor* Val);// 0x60c49f8
	Actor* GetParentGrenade();// 0x60c49dc
<----------Generated by SSpawner v1.0.4---------->


Class: DamageableActor.UAERegionActor.LuaActor.Actor.Object
	void SetTargetDamageRateMap(<enum,float> InTargetDamageRateMap);// 0x5e696b4
	int GetVehicleDamagedSpeed();// 0x70644c4
	int GetVehicleDamagedCoefficient();// 0x70644c4
	<enum,float> GetTargetDamageRateMap();// 0x5e69574
	float CPP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x5e69410
	bool CPP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x5e69378
	bool CPP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x5e691e4
	float CPP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x5e69138
	float CPP_GetDamageRateByTarget(Actor* Target);// 0x5e690a4
	enum[] CPP_GetDamageableGameObjectType();// 0x5e68ff8
	bool CPP_GetCanBePicked();// 0x5e68fb8
	FName CPP_GetBulletBlockComponentTag();// 0x5e68f7c
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x5e68ed0
	float CPP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x5e68e00
	float CPP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x5e68d10
	void BroadcastDamageState(int DState);// 0x5e68c60
	float BP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x70644c4
	bool BP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x70644c4
	bool BP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x70644c4
	float BP_GetMaxHP();// 0x70644c4
	Vector BP_GetHurtApperanceOffset();// 0x70644c4
	float BP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x70644c4
	float BP_GetDamageRateByTarget(Actor* Target);// 0x70644c4
	enum[] BP_GetDamageableGameObjectType();// 0x70644c4
	float BP_GetCurrentHP();// 0x70644c4
	bool BP_GetCanBePicked();// 0x70644c4
	FName BP_GetBulletBlockComponentTag();// 0x70644c4
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x70644c4
	void BP_DamageStateChange(int DState);// 0x70644c4
	float BP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x70644c4
	float BP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeParms
	SubSystemConfig SSC_DeferredExitGame;//[Offset: 0x0, Size: 0x30]
	SubSystemConfig SSC_RecallTeammate;//[Offset: 0x30, Size: 0x30]
	SubSystemConfig SSC_RescueHelicopter;//[Offset: 0x60, Size: 0x30]
	SubSystemConfig SSC_HeavyWeapon;//[Offset: 0x90, Size: 0x30]
	SubSystemConfig SSC_TDMHardPoint;//[Offset: 0xc0, Size: 0x30]
	SubSystemConfig SSC_VisualField;//[Offset: 0xf0, Size: 0x30]
	SubSystemConfig SSC_WorldActorFlag;//[Offset: 0x120, Size: 0x30]
	SubSystemConfig SSC_SuperCold;//[Offset: 0x150, Size: 0x30]
	SubSystemConfig SSC_ARWeaponManager;//[Offset: 0x180, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: SubSystemConfig
	enum SubSystemId;//[Offset: 0x0, Size: 0x1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	enum ConstructType;//[Offset: 0x2, Size: 0x1]
	class Object* SubSystemClass;//[Offset: 0x8, Size: 0x8]
	DynamicCompConfig DCC_PlayerController;//[Offset: 0x10, Size: 0x10]
	DynamicCompConfig DCC_PlayerPawn;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicCompConfig
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	class Object* DynamicCompClass;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bAutoResetOccupiedMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	float ResetOccupiedMarkTime;//[Offset: 0x42c, Size: 0x4]
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	int PlayerBornPointID;//[Offset: 0x434, Size: 0x4]
	bool CheckEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]
	int CampID;//[Offset: 0x43c, Size: 0x4]
	int TeamID;//[Offset: 0x440, Size: 0x4]
	bool IsEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 0x1]
	bool CreativeModeCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x445, Size: 0x1]
	void SetMarkOccupied();// 0x61f6c84
	void ReSetMarkOccupied();// 0x61f6c70
	bool IsMarkOccupied();// 0x61f6c38
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x420, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BornPlayerStartData
	int BornPointID;//[Offset: 0x0, Size: 0x4]
	STExtraPlayerStart*[] PlayerStarts;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameStatisComponent.ActorComponent.Object
	bool IsIngameLikeManagerRevenge(uint64 FriendUID, uint64 OpponentUID);// 0x5f0c978
	void InitTLogDamageToPlayerCount();// 0x5f0c964
	void InitPlayerHatredStatis();// 0x5f0c950
	void InitIngameTeammateLabelDamageCheck(float DamgeTriggerMin, float DamgeTriggerMax);// 0x5f0c89c
	void InitCarryBackDamageStatis();// 0x5f0c888
	void InitAchievementDamageCount();// 0x5f0c874
	int GetTLogDamageToPlayerCount(uint64 UID);// 0x5f0c7e8
	float GetDamageTakenWhenCarrying(uint64 UID);// 0x5f0c75c
	float GetDamageTakenWhenBeingCarried(uint64 UID);// 0x5f0c6d0
	float GetDamageTakenAchievement(uint64 UID);// 0x5f0c644
	void ClearDamageTakenWhenCarrying(uint64 UID);// 0x5f0c5c8
	void ClearDamageTakenWhenBeingCarried(uint64 UID);// 0x5f0c54c
<----------Generated by SSpawner v1.0.4---------->


Class: ItemsBoxConfigDataAsset.DataAsset.Object
	DataTable* DataBase;//[Offset: 0x30, Size: 0x8]
	FString TablePath;//[Offset: 0x38, Size: 0x10]
	ItemsBoxConfigDataAssetConfigGroup[] AirDropBoxGroupConfigs;//[Offset: 0x48, Size: 0x10]
	ItemsBoxConfigDataAssetConfigGroup[] SuperAirDropBoxGroupConfigs;//[Offset: 0x58, Size: 0x10]
	ItemsBoxConfigDataAssetConfigGroup[] TreasureBoxGroupConfigs;//[Offset: 0x68, Size: 0x10]
	ItemsBoxConfigDataAssetConfigGroup[] UAVAirDropBoxGroupConfigs;//[Offset: 0x78, Size: 0x10]
	AirDropBoxGenerateWrapperItemData[] GetUAVAirDropBoxGenerateDataList(int GroupIndex);// 0x5f3d09c
	AirDropBoxGenerateWrapperItemData[] GetTreasureBoxGenerateDataList(FString GroupName);// 0x5f3cf00
	AirDropBoxGenerateWrapperItemData[] GetTargetItemsDataFromTableByCategoryFilter(FString CategoryFilter);// 0x5f3cd64
	AirDropBoxGenerateWrapperItemData[] GetSuperAirDropBoxGenerateDataList();// 0x5f3ccc0
	AirDropBoxGenerateWrapperItemData[] GetAirDropBoxGenerateDataList();// 0x5f3cc1c
<----------Generated by SSpawner v1.0.4---------->


Class: ItemsBoxConfigDataAssetConfigGroup
	FString GroupName;//[Offset: 0x0, Size: 0x10]
	ItemsBoxConfigDataAssetConfigItem[] ConfigItems;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemsBoxConfigDataAssetConfigItem
	float ProbabilityPercent;//[Offset: 0x0, Size: 0x4]
	FString CategoryFilter;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeParam
	float Radius0;//[Offset: 0x0, Size: 0x4]
	float Radius1;//[Offset: 0x4, Size: 0x4]
	float Radius3;//[Offset: 0x8, Size: 0x4]
	bool bUsingPolygon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float Radius2;//[Offset: 0x10, Size: 0x4]
	Vector2D[] PolygonPoints;//[Offset: 0x18, Size: 0x10]
	float BlueCircleRadius;//[Offset: 0x28, Size: 0x4]
	Vector MapCenter;//[Offset: 0x2c, Size: 0xc]
	float PlaneSpeed;//[Offset: 0x38, Size: 0x4]
	float PlaneHeight;//[Offset: 0x3c, Size: 0x4]
	float CanOpenParachuteHeight;//[Offset: 0x40, Size: 0x4]
	float ForceOpenParachuteHeight;//[Offset: 0x44, Size: 0x4]
	float CloseParachuteHeight;//[Offset: 0x48, Size: 0x4]
	bool bCrossCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float CrossCenterRadius;//[Offset: 0x50, Size: 0x4]
	float FixedJumpPointRate;//[Offset: 0x54, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeDataAsset.DataAsset.Object
	float[] Probabilities;//[Offset: 0x30, Size: 0x10]
	GameModeParam[] GameModeParams;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterProbeComponent.GameModeProbeComponent.ActorComponent.Object
	int TimeToSpawnPawn;//[Offset: 0x110, Size: 0x4]
	SpawnGroupItemInfo[] SpawnGroupInfoList;//[Offset: 0x118, Size: 0x10]
	<int,SpawnTableData> PawnTableData;//[Offset: 0x128, Size: 0x50]
	void InitialItemTable();// 0x5f75f90
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeProbeComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: SpawnGroupItemInfo
	int PawnGroupID;//[Offset: 0x0, Size: 0x4]
	int PawnID;//[Offset: 0x4, Size: 0x4]
	int PawnPercent;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SpawnTableData
	int PawnID;//[Offset: 0x0, Size: 0x4]
	FString PathName;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AIWorldSoundManagerComponent.ActorComponent.Object
	<enum,SoundConfig> SoundConfig;//[Offset: 0x130, Size: 0x50]
	<enum,SoundConfig> MlAISoundConfig;//[Offset: 0x180, Size: 0x50]
	enum[] HearSoundCharacterTypes;//[Offset: 0x1d0, Size: 0x10]
	FName SoundTypeKey;//[Offset: 0x1e0, Size: 0x8]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x1e8, Size: 0x8]
	void SetEnableMlAIPlayerHearSound(bool IsEnable);// 0x5d58010
	void ProduceSoundInPos(enum soundType, out const Vector pos, Actor* SourceActor);// 0x5d57f04
	void OnProjectileExplode(Actor* Projectile, Actor* Instigator);// 0x5d57e50
<----------Generated by SSpawner v1.0.4---------->


Class: SoundConfig
	float TransDist;//[Offset: 0x0, Size: 0x4]
	bool bSetBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FName[] BlackboardNameList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SeasonStatueBase.Actor.Object
	void SetStatueBaseInfo(out const StatueBaseParam Param, out const SeasonStatueData[] StatueInfo);// 0x6050664
<----------Generated by SSpawner v1.0.4---------->


Class: StatueBaseParam
	FString MatPath;//[Offset: 0x0, Size: 0x10]
	FString TeamFlag;//[Offset: 0x10, Size: 0x10]
	FString TeamName;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeState.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 0x10]
	float StateTime;//[Offset: 0xa8, Size: 0x4]
	BattleRoyaleGameMode* OwningGameMode;//[Offset: 0xb0, Size: 0x8]
	GameStateBase* OwningGameState;//[Offset: 0xb8, Size: 0x8]
	void SetLeftTime(int InLeftTime);// 0x5eff284
	void ReceiveGotoNextState();// 0x70644c4
	void ReceiveEnter();// 0x70644c4
	int64 GetLeftTime();// 0x5eff250
	void DSExitGame(enum Reason);// 0x5eff1d4
<----------Generated by SSpawner v1.0.4---------->


Class: EventReportComponent.ActorComponent.Object
	<byte,bool> EnabledCollectedEventDataEventIds;//[Offset: 0x110, Size: 0x50]
	UAEGameMode* GameMode;//[Offset: 0x160, Size: 0x8]
	<int,CollectedEvent_TabRes> CollectedEventTableMap;//[Offset: 0x168, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: CollectedEvent_TabRes
	int EventId;//[Offset: 0x0, Size: 0x4]
	bool bWeSeeNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AIProbeComponent.GameModeProbeComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: WorldLevelProbeComponent.GameModeProbeComponent.ActorComponent.Object
	class Actor[] IgnoreClassesNeverRemove;//[Offset: 0x110, Size: 0x10]
	bool IsIgnoreLastCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	void ResetVisibleLevels();// 0x63815a4
	void OutSetWorldAlwaysVisible(int SetLoadType);// 0x6381528
	void OutSetLevelVisibleInfo(Vector[] Center, float[] VisibleRadius);// 0x6381314
<----------Generated by SSpawner v1.0.4---------->


Class: AIGroupManagerComponent.ActorComponent.Object
	AnimalGroupRespawnConfig[] AnimalGroupRespawnConfig;//[Offset: 0x110, Size: 0x10]
	AIActingComponent* AIActingComp;//[Offset: 0x1c0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimalGroupRespawnConfig
	enum AnimalType;//[Offset: 0x0, Size: 0x1]
	AnimalGroupRespawnNumProbability[] AnimalGroupRespawnNumProbability;//[Offset: 0x8, Size: 0x10]
	float NoBlueCircleRadius;//[Offset: 0x18, Size: 0x4]
	float CheckPlayerRadius;//[Offset: 0x1c, Size: 0x4]
	float EndRespawnTime;//[Offset: 0x20, Size: 0x4]
	int TryFindSpawnLocNum;//[Offset: 0x24, Size: 0x4]
	FString[] ValidTraceActorIncludeName;//[Offset: 0x28, Size: 0x10]
	Vector AnimalGenerateOffset;//[Offset: 0x38, Size: 0xc]
	class STAnimalCharacter* AnimalCharacterClass;//[Offset: 0x48, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimalGroupRespawnNumProbability
	uint32 AnimalNum;//[Offset: 0x0, Size: 0x4]
	int Weight;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STAnimalCharacter.STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	AnimalStateMutual[] AnimalStateMutuals;//[Offset: 0x11f0, Size: 0x10]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0x1208, Size: 0x8]
	InterpMovementComponent* InterpMovement;//[Offset: 0x1210, Size: 0x8]
	WidgetComponent* AnimalInfoWidget;//[Offset: 0x1218, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x1220, Size: 0xc]
	class UserWidget* WidgetClass;//[Offset: 0x1230, Size: 0x8]
	bool bUseMediumRegionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1238, Size: 0x1]
	AnimalAnimListComponent* _AnimListComponent;//[Offset: 0x1240, Size: 0x8]
	STAnimalAnimInstance* _AnimInstance;//[Offset: 0x1248, Size: 0x8]
	ProduceDropItemComponent* ProduceDropItemComponent;//[Offset: 0x1250, Size: 0x8]
	int AnimalGroupID;//[Offset: 0x1258, Size: 0x4]
	enum AnimalType;//[Offset: 0x126a, Size: 0x1]
	<enum,float> AnimalStateSpeeds;//[Offset: 0x1270, Size: 0x50]
	float HearRadius;//[Offset: 0x12c0, Size: 0x4]
	bool bAttackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12c4, Size: 0x1]
	SkeletalMesh*[] RandomMeshs;//[Offset: 0x12c8, Size: 0x10]
	MaterialInterface*[] RandomMaterials;//[Offset: 0x12d8, Size: 0x10]
	delegate CustomObjectEvent;//[Offset: 0x12e8, Size: 0x10]
	ParticleSystem* FootPrintRes;//[Offset: 0x12f8, Size: 0x8]
	ParticleSystemComponent* FootPrintParticleSys;//[Offset: 0x1300, Size: 0x8]
	FName AttachedSocket;//[Offset: 0x1308, Size: 0x8]
	float MovementTickInterval;//[Offset: 0x1310, Size: 0x4]
	int IdleBlendSpaceValue;//[Offset: 0x1314, Size: 0x4]
	delegate OnAnimalChangeAnimParam;//[Offset: 0x1318, Size: 0x10]
	void ShowFootPrintEffect(bool IsEnabled);// 0x60a14a4
	void SetExtendData(FString Key, int Value);// 0x60a132c
	void OnRep_IdleBlendSpaceValue();// 0x60a1318
	void LeaveState(enum State);// 0x60a129c
	bool HasState(enum State);// 0x60a120c
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x60a1140
	WeatherDetailStatus GetCurrentWeatherStatus();// 0x60a1108
	bool EnterState(enum State);// 0x60a1078
	void DisappearOnDeath();// 0x60a105c
	void ClearOnDeath(Controller* EventInstigator, int DamageType);// 0x60a0f9c
	void BeforeDestroyed();// 0x60a0f80
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x1100, Size: 0x4]
	float MinTimeLockTarget;//[Offset: 0x1104, Size: 0x4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x1108, Size: 0x4]
	float SensedRadius;//[Offset: 0x110c, Size: 0x4]
	float MinTimeLockHeardEnemy;//[Offset: 0x1110, Size: 0x4]
	float HeardRadius;//[Offset: 0x1114, Size: 0x4]
	float DelayHideDuration;//[Offset: 0x1118, Size: 0x4]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111c, Size: 0x1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111d, Size: 0x1]
	Vector HurtDir;//[Offset: 0x1120, Size: 0xc]
	float HurtDistance;//[Offset: 0x112c, Size: 0x4]
	float HurtResetDefaultTime;//[Offset: 0x1130, Size: 0x4]
	StateMutual[] StateMutuals;//[Offset: 0x1140, Size: 0x10]
	delegate StateEnterEvent;//[Offset: 0x1150, Size: 0x10]
	delegate StateLeaveEvent;//[Offset: 0x1160, Size: 0x10]
	delegate OnDeath;//[Offset: 0x1188, Size: 0x10]
	SimpleDamageRepData SimpleDamageRepData;//[Offset: 0x1198, Size: 0x28]
	int[] randomIndexes;//[Offset: 0x11c0, Size: 0x10]
	SimpleAnimListBaseComponent* AnimListComponent;//[Offset: 0x11d0, Size: 0x8]
	STExtraSimpleAnimInstanceBase* AnimInstance;//[Offset: 0x11d8, Size: 0x8]
	byte NetRelevantType;//[Offset: 0x11e0, Size: 0x1]
	void SetNetRelevantType(byte InType);// 0x6222058
	void OnRep_SimpleDamageData();// 0x6222044
	void DisappearOnDeath();// 0x6222028
	void CurrentStatesRemove(int State);// 0x6221fa4
	void CurrentStatesAdd(int State);// 0x6221f20
	void ClearOnDeath(Controller* EventInstigator, int DamageType);// 0x6221e60
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x6221bc8
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x62218f8
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x6221660
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x62213c8
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x62210f0
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x6220e58
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x6220bc0
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x62208f0
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x622061c
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x70644c4
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x70644c4
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x62204cc
<----------Generated by SSpawner v1.0.4---------->


Class: StateMutual
	int state1;//[Offset: 0x0, Size: 0x4]
	int state2;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SimpleDamageRepData
	float Damage;//[Offset: 0x0, Size: 0x4]
	float CurrentHeath;//[Offset: 0x4, Size: 0x4]
	bool IsFatalHealthCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	Pawn* DamageInstigatorPawn;//[Offset: 0x10, Size: 0x8]
	Pawn* DamageReceiver;//[Offset: 0x18, Size: 0x8]
	int NetCounter;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimDataPair[] AnimDataPairs;//[Offset: 0x208, Size: 0x10]
	CurveFloat* hitPoseAndDistanceCurve;//[Offset: 0x218, Size: 0x8]
	<int,float> moveAnimSpeed;//[Offset: 0x220, Size: 0x50]
	float PlayMoveDeathMinimumDist;//[Offset: 0x270, Size: 0x4]
	delegate OnAnimLoadedFinished;//[Offset: 0x278, Size: 0x10]
	void SortAnimations();// 0x6067bb8
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x6067b34
	void OnAsyncLoadingFinished(AsyncLoadAnimParams loadAnimParams);// 0x60678f8
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x6067838
<----------Generated by SSpawner v1.0.4---------->


Class: AnimDataPair
	int PoseTypeID;//[Offset: 0x0, Size: 0x4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: AsyncLoadAnimParams
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraSimpleAnimInstanceBase.AnimInstance.Object
	STExtraSimpleCharacterBase* OwnerCharacter;//[Offset: 0x3c0, Size: 0x8]
	FString OwnerClassPath;//[Offset: 0x3d8, Size: 0x10]
	bool EnableAdjustFloorNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	Rotator AdjustFloorRot;//[Offset: 0x3fc, Size: 0xc]
	float AdjustFloorDelta;//[Offset: 0x408, Size: 0x4]
	void ResetAnimState();// 0x6212adc
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsHeadShotDamage);// 0x621288c
	void OnLeaveState(int State);// 0x6212808
	void OnEnterState(int State);// 0x6212784
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x6212540
	void CacheAnimState(float DeltaSeconds);// 0x62124bc
	void CacheAnimDataList(bool ForceRefreshVar);// 0x6212430
<----------Generated by SSpawner v1.0.4---------->


Class: AnimalStateMutual
	enum state1;//[Offset: 0x0, Size: 0x1]
	enum state2;//[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: InterpMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxMoveSpeed;//[Offset: 0x190, Size: 0x4]
	bool bUseDirectionAdjustVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x194, Size: 0x1]
	float ScalePower;//[Offset: 0x198, Size: 0x4]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 0x1]
	float AvoidanceWeight;//[Offset: 0x1a0, Size: 0x4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1a4, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1a8, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1ac, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1b0, Size: 0x4]
	bool bHasRequestedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 0x1]
	Vector RequestedVelocity;//[Offset: 0x1b8, Size: 0xc]
	Character* CharacterOwner;//[Offset: 0x1c8, Size: 0x8]
	int AvoidanceUID;//[Offset: 0x1e0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimalAnimListComponent.SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimalAnimData[] AnimalAnimDatas;//[Offset: 0x2a0, Size: 0x10]
	AnimalMoveAnimSpeed[] AnimalMoveAnimSpeeds;//[Offset: 0x2b0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimalAnimData
	enum PoseType;//[Offset: 0x0, Size: 0x4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimalMoveAnimSpeed
	enum PoseType;//[Offset: 0x0, Size: 0x4]
	float Speed;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STAnimalAnimInstance.STExtraSimpleAnimInstanceBase.AnimInstance.Object
	bool b_Hit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	bool b_Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 0x1]
	bool b_Trot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 0x1]
	bool b_Running;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 0x1]
	float f_MoveRate;//[Offset: 0x414, Size: 0x4]
	Vector v_HitVector;//[Offset: 0x418, Size: 0xc]
	bool b_IsFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	int RandomIdleBlendSpaceIndex;//[Offset: 0x428, Size: 0x4]
	AnimSequence* A_Idle;//[Offset: 0x430, Size: 0x8]
	AnimMontage* A_Idle_Arder;//[Offset: 0x438, Size: 0x8]
	AnimSequence* A_MoveAnim_Walk;//[Offset: 0x440, Size: 0x8]
	AnimSequence* A_MoveAnim_Trot;//[Offset: 0x448, Size: 0x8]
	AnimSequence* A_MoveAnim_Run;//[Offset: 0x450, Size: 0x8]
	BlendSpace* A_HitAnim;//[Offset: 0x458, Size: 0x8]
	AnimMontage* A_DeadAnim;//[Offset: 0x460, Size: 0x8]
	AnimMontage* A_FearAnim;//[Offset: 0x468, Size: 0x8]
	AnimMontage* A_CuteAnim;//[Offset: 0x470, Size: 0x8]
	BlendSpace1D* A_Random_Idle;//[Offset: 0x478, Size: 0x8]
	void ResetAnimState();// 0x60a06ac
	void OnUpdateAnimalAnimParam();// 0x60a0698
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsPointDamage);// 0x60a0448
	void OnLeaveState(int State);// 0x60a03c4
	void OnEnterState(int State);// 0x60a0340
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x60a00fc
	void CacheAnimState(float DeltaSeconds);// 0x60a0078
	void CacheAnimDataList(bool ForceRefreshVar);// 0x609ffec
<----------Generated by SSpawner v1.0.4---------->


Class: AnimalTeleportComponent.ActorComponent.Object
	bool bDeliverToInDoorPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	AnimalDeliverRatingConfig[] ChickDeliverConfig;//[Offset: 0x118, Size: 0x10]
	AnimalDeliverRatingConfig[] DeerDeliverConfig;//[Offset: 0x128, Size: 0x10]
	AnimalDeliverRatingConfig[] GoblinDeliverConfig;//[Offset: 0x138, Size: 0x10]
	AnimalDeliverRatingConfig[] IceDeliverConfig;//[Offset: 0x148, Size: 0x10]
	AnimalDeliverAreaLimit[] DeliveryAreaLimit;//[Offset: 0x158, Size: 0x10]
	AIActingComponent* AIActingComp;//[Offset: 0x168, Size: 0x8]
	AIGroupManagerComponent* AIGroupMgrComp;//[Offset: 0x170, Size: 0x8]
	AnimalDeliverConfiguration* GoblinDeliverConfiguration;//[Offset: 0x178, Size: 0x8]
	AnimalDeliverConfiguration* IceDeliverConfiguration;//[Offset: 0x180, Size: 0x8]
	<STExtraPlayerCharacter*> DeliveredGoblinPlayers;//[Offset: 0x188, Size: 0x50]
	<STExtraPlayerCharacter*> DeliveredIcePlayers;//[Offset: 0x1d8, Size: 0x50]
	<enum,int> DeleverCountPerWave;//[Offset: 0x370, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimalDeliverRatingConfig
	float RightRatingSection;//[Offset: 0x0, Size: 0x4]
	uint32 DeliverGroupNumPerWave;//[Offset: 0x4, Size: 0x4]
	float DeliverBeginTime;//[Offset: 0x8, Size: 0x4]
	float DeliveryWaveInterval;//[Offset: 0xc, Size: 0x4]
	float DeliverEndTime;//[Offset: 0x10, Size: 0x4]
	uint32 FullFeedLimit;//[Offset: 0x14, Size: 0x4]
	float DeliverFreqInterval;//[Offset: 0x18, Size: 0x4]
	int DeliverNumEachFreq;//[Offset: 0x1c, Size: 0x4]
	<int,int> DeliverCountByPlayerNum;//[Offset: 0x20, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimalDeliverAreaLimit
	Vector TopLeft;//[Offset: 0x0, Size: 0xc]
	Vector BottomRight;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimalDeliverConfiguration.Object
	AnimalDeliverStrategy*[] TeamDeliverStrategies;//[Offset: 0x28, Size: 0x10]
	AnimalDeliverStrategy*[] IndividualDeliverStrategies;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AnimalDeliverStrategy.Object
	byte Priority;//[Offset: 0x28, Size: 0x1]
	enum SortStrategy;//[Offset: 0x80, Size: 0x1]
	enum SelectStrategy;//[Offset: 0x81, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PlaneComponent.LuaInstancedActorComponent.ActorComponent.Object
	int ClassicFlightNo;//[Offset: 0x18c, Size: 0x4]
	<int,PlaneData> PlaneDataMap;//[Offset: 0x190, Size: 0x50]
	class Pawn* PlaneClass;//[Offset: 0x1e0, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	bool bEnableClassic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 0x1]
	bool bSyncRouteAfterFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea, Size: 0x1]
	PlayerController*[] CachedTotalPlayer;//[Offset: 0x1f0, Size: 0x10]
	AIController*[] CachedTotalAI;//[Offset: 0x200, Size: 0x10]
	int FlightTimes;//[Offset: 0x210, Size: 0x4]
	int NotifyEndFlightDelayTime;//[Offset: 0x214, Size: 0x4]
	int CustomFlightTimes;//[Offset: 0x220, Size: 0x4]
	void StartFlight(int FlightNo);// 0x5fd768c
	void SetPlaneClassPath(FString PlaneClassPath);// 0x5fd75e4
	void SetFlight(int FlightNo, out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x5fd73b4
	int SetCustomFlight(out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x5fd71b0
	void NotifyEndFlight();// 0x5fd719c
	PlaneData GetPlaneDataByFlightNo(int FlightNo);// 0x5fd6fd8
	void EndPlaneFlightByFlightNo(int FlightNo);// 0x5fd6f5c
	void BPCalFlight(out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc);// 0x5fd6dd8
	bool AddPlayerToFlight(PlayerController* PC, int FlightNo);// 0x5fd6d0c
<----------Generated by SSpawner v1.0.4---------->


Class: PlaneData
	int FlightNo;//[Offset: 0x0, Size: 0x4]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	Actor* ThePlane;//[Offset: 0x8, Size: 0x8]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector PlaneVelocity;//[Offset: 0x14, Size: 0xc]
	Vector PlaneStartLoc;//[Offset: 0x20, Size: 0xc]
	Vector PlaneEndLoc;//[Offset: 0x2c, Size: 0xc]
	Vector2D CanJumpLoc;//[Offset: 0x38, Size: 0x8]
	Vector2D ForceJumpLoc;//[Offset: 0x40, Size: 0x8]
	float PlaneHeight;//[Offset: 0x48, Size: 0x4]
	int TotalPlayerNum;//[Offset: 0x4c, Size: 0x4]
	PlayerController*[] TotalPlayers;//[Offset: 0x50, Size: 0x10]
	PlayerController*[] CurPlayers;//[Offset: 0x60, Size: 0x10]
	int TotalAINum;//[Offset: 0x70, Size: 0x4]
	AIController*[] TotalAIs;//[Offset: 0x78, Size: 0x10]
	int CurAINum;//[Offset: 0x88, Size: 0x4]
	float FixedJumpPointRate;//[Offset: 0x8c, Size: 0x4]
	bool bCanFixedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerRespawnComponent.ActorComponent.Object
	bool bUseWeaponScheme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	float DefaultPlayerRespawnTime;//[Offset: 0x114, Size: 0x4]
	float DefaultRespawnInvincibleTime;//[Offset: 0x118, Size: 0x4]
	enum RespawnPointType;//[Offset: 0x11c, Size: 0x1]
	bool RespawnKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 0x1]
	int[] RespawnIgnoreKeepItemTypes;//[Offset: 0x120, Size: 0x10]
	int[] RespawnIgnoreKeepItemIds;//[Offset: 0x130, Size: 0x10]
	int[] RespawnNeedReplaceWeaponIds;//[Offset: 0x140, Size: 0x10]
	<uint32,ReplaceWeaponDataMap> RespawnReplaceWeaponMap;//[Offset: 0x150, Size: 0x50]
	<uint32,RespawnIgnoreItemType> PlayerRespawnIgnoreItemTypes;//[Offset: 0x1a0, Size: 0x50]
	RespawnKeepAllItemData CustomRespawnItemData;//[Offset: 0x1f0, Size: 0x20]
	int[] DefaultWeaponList;//[Offset: 0x210, Size: 0x10]
	float bRestoreDataDelay;//[Offset: 0x220, Size: 0x4]
	bool bRestoreDataDelayOnRespawnAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 0x1]
	bool bReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225, Size: 0x1]
	delegate OnGlobalRespawnedDelegate;//[Offset: 0x228, Size: 0x10]
	delegate OnRespawnedPlayerDelegate;//[Offset: 0x238, Size: 0x10]
	BattleRoyaleGameModeBase* OwnerGameMode;//[Offset: 0x388, Size: 0x8]
	Pawn* RespawningPlayerPawn;//[Offset: 0x390, Size: 0x8]
	void SetRespawnInvincibleTime(float DefaultRespawnInvincibleTimeIn);// 0x5fef980
	void RespawnAllPlayer();// 0x5fef96c
	void RemovePlayerRespawnTimer(uint32 PlayerKey, bool bAI);// 0x5fef8ac
	void PlayerDelayAddItem(uint32 PlayerKey, int ItemId);// 0x5fef7f8
	void OnCharacterStartFire(STExtraWeapon* _, STExtraBaseCharacter* Character);// 0x5fef744
	bool IsContainPlayerTimer(uint32 PlayerKey);// 0x5fef6b4
	void HandlePlayerDisuseItem(uint32 PlayerKey, ItemDefineID DefineID);// 0x5fef5e8
	void HandleCacheWeapon(uint32 PlayerKey, STExtraWeapon* Weapon);// 0x5fef530
	int GetRespawnWeaponBulletNum(out const RespawnKeepAllItemData RespawnKeepAllItemData, int SlotType, int SpecificID);// 0x5fef3e4
	bool GetPlayerRespawnKeepAllItemData(uint32 PlayerKey, bool bAI, out RespawnKeepAllItemData OutRespawnKeepAllItemData, bool bKeepBullet);// 0x5fef23c
	float GetDefaultPlayerRespawnTime();// 0x5fef208
	void GenerateRespawnKeepItems(uint32 PlayerKey, bool bAI, out const RespawnKeepAllItemData RespawnKeepAllItemData, bool bForceKeepItems);// 0x5fef074
	void DealWithDelayAddItem(uint32 PlayerKey, bool bAddAll, bool bClearAll);// 0x5feef68
	void ClearDelayAddItems(uint32 PlayerKey);// 0x5feeeec
	void ClearAllPlayerRespawnTimer();// 0x5feeed8
	void ChangeWeaponSchemeIndex(int InIndex);// 0x5feee54
	void AddPlayerRespawnIgnoreKeepItemType(uint32 PlayerKey, bool IsAdd, int itemType);// 0x5feed50
<----------Generated by SSpawner v1.0.4---------->


Class: ReplaceWeaponDataMap
	<byte,ReplaceWeaponData> ReplaceWeaponDataMap;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: ReplaceWeaponData
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	BattleItemData WeaponItemData;//[Offset: 0x8, Size: 0xb8]
	BattleItemData[] WeaponAssociateItemDataList;//[Offset: 0xc0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RespawnIgnoreItemType
<----------Generated by SSpawner v1.0.4---------->


Class: RespawnKeepAllItemData
	RespawnKeepItemData[] ItemDatas;//[Offset: 0x0, Size: 0x10]
	RespawnKeepWeaponData[] WeaponDatas;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RespawnKeepItemData
	int ItemTypeID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: RespawnKeepWeaponData.RespawnKeepItemData
	byte WeaponSlot;//[Offset: 0x20, Size: 0x1]
	RespawnKeepItemData[] AttachmentDatas;//[Offset: 0x28, Size: 0x10]
	int ClipBulletNum;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: RespawnItemConfig.DataAsset.Object
	RespawnItemMajorGroup[] MajorGroupList;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RespawnItemMajorGroup
	int RandomTimes;//[Offset: 0x0, Size: 0x4]
	RespawnItemMinorGroup[] MinorGroupList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RespawnItemMinorGroup
	int RandomWeight;//[Offset: 0x0, Size: 0x4]
	RespawnItem[] ItemList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RespawnItem
	int ItemTableID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ShowVehicleComponent.LuaInstancedActorComponent.ActorComponent.Object
	class Actor* VehicleSpotClass;//[Offset: 0x190, Size: 0x8]
	float DropHeightOffset;//[Offset: 0x198, Size: 0x4]
	float LeftTimeToDestroyVehicles;//[Offset: 0x19c, Size: 0x4]
	float TimerHzToDestroyVehicles;//[Offset: 0x1a0, Size: 0x4]
	bool bUseNewVehicleSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1]
	float LeftTimeToDestroyWingman;//[Offset: 0x1a8, Size: 0x4]
	float TimerHzToDestroyWingman;//[Offset: 0x1ac, Size: 0x4]
	int MaxVehicles;//[Offset: 0x1b0, Size: 0x4]
	int MaxVehiclesPerGroup;//[Offset: 0x1b4, Size: 0x4]
	Actor*[] VehicleSpotActors;//[Offset: 0x1b8, Size: 0x10]
	VehicleSpots[] VehicleSpotGroup;//[Offset: 0x1e8, Size: 0x10]
	<uint32,Actor*> VehicleContainers;//[Offset: 0x1f8, Size: 0x50]
	<int,Actor*> WingmanMap;//[Offset: 0x2a0, Size: 0x50]
	void ShowWingmanFor(uint32 InPlayerKey, FString InWingmanClassPath, out const Transform InWingmanSpawnTransform);// 0x6067104
	void ShowVehicleFor(uint32 InPlayerKey, FString InVehiclePath, FString InVehicleContainerPath, int InAvatarID);// 0x6066f7c
	void SetVehicleSpotsInfo();// 0x6066f60
	void RemoveVehicleInfo(uint32 InPlayerKey);// 0x6066ee4
	void OnGameModeStateChanged(out const GameModeStateChangedParams InParams);// 0x6066e58
	void DestroyWingman();// 0x6066e44
	void DestroyVehicleFor(uint32 InPlayerKey);// 0x6066dc8
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleSpots
	Transform[] Spots;//[Offset: 0x0, Size: 0x10]
	<int> UsedSpot;//[Offset: 0x10, Size: 0x50]
	<int,UsedVehicleSpots> GroupIndexUsedVehicleSpotsMap;//[Offset: 0x60, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: UsedVehicleSpots
	<int> UsedSpot;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: PlaneTypes
	int SeasonIdx;//[Offset: 0x0, Size: 0x4]
	FString PlaneClassFullPath;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemAttach
	int BaseItemID;//[Offset: 0x0, Size: 0x4]
	AddItemInfo[] AttachItemList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AddItemInfo
	int AddItemID;//[Offset: 0x0, Size: 0x4]
	int AddItemNum;//[Offset: 0x4, Size: 0x4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: RespawnItemConfigInst
	int RandomWeight;//[Offset: 0x0, Size: 0x4]
	class RespawnItemConfig* RespawnItemConfigClass;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: FakePlayerCustomComponent.ActorComponent.Object
	FString tableName;//[Offset: 0x110, Size: 0x10]
	FString FakePlayerCampNameTableName;//[Offset: 0x120, Size: 0x10]
	FString FakePlayerRandomNameTableName;//[Offset: 0x130, Size: 0x10]
	<int,FakePlayerCustomRow> RowMap;//[Offset: 0x140, Size: 0x50]
	<int,FString> FakePlayerCampNameMap;//[Offset: 0x190, Size: 0x50]
	FString[] FakePlayerRandomNamePrefixArray;//[Offset: 0x1e0, Size: 0x10]
	FString[] FakePlayerRandomNameArray;//[Offset: 0x1f0, Size: 0x10]
	void InitRowDataMap();// 0x5ed9ef4
	void InitAIParam(int resID, out GameModeAIPlayerParams OutParam);// 0x5ed9df0
	FString GetControllerPath(int resID);// 0x5ed9cfc
<----------Generated by SSpawner v1.0.4---------->


Class: FakePlayerCustomRow
	int ID;//[Offset: 0x0, Size: 0x4]
	FString ControllerPath;//[Offset: 0x8, Size: 0x10]
	FString Name;//[Offset: 0x18, Size: 0x10]
	int gender;//[Offset: 0x28, Size: 0x4]
	FString ItemStr;//[Offset: 0x30, Size: 0x10]
	GameModePlayerItem[] PlayerItems;//[Offset: 0x40, Size: 0x10]
	int IsUseRandomName;//[Offset: 0x50, Size: 0x4]
	int NameLocalizeId;//[Offset: 0x54, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DSTickRateOptimize
	float TickFrequency;//[Offset: 0x0, Size: 0x4]
	float NetConsiderFrequency;//[Offset: 0x4, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x8, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GroupPlayers
	uint32[] Players;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PVSNetRelevantHelper.Object
	float MaxVoiceSyncDissquaredDeathMatch;//[Offset: 0xd4, Size: 0x4]
	float MaxVoiceSyncDissquaredBR;//[Offset: 0xd8, Size: 0x4]
	float MaxVoiceSyncDissquared;//[Offset: 0xdc, Size: 0x4]
	bool bEnableVoiceLODSector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	int VoiceLODSectorCircleDivideCount;//[Offset: 0xf4, Size: 0x4]
	int VoiceLODSectorBeginDistance;//[Offset: 0xf8, Size: 0x4]
	int VoiceLODSectorBeginThickness;//[Offset: 0xfc, Size: 0x4]
	enum GameModeModType;//[Offset: 0x100, Size: 0x4]
	bool bEnableLandscapeRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	bool bEnableCell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 0x1]
	bool bDoNotForceVisibleOnlyBecauseOfViewerOnVehicleForLandscapeRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 0x1]
	float ModdedMinJudgeDistanceSquared;//[Offset: 0x108, Size: 0x4]
	float BaseModMinJudgeDistanceSquared;//[Offset: 0x10c, Size: 0x4]
	float MinJudgeDisquared;//[Offset: 0x110, Size: 0x4]
	float MinSprintFootVoiceNeedVelocitySquared;//[Offset: 0x114, Size: 0x4]
	bool bAIVoiceSyncSpecial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bHasDecidedMinJudgeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	float RayVisibilityMoveUpDistance;//[Offset: 0x350, Size: 0x4]
	float RayVisibilityPerSecondTimeLimit;//[Offset: 0x354, Size: 0x4]
	float RayVisibilityCheckIntervalWhenVisible;//[Offset: 0x358, Size: 0x4]
	int RayVisibilityMaxHidePerViewer;//[Offset: 0x35c, Size: 0x4]
	float CameraStayStillButCharacterMoveDistanceThreshold;//[Offset: 0x360, Size: 0x4]
	void RegisterObfuscateSync(const UAEPlayerController* PlayerController);// 0x6029de4
	void EnableCell();// 0x6029dd0
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeCVarConfigItem
	FString Key;//[Offset: 0x0, Size: 0x10]
	FString Value;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AIControllerList
<----------Generated by SSpawner v1.0.4---------->


Class: AIPawnPoolItem
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: RoomCustomParams
	int CircleSpeedMultiplicator;//[Offset: 0x0, Size: 0x4]
	bool bAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bShowSkull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bGunRemoveBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	int BlueCircleDamageMultiplicator;//[Offset: 0xc, Size: 0x4]
	bool bUseFirstWhiteCircleDelayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bUseFirstSafeZoneAppearTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bUseFirstWhiteCircleRadiusMultiplicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	int FirstWhiteCircleDelayTime;//[Offset: 0x14, Size: 0x4]
	int FirstSafeZoneAppearTime;//[Offset: 0x18, Size: 0x4]
	int FirstWhiteCircleRadiusMultiplicator;//[Offset: 0x1c, Size: 0x4]
	bool EnableRedZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	CustomCircleParams[] CustomCircleParamsList;//[Offset: 0x28, Size: 0x10]
	bool bFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: CustomCircleParams
	int Stage;//[Offset: 0x0, Size: 0x4]
	int DelayTime;//[Offset: 0x4, Size: 0x4]
	int SafeZoneAppeartime;//[Offset: 0x8, Size: 0x4]
	int LastTime;//[Offset: 0xc, Size: 0x4]
	int CircleDamage;//[Offset: 0x10, Size: 0x4]
	int BlueCircleRadius;//[Offset: 0x14, Size: 0x4]
	int WhiteCircleRadius;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BlowUpData
	float TimeStamp;//[Offset: 0x0, Size: 0x4]
	int InternalBlowUpID;//[Offset: 0x4, Size: 0x4]
	bool bIsBeingBlew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float InternalTime;//[Offset: 0xc, Size: 0x4]
	Vector LaunchVelocity;//[Offset: 0x10, Size: 0xc]
	Actor* HitActor;//[Offset: 0x1c, Size: 0x8]
	PrimitiveComponent* HitComponent;//[Offset: 0x24, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DeathReplayData
	bool IsValidDeathReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsForCE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	FString SelfName;//[Offset: 0x8, Size: 0x10]
	FString PlayerName;//[Offset: 0x18, Size: 0x10]
	uint64 PlayerUID;//[Offset: 0x28, Size: 0x8]
	uint64 MLAIUID;//[Offset: 0x30, Size: 0x8]
	int DamageType;//[Offset: 0x38, Size: 0x4]
	int SubType;//[Offset: 0x3c, Size: 0x4]
	FString CauseName;//[Offset: 0x40, Size: 0x10]
	FString CauseActionName;//[Offset: 0x50, Size: 0x10]
	bool IsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	bool IsSuicide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	bool bIsDeliver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]
	int AliasID;//[Offset: 0x64, Size: 0x4]
	FString AliasTitle;//[Offset: 0x68, Size: 0x10]
	FString AliasNation;//[Offset: 0x78, Size: 0x10]
	int AliasRank;//[Offset: 0x88, Size: 0x4]
	FString AliasPartnerName;//[Offset: 0x90, Size: 0x10]
	int AliasPartnerRelation;//[Offset: 0xa0, Size: 0x4]
	int AliasRankID;//[Offset: 0xa4, Size: 0x4]
	int SegmentLevel;//[Offset: 0xa8, Size: 0x4]
	float KDNum;//[Offset: 0xac, Size: 0x4]
	int GameCount;//[Offset: 0xb0, Size: 0x4]
	int WinCount;//[Offset: 0xb4, Size: 0x4]
	int TopTenCount;//[Offset: 0xb8, Size: 0x4]
	int KillNum;//[Offset: 0xbc, Size: 0x4]
	float Distance;//[Offset: 0xc0, Size: 0x4]
	DeathReplayHitInfo OtherHitInfo;//[Offset: 0xc4, Size: 0x20]
	DeathReplayHitInfo SelfHitInfo;//[Offset: 0xe4, Size: 0x20]
<----------Generated by SSpawner v1.0.4---------->


Class: DeathReplayHitInfo
	float Damage;//[Offset: 0x0, Size: 0x4]
	int HitCount;//[Offset: 0x4, Size: 0x4]
	int HeadShoot;//[Offset: 0x8, Size: 0x4]
	int LimbsShoot;//[Offset: 0xc, Size: 0x4]
	int BodyShoot;//[Offset: 0x10, Size: 0x4]
	int HandShoot;//[Offset: 0x14, Size: 0x4]
	int FootShoot;//[Offset: 0x18, Size: 0x4]
	float GunHitRate;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerPosMarkerParam
	Character* Player;//[Offset: 0x0, Size: 0x8]
	float MarkTimeLen;//[Offset: 0x8, Size: 0x4]
	int MarkIcon;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0x140, Size: 0x28]
	byte LoopCount;//[Offset: 0x168, Size: 0x1]
	float LoopStartTime;//[Offset: 0x16c, Size: 0x4]
	float blendTime;//[Offset: 0x170, Size: 0x4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 0x1]
	bool bOnlyEmoteActionAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 0x1]
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0x178, Size: 0x10]
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0x188, Size: 0x10]
	EmoteAnimConfig[] MainCharacterAnimConfig;//[Offset: 0x198, Size: 0x10]
	EmoteActionBase*[] EmoteActionList;//[Offset: 0x1a8, Size: 0x10]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x1b8, Size: 0x8]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x1c0, Size: 0x8]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	AkAudioEvent*[] MaleEmoteSoundStartEventList;//[Offset: 0x1d0, Size: 0x10]
	AkAudioEvent*[] FemaleEmoteSoundStartEventList;//[Offset: 0x1e0, Size: 0x10]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x5db5c90
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x5db59dc
	bool HandleDrop(int InCount, enum Reason);// 0x5db5908
	bool HandleDisuse(enum Reason);// 0x5db5870
	BackpackComponent* GetBackpackComponent();// 0x5db583c
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x5db5770
<----------Generated by SSpawner v1.0.4---------->


Class: LobbyGenderAnimData
	AnimationAsset* BoyAnim;//[Offset: 0x0, Size: 0x28]
	AnimationAsset* GirlAnim;//[Offset: 0x28, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: EmoteAnimConfig
	FName GenderStr;//[Offset: 0x0, Size: 0x8]
	class Character* MainCharacter;//[Offset: 0x8, Size: 0x28]
	AnimationAsset* MainCharacterAnimAsset;//[Offset: 0x30, Size: 0x28]
	bool CanRotateMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	Transform MainCharacterTransform;//[Offset: 0x60, Size: 0x30]
	bool RotateBackToZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	LevelSequence* EmoteLevelSequence;//[Offset: 0x98, Size: 0x8]
	EmoteAnimCharacterConfig[] MultiFollowerCharacters;//[Offset: 0xa0, Size: 0x10]
	class Character* FollowerCharacter;//[Offset: 0xb0, Size: 0x28]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x2e0, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x2e8, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x338, Size: 0x50]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x388, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: LevelSequenceObjectReferenceMap
<----------Generated by SSpawner v1.0.4---------->


Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: EmoteAnimCharacterConfig
	class Character* Character;//[Offset: 0x0, Size: 0x28]
	Transform Transform;//[Offset: 0x30, Size: 0x30]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: EmoteActionBase.Object
	float PropStartShowTime;//[Offset: 0x28, Size: 0x4]
	float PropEndShowTime;//[Offset: 0x2c, Size: 0x4]
	bool bOnlyInBornIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bOnlyOneInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	int[] AssociateEmoteIDs;//[Offset: 0x38, Size: 0x10]
	bool bOnlyInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	delegate OnActionReady;//[Offset: 0x60, Size: 0x10]
	void SetExecuteFlag(bool IsExecute);// 0x5ea4d8c
	void SetEmotePlayRate(Object* InOuter, BackpackEmoteHandle* InHandle, float OldEmoteRate, float NewEmoteRate);// 0x5ea4c64
	void SetActionDelayTimeHandle(Object* InOuter, BackpackEmoteHandle* InHandle);// 0x5ea4bb0
	Object* GetSoftRefObj(out const SoftObjectPath AssetRef);// 0x5ea4ae0
	class Object GetSoftRefClass(out const SoftObjectPath AssetRef);// 0x5ea4a10
	bool GetIsExecuting();// 0x5ea49f4
	float GetFollowerEmotePosition(Object* InOuter, uint32 FollowPlayerKey);// 0x5ea4924
	void Destroy();// 0x5ea4908
	void DelayShow();// 0x5ea48ec
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraProp.Actor.Object
	bool bKeepRelevantWhenHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1]
	STExtraBaseCharacter* OwnerPlayer;//[Offset: 0x3f8, Size: 0x8]
	STExtraBaseCharacter* LastOwnerPlayer;//[Offset: 0x400, Size: 0x8]
	Transform OriginTrans;//[Offset: 0x410, Size: 0x30]
	FName PropAttachSocket;//[Offset: 0x440, Size: 0x8]
	AkAudioEvent* EquipSound;//[Offset: 0x448, Size: 0x8]
	AkAudioEvent* UnEquipSound;//[Offset: 0x450, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: MovementRecordData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Velocity;//[Offset: 0x18, Size: 0xc]
	Vector ControllerNormalRot;//[Offset: 0x24, Size: 0xc]
	Vector SimulateViewNormalRot;//[Offset: 0x30, Size: 0xc]
	float ServerTimeStamp;//[Offset: 0x3c, Size: 0x4]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Vector VehicleLocation;//[Offset: 0x44, Size: 0xc]
	Rotator VehicleRotation;//[Offset: 0x50, Size: 0xc]
	Vector VehicleRotVelocity;//[Offset: 0x5c, Size: 0xc]
	byte PoseState;//[Offset: 0x68, Size: 0x1]
	enum MoveBaseState;//[Offset: 0x69, Size: 0x1]
	float PingMillisecond;//[Offset: 0x6c, Size: 0x4]
	bool IsCustomMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	uint64 PawnStates;//[Offset: 0x78, Size: 0x8]
	uint32 UserCmdSequence;//[Offset: 0x80, Size: 0x4]
	uint32 LastAckBadMoveSequence;//[Offset: 0x84, Size: 0x4]
	bool bHasWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ShootDamageTipsStr
	STExtraBaseCharacter* DamageTarget;//[Offset: 0x0, Size: 0x8]
	float Damage;//[Offset: 0x8, Size: 0x4]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: TLog_ActivityEventType
	byte ActivityEventID;//[Offset: 0x0, Size: 0x1]
	Vector ActivityEventLoc;//[Offset: 0x4, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
<----------Generated by SSpawner v1.0.4---------->


Class: STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	bool bPlayHurtAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: DotDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
<----------Generated by SSpawner v1.0.4---------->


Class: ModAdapter.Object
	Actor* SpawnPointLightActor(ModAdapterSpawnInfo SpawnInfo);// 0x5f6b7e4
	Actor* SpawnModActorByClass(class Actor ActorClass, out const Transform SpawnTransform, Pawn* Instigator, Actor* Owner);// 0x5f6b67c
<----------Generated by SSpawner v1.0.4---------->


Class: ModAdapterSpawnInfo
	Actor* RelatedActor;//[Offset: 0x0, Size: 0x8]
	FName LightType;//[Offset: 0x8, Size: 0x8]
	Transform SpawnTransform;//[Offset: 0x10, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 0x4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 0x4]
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 0x10]
	float DefaultFOVAngle;//[Offset: 0x18, Size: 0x4]
	byte[] VisualCheckChanelList;//[Offset: 0x20, Size: 0x10]
	class Character[] ExcludeCheckCharacterClass;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x68, Size: 0x8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x70, Size: 0x50]
	<int,float> VisualAngleLimitMap;//[Offset: 0xc0, Size: 0x50]
	STExtraPlayerController* CachedLocalController;//[Offset: 0x110, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 0x10]
	Actor* VisibleActor;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameModePlayerShowUpassInfo
	FString PlayerName;//[Offset: 0x0, Size: 0x10]
	int updateTime;//[Offset: 0x10, Size: 0x4]
	int upassLevel;//[Offset: 0x14, Size: 0x4]
	int upassScore;//[Offset: 0x18, Size: 0x4]
	int planeAvatarId;//[Offset: 0x1c, Size: 0x4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]
	FString iconUrl;//[Offset: 0x28, Size: 0x10]
	FString Nation;//[Offset: 0x38, Size: 0x10]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x48, Size: 0x48]
	int upassKeepBuy;//[Offset: 0x90, Size: 0x4]
	int upassCurValue;//[Offset: 0x94, Size: 0x4]
	int pass_type;//[Offset: 0x98, Size: 0x4]
	int nUpassPrimePlusCard;//[Offset: 0x9c, Size: 0x4]
	FString PlayerUID;//[Offset: 0xa0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 0xc]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int LeftPlayerNum;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameDataMining
	FString BattleID;//[Offset: 0x0, Size: 0x10]
	Vector PlaneStartPoint;//[Offset: 0x10, Size: 0xc]
	Vector PlaneEndPoint;//[Offset: 0x1c, Size: 0xc]
	CircleDataMining[] CircleDataMining;//[Offset: 0x28, Size: 0x10]
	GameWatchReport[] WatchReport;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameWatchReport
	uint16 AreaID;//[Offset: 0x0, Size: 0x2]
	int8 PlatID;//[Offset: 0x2, Size: 0x1]
	FString ZoneID;//[Offset: 0x8, Size: 0x10]
	uint64 player_uid;//[Offset: 0x18, Size: 0x8]
	float total_time;//[Offset: 0x20, Size: 0x4]
	WatchFlow[] watch_flow;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WatchFlow
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	uint32 sec;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MarkDispatchManager.ActorComponent.Object
	byte CurrentInstanceCount;//[Offset: 0x160, Size: 0x1]
	byte CurrentLocalInstanceCount;//[Offset: 0x161, Size: 0x1]
	MarkDispatchAction[] ActionQueue;//[Offset: 0x168, Size: 0x10]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0x178, Size: 0x10]
	MarkDispatchAction[] FramingDispatchMarkQueue;//[Offset: 0x188, Size: 0x10]
	int MarkCountProcessed;//[Offset: 0x198, Size: 0x4]
	int OverflowFrameCount;//[Offset: 0x19c, Size: 0x4]
	void SetMarkCountDown(out MarkDispatchAction Data, float CountDown);// 0x5f5b0b0
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x5f5b034
	byte GenerateNewLocalInstanceID();// 0x5f5b000
	byte GenerateNewInstanceID();// 0x5f5afdc
	void DispatchMarkData(MarkDispatchAction Data);// 0x5f5ae6c
	void ClearMarkDataByTypeID(int TypeId, enum MarkTypeIDClearType, STExtraPlayerState* WeakPlayerState);// 0x5f5ad78
<----------Generated by SSpawner v1.0.4---------->


Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0, Size: 0x1]
	enum RangeType;//[Offset: 0x1, Size: 0x1]
	MarkSyncData SyncData;//[Offset: 0x8, Size: 0x50]
	float DispatchDelayTime;//[Offset: 0x58, Size: 0x4]
	float RangeRad;//[Offset: 0x5c, Size: 0x4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x60, Size: 0x8]
	float DispatchTime;//[Offset: 0x68, Size: 0x4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	delegate OnMapAlertSet;//[Offset: 0x70, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ActorExtraComponents
	class ActorComponent[] BPComponents;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: XTriggerLuaRemoteComponent.ActorComponent.Object
	<FString,float> EventTagCDMap;//[Offset: 0x110, Size: 0x50]
	float EventCDTime;//[Offset: 0x160, Size: 0x4]
	bool LuaRemoteEvent(FString EventTag, FString CustomParam, Object* Object01, Object* Object02);// 0x638ab10
<----------Generated by SSpawner v1.0.4---------->


Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x28, Size: 0x10]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x38, Size: 0x10]
	void Unregister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x5edc814
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x5edc790
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x5edc6d0
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x5edc654
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x70644c4
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0x110, Size: 0x10]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0x120, Size: 0x4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0x124, Size: 0x4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bCheckingFieldOfViewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	enum FieldOfViewNotificationStatus;//[Offset: 0x130, Size: 0x1]
	bool IsNotificationWorking();// 0x5edc270
	static int IsGlobalDebugLineTraceDrawn();// 0x5edc238
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x70644c4
	enum GetFieldOfViewNotificationStatus();// 0x5edc204
<----------Generated by SSpawner v1.0.4---------->


Class: TslSimpleCollisionManager.Actor.Object
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x418, Size: 0x10]
	float DamageFieldUpdatePeriod;//[Offset: 0x4a0, Size: 0x4]
	float DamageFieldPassedTime;//[Offset: 0x4a4, Size: 0x4]
	void RegisterPersistentReceiver(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, int ID);// 0x627b378
	void RegisterBoundingSphere(out const Vector Origin, float Radius, TslSimpleCollisionReceiver* OwnerTracer);// 0x627b26c
	void AddRandomPersistentCapsules(int Num, float RngRadius);// 0x627b1b4
	int AddCheckerToBoundingSphere(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, TslSimpleCollisionReceiver* Receiver, bool RebuildSphere);// 0x627b038
<----------Generated by SSpawner v1.0.4---------->


Class: SimpleSpherePersistentChecker
	PrimitiveComponent* TargetComponent;//[Offset: 0x0, Size: 0x8]
	SimpleCollisionSphere Sphere;//[Offset: 0x8, Size: 0x10]
	float PassedTime;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SimpleCollisionSphere
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SimpleCollisionCapsule
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector End;//[Offset: 0xc, Size: 0xc]
	float Radius;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TslSimpleCollisionReceiver.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: DestructibleSurfaceManager.Info.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: MapUIMarkManager.LuaActorComponent.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0x208, Size: 0x10]
	class ScreenMarkManager* ScreenMarkMgrClass;//[Offset: 0x218, Size: 0x8]
	class ScreenRotationMarkManager* ScreenRotationMarkMgrClass;//[Offset: 0x220, Size: 0x8]
	MapUIBase* m_pMiniMap;//[Offset: 0x228, Size: 0x8]
	MapUIBase* m_pEntireMap;//[Offset: 0x230, Size: 0x8]
	ScreenMarkManager* m_ScreenMarkManager;//[Offset: 0x238, Size: 0x8]
	ScreenRotationMarkManager* m_ScreenRotationMarkManager;//[Offset: 0x240, Size: 0x8]
	int[] CurMarkInstList;//[Offset: 0x248, Size: 0x10]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0x2f8, Size: 0x10]
	delegate OnMiniMapPointerException;//[Offset: 0x308, Size: 0x10]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0x318, Size: 0x8]
	STExtraPlayerController* pExtraPC;//[Offset: 0x320, Size: 0x8]
	UIBPAsyncParams[] UIBPCallbackBuffer;//[Offset: 0x358, Size: 0x10]
	float TickRate_Internal;//[Offset: 0x390, Size: 0x4]
	float TickRate_Callback;//[Offset: 0x394, Size: 0x4]
	<int,MapMarkConfig> MapMarkConfigs;//[Offset: 0x398, Size: 0x50]
	void RemoveExternMiniMapUI(MapUIBase* MiniMapUI);// 0x5f6082c
	void RemoveExternEntireMapUI(MapUIBase* EntireMapUI);// 0x5f607b0
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x5f60664
	void OnShowOrHideLegendMarkWidget(FString Tag, bool bIsShow);// 0x5f604ec
	void OnMiniMapPointerExceptionDelegate__DelegateSignature();// 0x70644c4
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);// 0x70644c4
	void AddExternMiniMapUI(MapUIBase* MiniMapUI);// 0x5f60470
	void AddExternEntireMapUI(MapUIBase* EntireMapUI);// 0x5f603f4
<----------Generated by SSpawner v1.0.4---------->


Class: MarkPathSetting
	int UIBPSrcID;//[Offset: 0x0, Size: 0x4]
	FString UIBPSoftPtr;//[Offset: 0x8, Size: 0x10]
	FString UIDescription;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenMarkManager.LuaObject.Object
	<int,ScreenMarkGroupData> ScreenMarkGroupMap;//[Offset: 0xa0, Size: 0x50]
	<FString,ScreenMarkPriorityGroup> ScreenMarkPriorityGroupMap;//[Offset: 0xf0, Size: 0x50]
	bool bDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	bool bUseLuaWorldOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
	Vector2D LimitXY;//[Offset: 0x144, Size: 0x8]
	Vector2D LimitZW;//[Offset: 0x14c, Size: 0x8]
	Vector2D UIOffset;//[Offset: 0x154, Size: 0x8]
	byte[] CheckObjectTypes;//[Offset: 0x160, Size: 0x10]
	ActorVectorPair[] ActorVectorHeapToBind;//[Offset: 0x2f0, Size: 0x10]
	ActorVectorPair[] ActorVectorArrayToUnBind;//[Offset: 0x300, Size: 0x10]
	void UpdateScreenMarkState(int TypeId, int InstanceID, out const CustomMarkEventData EventData);// 0x6046fcc
	void UpdateBindingWidgetByPanel(int ID);// 0x6046f50
	void UpdateBindingLocationWidget(int ID);// 0x6046ed4
	void UpdateBindingActorWidget(int ID);// 0x6046e58
	void ResetGroupQueryTime(out ScreenMarkGroupData GroupData);// 0x6046d58
	void RemoveScreenMark(int TypeId, int InstanceID);// 0x6046ca4
	bool RemoveBlockCheckIgnoreActor(int GroupID, Actor* Actor);// 0x6046bd8
	void ReleaseGroupByID(int ID);// 0x6046b5c
	bool RecycleBindWidget(Widget* BindWidget, int ID);// 0x6046a90
	bool PushScreenMark(int InstanceID, out const MarkSyncData MarkData);// 0x604691c
	void OnLocationUnbindUI(Widget* BindWidget, int ID);// 0x604685c
	void OnLocationBindUI(Widget* BindWidget, int ID);// 0x604679c
	void OnInitMarkGroupData(int ID);// 0x6046718
	void OnInit();// 0x60466fc
	void OnActorUnbindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x6046604
	void OnActorBindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x604650c
	bool IsInBindingRange(out const Vector PlayerToCharacter, int ID);// 0x6046430
	bool InitMarkGroupData(int ID, bool bIsAsync);// 0x604635c
	Widget* GetWidgetByActor(int ID, const Actor* Actor);// 0x6046294
	Widget* FetchUI(int ID);// 0x6046208
	void ClearMarkGroupByTypeID(int ID);// 0x604618c
	bool CheckShouldShow(Actor* Actor, out const ScreenMarkGroupData GroupData);// 0x6046044
	bool CheckGroupNeedExist(int TypeId);// 0x6045fb4
	bool AddBlockCheckIgnoreActor(int GroupID, Actor* Actor);// 0x6045ee8
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenMarkGroupData
	ScreenMarkGroupConfig Config;//[Offset: 0x0, Size: 0x90]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x90, Size: 0x8]
	<int,ScreenMarkInstanceData> MarkInstanceDataMap;//[Offset: 0x98, Size: 0x50]
	Widget*[] HidingUIArr;//[Offset: 0xe8, Size: 0x10]
	Widget*[] ShowingUIArr;//[Offset: 0xf8, Size: 0x10]
	<int,Widget*> MarkBindingUIMap;//[Offset: 0x108, Size: 0x50]
	UAEUserWidget* ScreenMarkPanel;//[Offset: 0x160, Size: 0x8]
	CanvasPanel* AddToPanel;//[Offset: 0x168, Size: 0x8]
	Actor*[] IgnoreBlockArr;//[Offset: 0x170, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenMarkGroupConfig
	int MaxWidgetNum;//[Offset: 0x0, Size: 0x4]
	float MaxShowDistance;//[Offset: 0x4, Size: 0x4]
	float MinShowDistance;//[Offset: 0x8, Size: 0x4]
	float UpdateBindingInterval;//[Offset: 0xc, Size: 0x4]
	float UpdateBindingIntervalMax;//[Offset: 0x10, Size: 0x4]
	float ReduseBindingVelocityThreshold;//[Offset: 0x14, Size: 0x4]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bIsUpdatedByPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bBindOutScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bBindBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	int[] ExtraCheckObjectTypes;//[Offset: 0x20, Size: 0x10]
	class Actor[] ExtraCheckClasses;//[Offset: 0x30, Size: 0x10]
	FString UIPathName;//[Offset: 0x40, Size: 0x10]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	FName SkeletaSocketName;//[Offset: 0x58, Size: 0x8]
	Vector WorldPositionOffset;//[Offset: 0x60, Size: 0xc]
	Vector2D UIOffset;//[Offset: 0x6c, Size: 0x8]
	bool bNeedUpdateState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	FString PriorityGroupTag;//[Offset: 0x78, Size: 0x10]
	byte Priority;//[Offset: 0x88, Size: 0x1]
	bool bNeedOBShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	bool bNeedReplayShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: UIDuplicatedItemPool.Object
	delegate OnAsyncFinishedDelegate;//[Offset: 0x40, Size: 0x10]
	bool bActiveItemListHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	FString[] TagArray;//[Offset: 0x58, Size: 0x10]
	FString ItemBPClassPath;//[Offset: 0x68, Size: 0x10]
	class Object* ItemClass;//[Offset: 0x78, Size: 0x8]
	UserWidget*[] UsedItemList;//[Offset: 0x80, Size: 0x10]
	UserWidget*[] IdleItemList;//[Offset: 0x90, Size: 0x10]
	UserWidget*[] IdleItemListHold;//[Offset: 0xa0, Size: 0x10]
	void RemoveTagFromItemPool(FString TagName);// 0x62d1f88
	void RemoveAllTagFromItemPool();// 0x62d1f74
	void RecycleUnusedItem();// 0x62d1f60
	void RecycleAllItems();// 0x62d1f4c
	void OnAsyncLoadWidgetFinished(UserWidget* Widget, int InstID);// 0x62d1e94
	bool ItemPoolHasTag(FString TagName);// 0x62d1dd8
	bool ItemPoolHasOneTagAtLeast(out const FString[] TagNameList);// 0x62d1cb8
	bool ItemPoolHasAllTag(out const FString[] TagNameList);// 0x62d1b98
	void InitItemPool(FString ClassPath, int DefaultItemCounts, bool bAsync);// 0x62d1a6c
	UserWidget* GetOneItem();// 0x62d1a38
	void GetAllUsedItem(out UserWidget*[] ItemList);// 0x62d1980
	void GetAllTagFromItemPool(out FString[] tagList);// 0x62d186c
	void FreeOneItem(UserWidget* IdleItem);// 0x62d17f0
	void AddTagToItemPool(FString TagName);// 0x62d1748
	void AddMultiTagToItemPool(out const FString[] TagNameList);// 0x62d1634
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenMarkInstanceData
	Actor* Actor;//[Offset: 0x0, Size: 0x8]
	Vector Position;//[Offset: 0x8, Size: 0xc]
	int CustomInt;//[Offset: 0x14, Size: 0x4]
	float CustomFloat;//[Offset: 0x18, Size: 0x4]
	FString CustomString;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x8024ccc
	bool GetDontPaintWhenChildEmpty();// 0x8024c94
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x8024c08
<----------Generated by SSpawner v1.0.4---------->


Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x28]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	int ZOrder;//[Offset: 0x64, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x8025990
	void SetSupportNotch(bool InSupportNotch);// 0x802590c
	void SetSize(Vector2D InSize);// 0x8025894
	void SetPosition(Vector2D InPosition);// 0x802581c
	void SetOffsets(Margin InOffset);// 0x80257a0
	void SetMinimum(Vector2D InMinimumAnchors);// 0x8025728
	void SetMaximum(Vector2D InMaximumAnchors);// 0x80256b0
	void SetLayout(out const AnchorData InLayoutData);// 0x8025620
	void SetAutoSize(bool InbAutoSize);// 0x802559c
	void SetAnchors(Anchors InAnchors);// 0x8025520
	void SetAlignment(Vector2D InAlignment);// 0x80254a8
	int GetZOrder();// 0x8025474
	Vector2D GetSize();// 0x8025440
	Vector2D GetPosition();// 0x802540c
	Margin GetOffsets();// 0x80253d4
	AnchorData GetLayout();// 0x8025380
	bool GetAutoSize();// 0x8025348
	Anchors GetAnchors();// 0x8025310
	Vector2D GetAlignment();// 0x80252dc
	bool GeSupportNotch();// 0x80252a4
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenMarkPriorityGroup
	int MaxShowNum;//[Offset: 0x0, Size: 0x4]
	int CurShowNum;//[Offset: 0x4, Size: 0x4]
	int[] GroupTypeArray;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ActorVectorPair
	Actor* Actor;//[Offset: 0x0, Size: 0x8]
	Vector Vector;//[Offset: 0x8, Size: 0xc]
	int InstanceID;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenRotationMarkManager.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 0x10]
	<int,ScreenRotationMarkGroupData> ScreenRotationMarkGroupMap;//[Offset: 0x98, Size: 0x50]
	Vector PlayerLoc;//[Offset: 0xe8, Size: 0xc]
	Vector PlayerDir;//[Offset: 0xf4, Size: 0xc]
	class Widget* ImageType;//[Offset: 0x248, Size: 0x8]
	void UpdateBindingLocationWidgetRender(int ID, out ScreenRotationMarkGroupData GroupData);// 0x604e684
	void UpdateBindingLocationWidget(int ID, out ScreenRotationMarkGroupData GroupData);// 0x604e534
	void UpdateBindingActorWidgetRender(int ID, out ScreenRotationMarkGroupData GroupData);// 0x604e3e4
	void UpdateBindingActorWidget(int ID, out ScreenRotationMarkGroupData GroupData);// 0x604e294
	void UnbindLocation(out const Vector BingdingLoction, int ID);// 0x604e1c4
	void UnbindActor(Actor* BindingObject, int ID);// 0x604e10c
	void ReleaseGroupByID(int ID);// 0x604e090
	bool RecycleBindWidget(Widget* BindWidget, int ID);// 0x604dfc4
	void OnInit();// 0x604dfb0
	bool InitMarkGroupData(int ID, bool bIsAsync);// 0x604dedc
	Widget* GetWidgetByActor(int ID, const Actor* Actor);// 0x604de14
	Widget* FetchUI(int ID, out ScreenRotationMarkGroupData GroupData);// 0x604dcb4
	enum CheckWidgetDisAndAngleValid(Vector TargetLoc, out ScreenRotationMarkGroupData GroupData, out float Angle, out float Distance);// 0x604dab4
	bool BindToLoc(out const Vector BingdingLoction, int ID);// 0x604d9d8
	bool BindToActor(Actor* BindingObject, int ID);// 0x604d90c
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenRotationMarkGroupData
	ScreenRotationMarkConfig Config;//[Offset: 0x0, Size: 0x50]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x50, Size: 0x8]
	Actor*[] WorldObjectArr;//[Offset: 0x58, Size: 0x10]
	Vector[] WorldLocationArr;//[Offset: 0x68, Size: 0x10]
	Widget*[] HidingUIArr;//[Offset: 0x78, Size: 0x10]
	Widget*[] ShowingUIArr;//[Offset: 0x88, Size: 0x10]
	<Actor*,Widget*> BindingActorUIMap;//[Offset: 0x98, Size: 0x50]
	<Vector,Widget*> BindingLocationUIMap;//[Offset: 0xe8, Size: 0x50]
	CanvasPanel* RootPanel;//[Offset: 0x138, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenRotationMarkConfig
	ScreenRotationRangeValue DistanceRange;//[Offset: 0x0, Size: 0x10]
	ScreenRotationRangeValue AngleRange;//[Offset: 0x10, Size: 0x10]
	Actor* BindActor;//[Offset: 0x20, Size: 0x8]
	FString UIPathName;//[Offset: 0x28, Size: 0x10]
	float AngleOffset;//[Offset: 0x38, Size: 0x4]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	float UpdateBindingInterval;//[Offset: 0x40, Size: 0x4]
	int DefaultNum;//[Offset: 0x44, Size: 0x4]
	float Radius;//[Offset: 0x48, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenRotationRangeValue
	float MaxValue;//[Offset: 0x0, Size: 0x4]
	bool IsCloseOutMaxValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float MinValue;//[Offset: 0x8, Size: 0x4]
	bool IsCloseInMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MapUIBase.Object
	delegate OnSetupUIMarkRoot;//[Offset: 0x28, Size: 0x10]
	delegate OnUpdateMark;//[Offset: 0x38, Size: 0x10]
	delegate OnUpdateMultiMark;//[Offset: 0x48, Size: 0x10]
	delegate OnRepositionItemOnMap;//[Offset: 0x58, Size: 0x10]
	CanvasPanel* m_pMarkRoot;//[Offset: 0x68, Size: 0x8]
	CanvasPanel*[] CustomTagMarkRootMap;//[Offset: 0x70, Size: 0x10]
	<FString,CanvasPanel*> DynamaicCustomPanelMap;//[Offset: 0x80, Size: 0x50]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0xd0, Size: 0x50]
	<int,MapImageMarkData> AllImageMarks;//[Offset: 0x120, Size: 0x50]
	bool bMapDynamicScaleDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 0x1]
	bool bRepositionMarkerAndPinDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 0x1]
	int UpdateMarkFreq;//[Offset: 0x310, Size: 0x4]
	Vector LevelLandScapeCenterC;//[Offset: 0x314, Size: 0xc]
	Vector2D SelfMarkerAligmentC;//[Offset: 0x320, Size: 0x8]
	UIBPAsyncParams[] UIBPCallbackBuffer;//[Offset: 0x328, Size: 0x10]
	float TickRate_Internal;//[Offset: 0x340, Size: 0x4]
	float TickRate_Callback;//[Offset: 0x344, Size: 0x4]
	<int,MapMarkConfig> MapMarkConfigs;//[Offset: 0x348, Size: 0x50]
	int[] CurMarkInstList;//[Offset: 0x398, Size: 0x10]
	CanvasPanel* CanvasPanel_ShowAirPlaneRoute;//[Offset: 0x3f8, Size: 0x8]
	bool bIsShowAirPlaneRouteAfteHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	FString[] InnerCircleGameModeIDC;//[Offset: 0x408, Size: 0x10]
	FakeRadiationCircle* InnerCircle;//[Offset: 0x418, Size: 0x8]
	float ImageBlueCircleScale;//[Offset: 0x420, Size: 0x4]
	MapRealTimeInfo MapRealTimeInfoC;//[Offset: 0x428, Size: 0x108]
	MapRealTimeInfo CacheMapRealTimeInfoC;//[Offset: 0x530, Size: 0x108]
	MapDataBase* CurrentMapData;//[Offset: 0x638, Size: 0x8]
	UserWidget* BindWidget;//[Offset: 0x640, Size: 0x8]
	MapObjct* ParentMapObject;//[Offset: 0x648, Size: 0x8]
	Vector LandscapeCenterCpp;//[Offset: 0x650, Size: 0xc]
	float LevelToMapScaleC;//[Offset: 0x65c, Size: 0x4]
	float MapScaleCpp;//[Offset: 0x660, Size: 0x4]
	Vector2D MapImageSizeCpp;//[Offset: 0x664, Size: 0x8]
	float MapScalingRadio;//[Offset: 0x66c, Size: 0x4]
	int LocalPlayerIndexC;//[Offset: 0x670, Size: 0x4]
	float MapImageExtentC;//[Offset: 0x674, Size: 0x4]
	float MapWindowExtentC;//[Offset: 0x678, Size: 0x4]
	bool bNeedDrawSelfGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 0x1]
	bool bNeedDrawSelfGuideLineOutC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d, Size: 0x1]
	LinearColor GuideLineColor;//[Offset: 0x680, Size: 0x10]
	LinearColor WhiteCircleColorC;//[Offset: 0x690, Size: 0x10]
	bool IsAntiAliasC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 0x1]
	float GuideLineDashSizeC;//[Offset: 0x6a4, Size: 0x4]
	float DefaultLineThicknessC;//[Offset: 0x6a8, Size: 0x4]
	bool bNeedDrawWhiteCircleC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 0x1]
	bool bNeedDrawCircleGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ad, Size: 0x1]
	Vector2D MapAdjustLocation;//[Offset: 0x6b0, Size: 0x8]
	CanvasPanel* PlayerAddPanel;//[Offset: 0x6b8, Size: 0x8]
	CanvasPanel* ExtraAddBottomPanel;//[Offset: 0x6c0, Size: 0x8]
	CanvasPanel* ExtraAddTopPanel;//[Offset: 0x6c8, Size: 0x8]
	bool bDrawOrHideAirDropPathDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 0x1]
	bool bIsDrawAirDropFlightPathBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 0x1]
	int AirDropIndex;//[Offset: 0x6d4, Size: 0x4]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x6dc, Size: 0x8]
	void UpdateUIMarkBinding();// 0x5f5d5c0
	void UpdatePlayersLocAndRotC(STExtraPlayerController* STEPC, STExtraPlayerState* STEPS, STExtraGameStateBase* STEGS);// 0x5f5d4c8
	void UpdateMultiMarkC(int Index, out const Vector2D[] MultiMarkLocs, bool IsShow, float Opacity);// 0x5f5d344
	void UpdateMarkC(int Index, Vector2D FLoc, bool IsShow, float Opacity);// 0x5f5d208
	void UpdateImageMarkBinding();// 0x5f5d1f4
	void TickWidget(out const Geometry MyGeometry, float InDeltaTime);// 0x5f5d114
	void ShowOrHideLegendMarks(FString Tag, bool bIsShow);// 0x5f5cf9c
	void SetupUIMarkRoot();// 0x5f5cf88
	void RepositionMapMultiMarkC(int playerIndex, Vector2D CurSize);// 0x5f5ced4
	void RepositionMapMarkC(int FIndex, int LocalPlayerIndex, Vector2D CurSize);// 0x5f5cde8
	void RedrawAllMapMarkC(Vector2D CurSize);// 0x5f5cd70
	void ReCalMapInfoC();// 0x5f5cd5c
	void OnUpdateUIMarks();// 0x5f5cd40
	void OnUpdateImageMarks();// 0x5f5cd24
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x5f5cbd8
	void OnPaint(PaintContext InContext);// 0x5f5cb40
	void InitMap(MapDataBase* InMapData, UserWidget* InUserWidget);// 0x5f5ca84
	World* GetWorldInternal();// 0x5f5ca50
	float GetLevelToMapScale();// 0x5f5ca14
	STExtraGameStateBase* GetGameState();// 0x5f5c9c8
	bool CheckMarkDistance(Widget* Widget, Vector Location, float MaxDistance);// 0x5f5c8c0
<----------Generated by SSpawner v1.0.4---------->


Class: MapUIMarkBaseWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a6, Size: 0x1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a7, Size: 0x1]
	bool bDoUsSelfZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	Vector2D LimitedSize;//[Offset: 0x4ac, Size: 0x8]
	int DefaultZOrder;//[Offset: 0x4b4, Size: 0x4]
	bool bIsNeedRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	bool bIsBindActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 0x1]
	Actor* BindingActor;//[Offset: 0x4bc, Size: 0x8]
	float MaxShowDistance;//[Offset: 0x4c4, Size: 0x4]
	TextBlock* CountDownText;//[Offset: 0x4c8, Size: 0x8]
	FString CountDownFormat;//[Offset: 0x4d0, Size: 0x10]
	CanvasPanelSlot* ChangeSizeSlot;//[Offset: 0x4f8, Size: 0x8]
	float OriginSizeX;//[Offset: 0x504, Size: 0x4]
	float OriginSizeY;//[Offset: 0x508, Size: 0x4]
	UpdateStateChangePorperty[] UpdateStatePropertyArray;//[Offset: 0x510, Size: 0x10]
	void UpdateUIBPState(out const CustomMarkEventData InState);// 0x5f5f5d0
	void UpdateMarkSize(float inScale);// 0x5f5f54c
	void UpdateMarkPosition(Vector2D NewMapPos, Vector2D MapAdjustOffset, float Angle, float MapWindowHalfExtent);// 0x5f5f420
	bool ShouldLimitedInMinimap();// 0x5f5f3e8
	void SetWidgetCurPostion(Vector WorldPos3D);// 0x5f5f36c
	void SetUpdatePropertyArray(out const UpdateStateChangePorperty[] PropertyArray, int InitState);// 0x5f5f224
	void SetCountDownText(TextBlock* TextBlock, int TotalSecond, bool IsShowZero, FString Format);// 0x5f5f024
	void SetChangeSizePanel(float SizeX, float SizeY, bool IsChangeSize, bool IsChangeInUpdate, float Ratio);// 0x5f5eea4
	void RefreshPanelScale(float Scale);// 0x5f5ee28
	void RefreshCountDownText();// 0x5f5ee14
	void OnWidgetShow(out const CustomMarkEventData InState);// 0x5f5ed50
	void OnUpdateState(out const CustomMarkEventData InState);// 0x5f5ec8c
	void OnUpdateMarkSize(float Scale, float Ratio);// 0x5f5ebd8
	void OnUpdateIconMap(int NewState);// 0x5f5eb5c
	void OnUIBPShow(out const CustomMarkEventData InState);// 0x5f5ea90
	void OnUIBPDestroy();// 0x5f5ea74
	void OnUIBPCreate(out const CustomMarkEventData InState, byte ParentState);// 0x5f5e95c
	void OnEnterEntireMap();// 0x70644c4
	Vector GetWidgetCurWorldPos();// 0x5f5e924
<----------Generated by SSpawner v1.0.4---------->


Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 0x10]
	SlateColor SelectColorAndOpacity;//[Offset: 0x188, Size: 0x28]
	SlateColor NoSelectColorAndOpacity;//[Offset: 0x1b0, Size: 0x28]
	bool bHaveSelectColorAndOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0x1e0, Size: 0x58]
	Vector2D ShadowOffset;//[Offset: 0x238, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x240, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x250, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x260, Size: 0x4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 0x1]
	void SetVerticalJustification(byte InJustification);// 0x8043890
	void SetText(FText InText);// 0x8043678
	void SetShadowOffset(Vector2D InShadowOffset);// 0x8043600
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x8043584
	void SetSelectColor(bool bIsSelect);// 0x8043500
	void SetOpacity(float InOpacity);// 0x8043484
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x8043408
	void SetJustification(byte InJustification);// 0x804338c
	void SetFont(SlateFontInfo InFontInfo);// 0x8043120
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x8042ec8
	void SetAutoEllipsisText(bool InAutoEllipsisText);// 0x8042e44
	FText GetText();// 0x8042d38
<----------Generated by SSpawner v1.0.4---------->


Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x100, Size: 0x4]
	byte Justification;//[Offset: 0x104, Size: 0x1]
	byte VerticalJustification;//[Offset: 0x105, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 0x1]
	float WrapTextAt;//[Offset: 0x108, Size: 0x4]
	enum WrappingPolicy;//[Offset: 0x10c, Size: 0x1]
	Margin Margin;//[Offset: 0x110, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x120, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x28]
	FName TypefaceFontName;//[Offset: 0x48, Size: 0x8]
	int Size;//[Offset: 0x50, Size: 0x4]
	bool IsBold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: UpdateStateChangePorperty
	Widget* UpdateWidget;//[Offset: 0x0, Size: 0x8]
	FString[] IconPathArray;//[Offset: 0x8, Size: 0x10]
	enum[] IconVisibleArray;//[Offset: 0x18, Size: 0x10]
	LinearColor[] IconColorArray;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MapImageMarkData
	int ConfigId;//[Offset: 0x0, Size: 0x4]
	Image* Image;//[Offset: 0x8, Size: 0x8]
	Vector CurrentWorldPos;//[Offset: 0x10, Size: 0xc]
	Vector2D OriginalSize;//[Offset: 0x1c, Size: 0x8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	Vector2D MaxSize;//[Offset: 0x28, Size: 0x8]
	Actor* BindingActor;//[Offset: 0x30, Size: 0x8]
	float MaxShowDistance;//[Offset: 0x38, Size: 0x4]
	bool bIsBindActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: UIBPAsyncParams
	MarkSyncData MarkData;//[Offset: 0x8, Size: 0x50]
	class Widget* UIIconSoftPtr;//[Offset: 0x60, Size: 0x28]
	class MapUIMarkBaseWidget* UIBPSoftPtr;//[Offset: 0x88, Size: 0x28]
	class Object* UIClass;//[Offset: 0xb0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: MapMarkConfig
	int ConfigId;//[Offset: 0x0, Size: 0x4]
	FString UIPath;//[Offset: 0x8, Size: 0x10]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	Vector2D Size;//[Offset: 0x1c, Size: 0x8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	Vector2D MaxSize;//[Offset: 0x28, Size: 0x8]
	int ZOrder;//[Offset: 0x30, Size: 0x4]
	bool bIsControlByLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	FString LegendTags;//[Offset: 0x38, Size: 0x10]
	bool bIsBindActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float MaxShowDistance;//[Offset: 0x4c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: FakeRadiationCircle.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: MapRealTimeInfo
	Vector2D MapCenterToPlayer;//[Offset: 0x0, Size: 0x8]
	Vector MapCenterToBlueCircle;//[Offset: 0x8, Size: 0xc]
	Vector MapCenterToWhiteCircle;//[Offset: 0x14, Size: 0xc]
	Vector2D PlayerCoord;//[Offset: 0x20, Size: 0x8]
	Vector2D SpectatedPlayerCoord;//[Offset: 0x28, Size: 0x8]
	Vector2D WhiteCircleCoord;//[Offset: 0x30, Size: 0x8]
	Vector2D BlueCircleCoord;//[Offset: 0x38, Size: 0x8]
	float WhiteCircleRadius;//[Offset: 0x40, Size: 0x4]
	float BlueCircleRadius;//[Offset: 0x44, Size: 0x4]
	Vector2D LastDriveVehicleCoord;//[Offset: 0x48, Size: 0x8]
	enum LastDriveVehicleType;//[Offset: 0x50, Size: 0x1]
	bool bCanPlayerSeeLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	AirplaneRouteData PlaneRouteData;//[Offset: 0x58, Size: 0x68]
	AirDropPathData AirDropPathData;//[Offset: 0xc0, Size: 0x48]
<----------Generated by SSpawner v1.0.4---------->


Class: AirplaneRouteData
	float PlaneFlyingProcess;//[Offset: 0x0, Size: 0x4]
	Vector2D CanJumpLocInMap;//[Offset: 0x4, Size: 0x8]
	Vector2D ForceJumpLocInMap;//[Offset: 0xc, Size: 0x8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 0x4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 0x4]
	Vector2D PlaneLocInMap;//[Offset: 0x1c, Size: 0x8]
	float PlaneRotation;//[Offset: 0x24, Size: 0x4]
	AirDropPathData[] AirDropPaths;//[Offset: 0x28, Size: 0x10]
	Vector2D CanJumpLocInMapForCamp;//[Offset: 0x38, Size: 0x8]
	Vector2D ForceJumpLocInMapForCamp;//[Offset: 0x40, Size: 0x8]
	float CampRouteLengthInMap;//[Offset: 0x48, Size: 0x4]
	float CampRouteWidgetRotateAngle;//[Offset: 0x4c, Size: 0x4]
	Vector2D LastValidCanJumpLocInMap;//[Offset: 0x50, Size: 0x8]
	Vector2D LastValidForceJumpLocInMap;//[Offset: 0x58, Size: 0x8]
	float LastValidRouteWidgetRotateAngle;//[Offset: 0x60, Size: 0x4]
	float LastValidRouteLengthInMap;//[Offset: 0x64, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AirDropPathData
	int AirDropIndex;//[Offset: 0x0, Size: 0x4]
	Vector2D StartLoc;//[Offset: 0x4, Size: 0x8]
	Vector2D TargetLoc;//[Offset: 0xc, Size: 0x8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 0x4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 0x4]
	Vector2D[] AirDropLocs;//[Offset: 0x20, Size: 0x10]
	Vector[] AirDropLocs3D;//[Offset: 0x30, Size: 0x10]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: MapDataBase.Object
	Widget*[] PlayerInfoRotWidgetArrayC;//[Offset: 0x28, Size: 0x10]
	Widget*[] PlayerInfoBPArrayC;//[Offset: 0x38, Size: 0x10]
	Widget*[] PlayerMarkBPArrayC;//[Offset: 0x48, Size: 0x10]
	MapUIBase* CurrentMapUI;//[Offset: 0x58, Size: 0x8]
	Vector PlayerLocOffset;//[Offset: 0x60, Size: 0xc]
	delegate FinaleChangeCurLocDelegate;//[Offset: 0x70, Size: 0x10]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x80, Size: 0x8]
	void Init(MapUIBase* INMapUI);// 0x5f5b66c
	World* GetWorldInternal();// 0x5f5b638
	STExtraGameStateBase* GetGameState();// 0x5f5b5ec
<----------Generated by SSpawner v1.0.4---------->


Class: MapObjct.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 0x10]
	MapUIBase* CurrentHoldMapUI;//[Offset: 0x98, Size: 0x8]
	World* GetWorldInternal();// 0x5f5e1b8
	void DrawCircle(Vector2D CircleCenter, LinearColor CircleColor, float CircleRadius, float MapWindowExtent, Vector2D PlayerCoord, byte MapType, bool bAntiAlias);// 0x5f5dfcc
<----------Generated by SSpawner v1.0.4---------->


Class: WidgetToRenderTarget.Object
	<FName,TextureRenderTarget2DManagerWidgetInfo> NameToTextureRenderTarget2DManagerWidgetInfos;//[Offset: 0x28, Size: 0x50]
	DrawTextToTextureRenderTarget2DParams[] CachedParams;//[Offset: 0x78, Size: 0x10]
	void ReleaseCachedParams();// 0x637ce64
	bool ReceivePreDrawTextToTextureRenderTarget2DAsync(out DrawTextToTextureRenderTarget2DParams Params);// 0x70644c4
	void ReceivePostDrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params);// 0x70644c4
	void DrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params, out const delegate OnWidgetToRenderTargetDrawn);// 0x637cc10
<----------Generated by SSpawner v1.0.4---------->


Class: TextureRenderTarget2DManagerWidgetInfo
	class UserWidget* UserWidgetClass;//[Offset: 0x0, Size: 0x28]
	class UserWidget* LoadedUserWidgetClass;//[Offset: 0x28, Size: 0x8]
	UserWidget* UserWidget;//[Offset: 0x30, Size: 0x8]
	FName UpdateWidgetFunctionName;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DrawTextToTextureRenderTarget2DParams
	FText Text;//[Offset: 0x0, Size: 0x18]
	FName WidgetName;//[Offset: 0x18, Size: 0x8]
	int DrawWidth;//[Offset: 0x20, Size: 0x4]
	int DrawHeight;//[Offset: 0x24, Size: 0x4]
	TextureRenderTarget2D* OptionalInOutTextureRenderTarget2D;//[Offset: 0x28, Size: 0x8]
	bool bMaterialInstanceDynamicCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	MaterialInterface* ParentMaterial;//[Offset: 0x38, Size: 0x28]
	FName TextureParameterName;//[Offset: 0x60, Size: 0x8]
	MaterialInstanceDynamic* OptionalInOutMaterialInstanceDynamic;//[Offset: 0x68, Size: 0x8]
	FString Payload;//[Offset: 0x70, Size: 0x10]
	bool bParamsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: GameStateWeaponRule
	bool bForbidShootTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float CheckForbidShootTime;//[Offset: 0x4, Size: 0x4]
	class Actor[] ForbidShootClassArray;//[Offset: 0x8, Size: 0x10]
	class Actor[] SwallowBulletClassArray;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ReplayRecordInfo.Actor.Object
	float WorldTimeSecondsForReplay;//[Offset: 0x3f4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ParallelWorldDebugSummary
	int WorldNum;//[Offset: 0x0, Size: 0x4]
	int MaxPlayerNumPerPW;//[Offset: 0x4, Size: 0x4]
	ParallelWorldDebugEntry[] DebugData;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ParallelWorldDebugEntry
	int ParallelWorldId;//[Offset: 0x0, Size: 0x4]
	int PlayerNum;//[Offset: 0x4, Size: 0x4]
	int AINum;//[Offset: 0x8, Size: 0x4]
	int TeamNum;//[Offset: 0xc, Size: 0x4]
	int[] TeamIds;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PixelProjectedReflection.SceneCapture.Actor.Object
	PixelProjectedReflectionComponent* PixelProjectedReflectionComponent;//[Offset: 0x400, Size: 0x8]
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	void OnInterpToggle(bool bEnable);// 0x8df6eac
<----------Generated by SSpawner v1.0.4---------->


Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x3f8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: PixelProjectedReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x350, Size: 0x8]
	float NormalDistortionStrength;//[Offset: 0x358, Size: 0x4]
	float SkyDistanceFadeoutStart;//[Offset: 0x35c, Size: 0x4]
	float SkyDistanceFadeoutEnd;//[Offset: 0x360, Size: 0x4]
	float DistanceFromPlaneFadeStart;//[Offset: 0x364, Size: 0x4]
	float DistanceFromPlaneFadeEnd;//[Offset: 0x368, Size: 0x4]
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x36c, Size: 0x4]
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x370, Size: 0x4]
	float AngleFromPlaneFadeStart;//[Offset: 0x374, Size: 0x4]
	float AngleFromPlaneFadeEnd;//[Offset: 0x378, Size: 0x4]
	PixelProjectedReflectionHeightAdjustmentVolume*[] HeightAdjustmentVolumes;//[Offset: 0x380, Size: 0x10]
	PixelProjectedReflectionVisibilityVolume*[] VisibilityVolumes;//[Offset: 0x390, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PixelProjectedReflectionHeightAdjustmentVolume.Volume.Brush.Actor.Object
	float DestinationHeight;//[Offset: 0x430, Size: 0x4]
	float FadeTime;//[Offset: 0x434, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PixelProjectedReflectionVisibilityVolume.Volume.Brush.Actor.Object
	float MaxDrawDistance;//[Offset: 0x430, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WaterSwimObject_C.WaterSwimActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x448, Size: 0x8]
	void SetWaterMaterialByGamePawnEvent(byte Event, bool K2Node_SwitchEnum_CmpSuccess);// 0x70644c4
	void SetWaterMaterial(int NewParam, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetObjectName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x70644c4
	void RefreshWaterMaterial(PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInFight_ReturnValue);// 0x70644c4
	void DoTrySetWaterMaterial(int NewParam, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsSupportIndex_NewParam1, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void TrySetWaterMaterial(int NewParam);// 0x70644c4
	void IsSupportIndex(int NewParam, out bool NewParam1, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsSupportIndex_NewParam1, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetWeatherLevelName_ReturnValue, bool CallFunc_GetWaterReflectionSetting_ReturnValue, FString CallFunc_GetLoadWeatherName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_GetIsHighWeatherLevel_ReturnValue, RenderQualitySettings CallFunc_GetRenderQualityApplying_ReturnValue, bool CallFunc_IsOpenMSAA_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool CallFunc_GreaterEqual_ByteByte_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsSupportLDR_ReturnValue, bool CallFunc_IsOpenHDROcean_ReturnValue);// 0x70644c4
	void IsNewIphone(out bool IsNewIphone, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, bool CallFunc_Set_Contains_ReturnValue);// 0x70644c4
	void SetWateMaterial(bool bHDR, bool CallFunc_IsHarmonyOS_ReturnValue, bool CallFunc_IsNewIphone_isNewIphone, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsOpenHDR_ReturnValue, bool CallFunc_IsSupportLDR_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue2, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue3);// 0x70644c4
	void HideUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog);// 0x70644c4
	void ShowUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors, ExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_PostAkEvent_ReturnValue);// 0x70644c4
	bool IsCapsult(Object* PlayerPawn, ActorComponent* Comp, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x70644c4
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void CustomEvent(int UserQualitySettingLevel);// 0x70644c4
	void ReceiveEndPlay(byte EndPlayReason);// 0x70644c4
	void CustomEvent(bool UserMsaaSetting);// 0x70644c4
	void CustomEvent(bool bOpenWaterReflection);// 0x70644c4
	void ExecuteUbergraph_WaterSwimObject(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_IsCapsult_returnvalue, bool CallFunc_IsCapsult_returnvalue2, STExtraPetCharacter* K2Node_DynamicCast_AsSTExtra_Pet_Character, bool K2Node_DynamicCast_bSuccess, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess2, interface class K2Node_DynamicCast_AsPet_Swim_Interface, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPetCharacter* K2Node_DynamicCast_AsSTExtra_Pet_Character2, bool K2Node_DynamicCast_bSuccess4, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess5, interface class K2Node_DynamicCast_AsPet_Swim_Interface2, bool K2Node_DynamicCast_bSuccess6, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsDedicatedServer_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue3, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess7, int K2Node_CustomEvent_UserQualitySettingLevel, byte K2Node_Event_EndPlayReason, bool CallFunc_IsDedicatedServer_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue2, bool K2Node_CustomEvent_UserMsaaSetting, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess8, bool K2Node_CustomEvent_bOpenWaterReflection, MaterialInterface*[] K2Node_MakeArray_Array, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, int CallFunc_GetPlatformInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x70644c4
	GameEventListener* GameEventListener;//[Offset: 0x450, Size: 0x8]
	ParticleSystemComponent* P_Water_down_01;//[Offset: 0x458, Size: 0x8]
	AkComponent* Ak;//[Offset: 0x460, Size: 0x8]
	PostProcessComponent* PostProcess;//[Offset: 0x468, Size: 0x8]
	BoxComponent* PostSceneBox;//[Offset: 0x470, Size: 0x8]
	StaticMeshComponent* watermesh;//[Offset: 0x478, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x480, Size: 0x8]
	float Gamma;//[Offset: 0x488, Size: 0x4]
	PostProcessSettings NewVar;//[Offset: 0x490, Size: 0x550]
	STExtraBaseCharacter*[] playerList;//[Offset: 0x9e0, Size: 0x10]
	byte NewVar;//[Offset: 0x9f0, Size: 0x1]
	float FogDensity;//[Offset: 0x9f4, Size: 0x4]
	ExponentialHeightFog* HeightFog;//[Offset: 0x9f8, Size: 0x8]
	MaterialInstanceDynamic* NoHDRWater;//[Offset: 0xa00, Size: 0x8]
	MaterialInstanceDynamic* HDROcean;//[Offset: 0xa08, Size: 0x8]
	MaterialInstanceDynamic* HDRSwamp;//[Offset: 0xa10, Size: 0x8]
	MaterialInterface* HDROceanMaterial;//[Offset: 0xa18, Size: 0x8]
	MaterialInterface* SUPHDROceanMaterial;//[Offset: 0xa20, Size: 0x8]
	MaterialInterface* HDRSwampMaterial;//[Offset: 0xa28, Size: 0x8]
	MaterialInterface* SUPHDRSwampMaterial;//[Offset: 0xa30, Size: 0x8]
	MaterialInterface* NoHDRWaterMaterial;//[Offset: 0xa38, Size: 0x8]
	int CurrentMaterialIndex;//[Offset: 0xa40, Size: 0x4]
	MaterialInterface*[] MaterialList;//[Offset: 0xa48, Size: 0x10]
	bool IsSetSwamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 0x1]
	<FString> newIOSDevice;//[Offset: 0xa60, Size: 0x50]
	MaterialInterface* WaterMaterial_SUP_HDR;//[Offset: 0xab0, Size: 0x8]
	MaterialInterface* WaterMaterial_HDR;//[Offset: 0xab8, Size: 0x8]
	MaterialInterface* WaterMaterial_Normal;//[Offset: 0xac0, Size: 0x8]
	bool IsIphoneNewWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PointerToUberGraphFrame
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x4f0, Size: 0x10]
	delegate OnRenderQualitySettingsChanged;//[Offset: 0x500, Size: 0x10]
	delegate OnUserMsaaSettingChanged;//[Offset: 0x510, Size: 0x10]
	delegate OnWaterReflectionSettingChanged;//[Offset: 0x520, Size: 0x10]
	delegate OnCampRoomChanged;//[Offset: 0x530, Size: 0x10]
	delegate ScreenOrientationChangedNotify;//[Offset: 0x540, Size: 0x10]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x550, Size: 0x8]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x558, Size: 0x8]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x560, Size: 0x8]
	UserDetailSetting UserDetailSetting;//[Offset: 0x568, Size: 0x70]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x609, Size: 0x1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60a, Size: 0x1]
	bool TemporaryFixedLobbyRenderSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60b, Size: 0x1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 0x1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60d, Size: 0x1]
	int iEnableRegionID;//[Offset: 0x610, Size: 0x4]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x618, Size: 0x10]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x628, Size: 0x10]
	RenderItem[] LobbyRenderSettingsUltralHigh;//[Offset: 0x638, Size: 0x10]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x648, Size: 0x10]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x658, Size: 0x10]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x668, Size: 0x10]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x678, Size: 0x10]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x688, Size: 0x10]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x698, Size: 0x10]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x6a8, Size: 0x10]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x6b8, Size: 0x10]
	RenderItem[] MobileUltralHighOpenConfig;//[Offset: 0x6c8, Size: 0x10]
	RenderItem[] MobileUltralHighCloseConfig;//[Offset: 0x6d8, Size: 0x10]
	RenderItem[] MobileVerySmoothOpenConfig;//[Offset: 0x6e8, Size: 0x10]
	RenderItem[] MobileVerySmoothCloseConfig;//[Offset: 0x6f8, Size: 0x10]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x708, Size: 0x10]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x718, Size: 0x10]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x728, Size: 0x10]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x738, Size: 0x10]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x748, Size: 0x10]
	FString[] RePairDeleteDir;//[Offset: 0x758, Size: 0x10]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x768, Size: 0x10]
	MaterialParametersStyle[] MaterialParametersStyleArray;//[Offset: 0x778, Size: 0x10]
	ObjectPoolClassConfig[] ObjectPoolClassConfigs;//[Offset: 0x788, Size: 0x10]
	FName[] ObjectPoolIgnoringProperties;//[Offset: 0x798, Size: 0x10]
	Vector2D FOVRange;//[Offset: 0x7b8, Size: 0x8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x7c0, Size: 0x8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1]
	bool PVENightChangeCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 0x1]
	float SwimRotateX;//[Offset: 0x7cc, Size: 0x4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 0x1]
	FString[] BPGameSubsystemClassPath;//[Offset: 0x7d8, Size: 0x10]
	int ModeID;//[Offset: 0x7e8, Size: 0x4]
	int MainModeID;//[Offset: 0x7ec, Size: 0x4]
	Actor* mInstanceActor;//[Offset: 0x7f0, Size: 0x8]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x810, Size: 0x8]
	ClientInGameReplay* ClientInGameReplay;//[Offset: 0x818, Size: 0x8]
	DeathPlayback* DeathPlayback;//[Offset: 0x820, Size: 0x8]
	CompletePlayback* CompletePlayback;//[Offset: 0x828, Size: 0x8]
	ObservingReplay* ObservingReplay;//[Offset: 0x830, Size: 0x8]
	WonderfulPlayback* WonderfulPlayback;//[Offset: 0x838, Size: 0x8]
	MaterialInstanceDynamic* m_CustomTexMat;//[Offset: 0x840, Size: 0x8]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x8b0, Size: 0x8]
	AvatarItemDownload* AssociatedAvatarItemDownload;//[Offset: 0x8b8, Size: 0x8]
	FadeDynamicStyleInfo FadeInfo;//[Offset: 0x8c0, Size: 0xc]
	float DefaultGray;//[Offset: 0x8cc, Size: 0x4]
	CreativeModeGlobalManagerCenter* CreativeModeGlobalManagerCenter;//[Offset: 0x920, Size: 0x8]
	void WaterReflectionSettingChanged__DelegateSignature(bool bOpenWaterReflection);// 0x70644c4
	void VoiceSDKCampRoomChanged__DelegateSignature(enum CampRoomType);// 0x70644c4
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0x70644c4
	void UserMsaaSettingChanged__DelegateSignature(bool UserMsaaSetting);// 0x70644c4
	void UpdateWorldCullDistanceVolumes();// 0x6172928
	void SuperBattleWithPlayerName(FString IP, FString PlayerName, int PlayerKey);// 0x61727dc
	void SuperBattle(FString IP);// 0x61726a8
	void ShowInstance(int IndexStart, int indexEnd, out Vector Location);// 0x61725a8
	void SetWorldDoorCullDistance(int Distance);// 0x617252c
	void SetWorldCullDistanceVolumeEnable(FString Name, int Enable);// 0x61723bc
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x6172304
	void SetWaterReflectionSetting(bool bDoOpen);// 0x6172280
	void SetUserVulkanSetting(bool Enable);// 0x61721fc
	void SetUserSetingShadowQuality(bool bShadow);// 0x6172178
	void SetUserSetingMobilceContentSCale(float mcs);// 0x61720fc
	bool SetSoundEffectQuality(int Type);// 0x617206c
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x6171fb4
	void SetModeID(int ParamId);// 0x6171f38
	void SetMainModeID(int ParamId);// 0x6171ebc
	void SetKillZValue(float KillZ);// 0x6171e40
	void SetHZBMobileState();// 0x6171e2c
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x6171db0
	void SetEnableCullDistanceVolumeOffset(FString Name, bool Enable);// 0x6171c38
	void SetEnableCullDistanceVolumeMovable(FString Name, bool Enable);// 0x6171ac0
	void ScreenOrientationChangedDelegate__DelegateSignature(int inScreenOrientation);// 0x70644c4
	void ReSetFOVScreenSizeCullingFactor();// 0x6171aac
	void ReplaceAllInstance(int NumperTick, int tickTime, int typeNum, out Vector Location);// 0x6171974
	void RenderQualitySettingsChanged__DelegateSignature(RenderQualitySettings RenderQualitySettings);// 0x70644c4
	void RenderForLowFPS();// 0x6171960
	void RemovePPVBlendableMaterial(MaterialInterface* InMaterial);// 0x61718e4
	void RemoveInstance(int IndexStart, int indexEnd, int tickTime);// 0x61717f4
	void RefuseRenderForLowFPS();// 0x61717e0
	void RefreshObjectPoolConfig();// 0x61717cc
	void QuitGame();// 0x61717b8
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x61716b4
	void PreLoadBPGameSubsystem();// 0x61716a0
	void OpenHDR(bool bOpen);// 0x617161c
	void ObjectPoolServerSwitch(bool bOn);// 0x6171598
	void ModifyAllLandscapeStreamingDistance(int Distance);// 0x617151c
	void MakeLevelStreamingDistanceShorterWhenLanded();// 0x6171508
	bool IsViewedByReplay(const Actor* InActor);// 0x6171478
	bool isUsingAssumedNameInReplay();// 0x6171440
	bool IsSupportTagCulling();// 0x6171424
	bool IsSupportSwitchSoundEffectQuality();// 0x61713ec
	bool IsSupportSwitchRenderLevelRuntime();// 0x61713b4
	bool IsSupportMSAA();// 0x6171390
	bool IsSupportLDR();// 0x617136c
	bool IsRunningOnVulkan();// 0x6171334
	bool IsPVENightChangeCullDistance();// 0x61712fc
	bool IsPlayingObservingReplay();// 0x61712c4
	bool IsOpenMSAA();// 0x6171294
	bool IsOpenHDROcean();// 0x617125c
	bool IsOpenHDR();// 0x6171224
	bool IsObjectPoolEnabledByClassName(FName ClassName);// 0x6171194
	bool IsObjectPoolEnabled();// 0x617115c
	bool IsIOSOneGigabyteDevice();// 0x6171124
	bool IsInTournamentMap();// 0x61710ec
	bool IsFoldingScreenDevice(float baseValue);// 0x617105c
	void HideInstance(int IndexStart, int indexEnd);// 0x6170fa8
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x6170f74
	WonderfulPlayback* GetWonderfulPlayback();// 0x6170f40
	FString GetWeatherLevelName();// 0x6170e94
	int GetWeatherID();// 0x6170e58
	bool GetWaterReflectionSetting();// 0x6170e20
	bool GetUserVulkanSetting();// 0x6170de8
	bool GetUserSetingShadowQuality();// 0x6170db0
	int GetUserQualitySettingLevel();// 0x6170d94
	int GetSuppotMSAA();// 0x6170d78
	int GetSoundEffectQuality();// 0x6170d44
	RenderQualitySettings GetRenderQualityLastSet();// 0x6170ce8
	RenderQualitySettings GetRenderQualityApplying();// 0x6170c8c
	ObservingReplay* GetObservingReplay();// 0x6170c58
	int GetModeID();// 0x6170c24
	int GetMainModeID();// 0x6170bf0
	FString GetLoadWeatherName(FString InWeatherName);// 0x6170acc
	bool GetIsHighWeatherLevel(FString InWeatherLevelName);// 0x6170a08
	bool GetIsFirstInitWaterReflectionSetting();// 0x61709d0
	static STExtraGameInstance* GetInstance();// 0x61709ac
	int GetExactDeviceLevel();// 0x6170978
	int GetDeviceUpdateVersionFlag();// 0x617093c
	FString GetDeviceProfilerLevel();// 0x6170898
	byte GetDeviceMaxSupportSoundEffect();// 0x6170864
	byte GetDeviceMaxSupportLevel();// 0x6170830
	int GetDeviceMaxFPSByDeviceLevel(byte renderlevel);// 0x61707a4
	int GetDeviceLimit();// 0x6170770
	int GetDeviceLevel();// 0x6170734
	bool GetDefaultSoundEffectQuality();// 0x61706fc
	DeathPlayback* GetDeathPlayback();// 0x61706c8
	FString GetCurrentRHI();// 0x6170624
	CompletePlayback* GetCompletePlayback();// 0x61705f0
	ClientInGameReplay* GetClientInGameReplay();// 0x61705bc
	AvatarItemDownload* GetAssociatedAvatarItemDownload();// 0x6170588
	bool GetApplyingShadowQuality();// 0x6170550
	FString GetActiveDeviceProfile();// 0x61704ac
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x617029c
	void EnableStreamingLevelLOD(bool bEnable);// 0x6170218
	void EnableObjectPoolByClassName(FName ClassName, bool Enable);// 0x6170158
	void DrawMateritalToTexRenderTarget(TextureRenderTarget2D* TextureRenderTarget, Texture2D* tex1, Texture2D* tex2);// 0x6170068
	bool DeleteSavedFiles(bool allfilesSaved);// 0x616ffd0
	TextureRenderTarget2D* CreateTexRenderTarget(int Width, int Height);// 0x616ff0c
	TextureRenderTarget2D* CreateCustomTex(Texture2D* TexResFirst, Texture2D* TexResSecond);// 0x616fe48
	void ChangeLevelFXActor(FString LevelName, bool isLoad);// 0x616fd58
	void ChangeCullDistanceVolume(bool UpdateCulldisImmediate);// 0x616fcd4
	void bHideGroundLevels(bool Disable);// 0x616fc50
	void AutoActiveVerySmoothRenderItems(bool forceClose);// 0x616fbcc
	void AutoActiveUltralHighRenderItems();// 0x616fbb8
	void AutoActiveLDR();// 0x616fba4
	void AttachCameraViewToCharacter(STExtraBaseCharacter* Character);// 0x616fb28
	void AddOrUpdatePPVBlendableMaterial(MaterialInterface* InMaterial, float InWeight);// 0x616fa70
	void AddInstance(int NumperTick, int tickTime, int typeNum, out Vector Location);// 0x616f938
	bool ActiveStyle_PPForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x616f82c
	void ActiveStyle_PP(byte Level);// 0x616f7a8
	bool ActiveStyle_ACESForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x616f69c
	void ActiveStyle(byte Level);// 0x616f618
	void ActiveNightVision(bool bSet);// 0x616f594
	void ActiveMSAA(bool bOpenMSAA, int MSAAValue);// 0x616f4cc
	void ActiveDynamicStyle(bool bSet, byte Type, float InterpSpeed, bool bNeedDestroyComp);// 0x616f37c
<----------Generated by SSpawner v1.0.4---------->


Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x2a8, Size: 0x158]
	delegate EnginePreTick;//[Offset: 0x400, Size: 0x10]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x478, Size: 0x8]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x488, Size: 0x8]
	bool bStandAloneFromLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	delegate OnPreBattleResult;//[Offset: 0x4b8, Size: 0x10]
	FString[] HighWeatherNames;//[Offset: 0x4d8, Size: 0x10]
	int HighWeatherMinRenderQuality;//[Offset: 0x4e8, Size: 0x4]
	int HighWeatherMaxRenderQuality;//[Offset: 0x4ec, Size: 0x4]
	void SetLuaStateWrapper(LuaStateWrapper* TLuaStateWrapper);// 0x64a4fd0
	void OpenAssetLoadLog();// 0x64a4fbc
	void OnPreBattleResult__DelegateSignature();// 0x70644c4
	void LuaLeakDetect();// 0x64a4fa8
	void LuaDoString(FString LuaString);// 0x64a4f00
	float GetWeatherTime();// 0x64a4ec4
	FString GetWeatherLevelName();// 0x64a4e18
	int GetWeatherID();// 0x64a4ddc
	LuaStateWrapper* GetLuaStateWrapper();// 0x64a4da8
	FString GetLoadWeatherName(FString InWeatherName);// 0x64a4c84
	bool GetIsHighWeatherLevel(FString InWeatherLevelName);// 0x64a4bc0
	FString GetGameId();// 0x64a4b10
	int GetDeviceLevel();// 0x64a4ad4
	UAEDataTable* GetDataTable_Mod(FString tableName);// 0x64a4a1c
	UAEDataTable* GetDataTable(FString tableName);// 0x64a4964
	FrontendHUD* GetAssociatedFrontendHUD();// 0x64a4930
	void CloseAssetLoadLog();// 0x64a491c
<----------Generated by SSpawner v1.0.4---------->


Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 0x10]
	uint64 RoleID;//[Offset: 0x10, Size: 0x8]
	FString GameSvrId;//[Offset: 0x18, Size: 0x10]
	FString GameAppID;//[Offset: 0x28, Size: 0x10]
	uint16 AreaID;//[Offset: 0x38, Size: 0x2]
	int8 PlatID;//[Offset: 0x3a, Size: 0x1]
	FString ZoneID;//[Offset: 0x40, Size: 0x10]
	uint64 BattleID;//[Offset: 0x50, Size: 0x8]
	uint64 GameID;//[Offset: 0x58, Size: 0x8]
	FString BattleServerIP;//[Offset: 0x60, Size: 0x10]
	uint32 BattleServerPort;//[Offset: 0x70, Size: 0x4]
	FString UserName;//[Offset: 0x78, Size: 0x10]
	FString PicUrl;//[Offset: 0x88, Size: 0x10]
	uint32 PlayerKey;//[Offset: 0x98, Size: 0x4]
	int[] MrpcsData;//[Offset: 0xa0, Size: 0x10]
	<int,FString> AdvConfig;//[Offset: 0xb8, Size: 0x50]
	<FString,Texture2D*> AdvTextureList;//[Offset: 0x108, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: LuaStateWrapper.Object
<----------Generated by SSpawner v1.0.4---------->


Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0, Size: 0x1]
	byte RenderStyleSetting;//[Offset: 0x1, Size: 0x1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int RenderMSAAValue;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0, Size: 0x4]
	int TCQualityGrade;//[Offset: 0x4, Size: 0x4]
	int DeviceMaxSoundEffectLevel;//[Offset: 0x8, Size: 0x4]
	int DeviceMaxQualityLevel;//[Offset: 0xc, Size: 0x4]
	int UserQualitySetting;//[Offset: 0x10, Size: 0x4]
	int DeviceSupportHDR;//[Offset: 0x14, Size: 0x4]
	int IsOpenHDR;//[Offset: 0x18, Size: 0x4]
	int UserHDRSetting;//[Offset: 0x1c, Size: 0x4]
	int IsSupportMSAA;//[Offset: 0x20, Size: 0x4]
	bool UserMsaaSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	int UserMSAAValue;//[Offset: 0x28, Size: 0x4]
	float UserMCSSetting;//[Offset: 0x2c, Size: 0x4]
	int UserShadowSetting;//[Offset: 0x30, Size: 0x4]
	int UserShadowSwitch;//[Offset: 0x34, Size: 0x4]
	int UserTeamQualityEnhanceSetting;//[Offset: 0x38, Size: 0x4]
	int PUBGLimitSetting;//[Offset: 0x3c, Size: 0x4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x40, Size: 0x4]
	int PUBGDeviceFPSDef;//[Offset: 0x44, Size: 0x4]
	int PUBGDeviceFPSLow;//[Offset: 0x48, Size: 0x4]
	int PUBGDeviceFPSMid;//[Offset: 0x4c, Size: 0x4]
	int PUBGDeviceFPSHigh;//[Offset: 0x50, Size: 0x4]
	int PUBGDeviceFPSHDR;//[Offset: 0x54, Size: 0x4]
	int PUBGDeviceFPSUltralHigh;//[Offset: 0x58, Size: 0x4]
	int PUBGDeviceFPSUltimateHigh;//[Offset: 0x5c, Size: 0x4]
	int PUBGDeviceFPSUltimateHighTA;//[Offset: 0x60, Size: 0x4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	int PUBGTeamQualityEnhance;//[Offset: 0x68, Size: 0x4]
	int UserVulkanSetting;//[Offset: 0x6c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0, Size: 0x10]
	SwitchesItem[] Switches;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SwitchesItem
	FString Key;//[Offset: 0x0, Size: 0x10]
	float Value;//[Offset: 0x10, Size: 0x4]
	FString DependKey;//[Offset: 0x18, Size: 0x10]
	float DependValue;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: RenderItem
	FString RenderKey;//[Offset: 0x0, Size: 0x10]
	float RenderValue;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0, Size: 0x1]
	FString[] PostProcessParams;//[Offset: 0x8, Size: 0x10]
	ACESParameter ACESParams;//[Offset: 0x18, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialParametersStyle
	FString StyleName;//[Offset: 0x0, Size: 0x10]
	MaterialParameterFloat[] Floats;//[Offset: 0x10, Size: 0x10]
	MaterialParameterVector[] Vectors;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialParameterFloat
	FName Name;//[Offset: 0x0, Size: 0x8]
	float Value;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialParameterVector
	FName Name;//[Offset: 0x0, Size: 0x8]
	Vector Vector;//[Offset: 0x8, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x28, Size: 0x10]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x38, Size: 0x10]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	float ChickenDinnerTimeSecs;//[Offset: 0x78, Size: 0x4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x80, Size: 0x4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x88, Size: 0x10]
	void StopRecord(bool bRankFirst);// 0x63800f8
	void StartRecord();// 0x63800e4
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x637fef8
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x637fde0
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x637fb50
	void BuildOutputData();// 0x637fb3c
	void BuildContinuousKillOutputData();// 0x637fb28
<----------Generated by SSpawner v1.0.4---------->


Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 0x4]
	float EndTimeSecs;//[Offset: 0x4, Size: 0x4]
	byte WonderfulCutType;//[Offset: 0x8, Size: 0x1]
	float ShootDistance;//[Offset: 0xc, Size: 0x4]
	FString CauserName;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 0x4]
	float EndTimeSecs;//[Offset: 0x4, Size: 0x4]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	float FarthestKillDistance;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0, Size: 0x4]
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte CaptureType;//[Offset: 0x1, Size: 0x1]
	byte ShootDamageType;//[Offset: 0x2, Size: 0x1]
	float DamageTimeSecs;//[Offset: 0x4, Size: 0x4]
	float ShootDistance;//[Offset: 0x8, Size: 0x4]
	FString CauserName;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0, Size: 0x4]
	float DamageTimeSecs;//[Offset: 0x4, Size: 0x4]
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	byte CaptureType;//[Offset: 0x9, Size: 0x1]
	byte ShootDamageType;//[Offset: 0xa, Size: 0x1]
	float ShootDistance;//[Offset: 0xc, Size: 0x4]
	FString CauserName;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ClientInGameReplay.GameReplay.Object
	bool bGWonderfulPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	bool bWonderfulPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 0x1]
	int ConditionKillNums;//[Offset: 0x234, Size: 0x4]
	enum WonderfulKeepState;//[Offset: 0x238, Size: 0x1]
	bool bCanKeepReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]
	DeathReplayData DeathReplayData;//[Offset: 0x240, Size: 0x108]
	BattleDeathPlaybackInfo BattleDeathPlaybackInfo;//[Offset: 0x39c, Size: 0x8]
	BattleWonderfulInfo BattleWonderfulInfo;//[Offset: 0x3a8, Size: 0x40]
	LobbyWonderfulInfo LobbyWonderfulInfo;//[Offset: 0x3e8, Size: 0x78]
	void SetSaveTimestamp(uint64 InCurrentTime);// 0x5e4bc44
	void SetGWonderfulPlaybackSwitch(bool bInSwitch);// 0x5e4bbc0
	void SetDeathReplayData(out const DeathReplayData ReplayData);// 0x5e4bae8
	void SetClientVersion(FString InAppVersion, FString InSrcVersion);// 0x5e4b9d8
	void OnPlayerRespawnNotify();// 0x5e4b9c4
	void OnKillOrPutDownMessageEvent();// 0x5e4b9b0
	void OnBattleResultStopRecordingNotify();// 0x5e4b99c
	void MarkPlayerLastBeginInactiveTime(FString PlayerName);// 0x5e4b8f4
	void MarkPlayerLastBeginActiveTime(FString PlayerName);// 0x5e4b84c
	bool IsSwitchedOffByDevice();// 0x5e4b814
	bool HaveWonderfulPlaybackData();// 0x5e4b7dc
	bool HaveDeathPlaybackData();// 0x5e4b7a4
	enum GetWonderfulKeepState();// 0x5e4b760
	FString GetCompressedFileName();// 0x5e4b6bc
	int[] GetAllWonderfulPeriodType();// 0x5e4b618
	void EnableWonderfulPlayback(bool bEnable);// 0x5e4b594
	void EnableDeathPlayback(bool bEnable);// 0x5e4b510
	void DeleteWonderfulPeriod(int PeriodIndex);// 0x5e4b494
	void ClearWonderfulPeriod();// 0x5e4b480
	bool CheckKillNumsCondition();// 0x5e4b448
	void AddWonderfulPeriod(int InWonderfulType, float InStartTime, float InEndTime, out const float[] InAdditionalData, int InPeriodIndex);// 0x5e4b294
<----------Generated by SSpawner v1.0.4---------->


Class: BattleDeathPlaybackInfo
	float DeathPlaybackStartTime;//[Offset: 0x0, Size: 0x4]
	float DeathPlaybackEndTime;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleWonderfulInfo
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	uint64 GameID;//[Offset: 0x8, Size: 0x8]
	FString PlayerName;//[Offset: 0x10, Size: 0x10]
	FString OpenID;//[Offset: 0x20, Size: 0x10]
	WonderfulPeriodInfo[] WonderfulPeriodInfoArray;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WonderfulPeriodInfo
	float WonderfulStartTime;//[Offset: 0x0, Size: 0x4]
	float WonderfulEndTime;//[Offset: 0x4, Size: 0x4]
	int WonderfulPeriodIndex;//[Offset: 0x8, Size: 0x4]
	WonderfulTypeInfo WondefulTypeInfo;//[Offset: 0x10, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: WonderfulTypeInfo
	enum WondefulType;//[Offset: 0x0, Size: 0x1]
	float[] AdditionalData;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LobbyWonderfulInfo
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	uint64 GameID;//[Offset: 0x8, Size: 0x8]
	uint64 SaveTimestamp;//[Offset: 0x10, Size: 0x8]
	FString ModeID;//[Offset: 0x18, Size: 0x10]
	int SegmentLevel;//[Offset: 0x28, Size: 0x4]
	float TotalTime;//[Offset: 0x2c, Size: 0x4]
	WonderfulTypeInfo[] TypeInfoArray;//[Offset: 0x30, Size: 0x10]
	FString AppVersion;//[Offset: 0x40, Size: 0x10]
	FString SrcVersion;//[Offset: 0x50, Size: 0x10]
	enum ErrorCode;//[Offset: 0x60, Size: 0x1]
	WonderfulWeSeeInfo[] WeSeeInfoArray;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WonderfulWeSeeInfo
	float StartTime;//[Offset: 0x0, Size: 0x4]
	float EndTime;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DeathPlayback.GameReplay.Object
	DeathReplayData DeathReplayData;//[Offset: 0x230, Size: 0x108]
	DeathPlayCameraShot* DeathPlayCameraShot;//[Offset: 0x338, Size: 0x8]
	void SetMurderInfo();// 0x5e77ad0
	void PlayCollectReplay(FString DemoName);// 0x5e77a28
	void OnKillOrPutDownMessageEvent();// 0x5e77a14
	void OnDeathEvent(STExtraBaseCharacter* BaseCharacter);// 0x5e77998
	void OnClientObserveCharacterEvent();// 0x5e77984
	bool IsSwitchedOffByDevice();// 0x5e7794c
	bool IsNewDeathReplay();// 0x5e77914
	bool HaveRecordingData_New();// 0x5e778dc
	FString GetReplayTargetName();// 0x5e77838
	STExtraPlayerCharacter* GetDeadCharacter();// 0x5e77804
	BattleDeathPlaybackInfo GetBattleDeathPlaybackInfo();// 0x5e777d0
	void GetAllCollectReplay(out FString[] OutCollectReplayList);// 0x5e776bc
<----------Generated by SSpawner v1.0.4---------->


Class: DeathPlayCameraShot.Actor.Object
	FString LuaFilePath;//[Offset: 0x458, Size: 0x10]
	void StopCameraShot();// 0x5e7883c
	void StartCameraShot(PlayerController* PlayerController);// 0x5e787b8
<----------Generated by SSpawner v1.0.4---------->


Class: CompletePlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0x2b0, Size: 0x28]
	UAEUserWidget* ReplayUI;//[Offset: 0x2d8, Size: 0x8]
	int MaxHoursForKeepingFiles;//[Offset: 0x2e0, Size: 0x4]
	bool isUsingAssumedName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	bool bUsingMapPlayerItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1]
	FString[] ExcludedGameModes;//[Offset: 0x2e8, Size: 0x10]
	int EnableCheckpointConfig;//[Offset: 0x2f8, Size: 0x4]
	float CheckpointUploadDelayConfig;//[Offset: 0x2fc, Size: 0x4]
	float CheckpointSaveMaxMSPerFrameConfig;//[Offset: 0x300, Size: 0x4]
	int[] DelayStopRecordingGameModes;//[Offset: 0x308, Size: 0x10]
	float DelayStopRecordingTime;//[Offset: 0x318, Size: 0x4]
	int DefaultCompressionFlag;//[Offset: 0x31c, Size: 0x4]
	int NewCompressionFlag;//[Offset: 0x320, Size: 0x4]
	int OodleCompressor;//[Offset: 0x324, Size: 0x4]
	int Oodlelevel;//[Offset: 0x328, Size: 0x4]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1]
	uint32[] TeammateKeyArray;//[Offset: 0x340, Size: 0x10]
	byte TlogBatchVersion;//[Offset: 0x350, Size: 0x1]
	int64 TlogBatchMaxSize;//[Offset: 0x358, Size: 0x8]
	uint32 SendTlogInterval;//[Offset: 0x368, Size: 0x4]
	RecordTlogBatch RecordTlogBatch;//[Offset: 0x370, Size: 0x18]
	bool bUseWeseeStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	FString RecordTargetUID;//[Offset: 0x390, Size: 0x10]
	int RecordTargetTeamID;//[Offset: 0x3a0, Size: 0x4]
	<FString,uint32> ReportSequenceMap;//[Offset: 0x548, Size: 0x50]
	int StrategyRecordMaxSizeInByte;//[Offset: 0x598, Size: 0x4]
	void SetNewCompressionFlag(int InFlag);// 0x5e4f79c
	void SetForceAllowFreeView(bool bInValue);// 0x5e4f718
	bool PlayDemoWithFilename(FString DemoName);// 0x5e4f65c
	void OnPlayerKilledOthersPlayer(out const FatalDamageParameter FatalDamageParameter);// 0x5e4f550
	bool LoadKillInfo();// 0x5e4f518
	FString GetStrategyNameByID(const int ID);// 0x5e4f424
	bool GetShowOrHideUIForAntiCheat();// 0x5e4f3ec
	FString GetRealNameByUID(FString PlayerUID);// 0x5e4f2d0
	FString GetDemoPlayTime();// 0x5e4f22c
	float GetCurrentTimeInReplay();// 0x5e4f1f8
	FString DecryptWeirdString(out FString InStr);// 0x5e4f0cc
	void AddStrategyRecord(FString UID, const int StrategyTypeInReplay, out const SingleStrategyRecordInReplay InSingleStrategyRecordInReplay);// 0x5e4ef94
<----------Generated by SSpawner v1.0.4---------->


Class: WonderfulPlayback.GameReplay.Object
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	enum WonderfulPlayType;//[Offset: 0x233, Size: 0x1]
	void SetWonderfulPlayType(enum InWonderfulPlayType);// 0x637ed30
	bool PlayReplayMemory();// 0x637ecf8
	bool PlayReplayFile(FString DemoName);// 0x637ec3c
	bool PlayReplayAgain();// 0x637ec04
	bool IsSwitchedOffByDevice();// 0x637ebcc
	void GetUserWonderfulList(out FString[] OutWonderfulList, FString InRoleId);// 0x637ea48
	uint64 GetTargetUID();// 0x637ea14
	FString GetTargetPlayerName();// 0x637e970
	FString GetTargetOpenID();// 0x637e8cc
	uint64 GetTargetGameID();// 0x637e898
	FString GetReplayFileNamePart();// 0x637e7f4
	WonderfulTypeInfo GetCurWonderfulTypeInfo();// 0x637e748
	void GetAllWonderfulList(out FString[] OutWonderfulList);// 0x637e634
	void FetchBattleWonderfulInfo();// 0x637e620
	uint64[] DecryptFileName(FString DemoFullPathName);// 0x637e504
	FString BPGetTargetUID();// 0x637e460
	FString BPGetTargetGameID();// 0x637e3bc
	enum AnalysizeReplayFile(FString InReplayFileName);// 0x637e304
	LobbyWonderfulInfo AnalysizeInfoFile(FString InInfoFileName);// 0x637e228
<----------Generated by SSpawner v1.0.4---------->


Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x28, Size: 0x10]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0, Size: 0x10]
	int bUseFeatureSet;//[Offset: 0x10, Size: 0x4]
	FString[] ExcludeComponentsList_DS;//[Offset: 0x18, Size: 0x10]
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x28, Size: 0x10]
	FString[] ExcludeComponentsList_Team;//[Offset: 0x38, Size: 0x10]
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x48, Size: 0x10]
	FString[] ExcludeComponentsList_DSAI;//[Offset: 0x58, Size: 0x10]
	FString[] ExcludeComponentsList_DSMLAI;//[Offset: 0x68, Size: 0x10]
	FString[] ExcludeComponentsList_ClientAI;//[Offset: 0x78, Size: 0x10]
	FString[] ExcludeComponentsList_Standalone;//[Offset: 0x88, Size: 0x10]
	FString[] ExcludeComponentsList_StandaloneAI;//[Offset: 0x98, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: FeatureSetItem
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarItemDownload.Object
	int DisableInBattleThreshold;//[Offset: 0x28, Size: 0x4]
	void StartDownloadItem(uint32 ItemId, uint32 Priority, delegate OnItemDownloadDelegate);// 0x5d9a184
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x5d99fb0
	void SetDisableInBattleThreshold(uint32 InThreshold);// 0x5d99f2c
	int GetDisableInBattleThreshold();// 0x5d99ef0
<----------Generated by SSpawner v1.0.4---------->


Class: FadeDynamicStyleInfo
<----------Generated by SSpawner v1.0.4---------->


Class: CreativeModeGlobalManagerCenter.Object
	STExtraGameInstance* OuterInstance;//[Offset: 0x38, Size: 0x8]
	STExtraManagerBase*[] ManagerArray;//[Offset: 0x40, Size: 0x10]
	class STExtraManagerBase[] ManagerClassArray;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraManagerBase.Object
	World* CacheWorld;//[Offset: 0xf0, Size: 0x8]
	float NetUpdateFrequency;//[Offset: 0xf8, Size: 0x4]
	bool ReceiveTick(float DeltaSeconds);// 0x70644c4
	bool ReceiveIsDedicatedServer();// 0x6194b6c
	bool ReceiveHasAuthority();// 0x6194b34
	bool ReceiveDoUnInit();// 0x70644c4
	bool ReceiveDoPostInit();// 0x70644c4
	bool ReceiveDoInitByPhase();// 0x70644c4
	bool ReceiveDoInit();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	void ClientRPC_TryJoinDance(Actor* ClientRPC_TryJoinDance_param1, int ClientRPC_TryJoinDance_param2);// 0x9f84450
	void ClientRPC_FailedToJoinDance(int ClientRPC_FailedToJoinDance_param1);// 0x9f84450
	void #[FeatureRPC(CoopEmoteCharFeature.RPC_Client_LocalInteruptPlayEmote)](uint32 #[FeatureRPC(CoopEmoteCharFeature.RPC_Client_LocalInteruptPlayEmote)]_param1);// 0x9f84450
	void ServerRPC_FailPreJoinDance(Actor* ServerRPC_FailPreJoinDance_param1);// 0x9f84450
	void #[FeatureRPC(CoopEmoteCharFeature.RPC_Server_BreakCoopEmote)](uint32 #[FeatureRPC(CoopEmoteCharFeature.RPC_Server_BreakCoopEmote)]_param1, int #[FeatureRPC(CoopEmoteCharFeature.RPC_Server_BreakCoopEmote)]_param2);// 0x9f84450
	void #[FeatureRPC(CharacterAvatarFeature.RPC_ServerSetSelfForceHideState)](int #[FeatureRPC(CharacterAvatarFeature.RPC_ServerSetSelfForceHideState)]_param1, bool #[FeatureRPC(CharacterAvatarFeature.RPC_ServerSetSelfForceHideState)]_param2);// 0x9f84450
	void #[FeatureRPC(CarryBackFeature.RPC_ServerManualBreakCarryBackState)]();// 0x9f84450
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6460, Size: 0x8]
	void ChangeParticleEffect(ParticleSystemComponent* Particle, Vector 3DScale, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void SpawnEmitterEffect(Vector RelativeLocation, ParticleSystem* PSRef, SceneComponent* AttachParent, Vector RelativeScale, float ParticleLifeTime, Transform CallFunc_MakeTransform_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttachedWithMgr_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, ScreenAppearanceActor* CallFunc_GetScreenAppearanceManager_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ScreenAppearanceProvider* CallFunc_PlayDefaultScreenAppearance_ReturnValue, bool CallFunc_IsValid_ReturnValue2, ScreenAppearanceProvider_Particle* K2Node_DynamicCast_AsScreen_Appearance_Provider_Particle, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue3, ScreenAppearanceProvider* CallFunc_PlayDefaultScreenAppearance_ReturnValue2, bool CallFunc_IsValid_ReturnValue4, ScreenAppearanceProvider_Particle* K2Node_DynamicCast_AsScreen_Appearance_Provider_Particle2, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_IsValid_ReturnValue5);// 0x70644c4
	FString GetEmoteHandlePath(int ItemId, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x70644c4
	void Replay_IsEnemyFrameUIExisted(out bool bIsExisted, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void HandleOnLanded(float ForceLandTime, bool CallFunc_GetAnimParamAlwaysLandLight_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	void GetGameModeState(out FName CurModeState, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, FName CallFunc_GetGameModeState_ReturnValue);// 0x70644c4
	void CallTryVault(bool bTryEnter);// 0x70644c4
	void SetTpCameraFov(float FOV, float CallFunc_NormalizeAxis_ReturnValue, float CallFunc_ClampAngle_ReturnValue);// 0x70644c4
	void OnRep_Cache(ForceStill)();// 0x70644c4
	void SetCapsuleParentBounds(bool UseParentBounds);// 0x70644c4
	void ClearDecalBakingRTCache(GameStateBase* CallFunc_GetGameState_ReturnValue, DecalBakingActorMgr* CallFunc_GetWorldInstance_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HasAuthority_ReturnValue);// 0x70644c4
	bool IsAngledSightAvailable(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue2, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x70644c4
	void RefreshAngledSightUI(bool HaveAngledSight, bool IsAngledSight, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void ShowAngledSightState(bool IsAngled, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x70644c4
	void GetAngledSightRotator(STExtraShootWeapon* NewParam, out Rotator NewParam1, int CallFunc_GetWeaponID_ReturnValue, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetWeaponReuseConfigTarget_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, FString CallFunc_Conv_RotatorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x70644c4
	void AngledSightAnimLogic(byte Selection, STExtraShootWeapon* ShootWeapon, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_GetAngledSightRotator_NewParam1, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_HaveAngledSight_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, DollyZoomParam CallFunc_UpdateScopeCameraOffsets_Param, float CallFunc_GetScopeFov_ReturnValue, DollyZoomParam K2Node_MakeStruct_DollyZoomParam, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2);// 0x70644c4
	void AngledSightAnimUpdate(float InputPin, bool bIsOnlyTurn, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue, bool CallFunc_IsAngledSightAvailable_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue2, Vector CallFunc_VLerp_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsAngledSight_ReturnValue, float CallFunc_SwitchSightConfigMaterial_ReturnValue, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue, bool CallFunc_IsValid_ReturnValue3, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, DollyZoomParam K2Node_MakeStruct_DollyZoomParam, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsAngledSight_ReturnValue2, Rotator CallFunc_RLerp_ReturnValue);// 0x70644c4
	void Replay_CreateEnemyFrameUI(bool isPlayingCompletePlayback, bool is enemy, bool CallFunc_BooleanAND_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialBillboardComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x70644c4
	void Replay_SetVisiableOfFrameUI(bool is Visiable, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void UpdateEmoteWeaponIdInfo(int ID, out bool Ret, int Length, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, STExtraWeapon*[] CallFunc_GetAllInventoryWeaponList_ReturnValue, int CallFunc_Array_Length_ReturnValue, STExtraWeapon* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x70644c4
	void AllowWater(out bool bCanEnter, bool CallFunc_CanEnterWaterArea_ReturnValue);// 0x70644c4
	bool ShouldRedBlood(bool CallFunc_GetRedBloodSwitch_ReturnValue);// 0x70644c4
	void CheckHasVehicleAvatar(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* PlayerCharacter, out int InItemID, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x70644c4
	void ChangeCurVehicleAvatar(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* CallFunc_GetDriver_ReturnValue, STExtraBaseCharacter* CallFunc_GetDriver_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsDedicatedServer_ReturnValue, STExtraPlayerController* CallFunc_GetController_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsDriver_ReturnValue);// 0x70644c4
	void HandleOnChangedVehicleSeat(STExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue);// 0x70644c4
	void GetMasterBoneComponent(out MeshComponent* MasterBoneComponent);// 0x70644c4
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x70644c4
	void GetGrenadeCameraShakeByDir(Vector ImpulseDir, out class CameraShake RetVar, class CameraShake RetVar, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue3, Vector CallFunc_Normal_ReturnValue3, FString CallFunc_Conv_VectorToString_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x70644c4
	BackpackEmoteHandle* GetEmoteHandle(int ItemId, BP_STExtraPlayerController_C* PC, int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, BackpackEmoteHandle* K2Node_DynamicCast_AsBackpack_Emote_Handle, bool K2Node_DynamicCast_bSuccess2, BackpackEmoteHandle* CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x70644c4
	FString GetShootWeaponNameByWeapon(int ItemDefineID, FString CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x70644c4
	CameraComponent* GetThirdPersonCamera();// 0x70644c4
	SpringArmComponent* GetThirdPersonSpringArm();// 0x70644c4
	CameraComponent* GetFPPCamera();// 0x70644c4
	SpringArmComponent* GetFPPSpringArm();// 0x70644c4
	CameraComponent* GetFirstPersonCamera();// 0x70644c4
	SpringArmComponent* GetFirstPersonSpringArm();// 0x70644c4
	CameraComponent* GetScopeCamera();// 0x70644c4
	SpringArmComponent* GetScopeSpringArm();// 0x70644c4
	ActorComponent*[] GetNonSimulatedComponents_OnFighting(ActorComponent*[] K2Node_MakeArray_Array);// 0x70644c4
	bool ShouldAutoScopeWhenPeek(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates(ActorComponent*[] K2Node_MakeArray_Array);// 0x70644c4
	void GetControllerViewCamera(out CameraComponent* Camera, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_GetViewTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, CameraComponent*[] CallFunc_GetComponentsByClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, CameraComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x70644c4
	ActorComponent*[] GetNonSimulatedComponents(ActorComponent* Components, ActorComponent*[] K2Node_MakeArray_Array);// 0x70644c4
	ActorComponent*[] GetNonDedicatedComponents(ActorComponent*[] Components, ActorComponent*[] K2Node_MakeArray_Array, ActorComponent*[] K2Node_MakeArray_Array2);// 0x70644c4
	void HandleOnDetachedVehicle(STExtraVehicleBase* NewParam, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x70644c4
	void HandleOnAttachedVehicle(STExtraVehicleBase* InVehicle, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	SpringArmComponent* GetActiveSpringArm(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x70644c4
	void AimInterupted(Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x70644c4
	void GetWeapon(out Vector NewParam, out Rotator NewParam1, out bool bHaveWeapon, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x70644c4
	void ClientHandlePreOnPlane(bool CallFunc_SwitchPoseState_ReturnValue);// 0x70644c4
	void ResetBPCameraSetting();// 0x70644c4
	void ShowDebugArrow(SceneComponent* self2, Rotator InRot, LinearColor Color, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x70644c4
	void IsAutonomous(out bool NewParam, bool CallFunc_HasAuthority_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	void PickUp(PickUpWrapperActor* NewParam);// 0x70644c4
	void DoPickUpTarget();// 0x70644c4
	void RotateMesh(Rotator NewParam, Rotator NewLocalVar, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x70644c4
	void SetAllCollisionEnabled(bool bEnable);// 0x70644c4
	void MoveOutScope();// 0x70644c4
	void MoveInScope(bool bHasSetMesh);// 0x70644c4
	void Reload(bool CallFunc_ReloadCurrentWeapon_ReturnValue);// 0x70644c4
	void SwitchCrouch(byte NewParam, byte preState, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess);// 0x70644c4
	void UserConstructionScript(CameraComponent* Temp_object_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Add_ReturnValue5, int CallFunc_Array_Add_ReturnValue6);// 0x70644c4
	void ParachuteCamBlend__FinishedFunc();// 0x70644c4
	void ParachuteCamBlend__UpdateFunc();// 0x70644c4
	void LerpAlpha__FinishedFunc();// 0x70644c4
	void LerpAlpha__UpdateFunc();// 0x70644c4
	void ScopeTimeline__FinishedFunc();// 0x70644c4
	void ScopeTimeline__UpdateFunc();// 0x70644c4
	void AngledSigntTimeline__FinishedFunc();// 0x70644c4
	void AngledSigntTimeline__UpdateFunc();// 0x70644c4
	void RearSightTimeline__FinishedFunc();// 0x70644c4
	void RearSightTimeline__UpdateFunc();// 0x70644c4
	void TurnLerpAlpha__FinishedFunc();// 0x70644c4
	void TurnLerpAlpha__UpdateFunc();// 0x70644c4
	void InpActEvt_T_K2Node_InputKeyEvent(Key Key);// 0x70644c4
	void InpActEvt_F_K2Node_InputKeyEvent(Key Key);// 0x70644c4
	void InpActEvt_F_K2Node_InputKeyEvent(Key Key);// 0x70644c4
	void CE(ForceStill)(bool ForceStill);// 0x70644c4
	void CE(ForceStill(ServerOnly))(bool ForceStill);// 0x70644c4
	void OnPetOwnerPossessed();// 0x70644c4
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x70644c4
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x70644c4
	void ReloadEvent();// 0x70644c4
	void OnEquipWeapon(byte Slot);// 0x70644c4
	void SwitchCamera(STR_CameraSetting CameraSetting);// 0x70644c4
	void OnNotifyHurt();// 0x70644c4
	void NotifyPickUp(bool bIsAvailable);// 0x70644c4
	void OnLanded(out const HitResult Hit);// 0x70644c4
	void OnPoseStateChange(byte LastState, byte CurState);// 0x70644c4
	void K2_UpdateCustomMovement(float DeltaTime);// 0x70644c4
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x70644c4
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser, byte DamageEventType);// 0x70644c4
	void ParachuteOnWater();// 0x70644c4
	void NotifyTombBox(bool bIsAvailable);// 0x70644c4
	void DoAutoReloadCurrentWeapon();// 0x70644c4
	void OnUnEquipWeapon();// 0x70644c4
	void BPResetCharacter();// 0x70644c4
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x70644c4
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x70644c4
	void ScopeInStop();// 0x70644c4
	void PlayScopeInTimeline(float rate);// 0x70644c4
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x70644c4
	void ReceivePossessed(Controller* NewController);// 0x70644c4
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x70644c4
	void OnWeaponEquipmentUpdate();// 0x70644c4
	void BindAndExecStateChanged();// 0x70644c4
	void StateEnterHandler_Event(enum State);// 0x70644c4
	void OnHitByCake();// 0x70644c4
	void EnablePet(bool Enable);// 0x70644c4
	void OnEnterStateForBp(enum State);// 0x70644c4
	void OnLeaveStateForBp(enum State);// 0x70644c4
	void ReceiveDestroyed();// 0x70644c4
	void PawnVaultServerStopCheckBluePrint();// 0x70644c4
	void PawnVaultStopBluePrint();// 0x70644c4
	void OnMiniTreeTriggerServerLogicCPP();// 0x70644c4
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x70644c4
	void DoAngledSight(bool IsPush);// 0x70644c4
	void DoNormalSight(bool IsPush);// 0x70644c4
	void StopSwitchAngledSight();// 0x70644c4
	void CustomEvent(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x70644c4
	void CustomEvent(bool bIsBegin);// 0x70644c4
	void CustomEvent();// 0x70644c4
	void OnBPStateCheckIn();// 0x70644c4
	void DynamicHoldGun(bool BoolValue);// 0x70644c4
	void LuaReceiveBeginPlay();// 0x70644c4
	void SwitchRearSight(int PrevIndex, int NewIndex, Rotator AngleRotator);// 0x70644c4
	void BPOnRespawned();// 0x70644c4
	void RemoveRemainingCameraBlood(int SeatType);// 0x70644c4
	void StopTurningInPlace();// 0x70644c4
	void TurnInPlace(Rotator TurnInPlaceStart, Rotator TurnInPlaceTarget, CurveFloat* Curve, AnimMontage* TurnAnimation);// 0x70644c4
	void ExecuteUbergraph_BP_PlayerPawn(int EntryPoint, bool K2Node_CustomEvent_ForceStill2, bool K2Node_CustomEvent_ForceStill, bool CallFunc_Not_PreBool_ReturnValue, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, Controller* K2Node_Event_Killer, Actor* K2Node_Event_DamageCauser3, HitResult K2Node_Event_KillingHitInfo, Vector K2Node_Event_KillingHitImpulseDir, class DamageType K2Node_Event_KillingHitDamageType, byte K2Node_Event_slot, delegate K2Node_CreateDelegate_OutputDelegate2, STExtraShootWeapon* CallFunc_GetShootWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue3, STR_CameraSetting K2Node_CustomEvent_CameraSetting, bool CallFunc_isAutonomous_NewParam, int CallFunc_PostEvent_ReturnValue, int CallFunc_PostEvent_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue, bool K2Node_CustomEvent_bIsAvailable2, HitResult K2Node_Event_Hit, FString CallFunc_Conv_BoolToString_ReturnValue, byte Temp_byte_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, byte K2Node_Event_LastState, byte K2Node_Event_CurState, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue3, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, byte Temp_byte_Variable2, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Event_DeltaTime, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, bool Temp_bool_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType2, Controller* K2Node_Event_InstigatedBy2, Actor* K2Node_Event_DamageCauser2, byte K2Node_Event_DamageEventType, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, bool CallFunc_Greater_FloatFloat_ReturnValue, bool K2Node_CustomEvent_bIsAvailable, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, Controller* CallFunc_GetController_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, int CallFunc_PostEvent_ReturnValue3, int CallFunc_PostEvent_ReturnValue4, bool K2Node_SwitchEnum_CmpSuccess, Controller* CallFunc_GetController_ReturnValue3, bool CallFunc_ShouldUpdateHPOnUI_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess3, bool K2Node_SwitchEnum2_CmpSuccess, Controller* CallFunc_GetController_ReturnValue4, int CallFunc_PostEvent_ReturnValue5, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess4, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsLocalControlOrView_ReturnValue, CameraComponent* CallFunc_GetControllerViewCamera_Camera, bool CallFunc_IsValid_ReturnValue6, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess5, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess6, float K2Node_Event_dis2, float K2Node_Event_height2, float K2Node_Event_length2, FString K2Node_Event_VaultKey2, Vector K2Node_Event_startPos2, Actor* K2Node_Event_checkActor2, float K2Node_Event_crossblockMaxFall2, float K2Node_Event_crossblockMaxDis2, Vector K2Node_Event_hitpoint2, Actor* K2Node_Event_WindowActor, Rotator K2Node_Event_movedir2, delegate K2Node_CreateDelegate_OutputDelegate5, float K2Node_Event_dis, float K2Node_Event_height, float K2Node_Event_length, FString K2Node_Event_VaultKey, Vector K2Node_Event_startPos, Actor* K2Node_Event_checkActor, float K2Node_Event_crossblockMaxFall, float K2Node_Event_crossblockMaxDis, Vector K2Node_Event_hitpoint, Rotator K2Node_Event_movedir, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AkComponent* CallFunc_GetAkComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue8, bool CallFunc_IsValid_ReturnValue9, bool CallFunc_HaveAngledSightBySlot_ReturnValue, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue, FString CallFunc_GetPlayerKey_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, float K2Node_CustomEvent_Rate, bool CallFunc_IsValid_ReturnValue10, bool CallFunc_IsValid_ReturnValue11, int Temp_int_Loop_Counter_Variable, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue3, bool CallFunc_IsValid_ReturnValue12, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, delegate K2Node_CreateDelegate_OutputDelegate6, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue4, bool CallFunc_IsValid_ReturnValue13, delegate K2Node_CreateDelegate_OutputDelegate7, Key Temp_struct_Variable, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key2, float K2Node_Event_DamageReceived, const DamageType* K2Node_Event_DamageType, Vector K2Node_Event_Origin, float K2Node_Event_Radius, HitResult K2Node_Event_HitInfo, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, Vector K2Node_Event_ImpulseDir, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, class CameraShake CallFunc_GetGrenadeCameraShakeByDir_RetVar, bool CallFunc_IsValid_ReturnValue14, CameraShake* CallFunc_PlayCameraShake_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess7, Controller* K2Node_Event_NewController, bool CallFunc_IsValid_ReturnValue15, bool CallFunc_IsValid_ReturnValue16, AkAudioEvent* K2Node_Event_LocalAkEvent, AkAudioEvent* K2Node_Event_RemoteAkEvent, bool CallFunc_IsValid_ReturnValue17, int CallFunc_PostAkEvent_ReturnValue, bool CallFunc_IsValid_ReturnValue18, int CallFunc_PostAkEvent_ReturnValue2, bool Temp_bool_IsClosed_Variable, bool CallFunc_IsLocalControlOrView_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue2, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_IsValid_ReturnValue19, Actor* CallFunc_GetOwner_ReturnValue, Key K2Node_InputKeyEvent_Key3, STExtraVehicleBase* K2Node_DynamicCast_AsSTExtra_Vehicle_Base, bool K2Node_DynamicCast_bSuccess8, bool CallFunc_IsValid_ReturnValue20, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate8, bool CallFunc_ShouldRedBlood_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue5, bool CallFunc_IsValid_ReturnValue21, enum K2Node_CustomEvent_state, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue6, bool CallFunc_AllowWater_bCanEnter, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller6, bool K2Node_DynamicCast_bSuccess9, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsLocalControlOrView_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue2, CameraComponent* CallFunc_GetControllerViewCamera_Camera2, bool CallFunc_Not_PreBool_ReturnValue3, bool CallFunc_IsValid_ReturnValue22, bool CallFunc_BooleanAND_ReturnValue2, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool K2Node_Event_Enable, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess10, bool CallFunc_IsObserver_ReturnValue, bool CallFunc_IsShowBlood_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_IsValid_ReturnValue23, bool CallFunc_BooleanAND_ReturnValue4, enum K2Node_Event_State2, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, bool CallFunc_IsValid_ReturnValue24, enum K2Node_Event_State, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, bool CallFunc_IsValid_ReturnValue25, Controller* CallFunc_GetController_ReturnValue5, bool CallFunc_IsAngledSight_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller7, bool K2Node_DynamicCast_bSuccess11, bool CallFunc_Not_PreBool_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue5, bool CallFunc_IsValid_ReturnValue26, bool CallFunc_IsAngledSight_ReturnValue2, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, byte K2Node_Event_type, bool K2Node_Event_IsOnlyTurn, bool CallFunc_K2_AttachToComponent_ReturnValue, bool K2Node_CustomEvent_IsPush2, Controller* CallFunc_GetController_ReturnValue6, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller8, bool K2Node_DynamicCast_bSuccess12, bool CallFunc_Not_PreBool_ReturnValue5, bool K2Node_SwitchInteger2_CmpSuccess, int CallFunc_PostEvent_ReturnValue6, bool CallFunc_IsValid_ReturnValue27, bool CallFunc_IsValid_ReturnValue28, bool CallFunc_IsAngledSight_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue6, bool CallFunc_Not_PreBool_ReturnValue7, bool CallFunc_IsValid_ReturnValue29, bool CallFunc_IsAngledSight_ReturnValue4, bool K2Node_CustomEvent_IsPush, bool CallFunc_IsValid_ReturnValue30, bool CallFunc_Not_PreBool_ReturnValue8, Controller* CallFunc_GetController_ReturnValue7, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller9, bool K2Node_DynamicCast_bSuccess13, bool CallFunc_IsValid_ReturnValue31, bool K2Node_SwitchInteger3_CmpSuccess, bool CallFunc_IsAngledSight_ReturnValue5, bool CallFunc_IsValid_ReturnValue32, bool CallFunc_IsAngledSight_ReturnValue6, bool CallFunc_IsValid_ReturnValue33, bool CallFunc_Not_PreBool_ReturnValue9, bool CallFunc_IsAngledSight_ReturnValue7, bool CallFunc_IsValid_ReturnValue34, bool CallFunc_BooleanAND_ReturnValue6, bool CallFunc_IsValid_ReturnValue35, bool CallFunc_IsAngledSight_ReturnValue8, bool CallFunc_Not_PreBool_ReturnValue10, bool Temp_bool_Has_Been_Initd_Variable2, bool CallFunc_BooleanAND_ReturnValue7, int CallFunc_PostEvent_ReturnValue7, bool CallFunc_IsAngledSightAvailable_ReturnValue, bool CallFunc_IsValid_ReturnValue36, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_IsAngledSight_ReturnValue9, bool CallFunc_IsAngledSightAvailable_ReturnValue2, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2, bool CallFunc_K2_AttachToComponent_ReturnValue2, bool CallFunc_IsValid_ReturnValue37, bool CallFunc_IsAngledSight_ReturnValue10, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue9, STExtraShootWeapon* K2Node_CustomEvent_weapon, enum K2Node_CustomEvent_type, bool K2Node_CustomEvent_bEquip, bool CallFunc_IsAngledSightBySlot_ReturnValue, byte K2Node_Select_Default, bool CallFunc_EqualEqual_ByteByte_ReturnValue8, Controller* CallFunc_GetController_ReturnValue8, bool K2Node_CustomEvent_bIsBegin, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess14, Controller* CallFunc_GetController_ReturnValue9, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller10, bool K2Node_DynamicCast_bSuccess15, bool CallFunc_IsValid_ReturnValue38, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue11, bool CallFunc_IsValid_ReturnValue39, bool CallFunc_BooleanAND_ReturnValue10, bool CallFunc_IsAngledSight_ReturnValue11, bool CallFunc_HaveAngledSight_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue11, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_BooleanAND_ReturnValue12, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue13, bool Temp_bool_IsClosed_Variable2, bool CallFunc_IsValid_ReturnValue40, bool CallFunc_IsValid_ReturnValue41, bool CallFunc_IsAngledSight_ReturnValue13, bool CallFunc_HaveAngledSight_ReturnValue2, bool K2Node_CustomEvent_BoolValue, FString CallFunc_GetPlayerNameSafety_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, Controller* CallFunc_GetControllerSafety_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue3, bool CallFunc_IsValid_ReturnValue42, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller11, bool K2Node_DynamicCast_bSuccess16, int K2Node_CustomEvent_PrevIndex, int K2Node_CustomEvent_NewIndex, Rotator K2Node_CustomEvent_AngleRotator, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue43, FName CallFunc_GetRearSightSocket_ReturnValue, FName CallFunc_GetRearSightSocket_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue44, bool CallFunc_IsValid_ReturnValue45, bool CallFunc_IsValid_ReturnValue46, delegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_IsLocalControlorView_ReturnValue4, bool CallFunc_EnterState_ReturnValue, bool CallFunc_BooleanAND_ReturnValue14, FName CallFunc_GetGameModeState_CurModeState, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue3, PlayerController* CallFunc_GetPlayerController_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue12, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess17, bool CallFunc_BooleanOR_ReturnValue4, int K2Node_CustomEvent_SeatType, bool CallFunc_IsDedicatedServer_ReturnValue4, SceneComponent*[] CallFunc_GetChildrenComponents_Children, bool CallFunc_Not_PreBool_ReturnValue13, SceneComponent* CallFunc_Array_Get_Item, ParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess18, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue3, byte CallFunc_GetRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue9, bool CallFunc_IsLocalControlorView_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue14, bool CallFunc_K2_AttachToComponent_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue15, bool CallFunc_BooleanOR_ReturnValue5, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue16, FString CallFunc_GetCurrentLanguage_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue17, bool CallFunc_BooleanAND_ReturnValue18, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, FName Temp_name_Variable, delegate K2Node_CreateDelegate_OutputDelegate10, Rotator K2Node_CustomEvent_TurnInPlaceStart, Rotator K2Node_CustomEvent_TurnInPlaceTarget, CurveFloat* K2Node_CustomEvent_Curve, AnimMontage* K2Node_CustomEvent_TurnAnimation, float CallFunc_PlayAnimMontage_ReturnValue, float CallFunc_GetTimeRange_MinTime, float CallFunc_GetTimeRange_MaxTime, FName Temp_name_Variable2, Rotator CallFunc_RLerp_ReturnValue, bool Temp_bool_Variable2, const TemBPDataAddr[] K2Node_MakeArray_Array, FName K2Node_Select2_Default, bool CallFunc_EqualEqual_NameName_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate11);// 0x70644c4
	void OnTriggerVault__DelegateSignature(bool bTryEnter);// 0x70644c4
	void OnCakePlacement__DelegateSignature(bool Success);// 0x70644c4
	void UnequipWeaponComplete__DelegateSignature();// 0x70644c4
	void EquipWeaponComplete__DelegateSignature();// 0x70644c4
	UAEChaCustomAnimListComponent* CustomAnimListComp;//[Offset: 0x6468, Size: 0x8]
	CharacterBoundCapsuleComonent* MeshBoundCapsuleComonent;//[Offset: 0x6470, Size: 0x8]
	DynamicOptimizeCharacterComps_C* DynamicOptimizeCharacterComps;//[Offset: 0x6478, Size: 0x8]
	BP_CharacterCarryBackComp_C* BP_CharacterCarryBackComp;//[Offset: 0x6480, Size: 0x8]
	BuildSystemComp_BP_C* BuildSystemComp_BP;//[Offset: 0x6488, Size: 0x8]
	BP_SkillManagerComponent_C* BP_SkillManagerComponent;//[Offset: 0x6490, Size: 0x8]
	CustomCameraComponent* Camera;//[Offset: 0x6498, Size: 0x8]
	CapsuleComponent* ShareBounds;//[Offset: 0x64a0, Size: 0x8]
	ChildActorComponent* BP_PaintDecalDetectLine1;//[Offset: 0x64a8, Size: 0x8]
	CharacterAnimList_Skill_C* CharacterAnimList_Skill;//[Offset: 0x64b0, Size: 0x8]
	CharacterAnimList_Parachute_C* CharacterAnimList_Parachute;//[Offset: 0x64b8, Size: 0x8]
	StaticMeshComponent* Scope;//[Offset: 0x64c0, Size: 0x8]
	PostProcessComponent* PostProcess;//[Offset: 0x64c8, Size: 0x8]
	SpringArmComponent* ShoulderCameraSpringArm;//[Offset: 0x64d0, Size: 0x8]
	SceneComponent* ShoulderCameraOffset;//[Offset: 0x64d8, Size: 0x8]
	CharacterAnimList_Base_C* CharacterAnimList_Base;//[Offset: 0x64e0, Size: 0x8]
	SplineComponent* PetParachuteSpline;//[Offset: 0x64e8, Size: 0x8]
	PetComponent_BP_C* PetComponent_BP;//[Offset: 0x64f0, Size: 0x8]
	CharacterAvatarComp2_BP_C* CharacterAvatarComp2_BP;//[Offset: 0x64f8, Size: 0x8]
	StaticMeshComponent* ScopeStaticMesh;//[Offset: 0x6500, Size: 0x8]
	ObserverCameraComponent* ObserverCameraFPPMode;//[Offset: 0x6508, Size: 0x8]
	FPPSpringArmComponent* FPPSpringArm;//[Offset: 0x6510, Size: 0x8]
	FPPComponent_C* FPPComponent;//[Offset: 0x6518, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x6520, Size: 0x8]
	CameraComponent* ScopingCamera;//[Offset: 0x6528, Size: 0x8]
	SpringArmComponent* ScopingSpringArm;//[Offset: 0x6530, Size: 0x8]
	CapsuleComponent* HitBox_Prone;//[Offset: 0x6538, Size: 0x8]
	CapsuleComponent* HitBox_Stand;//[Offset: 0x6540, Size: 0x8]
	Vault_Controller_C* Vault_Controller;//[Offset: 0x6548, Size: 0x8]
	BP_SwimController_C* BP_SwimController;//[Offset: 0x6550, Size: 0x8]
	BP_AutoAimingComponent_C* BP_AutoAimingComponent;//[Offset: 0x6558, Size: 0x8]
	CharacterWeaponManagerComponent* CharacterWeaponManager;//[Offset: 0x6560, Size: 0x8]
	PickupManagerComponent* PickupManager;//[Offset: 0x6568, Size: 0x8]
	SceneComponent* CameraRoot;//[Offset: 0x6570, Size: 0x8]
	CustomSpringArmComponent* CustomSpringArm;//[Offset: 0x6578, Size: 0x8]
	CameraSettingComponent_C* CameraSettingComponent;//[Offset: 0x6580, Size: 0x8]
	float RearSightTimeline_RearSightUpdate_B52340D847258BFCFCCDAC8659F0041C;//[Offset: 0x6588, Size: 0x4]
	byte RearSightTimeline__Direction_B52340D847258BFCFCCDAC8659F0041C;//[Offset: 0x658c, Size: 0x1]
	TimelineComponent* RearSightTimeline;//[Offset: 0x6590, Size: 0x8]
	float AngledSigntTimeline_NewTrack_0_1A55FFB84346668215A22AA5D66EFECA;//[Offset: 0x6598, Size: 0x4]
	byte AngledSigntTimeline__Direction_1A55FFB84346668215A22AA5D66EFECA;//[Offset: 0x659c, Size: 0x1]
	TimelineComponent* AngledSigntTimeline;//[Offset: 0x65a0, Size: 0x8]
	float ScopeTimeline_NewTrack_1_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x65a8, Size: 0x4]
	byte ScopeTimeline__Direction_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x65ac, Size: 0x1]
	TimelineComponent* ScopeTimeline;//[Offset: 0x65b0, Size: 0x8]
	float ParachuteCamBlend_Alpha_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x65b8, Size: 0x4]
	byte ParachuteCamBlend__Direction_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x65bc, Size: 0x1]
	TimelineComponent* ParachuteCamBlend;//[Offset: 0x65c0, Size: 0x8]
	float LerpAlpha_LerpAlpha_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x65c8, Size: 0x4]
	byte LerpAlpha__Direction_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x65cc, Size: 0x1]
	TimelineComponent* LerpAlpha;//[Offset: 0x65d0, Size: 0x8]
	float TurnLerpAlpha_Alpha_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x65d8, Size: 0x4]
	byte TurnLerpAlpha__Direction_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x65dc, Size: 0x1]
	TimelineComponent* TurnLerpAlpha;//[Offset: 0x65e0, Size: 0x8]
	MaterialInstanceDynamic* DamageSphereDMI;//[Offset: 0x65e8, Size: 0x8]
	bool bCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65f0, Size: 0x1]
	bool IsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65f1, Size: 0x1]
	float ReloadingCDMax;//[Offset: 0x65f4, Size: 0x4]
	Vector LastInAirVelocityVector;//[Offset: 0x65f8, Size: 0xc]
	Vector VelocityVector;//[Offset: 0x6604, Size: 0xc]
	float Speed;//[Offset: 0x6610, Size: 0x4]
	bool Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6614, Size: 0x1]
	Rotator LastVelocityRotation;//[Offset: 0x6618, Size: 0xc]
	Rotator TurnInPlaceRotation;//[Offset: 0x6624, Size: 0xc]
	Rotator TurnInPlaceStart;//[Offset: 0x6630, Size: 0xc]
	Rotator TurnInPlaceTarget;//[Offset: 0x663c, Size: 0xc]
	bool TurningInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6648, Size: 0x1]
	byte LocomotionState;//[Offset: 0x6649, Size: 0x1]
	bool Jumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664a, Size: 0x1]
	float ProneCameraHeight;//[Offset: 0x664c, Size: 0x4]
	float CameraMoveSpeed;//[Offset: 0x6650, Size: 0x4]
	bool UseFirstPersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6654, Size: 0x1]
	float MeleeAttackRange;//[Offset: 0x6658, Size: 0x4]
	Vector Melee Attack Location;//[Offset: 0x665c, Size: 0xc]
	float MeleeAttackDamage;//[Offset: 0x6668, Size: 0x4]
	byte CurCameraMode;//[Offset: 0x666c, Size: 0x1]
	STR_CameraSetting StandCameraSetting;//[Offset: 0x6670, Size: 0x14]
	Rotator TerreneNormal;//[Offset: 0x6684, Size: 0xc]
	Vector Normal;//[Offset: 0x6690, Size: 0xc]
	PickUpWrapperActor* PickUpTarget;//[Offset: 0x66a0, Size: 0x8]
	bool bIsPicking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66a8, Size: 0x1]
	delegate EquipWeaponComplete;//[Offset: 0x66b0, Size: 0x10]
	delegate UnequipWeaponComplete;//[Offset: 0x66c0, Size: 0x10]
	float CrouchCameraHeight;//[Offset: 0x66d0, Size: 0x4]
	float PickupDelayTime;//[Offset: 0x66d4, Size: 0x4]
	float DefaultCapsuleRadius;//[Offset: 0x66d8, Size: 0x4]
	SkeletalMeshComponent* ParachuteComponent;//[Offset: 0x66e0, Size: 0x8]
	float SwimCameraHeight;//[Offset: 0x66e8, Size: 0x4]
	float SwimTargetRoll;//[Offset: 0x66ec, Size: 0x4]
	float SwimUpRateFix;//[Offset: 0x66f0, Size: 0x4]
	float SwimRotateSpeed;//[Offset: 0x66f4, Size: 0x4]
	bool VaultEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66f8, Size: 0x1]
	ItemDefineID putoffItem;//[Offset: 0x6700, Size: 0x18]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x6718, Size: 0x10]
	bool autoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6728, Size: 0x1]
	SpringArmComponent*[] SpringArms;//[Offset: 0x6730, Size: 0x10]
	CameraComponent*[] Cameras;//[Offset: 0x6740, Size: 0x10]
	SpringArmComponent* CurActiveSpringArm;//[Offset: 0x6750, Size: 0x8]
	bool UseTurniinPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6758, Size: 0x1]
	float ElapseTime;//[Offset: 0x675c, Size: 0x4]
	float SwimRotateX;//[Offset: 0x6760, Size: 0x4]
	SpringArmComponent* NewVar;//[Offset: 0x6768, Size: 0x8]
	byte CurPoseState;//[Offset: 0x6770, Size: 0x1]
	<int,BackpackEmoteHandle*> EmoteBPIDToAnimHandleMap;//[Offset: 0x6778, Size: 0x50]
	ParticleSystem* DecentBloodSpot;//[Offset: 0x67c8, Size: 0x8]
	ParticleSystem* BloodSpot_Red;//[Offset: 0x67d0, Size: 0x8]
	ParticleSystem* BloodSpot_Green;//[Offset: 0x67d8, Size: 0x8]
	BP_WateringArea_C* MiniTreeRef;//[Offset: 0x67e0, Size: 0x8]
	enum[] DisallowedWateringStates;//[Offset: 0x67e8, Size: 0x10]
	delegate OnCakePlacement;//[Offset: 0x67f8, Size: 0x10]
	Actor* PaintDecalDetector;//[Offset: 0x6808, Size: 0x8]
	ChildActorComponent* PaintDecalDetectComp;//[Offset: 0x6810, Size: 0x8]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6818, Size: 0x1]
	Actor* CurEmoteActor;//[Offset: 0x6820, Size: 0x8]
	STExtraWeapon* CurUseingEmoteWeapon;//[Offset: 0x6828, Size: 0x8]
	MaterialBillboardComponent* FrameUIBillboard;//[Offset: 0x6830, Size: 0x8]
	bool bIsAngledSightOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6838, Size: 0x1]
	MeshComponent* OriginAttachComponent;//[Offset: 0x6840, Size: 0x8]
	MeshComponent* TargetAttachComponent;//[Offset: 0x6848, Size: 0x8]
	Rotator OriginRotOffset;//[Offset: 0x6850, Size: 0xc]
	DollyZoomParam OriginDollyZoomParam;//[Offset: 0x685c, Size: 0xc]
	DollyZoomParam TargetDollyZoomParam;//[Offset: 0x6868, Size: 0xc]
	bool Cache(ForceStill);//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6874, Size: 0x1]
	delegate OnTriggerVault;//[Offset: 0x6878, Size: 0x10]
	FName HurtSoundSwitchState;//[Offset: 0x6888, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SettingSubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bUseRegisterDelegateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	<FString,bool> CacheRegisterProperties_Bool;//[Offset: 0x38, Size: 0x50]
	<FString,int> CacheRegisterProperties_Int;//[Offset: 0x88, Size: 0x50]
	<FString,float> CacheRegisterProperties_Float;//[Offset: 0xd8, Size: 0x50]
	FString CachedSaveGameName;//[Offset: 0x128, Size: 0x10]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0x138, Size: 0x10]
	delegate GetUserSettingsDelegate;//[Offset: 0x148, Size: 0x10]
	EffectSettingMgr* EffectSettingMgrInstace;//[Offset: 0x158, Size: 0x8]
	SaveGame* UserSettings;//[Offset: 0x160, Size: 0x8]
	class Object* UserSettingsClass;//[Offset: 0x168, Size: 0x8]
	FString UserSettingsClassName;//[Offset: 0x170, Size: 0x10]
	FString ActiveSaveGameName;//[Offset: 0x180, Size: 0x10]
	FString LanguageSettingsClassName;//[Offset: 0x198, Size: 0x10]
	FString LanguageSaveGameName;//[Offset: 0x1a8, Size: 0x10]
	<FString,bool> LanguageMap;//[Offset: 0x218, Size: 0x50]
	bool UpdateCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x6771974
	bool SetUserSettings_String(FString PropertyName, FString Val);// 0x67717d0
	bool SetUserSettings_Int(FString PropertyName, int Value);// 0x67716d4
	bool SetUserSettings_Float(FString PropertyName, float Value);// 0x67715d8
	bool SetUserSettings_Bool(FString PropertyName, bool Value, bool IngoreSave);// 0x6771490
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x6771388
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x6771280
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x6771178
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x67710dc
	SaveGame* GetUserSettingsByDelegate(FString LayoutName);// 0x6771024
	FString GetUserSettings_String(FString PropertyName);// 0x6770f08
	int GetUserSettings_Int(FString PropertyName);// 0x6770e50
	float GetUserSettings_Float(FString PropertyName);// 0x6770d98
	bool GetUserSettings_Bool(FString PropertyName);// 0x6770cdc
	SaveGame* GetUserSettings();// 0x6770ca8
	FString GetUserLanguageSettingsProperty_String(FString PropertyName);// 0x6770b8c
	EffectSettingMgr* GetEffectSettingMgr();// 0x6770b58
	SaveGame* GetCustomSetting(FString InSlotName);// 0x6770aa0
	void FinishModifyUserSettings();// 0x6770a8c
	void ClearCustomSetting();// 0x6770a78
	void CheckLocalizationLanguage();// 0x6770a64
	bool CheckChangeWithCache(Object* Source, Property* Property, FString PropertyName);// 0x67708a0
	void CacheRegisterValue(Object* Source, Property* Property, FString PropertyName);// 0x67706e8
	void BeginModifyUserSettings();// 0x67706d4
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x67705ec
<----------Generated by SSpawner v1.0.4---------->


Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0, Size: 0x10]
	SaveGame* SaveGame;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SaveGame.Object
<----------Generated by SSpawner v1.0.4---------->


Class: EffectSettingMgr.Object
	FString SingleLayerColorTable;//[Offset: 0x28, Size: 0x10]
	FString MultiLayerColorTable;//[Offset: 0x38, Size: 0x10]
	void UpdateSingleLayerColor(LinearColor Color);// 0x5e90da4
	void UpdateMultiLayerColcor(FString Key, LinearColor Color);// 0x5e90c34
	void SetParticleSystemColorSingleLayer(ParticleSystemComponent* ParticleSystem);// 0x5e90bb8
	void SetParticleSystemColorMultiLayer(ParticleSystemComponent* ParticleSystem);// 0x5e90b3c
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenAppearanceProvider_Particle.ScreenAppearanceProvider.Object
	ParticleSystemComponent* ParticleComponent;//[Offset: 0xf8, Size: 0x8]
	ParticleSystem* ParticleTemplate;//[Offset: 0x100, Size: 0x28]
	<int,ScreenAppearanceLOD_Particle> DeviceQualityLODs;//[Offset: 0x128, Size: 0x50]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	float FadeSpeedPerSecond;//[Offset: 0x18c, Size: 0x4]
	void OnParticleCompleted(ParticleSystemComponent* PSystem);// 0x6043ac8
	void Fade(float Duration, float Speed, float SetValue, float MinValue, float MaxValue);// 0x6043964
<----------Generated by SSpawner v1.0.4---------->


Class: ScreenAppearanceLOD_Particle
	ParticleSystem* ParticleTemplate;//[Offset: 0x0, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	void RPC_Client_WonderfulPeriod(int RPC_Client_WonderfulPeriod_param1, float RPC_Client_WonderfulPeriod_param2, float RPC_Client_WonderfulPeriod_param3, float[] RPC_Client_WonderfulPeriod_param4, int RPC_Client_WonderfulPeriod_param5, bool RPC_Client_WonderfulPeriod_param6);// 0x9f84450
	void RPC_Client_NotifyUseShareSkin(int RPC_Client_NotifyUseShareSkin_param1);// 0x9f84450
	void RPC_Client_MarkShoot(Actor* RPC_Client_MarkShoot_param1, Actor* RPC_Client_MarkShoot_param2);// 0x9f84450
	void RPC_Client_MaliciousTeammateVictimReceiveTips(FString StrProperty, bool RPC_Client_MaliciousTeammateVictimReceiveTips_param2, int RPC_Client_MaliciousTeammateVictimReceiveTips_param3);// 0x9f84450
	void RPC_Client_MaliciousTeammateReceiveWarningTips();// 0x9f84450
	void #[FeatureRPC(NewbieAssistFeature.RPC_Client_RescueOtherSuccessfully)](uint32 #[FeatureRPC(NewbieAssistFeature.RPC_Client_RescueOtherSuccessfully)]_param1);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Client_TriggerWatchLike)](uint32 #[FeatureRPC(IngameLikeFeature.RPC_Client_TriggerWatchLike)]_param1, int #[FeatureRPC(IngameLikeFeature.RPC_Client_TriggerWatchLike)]_param2, uint64 #[FeatureRPC(IngameLikeFeature.RPC_Client_TriggerWatchLike)]_param3, int #[FeatureRPC(IngameLikeFeature.RPC_Client_TriggerWatchLike)]_param4, FString StrProperty);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Client_TriggerLike)](uint32 #[FeatureRPC(IngameLikeFeature.RPC_Client_TriggerLike)]_param1, int #[FeatureRPC(IngameLikeFeature.RPC_Client_TriggerLike)]_param2, uint64 #[FeatureRPC(IngameLikeFeature.RPC_Client_TriggerLike)]_param3, int #[FeatureRPC(IngameLikeFeature.RPC_Client_TriggerLike)]_param4);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Client_ShowOff)](int #[FeatureRPC(IngameLikeFeature.RPC_Client_ShowOff)]_param1);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Client_RPGiveNotify)](uint32 #[FeatureRPC(IngameLikeFeature.RPC_Client_RPGiveNotify)]_param1, int #[FeatureRPC(IngameLikeFeature.RPC_Client_RPGiveNotify)]_param2, int #[FeatureRPC(IngameLikeFeature.RPC_Client_RPGiveNotify)]_param3, FString StrProperty, FString StrProperty);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Client_RecieveLike)](uint64 #[FeatureRPC(IngameLikeFeature.RPC_Client_RecieveLike)]_param1, int #[FeatureRPC(IngameLikeFeature.RPC_Client_RecieveLike)]_param2);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Client_LikeProgress)](int #[FeatureRPC(IngameLikeFeature.RPC_Client_LikeProgress)]_param1);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Client_KillNumChange)](FString StrProperty);// 0x9f84450
	void #[FeatureRPC(CommerFeature.RPCClient_XSuitIconRsp)](bool #[FeatureRPC(CommerFeature.RPCClient_XSuitIconRsp)]_param1, int #[FeatureRPC(CommerFeature.RPCClient_XSuitIconRsp)]_param2);// 0x9f84450
	void RPC_Server_SetGameReadyCountDown(int RPC_Server_SetGameReadyCountDown_param1);// 0x9f84450
	void RPC_Server_SetAutoUseMelee(bool RPC_Server_SetAutoUseMelee_param1);// 0x9f84450
	void RPC_Server_ReqUseShareSkin();// 0x9f84450
	void RPC_Server_RealUseShareSkin();// 0x9f84450
	void RPC_Server_PlaySpecifiedPetAnimation(int RPC_Server_PlaySpecifiedPetAnimation_param1, float RPC_Server_PlaySpecifiedPetAnimation_param2, int RPC_Server_PlaySpecifiedPetAnimation_param3);// 0x9f84450
	void #[FeatureRPC(NewbieAssistFeature.RPC_Server_StartNewbieAssistDSSubSystem)]();// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Server_ShowOff)](int #[FeatureRPC(IngameLikeFeature.RPC_Server_ShowOff)]_param1);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Server_RPGive)](uint32 #[FeatureRPC(IngameLikeFeature.RPC_Server_RPGive)]_param1, int #[FeatureRPC(IngameLikeFeature.RPC_Server_RPGive)]_param2, int #[FeatureRPC(IngameLikeFeature.RPC_Server_RPGive)]_param3, FString StrProperty, FString StrProperty);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Server_RespondLike)](uint64 #[FeatureRPC(IngameLikeFeature.RPC_Server_RespondLike)]_param1, int #[FeatureRPC(IngameLikeFeature.RPC_Server_RespondLike)]_param2);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Server_LikeSwitch)](int #[FeatureRPC(IngameLikeFeature.RPC_Server_LikeSwitch)]_param1);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Server_Like)](uint32 #[FeatureRPC(IngameLikeFeature.RPC_Server_Like)]_param1, int #[FeatureRPC(IngameLikeFeature.RPC_Server_Like)]_param2);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Server_ClientReady)](uint32 #[FeatureRPC(IngameLikeFeature.RPC_Server_ClientReady)]_param1, int #[FeatureRPC(IngameLikeFeature.RPC_Server_ClientReady)]_param2);// 0x9f84450
	void #[FeatureRPC(IngameLikeFeature.RPC_Server_ClientEnterCircle)](uint32 #[FeatureRPC(IngameLikeFeature.RPC_Server_ClientEnterCircle)]_param1, int #[FeatureRPC(IngameLikeFeature.RPC_Server_ClientEnterCircle)]_param2, int #[FeatureRPC(IngameLikeFeature.RPC_Server_ClientEnterCircle)]_param3);// 0x9f84450
	void #[FeatureRPC(CommerFeature.RPCServer_XSuitIconReq)](FString StrProperty);// 0x9f84450
	void #[FeatureRPC(CommerFeature.RPC_ServerSelectHolography)](int #[FeatureRPC(CommerFeature.RPC_ServerSelectHolography)]_param1, int #[FeatureRPC(CommerFeature.RPC_ServerSelectHolography)]_param2);// 0x9f84450
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3dc0, Size: 0x8]
	void ReadAutoEquipMelleeConfig(bool NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void TriggerInputAction(Key Key);// 0x70644c4
	void ShowTouchInterfaceCustom(bool bShow, TouchInterface* NewTouchInterface, Vector2D NormalJoystickCenter, Vector2D iPhoneXJoystickCenter, TouchInterface* Temp_object_Variable, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_LuaShouldShowTouchInterface_ShouldShow, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LuaShouldShowTouchInterface_ShouldShow2, bool Temp_bool_Variable, enum CallFunc_GetCurrentStateType_ReturnValue, TouchInterface* K2Node_Select_Default, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x70644c4
	void SwitchFreeViewInOB();// 0x70644c4
	void SwitchToTeammate(int TeammateIdx);// 0x70644c4
	void LuaShouldShowTouchInterface(bool bShow, out bool ShouldShow);// 0x70644c4
	void CreateTouchComp(Transform Temp_struct_Variable, Transform Temp_struct_Variable2, AITouchSelectComp_C* CallFunc_AddComponent_ReturnValue, AITouchSelectComp_C* CallFunc_AddComponent_ReturnValue2, bool CallFunc_IsMlAIDebug_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsShipping_ReturnValue);// 0x70644c4
	void ReadSceenMoveXAdd(bool SceenMoveXAdd, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void ReadClientReplayConfig(GameInstance* CallFunc_GetGameInstance_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, ClientInGameReplay* CallFunc_GetClientInGameReplay_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue2);// 0x70644c4
	void MapFromCBToESBH(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess);// 0x70644c4
	void ReceiveLuaTick();// 0x70644c4
	void ReceiveLuaBeginPlay();// 0x70644c4
	void StopAvatarDownload(GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void SetMultiVersionRedSwitchConfig(SettingConfig_C* SettingConfig, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_SwitchString_CmpSuccess, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void MapFromCBToESGlobal(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess);// 0x70644c4
	void MapFromCBToESVN(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess);// 0x70644c4
	void MapFromCBToESJK(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess, bool CallFunc_GetRedBloodSwitch_ReturnValue, bool K2Node_SwitchInteger3_CmpSuccess, FString CallFunc_GetAccountRegion_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	void MapFromCBToES(SettingConfig_C* SettingConfig, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void ReadConfigEffectSettingColorSingleLayer(int NewParam, LinearColor LayerColor, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BlueholeHurtEffectConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, BP_STRUCT_KoreaHurtEffectConfig_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, BP_STRUCT_JapanHurtEffectConfig_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue2, BP_STRUCT_VNHurtEffectConfig_type CallFunc_GetTableData_OutRow4, bool CallFunc_GetTableData_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4, BP_STRUCT_GlobalHurtEffectConfig_type CallFunc_GetTableData_OutRow5, bool CallFunc_GetTableData_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue17, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue18, SaveGame* CallFunc_GetUserSettings_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue19, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_StringToFloat_ReturnValue20, LinearColor CallFunc_MakeColor_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue5, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x70644c4
	void ReadConfigEffectSettingColorMultiLayer(int NewParam, EffectSettingMgr* EffectSettingMgr, LinearColor Layer4Color, LinearColor Layer3Color, LinearColor Layer2Color, LinearColor Layer1Color, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BlueholeHitEffectConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, BP_STRUCT_KoreaHitEffectConfig_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, float CallFunc_Conv_StringToFloat_ReturnValue17, float CallFunc_Conv_StringToFloat_ReturnValue18, LinearColor CallFunc_MakeColor_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue19, float CallFunc_Conv_StringToFloat_ReturnValue20, float CallFunc_Conv_StringToFloat_ReturnValue21, LinearColor CallFunc_MakeColor_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue22, float CallFunc_Conv_StringToFloat_ReturnValue23, float CallFunc_Conv_StringToFloat_ReturnValue24, float CallFunc_Conv_StringToFloat_ReturnValue25, LinearColor CallFunc_MakeColor_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue26, float CallFunc_Conv_StringToFloat_ReturnValue27, float CallFunc_Conv_StringToFloat_ReturnValue28, float CallFunc_Conv_StringToFloat_ReturnValue29, LinearColor CallFunc_MakeColor_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue30, float CallFunc_Conv_StringToFloat_ReturnValue31, float CallFunc_Conv_StringToFloat_ReturnValue32, BP_STRUCT_JapanHitEffectConfig_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue8, BP_STRUCT_VNHitEffectConfig_type CallFunc_GetTableData_OutRow4, bool CallFunc_GetTableData_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue33, float CallFunc_Conv_StringToFloat_ReturnValue34, float CallFunc_Conv_StringToFloat_ReturnValue35, float CallFunc_Conv_StringToFloat_ReturnValue36, float CallFunc_Conv_StringToFloat_ReturnValue37, float CallFunc_Conv_StringToFloat_ReturnValue38, float CallFunc_Conv_StringToFloat_ReturnValue39, LinearColor CallFunc_MakeColor_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue40, float CallFunc_Conv_StringToFloat_ReturnValue41, float CallFunc_Conv_StringToFloat_ReturnValue42, float CallFunc_Conv_StringToFloat_ReturnValue43, LinearColor CallFunc_MakeColor_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue44, float CallFunc_Conv_StringToFloat_ReturnValue45, float CallFunc_Conv_StringToFloat_ReturnValue46, float CallFunc_Conv_StringToFloat_ReturnValue47, LinearColor CallFunc_MakeColor_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue48, float CallFunc_Conv_StringToFloat_ReturnValue49, float CallFunc_Conv_StringToFloat_ReturnValue50, float CallFunc_Conv_StringToFloat_ReturnValue51, LinearColor CallFunc_MakeColor_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue52, LinearColor CallFunc_MakeColor_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue53, float CallFunc_Conv_StringToFloat_ReturnValue54, float CallFunc_Conv_StringToFloat_ReturnValue55, float CallFunc_Conv_StringToFloat_ReturnValue56, float CallFunc_Conv_StringToFloat_ReturnValue57, LinearColor CallFunc_MakeColor_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue58, float CallFunc_Conv_StringToFloat_ReturnValue59, float CallFunc_Conv_StringToFloat_ReturnValue60, float CallFunc_Conv_StringToFloat_ReturnValue61, LinearColor CallFunc_MakeColor_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue62, float CallFunc_Conv_StringToFloat_ReturnValue63, float CallFunc_Conv_StringToFloat_ReturnValue64, BP_STRUCT_GlobalHitEffectConfig_type CallFunc_GetTableData_OutRow5, bool CallFunc_GetTableData_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue16, GameBackendHUD* CallFunc_GetInstance_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue65, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue66, SaveGame* CallFunc_GetUserSettings_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue67, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_StringToFloat_ReturnValue68, LinearColor CallFunc_MakeColor_ReturnValue17, float CallFunc_Conv_StringToFloat_ReturnValue69, float CallFunc_Conv_StringToFloat_ReturnValue70, float CallFunc_Conv_StringToFloat_ReturnValue71, float CallFunc_Conv_StringToFloat_ReturnValue72, float CallFunc_Conv_StringToFloat_ReturnValue73, LinearColor CallFunc_MakeColor_ReturnValue18, float CallFunc_Conv_StringToFloat_ReturnValue74, float CallFunc_Conv_StringToFloat_ReturnValue75, float CallFunc_Conv_StringToFloat_ReturnValue76, float CallFunc_Conv_StringToFloat_ReturnValue77, LinearColor CallFunc_MakeColor_ReturnValue19, float CallFunc_Conv_StringToFloat_ReturnValue78, float CallFunc_Conv_StringToFloat_ReturnValue79, float CallFunc_Conv_StringToFloat_ReturnValue80, LinearColor CallFunc_MakeColor_ReturnValue20, FString CallFunc_Concat_StrStr_ReturnValue5, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x70644c4
	void InitNewbieCounts(FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int Temp_int_Array_Index_Variable2, bool CallFunc_IsValid_ReturnValue, NewbieGuideItem CallFunc_Array_Get_Item, NewbieGuideItem CallFunc_Array_Get_Item2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, BP_STRUCT_GuideText_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, NewbieGuideItem K2Node_SetFieldsInStruct_StructOut, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2);// 0x70644c4
	void AddIgnoreCameraMoveIndex(byte _Index, int CallFunc_Array_AddUnique_ReturnValue);// 0x70644c4
	void ReadConfigColorBlindnessTypeBoolDelegate(bool NewParam);// 0x70644c4
	void ReadConfigColorBlindnessTypeIntDelegate(int NewParam);// 0x70644c4
	void CheckGlobalReadRed(FString StrID, out bool bIsRed, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_CheckIsBood_bIsBlood, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void CheckIsBood(FString StrID, out bool bIsBlood, int CallFunc_FindSubstring_ReturnValue, int CallFunc_FindSubstring_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x70644c4
	void CheckJapnReadRed(FString StrID, out bool bIsRed, bool CallFunc_GetRedBloodSwitch_ReturnValue, bool CallFunc_CheckIsBood_bIsBlood);// 0x70644c4
	void GetJKCBColor(FString ID, out bool bFind, out LinearColor Color, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_JKColorBlindnessConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4);// 0x70644c4
	void GetVNCBColor(FString ID, out bool bFind, out LinearColor Color, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_VNColorBlindnessConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4);// 0x70644c4
	void GetCBColor(BP_STRUCT_ColorBlindnessConfig_type tempCBData, out LinearColor Color, BP_STRUCT_ColorBlindnessConfig_type localTempCBData, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_GetVNCBColor_bFind, LinearColor CallFunc_GetVNCBColor_Color, bool CallFunc_CheckGlobalReadRed_bIsRed, bool CallFunc_CheckJapnReadRed_bIsRed, bool CallFunc_GetJKCBColor_bFind, LinearColor CallFunc_GetJKCBColor_Color);// 0x70644c4
	void ReadConfigColorBlindnessType(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetGameFrontendHUDByGameInstance_ReturnValue, ColorBlindnessMgr* CallFunc_GetColorBlindnessMgr_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_ColorBlindnessConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, LinearColor CallFunc_GetCBColor_color, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void CurGameMode(out int GameMode, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x70644c4
	void IsFPP(out bool IsFPP, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void OnRep_InWateringRange();// 0x70644c4
	void LoadAllBattleSound(FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, FName CallFunc_Array_Get_Item, BP_STRUCT_BattleSound_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x70644c4
	void AsyncLoadBattleSound(Object* Object, int SoundID, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void LoadBattleSound(FString BankName, FString EventName, int SoundID, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Object* CallFunc_GetAssetByAssetReference_ReturnValue, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Map_Contains_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate);// 0x70644c4
	void SetAlwaysHideTouchInterface(bool Hide);// 0x70644c4
	void PlayBattleSoundInBP(int SoundID, bool bPlayed, GameBackendHUD* CallFunc_GetInstance_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, AkAudioEvent* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_PostEvent_ReturnValue);// 0x70644c4
	bool IsReleasePosInAimBtnRange(Vector Loc, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3);// 0x70644c4
	void ReadEmoteDataRowPC(int Temp_int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName[] CallFunc_GetDataTableRowNames_OutRowNames2, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_EmoteBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue2, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable2, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Array_Get_Item2, FString CallFunc_Conv_NameToString_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue2, ItemRecordDataForPC5 CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Len_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, int Temp_int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x70644c4
	void IsAtaptation(out bool adaptation);// 0x70644c4
	void ReadAdaptationTable(bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_BooleanAND_ReturnValue, FName CallFunc_Array_Get_Item, UIAdaptationStructure CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x70644c4
	void InitWeather(GlobalConfigActor*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_Array_IsValidIndex_ReturnValue, GlobalConfigActor* CallFunc_Array_Get_Item);// 0x70644c4
	void SetMotionParam(float GravityX, int CallFunc_GetPlatformInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_GetInputMotionState_Tilt, Vector CallFunc_GetInputMotionState_RotationRate, Vector CallFunc_GetInputMotionState_Gravity, Vector CallFunc_GetInputMotionState_Acceleration, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x70644c4
	void GetStickLeftSize(out Vector2D Size, Vector2D CallFunc_GetJoyStickCenter_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x70644c4
	void ShowFightingUI();// 0x70644c4
	void ShowAutoSprintBtn(bool Visible, Vector2D showPos_, bool Inside, Vector iPhoneXWidgetOffset, Vector2D touchPos);// 0x70644c4
	void ReadConfigCrossHairColor(int NewParam, int Temp_int_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable2, LinearColor Temp_struct_Variable3, LinearColor Temp_struct_Variable4, LinearColor Temp_struct_Variable5, LinearColor Temp_struct_Variable6, LinearColor Temp_struct_Variable7, LinearColor Temp_struct_Variable8, LinearColor Temp_struct_Variable9, LinearColor Temp_struct_Variable10, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, LinearColor K2Node_Select_Default);// 0x70644c4
	void ReadConfigMotionControl(int NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void ReadConfigAutoAim(bool NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void ReadConfigFromHUD(float CallFunc_Get3DTouchValue_TouchValue, bool CallFunc_Get3DTouchSwitch_TouchSwitch, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue2, SensibilityMode K2Node_MakeStruct_SensibilityMode, SensibilityMode K2Node_MakeStruct_SensibilityMode2, SensibilityMode K2Node_MakeStruct_SensibilityMode3, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig2, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig3, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig4, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig5, <int,SightMaterialConfig> K2Node_MakeMap_Map, SensibilityMode K2Node_MakeStruct_SensibilityMode4, SensibilityConfig K2Node_MakeStruct_SensibilityConfig);// 0x70644c4
	void MakeFireModeEffect(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsFPP_IsFPP, BP_SAVEGAME_UIElemLayout_C* CallFunc_LoadUIElemLayoutSGBySetting_SaveGame, float CallFunc_GetRushTriggerLengthByType_RushTriggerLength);// 0x70644c4
	void DebugNotDrawGuideLine();// 0x70644c4
	void ShowBackpackTombBox(bool Show);// 0x70644c4
	void BindOrUnBindJoyStickSprint(bool IsBind);// 0x70644c4
	void CreateRank(int Kills, int Rank);// 0x70644c4
	void SwitchAimMode();// 0x70644c4
	void DoInitUI(bool CallFunc_IsInFinish_ReturnValue, bool CallFunc_IsInFight_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HUD* CallFunc_GetHUD_ReturnValue, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocalPlayerController_ReturnValue);// 0x70644c4
	void HandleJumpBtnPressEvent();// 0x70644c4
	void OnRep_bInCar();// 0x70644c4
	void RefreshUI(float DeltaTime, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x70644c4
	void UpdateInputPanel();// 0x70644c4
	void ShowBackpackIconSplash(bool bShow);// 0x70644c4
	void RefreshWeaponPanel();// 0x70644c4
	void SetTouchInputEnabled(bool bEnabled);// 0x70644c4
	void ShowMainInputControl(bool bShow);// 0x70644c4
	void ShowTouchInterface(bool bShow, bool bExecSuccess, Vector2D NormalJoystickCenter, Vector2D iPhoneXJoystickCenter, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_LuaShouldShowTouchInterface_ShouldShow, bool CallFunc_LuaShouldShowTouchInterface_ShouldShow2, enum CallFunc_GetCurrentStateType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x70644c4
	void EnableDeathGray(float BlendWeight, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x70644c4
	void SetDeathGrayLerpValue(float Lerp);// 0x70644c4
	void SetPostProcessVolume(Actor*[] CallFunc_GetActorsByTag_Targets, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, PostProcessVolume* K2Node_DynamicCast_AsPost_Process_Volume, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void UserConstructionScript(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void GrayToOne__FinishedFunc();// 0x70644c4
	void GrayToOne__UpdateFunc();// 0x70644c4
	void GrayToZero__FinishedFunc();// 0x70644c4
	void GrayToZero__UpdateFunc();// 0x70644c4
	void InpActEvt_PCAim_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCAim_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSwitchWeaponShootType_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCChangeThrowMode_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCFreeCamera_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCFreeCamera_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCEntireMapZoomIn_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCEntireMapZoomOut_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCReload_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCProne_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSwitchPMode_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCAutoSprint_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCCrouch_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectNextWeapon_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectPreWeapon_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSetTeamSpeaker_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSetTeamMicphone_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectGrenade_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectSmokeGrenade_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectMedKit_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectMolotovCocktailOrStunGrenade_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectFirstAidKit_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectBandages_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectEnergyDrink_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectMelee_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCCancelThrow_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCVault_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCVault_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSprint_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSprint_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCCloseUI_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCChangeSeat_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCChangeSeat_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCExitVehicle_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCBasicSkill1_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCBasicSkill1_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCBasicSkill2_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCBasicSkill2_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCBasicSkill3_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCBasicSkill3_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCVehicleForward_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCVehicleForward_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCVehicleBackward_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCVehicleBackward_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCVehicleTurnLeft_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCVehicleTurnLeft_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCVehicleTurnRight_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCVehicleTurnRight_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCVehicleControl_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCVehicleControl_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_SwitchToTeam_PostTeamID_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_SwitchToTeam_ClearTeamID_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_SwitchToTeam_DelOneNum_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_OBSkipOverPanel_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_SwitchToTeammate1_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_SwitchToTeammate2_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_SwitchToTeammate3_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_SwitchToTeammate4_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_OBSwitchFreeView_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSwimDown_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSwimDown_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSwimup_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSwimup_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCPeekRight_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCPeekRight_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCPeekLeft_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCPeekLeft_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCChangeSight_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCChangeSight_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCQuickSign_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectWeapon3_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectWeapon2_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSelectWeapon1_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCQuickChatMenu_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCBackPack_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCFire_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCFire_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCSetMouseCursor_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCEntireMap_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_GoBack_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void InpActEvt_PCOBViewAttacker_K2Node_InputActionEvent(Key Key);// 0x70644c4
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x70644c4
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void OnSpectatorCameraChange(bool bDie);// 0x70644c4
	void OnStopFireEventHandle();// 0x70644c4
	void OnSwitchCameraSatrtHandle(byte CameraMode);// 0x70644c4
	void OnPlayerPutDownActorHandle(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x70644c4
	void OnSwitchWeaponHandle();// 0x70644c4
	void ReceiveTick(float DeltaSeconds);// 0x70644c4
	void OnUseInventoryitemHandle();// 0x70644c4
	void RefreshTopMostUIPanel(byte Type);// 0x70644c4
	void GameStart();// 0x70644c4
	void SetMoveableAirborne(bool NewParam);// 0x70644c4
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x70644c4
	void JoystickTriggerSprint(bool bIsSprint);// 0x70644c4
	void OnPlane();// 0x70644c4
	void SetPanels(out const UAEUserWidget*[] panels);// 0x70644c4
	void InitOprate();// 0x70644c4
	void OnFiremodeChange(int IntValue);// 0x70644c4
	void DoUITouchMove(Vector Loc);// 0x70644c4
	void PressFire(int FingerIndex);// 0x70644c4
	void ShowFireBtn(bool bShow);// 0x70644c4
	void PressGrenade(bool isThrow);// 0x70644c4
	void InitJoyStickAfterActivation();// 0x70644c4
	void MemberVoice(int member, int Status);// 0x70644c4
	void ReceiveClientRestart();// 0x70644c4
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x70644c4
	void ResetMissingUIUpdate();// 0x70644c4
	void MotionControliOS(Vector AxisValue);// 0x70644c4
	void InpAxisKeyEvt_RotationRate_K2Node_InputVectorAxisEvent(Vector AxisValue);// 0x70644c4
	void MotionControlAndroidTick();// 0x70644c4
	void MotionControlAndroid(Vector AxisValue);// 0x70644c4
	void ReceiveBackpackComponent();// 0x70644c4
	void InitWallFeedBack();// 0x70644c4
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x70644c4
	void DebugOpenGuide();// 0x70644c4
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x70644c4
	void CallShowTouchInterface(bool InShow);// 0x70644c4
	void OnGameModeStateChanged();// 0x70644c4
	void ReleaseFire();// 0x70644c4
	void OnFireModeChangeTD(int IntValue);// 0x70644c4
	void OnRep_InWateringRangeBP();// 0x70644c4
	void PlayerExitJumpEvent();// 0x70644c4
	void EnterFightingStateDelegate();// 0x70644c4
	void GameStartCountDownDelegate(float CountDownTime);// 0x70644c4
	void LuaReceiveBeginPlay();// 0x70644c4
	void InpAxisKeyEvt_Acceleration_K2Node_InputVectorAxisEvent(Vector AxisValue);// 0x70644c4
	void ExecuteUbergraph_BP_STExtraPlayerController(int EntryPoint, Key K2Node_InputActionEvent_Key37, Key K2Node_InputActionEvent_Key36, Key Temp_struct_Variable, Key K2Node_InputActionEvent_Key35, Key K2Node_InputActionEvent_Key34, Key Temp_struct_Variable2, Key K2Node_InputActionEvent_Key33, Key K2Node_InputActionEvent_Key32, Key K2Node_InputActionEvent_Key31, Key K2Node_InputActionEvent_Key30, Key K2Node_InputActionEvent_Key29, Key Temp_struct_Variable3, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable2, const TemBPDataAddr[] K2Node_MakeArray_Array, Key K2Node_InputActionEvent_Key28, Key K2Node_InputActionEvent_Key27, Key K2Node_InputActionEvent_Key26, Key K2Node_InputActionEvent_Key25, Key K2Node_InputActionEvent_Key24, Key K2Node_InputActionEvent_Key23, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, delegate K2Node_CreateDelegate_OutputDelegate8, Key K2Node_InputActionEvent_Key22, Key K2Node_InputActionEvent_Key21, Key Temp_struct_Variable4, Key K2Node_InputActionEvent_Key20, Key K2Node_InputActionEvent_Key19, Key Temp_struct_Variable5, Key K2Node_InputActionEvent_Key18, Key K2Node_InputActionEvent_Key17, Key Temp_struct_Variable6, Key K2Node_InputActionEvent_Key16, Key K2Node_InputActionEvent_Key15, Key Temp_struct_Variable7, Key K2Node_InputActionEvent_Key14, Key K2Node_InputActionEvent_Key13, Key Temp_struct_Variable8, Key K2Node_InputActionEvent_Key12, Key K2Node_InputActionEvent_Key11, Key K2Node_InputActionEvent_Key10, Key K2Node_InputActionEvent_Key9, Key K2Node_InputActionEvent_Key8, int Temp_int_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable2, byte Temp_byte_Variable3, byte Temp_byte_Variable4, Key K2Node_InputActionEvent_Key7, Key K2Node_InputActionEvent_Key6, Key K2Node_InputActionEvent_Key5, Key Temp_struct_Variable9, Key K2Node_InputActionEvent_Key4, Key K2Node_InputActionEvent_Key3, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate9, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate10, delegate K2Node_CreateDelegate_OutputDelegate11, const TemBPDataAddr[] K2Node_MakeArray_Array2, delegate K2Node_CreateDelegate_OutputDelegate12, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue2, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue3, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue4, Key K2Node_InputActionEvent_Key2, Key K2Node_InputActionEvent_Key, const TemBPDataAddr[] K2Node_MakeArray_Array3, Key K2Node_InputActionEvent_Key43, Key Temp_struct_Variable10, Key K2Node_InputActionEvent_Key44, Key K2Node_InputActionEvent_Key45, Key Temp_struct_Variable11, Key K2Node_InputActionEvent_Key46, Key K2Node_InputActionEvent_Key47, Key Temp_struct_Variable12, Key K2Node_InputActionEvent_Key48, Key K2Node_InputActionEvent_Key49, Key K2Node_InputActionEvent_Key50, Key Temp_struct_Variable13, Key K2Node_InputActionEvent_Key51, Key K2Node_InputActionEvent_Key52, Key K2Node_InputActionEvent_Key53, Key Temp_struct_Variable14, Key K2Node_InputActionEvent_Key54, Key K2Node_InputActionEvent_Key55, Key Temp_struct_Variable15, Key K2Node_InputActionEvent_Key56, Key K2Node_InputActionEvent_Key57, Key K2Node_InputActionEvent_Key58, Key K2Node_InputActionEvent_Key59, Key K2Node_InputActionEvent_Key60, Key K2Node_InputActionEvent_Key61, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, Key K2Node_InputActionEvent_Key62, Key K2Node_InputActionEvent_Key63, int CallFunc_Divide_IntInt_ReturnValue, Key K2Node_InputActionEvent_Key64, bool K2Node_Event_IsShow, int K2Node_Event_NewUIType, Key Temp_struct_Variable16, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Conv_BoolToString_ReturnValue, FString K2Node_Select_Default, Key K2Node_InputActionEvent_Key38, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, int K2Node_Event_CurrentActivityID, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, Key K2Node_InputActionEvent_Key65, Key K2Node_InputActionEvent_Key66, Key K2Node_InputActionEvent_Key67, Key K2Node_InputActionEvent_Key68, Key K2Node_InputActionEvent_Key69, Key K2Node_InputActionEvent_Key70, Key K2Node_InputActionEvent_Key71, bool K2Node_Event_bDie, bool CallFunc_IsValid_ReturnValue, byte K2Node_CustomEvent_CameraMode, STExtraBaseCharacter* K2Node_CustomEvent_TargetPlayer, Actor* K2Node_CustomEvent_TargetActor, float K2Node_Event_DeltaSeconds, byte K2Node_Event_type, bool K2Node_SwitchEnum_CmpSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool K2Node_CustomEvent_NewParam, bool CallFunc_IsValid_ReturnValue2, bool K2Node_Event_bIsSprint, UAEUserWidget*[] K2Node_Event_panels, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int K2Node_CustomEvent_IntValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, Vector K2Node_Event_Loc, int K2Node_Event_fingerIndex, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_EqualEqual_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate13, delegate K2Node_CreateDelegate_OutputDelegate14, delegate K2Node_CreateDelegate_OutputDelegate15, delegate K2Node_CreateDelegate_OutputDelegate16, bool CallFunc_GetUseMotionControlEnable_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate17, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool K2Node_Event_bShow, bool K2Node_Event_isThrow, int K2Node_Event_member, int K2Node_Event_status, bool CallFunc_IsOnVehicle_ReturnValue, Key K2Node_InputActionEvent_Key72, Key K2Node_InputActionEvent_Key73, Key K2Node_InputActionEvent_Key74, Key K2Node_InputActionEvent_Key75, byte K2Node_Event_WeaponPropSlot, ItemDefineID K2Node_Event_DefineID, bool K2Node_Event_bEquip, Key K2Node_InputActionEvent_Key76, bool CallFunc_HasAuthority_ReturnValue, Key K2Node_InputActionEvent_Key77, Key Temp_struct_Variable17, Vector K2Node_CustomEvent_AxisValue2, Vector K2Node_InputVectorAxisEvent_AxisValue2, Key K2Node_InputActionEvent_Key39, bool CallFunc_HasAuthority_ReturnValue2, Key K2Node_InputActionEvent_Key78, Key K2Node_InputActionEvent_Key79, Key K2Node_InputActionEvent_Key80, Key K2Node_InputActionEvent_Key81, Vector K2Node_CustomEvent_AxisValue, float CallFunc_CalInputFromRotaionRate_OutPitch, float CallFunc_CalInputFromRotaionRate_OutYaw, bool CallFunc_CalInputFromRotaionRate_bIsAddPitch, bool CallFunc_CalInputFromRotaionRate_bIsAddYaw, bool CallFunc_IsDedicatedServer_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate18, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess3, int[] K2Node_Event_FinishedGuide, int[] K2Node_Event_FinishedCounts, int K2Node_Event_PlayerLevel, int K2Node_Event_PlayerExperienceType, byte K2Node_Select2_Default, int CallFunc_MakeLiteralInt_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue2, int[] K2Node_MakeArray_Array4, int[] K2Node_MakeArray_Array5, Key Temp_struct_Variable18, Key K2Node_InputActionEvent_Key82, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsObserver_ReturnValue, Vector K2Node_Event_OceansideLocation, bool K2Node_Event_bDetectedRiver, Key K2Node_InputActionEvent_Key83, int CallFunc_PostEventAtLocation_ReturnValue, bool K2Node_Event_InShow, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess4, FName CallFunc_GetGameModeState_ReturnValue, bool K2Node_SwitchName_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess5, bool CallFunc_IsObserver_ReturnValue2, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager, bool K2Node_DynamicCast_bSuccess6, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance2, bool K2Node_DynamicCast_bSuccess7, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, bool CallFunc_IsInSpectating_ReturnValue, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue2, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager2, bool K2Node_DynamicCast_bSuccess8, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, bool CallFunc_IsOnVehicle_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, bool CallFunc_IsWindowOB_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue2, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess9, bool CallFunc_IsFPP_IsFPP, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_GetPlatformInt_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue3, bool K2Node_SwitchInteger2_CmpSuccess, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance3, bool K2Node_DynamicCast_bSuccess10, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue3, int CallFunc_CurGameMode_GameMode, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue3, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager3, bool K2Node_DynamicCast_bSuccess11, bool CallFunc_IsFPP_IsFPP2, Key Temp_struct_Variable19, int K2Node_CustomEvent_IntValue, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Conv_IntToString_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue12, Key K2Node_InputActionEvent_Key40, FString CallFunc_Conv_IntToString_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue13, bool CallFunc_EqualEqual_IntInt_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue14, FString CallFunc_Concat_StrStr_ReturnValue15, delegate K2Node_CreateDelegate_OutputDelegate19, delegate K2Node_CreateDelegate_OutputDelegate20, GameInstance* CallFunc_GetGameInstance_ReturnValue4, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance4, bool K2Node_DynamicCast_bSuccess12, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, Key K2Node_InputActionEvent_Key41, delegate K2Node_CreateDelegate_OutputDelegate21, delegate K2Node_CreateDelegate_OutputDelegate22, Rotator CallFunc_GetControlRotation_ReturnValue, float K2Node_CustomEvent_CountDownTime, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate23, Key Temp_struct_Variable20, Key K2Node_InputActionEvent_Key42, delegate K2Node_CreateDelegate_OutputDelegate24, Vector K2Node_InputVectorAxisEvent_AxisValue);// 0x70644c4
	void VaultFailDS__DelegateSignature();// 0x70644c4
	void BindEventToBackpackComponent__DelegateSignature();// 0x70644c4
	void PlayerLeaveWater__DelegateSignature(bool HideLung);// 0x70644c4
	void PlayerEnterWater__DelegateSignature();// 0x70644c4
	void AirborneLanded__DelegateSignature();// 0x70644c4
	void ReloadingCDEnd__DelegateSignature();// 0x70644c4
	void ReloadingCDStart__DelegateSignature(float CD);// 0x70644c4
	SecurityImprisonComp* SecurityImprisonComp;//[Offset: 0x3dc8, Size: 0x8]
	StateMachineComponent* NewStateMachineCompent;//[Offset: 0x3dd0, Size: 0x8]
	HiggsBosonComponent* HiggsBoson;//[Offset: 0x3dd8, Size: 0x8]
	LuaTaskComponent* LuaTask;//[Offset: 0x3de0, Size: 0x8]
	QuickSignComponent_BP_C* QuickSignComponent_BP;//[Offset: 0x3de8, Size: 0x8]
	BP_MapUIMarkManager_C* BP_MapUIMarkManager;//[Offset: 0x3df0, Size: 0x8]
	BP_ChangeWearingComp_C* BP_ChangeWearingComp;//[Offset: 0x3df8, Size: 0x8]
	BP_GameEventListener_C* BP_GameEventListener;//[Offset: 0x3e00, Size: 0x8]
	GuideComponent_BP_C* GuideComponent_BP;//[Offset: 0x3e08, Size: 0x8]
	BP_ServerSwitcher_C* BP_ServerSwitcher;//[Offset: 0x3e10, Size: 0x8]
	STExtraUnderWaterEffectComp* STExtraUnderWaterEffectComp;//[Offset: 0x3e18, Size: 0x8]
	ChatComponent_BP_C* ChatComponent_BP;//[Offset: 0x3e20, Size: 0x8]
	BP_CommonBtn_C* BP_CommonBtn;//[Offset: 0x3e28, Size: 0x8]
	BP_VehicleUser_C* BP_VehicleUser;//[Offset: 0x3e30, Size: 0x8]
	float GrayToOne_Alpha_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x3e38, Size: 0x4]
	byte GrayToOne__Direction_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x3e3c, Size: 0x1]
	TimelineComponent* GrayToOne;//[Offset: 0x3e40, Size: 0x8]
	float GrayToZero_Alpha_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x3e48, Size: 0x4]
	byte GrayToZero__Direction_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x3e4c, Size: 0x1]
	TimelineComponent* GrayToZero;//[Offset: 0x3e50, Size: 0x8]
	PostProcessVolume* MainPostProcessVolume;//[Offset: 0x3e58, Size: 0x8]
	byte LastCameraMode;//[Offset: 0x3e60, Size: 0x1]
	Pawn* PrePlayerPawn;//[Offset: 0x3e68, Size: 0x8]
	bool bInItemGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e70, Size: 0x1]
	float InItemGeneratorUIRefreshTime;//[Offset: 0x3e74, Size: 0x4]
	float CurInItemGeneratorUIRefreshTime;//[Offset: 0x3e78, Size: 0x4]
	Object* WaitingUI;//[Offset: 0x3e80, Size: 0x8]
	Object* SimulatePlane;//[Offset: 0x3e88, Size: 0x8]
	delegate ReloadingCDStart;//[Offset: 0x3e90, Size: 0x10]
	delegate ReloadingCDEnd;//[Offset: 0x3ea0, Size: 0x10]
	bool AlreadyAimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3eb0, Size: 0x1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x3eb8, Size: 0x8]
	STExtraBaseCharacter*[] CurAimTargets;//[Offset: 0x3ec0, Size: 0x10]
	float CloseDistance;//[Offset: 0x3ed0, Size: 0x4]
	byte AutoAimDrawType;//[Offset: 0x3ed4, Size: 0x1]
	delegate AirborneLanded;//[Offset: 0x3ed8, Size: 0x10]
	float MotionRate_Yaw;//[Offset: 0x3ee8, Size: 0x4]
	float MotionRate_Pitch;//[Offset: 0x3eec, Size: 0x4]
	float MotionAimRate_Pitch;//[Offset: 0x3ef0, Size: 0x4]
	float MotionAimRate_Yaw;//[Offset: 0x3ef4, Size: 0x4]
	float MotionRate_Pitch_Threshold;//[Offset: 0x3ef8, Size: 0x4]
	float MotionRate_Yaw_Threshold;//[Offset: 0x3efc, Size: 0x4]
	float MotionTouchAimRate_Pitch;//[Offset: 0x3f00, Size: 0x4]
	float MotionTouchAimRate_Yaw;//[Offset: 0x3f04, Size: 0x4]
	float MotionTouchRate_Yaw;//[Offset: 0x3f08, Size: 0x4]
	float MotionTouchRate_Pitch;//[Offset: 0x3f0c, Size: 0x4]
	bool bDefaultIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f10, Size: 0x1]
	bool DriveWithForwardAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f11, Size: 0x1]
	bool DriveWithRightAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f12, Size: 0x1]
	bool bInTombBoxGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f13, Size: 0x1]
	delegate PlayerEnterWater;//[Offset: 0x3f18, Size: 0x10]
	delegate PlayerLeaveWater;//[Offset: 0x3f28, Size: 0x10]
	bool bindWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f38, Size: 0x1]
	bool bLandScapeOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f39, Size: 0x1]
	float PitchReverce;//[Offset: 0x3f3c, Size: 0x4]
	float Left;//[Offset: 0x3f40, Size: 0x4]
	float Right;//[Offset: 0x3f44, Size: 0x4]
	float LastTime;//[Offset: 0x3f48, Size: 0x4]
	Vector[] MotionDataStack;//[Offset: 0x3f50, Size: 0x10]
	Vector CurMotionData;//[Offset: 0x3f60, Size: 0xc]
	delegate BindEventToBackpackComponent;//[Offset: 0x3f70, Size: 0x10]
	delegate VaultFailDS;//[Offset: 0x3f80, Size: 0x10]
	<FString,UIAdaptationStructure> AdaptationDict;//[Offset: 0x3f90, Size: 0x50]
	UIAdaptationStructure CurDeviceAdaptationOffset;//[Offset: 0x3fe0, Size: 0x20]
	UIAdaptationStructure CurDeviceAdaptationData;//[Offset: 0x4000, Size: 0x20]
	bool bIsJoyStickShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4020, Size: 0x1]
	bool bIsInitSensibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4021, Size: 0x1]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4022, Size: 0x1]
	bool adaption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4023, Size: 0x1]
	bool initAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4024, Size: 0x1]
	bool IsJoystickTriggerSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4025, Size: 0x1]
	float UITouchMoveX;//[Offset: 0x4028, Size: 0x4]
	float UITouchMoveY;//[Offset: 0x402c, Size: 0x4]
	int PressFireFingerIndex;//[Offset: 0x4030, Size: 0x4]
	bool IsShowFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4034, Size: 0x1]
	bool IsThrowGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4035, Size: 0x1]
	int VoiceMemberID;//[Offset: 0x4038, Size: 0x4]
	int VoiceMemberStatus;//[Offset: 0x403c, Size: 0x4]
	byte AttachmentAttachSlot;//[Offset: 0x4040, Size: 0x1]
	ItemDefineID AttachmentDefineID;//[Offset: 0x4048, Size: 0x18]
	Vector2D AutoSprintBtnTouchPos;//[Offset: 0x4060, Size: 0x8]
	bool IsAutoSprintBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4068, Size: 0x1]
	bool IsFingerInsideAutoSprintBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4069, Size: 0x1]
	bool IsBindJoystickSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406a, Size: 0x1]
	byte UnequipWeaponType;//[Offset: 0x406b, Size: 0x1]
	bool IsShowInputControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406c, Size: 0x1]
	Vector2D AutoNavigateTranslation;//[Offset: 0x4070, Size: 0x8]
	int InputTeamID;//[Offset: 0x4078, Size: 0x4]
	int EmoteItemType;//[Offset: 0x407c, Size: 0x4]
	bool bLongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4080, Size: 0x1]
	bool bLongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4081, Size: 0x1]
	Vector2D AimBtnPos;//[Offset: 0x4084, Size: 0x8]
	Vector2D AimBtnSize;//[Offset: 0x408c, Size: 0x8]
	int PeekMode;//[Offset: 0x4094, Size: 0x4]
	int AimMode;//[Offset: 0x4098, Size: 0x4]
	<int,int> EmoteItemIDToBPIDMap;//[Offset: 0x40a0, Size: 0x50]
	<int,FString> EmoteBPIDToHandlePath;//[Offset: 0x40f0, Size: 0x50]
	<int,FString> EmoteItemIDToImagePathMap;//[Offset: 0x4140, Size: 0x50]
	<int,FString> EmoteItemIDToImageBattlePathMap;//[Offset: 0x4190, Size: 0x50]
	bool bAlwaysHideTouchInterface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e0, Size: 0x1]
	<int,AkAudioEvent*> BattleSoundMap;//[Offset: 0x41e8, Size: 0x50]
	<int,FString> BattleBankMap;//[Offset: 0x4238, Size: 0x50]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4288, Size: 0x1]
	BP_SAVEGAME_UIElemLayout_C* SaveGameUIElemLayout;//[Offset: 0x4290, Size: 0x8]
	int GameMode;//[Offset: 0x4298, Size: 0x4]
	int currentColorBlindnessType;//[Offset: 0x429c, Size: 0x4]
	int CurrentHitEffectIndex;//[Offset: 0x42a0, Size: 0x4]
	int CurrentHurtEffectIndex;//[Offset: 0x42a4, Size: 0x4]
	Rotator CurControllerRotation;//[Offset: 0x42a8, Size: 0xc]
	bool IsCurExitJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b4, Size: 0x1]
	bool bStopDownloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b5, Size: 0x1]
	int ShoulderMode;//[Offset: 0x42b8, Size: 0x4]
	int[] EmoteIDArray;//[Offset: 0x42c0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: GameBackendHUD.BackendHUD.Object
	GameBackendUtils* GetUtils();// 0x6714b54
	static GameBackendHUD* GetInstance();// 0x6714b20
	GameFrontendHUD* GetGameFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x6714a94
	GameFrontendHUD* GetFirstGameFrontendHUD(const Object* WorldContextObject);// 0x6714a08
<----------Generated by SSpawner v1.0.4---------->


Class: BackendHUD.Object
	Engine* Engine;//[Offset: 0x28, Size: 0x8]
	FString BackendUtilsClassName;//[Offset: 0x30, Size: 0x10]
	BackendUtils* Utils;//[Offset: 0x40, Size: 0x8]
	FrontendHUD*[] FrontendHUDList;//[Offset: 0x48, Size: 0x10]
	<uint32,FrontendHUD*> FrontendHUDMap;//[Offset: 0x58, Size: 0x50]
	FrontendHUD* GetFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x8f79424
	FrontendHUD* GetFrontendHUD(int FrontendHUDIndex);// 0x8f79398
<----------Generated by SSpawner v1.0.4---------->


Class: GameBackendUtils.BackendUtils.Object
	UAETableManager* GetTableManager();// 0x671468c
<----------Generated by SSpawner v1.0.4---------->


Class: BackendUtils.Object
	BackendHUD* OwningBackendHUD;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x28, Size: 0x10]
	FName[] TablesNeedReleasedInBattle;//[Offset: 0x38, Size: 0x10]
	FString ManualTableDirectory;//[Offset: 0x48, Size: 0x10]
	bool AllowItemTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	UAEDataTable*[] TableObjList;//[Offset: 0x160, Size: 0x10]
	World* CurWorld;//[Offset: 0x170, Size: 0x8]
	<FName,UAEDataTable*> TableObjMap;//[Offset: 0x178, Size: 0x50]
	<FName,UAEDataTable*> TableObjMap_Mod;//[Offset: 0x1c8, Size: 0x50]
	delegate OnTableCreateInFighting;//[Offset: 0x218, Size: 0x10]
	FString PathCompressionConfigsPath;//[Offset: 0x340, Size: 0x10]
	bool bIsPathCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	bool bIsPathCompressionCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 0x1]
	int PathCompressionCacheMaxSize;//[Offset: 0x354, Size: 0x4]
	bool bTranslationFallBackUnloadDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	bool bShrinkTranslationMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 0x1]
	FString BaseTableRelativeDir;//[Offset: 0x368, Size: 0x10]
	FString ModTableRelativeDir;//[Offset: 0x378, Size: 0x10]
	<FName,ModTable*> ModTableMap;//[Offset: 0x388, Size: 0x50]
	<FName,UAEDataTable*> ModTableObjMap;//[Offset: 0x3d8, Size: 0x50]
	UAEDataTable*[] InGameTableObjList;//[Offset: 0x428, Size: 0x10]
	<FName,bool> CheckNeedModMap;//[Offset: 0x438, Size: 0x50]
	FString CurrentModName;//[Offset: 0x488, Size: 0x10]
	FString EmptyModName;//[Offset: 0x498, Size: 0x10]
	<FString,BaseTableResMap*> LoadedTableMap;//[Offset: 0x4a8, Size: 0x50]
	<FString,bool> CheckMapTable;//[Offset: 0x4f8, Size: 0x50]
	<FString,DataTableProxy*> TableCache;//[Offset: 0x548, Size: 0x50]
	void ReleaseTable(FName TableFName);// 0x64afe60
	UAEDataTable* GetTablePtr_Mod(FName tableName);// 0x64afdd4
	UAEDataTable* GetTablePtr(FName tableName, bool bCheckModTable);// 0x64afd04
	BaseTableResMap* GetTableMap(FString tableName);// 0x64afc4c
	static bool GetTableData(FString tableName, FString Key, out TableRowBase OutRow);// 0x64af4cc
	static UAETableManager* GetInstance();// 0x64af498
	static FString GetDomainByID(const int ID);// 0x64af3b4
	static UAEDataTable* GetDataTableStatic_Mod(FString tableName);// 0x64af30c
	static UAEDataTable* GetDataTableStatic(FString tableName);// 0x64af264
	DataTableProxy* GetDataTableProxy(FString tableName, bool bTempory);// 0x64af164
<----------Generated by SSpawner v1.0.4---------->


Class: ModTable.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BaseTableResMap.Object
	ScriptStruct* DataStruct;//[Offset: 0x80, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DataTableProxy.Object
	DataTable* ModDataTable;//[Offset: 0x28, Size: 0x8]
	DataTable* DataTable;//[Offset: 0x30, Size: 0x8]
	DataTableRowDesc* Desc;//[Offset: 0xd8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DataTableRowDesc.Object
<----------Generated by SSpawner v1.0.4---------->


Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18]
	Font* SmallFont;//[Offset: 0x70, Size: 0x8]
	SoftObjectPath SmallFontName;//[Offset: 0x78, Size: 0x18]
	Font* MediumFont;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath MediumFontName;//[Offset: 0x98, Size: 0x18]
	Font* LargeFont;//[Offset: 0xb0, Size: 0x8]
	SoftObjectPath LargeFontName;//[Offset: 0xb8, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xd0, Size: 0x8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xd8, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xf0, Size: 0x10]
	FString[] AdditionalFontNames;//[Offset: 0x108, Size: 0x10]
	class Console* ConsoleClass;//[Offset: 0x118, Size: 0x8]
	SoftClassPath ConsoleClassName;//[Offset: 0x120, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x138, Size: 0x8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x140, Size: 0x18]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x158, Size: 0x8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x160, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x178, Size: 0x8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x180, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x198, Size: 0x18]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x1b0, Size: 0x8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 0x8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 0x8]
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 0x18]
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 0x8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 0x8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x288, Size: 0x8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 0x8]
	Texture2D* DefaultTexture;//[Offset: 0x2b0, Size: 0x8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2b8, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2d0, Size: 0x8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2d8, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2f0, Size: 0x8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2f8, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x310, Size: 0x8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x318, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x330, Size: 0x8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x338, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x350, Size: 0x8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x358, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x370, Size: 0x8]
	FString WireframeMaterialName;//[Offset: 0x378, Size: 0x10]
	Material* DebugMeshMaterial;//[Offset: 0x388, Size: 0x8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x390, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x3a8, Size: 0x8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3b0, Size: 0x10]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x3c0, Size: 0x8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x3c8, Size: 0x10]
	Material* LightingTexelDensityMaterial;//[Offset: 0x3d8, Size: 0x8]
	FString LightingTexelDensityName;//[Offset: 0x3e0, Size: 0x10]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x3f0, Size: 0x8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x3f8, Size: 0x10]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x408, Size: 0x8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x410, Size: 0x10]
	Material* RemoveSurfaceMaterial;//[Offset: 0x420, Size: 0x8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x428, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x440, Size: 0x8]
	FString VertexColorMaterialName;//[Offset: 0x448, Size: 0x10]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x458, Size: 0x8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x460, Size: 0x10]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x470, Size: 0x8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x478, Size: 0x10]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x488, Size: 0x8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x490, Size: 0x10]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4a0, Size: 0x8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4a8, Size: 0x10]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4b8, Size: 0x8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x4c0, Size: 0x10]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x4d0, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x4e8, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x4f0, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x4f8, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x500, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x508, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x510, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x518, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x520, Size: 0x8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x528, Size: 0x8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x530, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x548, Size: 0x8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x550, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x568, Size: 0x8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x570, Size: 0x18]
	Material* OutlineMaterial;//[Offset: 0x588, Size: 0x8]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x590, Size: 0x18]
	Material* OutlineMaskedMaterial;//[Offset: 0x5a8, Size: 0x8]
	SoftObjectPath OutlineMaskedMaterialName;//[Offset: 0x5b0, Size: 0x18]
	Material* LowLevelLODMaterial;//[Offset: 0x5c8, Size: 0x8]
	Material* LowLevelLODMaskMaterial;//[Offset: 0x5d0, Size: 0x8]
	SoftObjectPath SmaaAreaTexName;//[Offset: 0x5d8, Size: 0x18]
	SoftObjectPath SmaaSearchTexName;//[Offset: 0x5f0, Size: 0x18]
	Texture2D* SmaaAreaTex;//[Offset: 0x608, Size: 0x8]
	Texture2D* SmaaSearchTex;//[Offset: 0x610, Size: 0x8]
	Material* DyeingColorMaterial;//[Offset: 0x618, Size: 0x8]
	SoftObjectPath DyeingColorMaterialName;//[Offset: 0x620, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x638, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x648, Size: 0x10]
	LinearColor[] QuadComplexityColors;//[Offset: 0x658, Size: 0x10]
	LinearColor[] LightComplexityColors;//[Offset: 0x668, Size: 0x10]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x678, Size: 0x10]
	LinearColor[] LODColorationColors;//[Offset: 0x688, Size: 0x10]
	LinearColor[] HLODColorationColors;//[Offset: 0x698, Size: 0x10]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x6a8, Size: 0x10]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x6b8, Size: 0x4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x6bc, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x6c0, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x6c4, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x6c8, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6cc, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x6d0, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x6d4, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x6d8, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x6e8, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x6f8, Size: 0x10]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x708, Size: 0x8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x710, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x728, Size: 0x10]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x738, Size: 0x10]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x748, Size: 0x10]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x758, Size: 0x10]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x768, Size: 0x8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x770, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x788, Size: 0x8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x790, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x7a8, Size: 0x8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x7b0, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x7c8, Size: 0x8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x7d0, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x7f0, Size: 0x8]
	FString[] DeferredCommands;//[Offset: 0x7f8, Size: 0x10]
	int TickCycles;//[Offset: 0x808, Size: 0x4]
	int GameCycles;//[Offset: 0x80c, Size: 0x4]
	int ClientCycles;//[Offset: 0x810, Size: 0x4]
	float NearClipPlane;//[Offset: 0x814, Size: 0x4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x818, Size: 0x1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x818, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x818, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x81c, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x820, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x820, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x820, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x820, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x820, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x820, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x824, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x828, Size: 0x10]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x838, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x83c, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x840, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x844, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x848, Size: 0x4]
	Color C_AddWire;//[Offset: 0x84c, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x850, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x854, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x858, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x85c, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x860, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x864, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x868, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x86c, Size: 0x4]
	Color C_Volume;//[Offset: 0x870, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x874, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x878, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x880, Size: 0x10]
	byte TransitionType;//[Offset: 0x890, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x898, Size: 0x10]
	FString TransitionGameMode;//[Offset: 0x8a8, Size: 0x10]
	float MeshLODRange;//[Offset: 0x8b8, Size: 0x4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8bc, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x8c0, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x8c4, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x8c8, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x8cc, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d0, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x8d4, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x8d8, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x8e0, Size: 0x10]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x8f0, Size: 0x20]
	float NetClientTicksPerSecond;//[Offset: 0x910, Size: 0x4]
	float DisplayGamma;//[Offset: 0x914, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x918, Size: 0x4]
	int ShaderPrecompileProgress;//[Offset: 0x91c, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x920, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x930, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x940, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x950, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x960, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x970, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x971, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x971, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x971, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x971, Size: 0x1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x974, Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x980, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x984, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0x988, Size: 0x10]
	float SelectionHighlightIntensity;//[Offset: 0x9a8, Size: 0x4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x9ac, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x9b0, Size: 0x4]
	float HoverHighlightIntensity;//[Offset: 0x9b4, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9b8, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xba8, Size: 0x10]
	FString[] ServerActors;//[Offset: 0xbb8, Size: 0x10]
	FString[] RuntimeServerActors;//[Offset: 0xbc8, Size: 0x10]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbd8, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0xbf0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	uint32 ResolutionSizeX;//[Offset: 0x78, Size: 0x4]
	uint32 ResolutionSizeY;//[Offset: 0x7c, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x80, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x84, Size: 0x4]
	int WindowPosX;//[Offset: 0x88, Size: 0x4]
	int WindowPosY;//[Offset: 0x8c, Size: 0x4]
	int FullscreenMode;//[Offset: 0x90, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x94, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0x98, Size: 0x4]
	uint32 Version;//[Offset: 0x9c, Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xa0, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xa4, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xac, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xb4, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xb8, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xbc, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xc0, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xc4, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xc8, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xd8, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xe8, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0xf0, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xf8, Size: 0x10]
	void ValidateSettings();// 0x8d0ee30
	bool SupportsHDRDisplayOutput();// 0x8d0edf0
	void SetVSyncEnabled(bool bEnable);// 0x8d0ed6c
	void SetVisualEffectQuality(int Value);// 0x8d0ecf0
	void SetViewDistanceQuality(int Value);// 0x8d0ec74
	void SetToDefaults();// 0x8d0ec58
	void SetTextureQuality(int Value);// 0x8d0ebdc
	void SetShadowQuality(int Value);// 0x8d0eb60
	void SetScreenResolution(IntPoint Resolution);// 0x8d0eae8
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x8d0ea6c
	void SetResolutionScaleValue(int NewScaleValue);// 0x8d0e9f0
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x8d0e974
	void SetPostProcessingQuality(int Value);// 0x8d0e8f8
	void SetOverallScalabilityLevel(int Value);// 0x8d0e874
	void SetFullscreenMode(byte InFullscreenMode);// 0x8d0e7f8
	void SetFrameRateLimit(float NewLimit);// 0x8d0e77c
	void SetFoliageQuality(int Value);// 0x8d0e700
	void SetBenchmarkFallbackValues();// 0x8d0e6ec
	void SetAudioQualityLevel(int QualityLevel);// 0x8d0e670
	void SetAntiAliasingQuality(int Value);// 0x8d0e5f4
	void SaveSettings();// 0x8d0e5d8
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x8d0e4e0
	void RevertVideoMode();// 0x8d0e4cc
	void ResetToCurrentSettings();// 0x8d0e4b0
	void LoadSettings(bool bForceReload);// 0x8d0e424
	bool IsVSyncEnabled();// 0x8d0e3ec
	bool IsVSyncDirty();// 0x8d0e3b4
	bool IsScreenResolutionDirty();// 0x8d0e37c
	bool IsHDREnabled();// 0x8d0e344
	bool IsFullscreenModeDirty();// 0x8d0e30c
	bool IsDirty();// 0x8d0e2cc
	int GetVisualEffectQuality();// 0x8d0e298
	int GetViewDistanceQuality();// 0x8d0e264
	int GetTextureQuality();// 0x8d0e230
	int GetShadowQuality();// 0x8d0e1fc
	IntPoint GetScreenResolution();// 0x8d0e1c4
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x8d0e038
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x8d0deac
	float GetRecommendedResolutionScale();// 0x8d0de70
	byte GetPreferredFullscreenMode();// 0x8d0de3c
	int GetPostProcessingQuality();// 0x8d0de08
	int GetOverallScalabilityLevel();// 0x8d0ddd4
	IntPoint GetLastConfirmedScreenResolution();// 0x8d0dd9c
	byte GetLastConfirmedFullscreenMode();// 0x8d0dd68
	static GameUserSettings* GetGameUserSettings();// 0x8d0dd34
	byte GetFullscreenMode();// 0x8d0dd00
	float GetFrameRateLimit();// 0x8d0dccc
	int GetFoliageQuality();// 0x8d0dc98
	IntPoint GetDesktopResolution();// 0x8d0dc60
	static IntPoint GetDefaultWindowPosition();// 0x8d0dc28
	static byte GetDefaultWindowMode();// 0x8d0dbf4
	float GetDefaultResolutionScale();// 0x8d0dbb8
	static IntPoint GetDefaultResolution();// 0x8d0db80
	int GetCurrentHDRDisplayNits();// 0x8d0db4c
	int GetAudioQualityLevel();// 0x8d0db30
	int GetAntiAliasingQuality();// 0x8d0dafc
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x8d0da34
	void ConfirmVideoMode();// 0x8d0da20
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x8d0d994
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x8d0d910
	void ApplyNonResolutionSettings();// 0x8d0d8f4
	void ApplyHardwareBenchmarkResults();// 0x8d0d8d8
<----------Generated by SSpawner v1.0.4---------->


Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x260, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x273, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x27c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10]
	StatColorMapEntry[] colorMap;//[Offset: 0x10, Size: 0x10]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10]
	FString NewPluginName;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	FString Comment;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RigidBodyErrorCorrection
	float LinearDeltaThresholdSq;//[Offset: 0x0, Size: 0x4]
	float LinearInterpAlpha;//[Offset: 0x4, Size: 0x4]
	float LinearRecipFixTime;//[Offset: 0x8, Size: 0x4]
	float AngularDeltaThreshold;//[Offset: 0xc, Size: 0x4]
	float AngularInterpAlpha;//[Offset: 0x10, Size: 0x4]
	float AngularRecipFixTime;//[Offset: 0x14, Size: 0x4]
	float BodySpeedThresholdSq;//[Offset: 0x18, Size: 0x4]
	float AngularSpeedThresholdSq;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: GameFrontendHUD.FrontendHUD.Object
	delegate OnHandleWebviewActionDelegate;//[Offset: 0x1d0, Size: 0x10]
	delegate OnGetTicketNotifyDelegate;//[Offset: 0x1e0, Size: 0x10]
	delegate OnHandleServerListDownload;//[Offset: 0x1f0, Size: 0x10]
	delegate OnUIStatReport;//[Offset: 0x200, Size: 0x10]
	delegate OnReportClientTool;//[Offset: 0x210, Size: 0x10]
	FString CSVTableRelativeDir;//[Offset: 0x220, Size: 0x10]
	<FName,FString> GameStatusMap;//[Offset: 0x230, Size: 0x50]
	bool EnableTickLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool bEnableReportMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 0x1]
	VoiceSDKInterface* VoiceSDK;//[Offset: 0x2a0, Size: 0x8]
	BugReporter* GameBugReporter;//[Offset: 0x2a8, Size: 0x8]
	GMLogShare* LogShare;//[Offset: 0x2b0, Size: 0x8]
	int MaxUpdateRetryTimes;//[Offset: 0x2b8, Size: 0x4]
	GDolphinUpdater* GDolphin;//[Offset: 0x2c8, Size: 0x8]
	Translator* Translator;//[Offset: 0x2d0, Size: 0x8]
	HttpWrapper* HttpWrapper;//[Offset: 0x2d8, Size: 0x8]
	GCPufferDownloader* GPuffer;//[Offset: 0x2e0, Size: 0x8]
	LaggingReporter* LaggingReporter;//[Offset: 0x2e8, Size: 0x8]
	AsyncTaskDownloader* DownloadTask;//[Offset: 0x2f8, Size: 0x8]
	bool bUseDolphinUpdateFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	bool bEnableUseDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 0x1]
	bool bEnableUseCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346, Size: 0x1]
	bool bUseDolphinUpdateAfterCDNFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347, Size: 0x1]
	bool bUseCDNUpdateAfterDolphinFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	bool bEnableEditorPufferDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1]
	bool bIsWaitingUpdateStateData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 0x1]
	bool IsUsingDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b, Size: 0x1]
	bool IsUsingCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	CDNUpdate* CDNUpdater;//[Offset: 0x360, Size: 0x8]
	int ODPaksPoolSize;//[Offset: 0x368, Size: 0x4]
	int ODPaksPoolSizeLowend;//[Offset: 0x36c, Size: 0x4]
	int ODPaksPoolSizeLowendThreshold;//[Offset: 0x370, Size: 0x4]
	bool ODPaksEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	interface class * ClientNetInterface;//[Offset: 0x398, Size: 0x10]
	FName UnrealNetworkStatus;//[Offset: 0x3a8, Size: 0x8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x3c8, Size: 0x4]
	float UnrealNetworkConnectingTime;//[Offset: 0x3e8, Size: 0x4]
	bool bUseDynamicCreateLuaManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 0x1]
	FString[] PersistentLuaManager;//[Offset: 0x3f0, Size: 0x10]
	bool bPatchReInitSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x408, Size: 0x8]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x410, Size: 0x8]
	BattleWindowMgrLuaUtils* LuaBattleWindowMgr;//[Offset: 0x418, Size: 0x8]
	LuaBlueprintMgr* LuaBlueprintSysMgr;//[Offset: 0x420, Size: 0x8]
	FString ScriptBPRelativeDir;//[Offset: 0x430, Size: 0x10]
	FString ScriptRelativeDir;//[Offset: 0x440, Size: 0x10]
	FString InGameLuaDir;//[Offset: 0x450, Size: 0x10]
	FString PreloadLuaFileRelativePath;//[Offset: 0x460, Size: 0x10]
	FString[] LuaDirList;//[Offset: 0x470, Size: 0x10]
	FString[] NoGCPackage;//[Offset: 0x480, Size: 0x10]
	float LuaTickTime;//[Offset: 0x490, Size: 0x4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 0x1]
	bool bAutoLoginEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 0x1]
	int PingFirstReportIntervalSecond;//[Offset: 0x4b8, Size: 0x4]
	int PingReportIntervalSecond;//[Offset: 0x4bc, Size: 0x4]
	int LossSyncIntervalSecond;//[Offset: 0x4c0, Size: 0x4]
	int PlayerStatusReportIntervalSecond;//[Offset: 0x4c4, Size: 0x4]
	int LossArraySyncIntervalSecond;//[Offset: 0x4c8, Size: 0x4]
	int vmInstrumentOptimization;//[Offset: 0x4d0, Size: 0x4]
	TssManager* TssMgr;//[Offset: 0x4d8, Size: 0x8]
	float PingReportInterval;//[Offset: 0x4f0, Size: 0x4]
	int64 DeactivatedThreshold;//[Offset: 0x608, Size: 0x8]
	int64 TimePassThreshold;//[Offset: 0x610, Size: 0x8]
	uint32 ImageDownloadClearDayCount;//[Offset: 0x618, Size: 0x4]
	delegate UIStackChangeDelegate;//[Offset: 0x620, Size: 0x10]
	delegate UIStackRecoverDelegate;//[Offset: 0x630, Size: 0x10]
	delegate OnFRefreshAdaptationUIEvent;//[Offset: 0x640, Size: 0x10]
	delegate OnFRefreshAdaptationExUIEvent;//[Offset: 0x650, Size: 0x10]
	delegate EnterBattleStageDelegate;//[Offset: 0x660, Size: 0x10]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x738, Size: 0x8]
	int FpsForWindowClient;//[Offset: 0x740, Size: 0x4]
	UDPPingCollector* UDPPingCollector;//[Offset: 0x748, Size: 0x8]
	bool UIElemLayoutJsonConfigSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]
	bool NationAllSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 0x1]
	bool NationBattleSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x752, Size: 0x1]
	bool NationRankSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x753, Size: 0x1]
	bool SelfieSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 0x1]
	bool ReportBugSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x755, Size: 0x1]
	bool FirstVoicePopupSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x756, Size: 0x1]
	bool GDPRForbidVoiceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x757, Size: 0x1]
	bool GDPRSettingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 0x1]
	int GDPRUserType;//[Offset: 0x75c, Size: 0x4]
	bool bShouldShowAdaptTipInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 0x1]
	float fLaggingFPSDiffThreshold;//[Offset: 0x764, Size: 0x4]
	float fLaggingFPSDiffThresholdMin;//[Offset: 0x768, Size: 0x4]
	float fLaggingFPSDiffThresholdMax;//[Offset: 0x76c, Size: 0x4]
	float fLaggingFrameTimeThreshold;//[Offset: 0x770, Size: 0x4]
	float fLaggingFrameTimeThresholdMin;//[Offset: 0x774, Size: 0x4]
	float fLaggingFrameTimeThresholdMax;//[Offset: 0x778, Size: 0x4]
	float fFPSReportInterval;//[Offset: 0x77c, Size: 0x4]
	bool bUnLoadNoGcPackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]
	Package*[] NoGcPackages;//[Offset: 0x798, Size: 0x10]
	bool bFlushAsyncLoadingBeforeGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 0x1]
	bool bEnablePandora;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9, Size: 0x1]
	bool bEnableJMLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ab, Size: 0x1]
	bool bEnableH5Cache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 0x1]
	bool bCheckWorldNameForLoadConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 0x1]
	ColorBlindnessMgr* ColorBlindnessMgrInstace;//[Offset: 0x868, Size: 0x8]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x870, Size: 0x10]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 0x1]
	int NativeHUDTickIndex;//[Offset: 0x884, Size: 0x4]
	AsyncLoadHelper* AsyncLoadHelper;//[Offset: 0x888, Size: 0x8]
	FString BattleUtilsClassName;//[Offset: 0x890, Size: 0x10]
	BattleUtils* BattleUtils;//[Offset: 0x8a0, Size: 0x8]
	delegate OnImagePickDetectEvent;//[Offset: 0x8b0, Size: 0x10]
	delegate OnPermissionResultEvent;//[Offset: 0x8c0, Size: 0x10]
	FString CurrentMapName;//[Offset: 0x8d0, Size: 0x10]
	void UnRegisterUIShowHideEventDelegate(FString Source);// 0x67188d0
	void TimeStatisticStop(int Type, FString Name);// 0x671875c
	void TimeStatisticStart(int Type);// 0x67186e0
	void TickUdpCollector(float DeltaTime);// 0x6718664
	void StatisVisibilityWidget(Widget* Widget);// 0x67185e8
	void StatisLoadedTexture(Texture* Texture);// 0x671856c
	bool StartGrayUpdate();// 0x6718534
	void StartDolphinUpdateAfterCDNUpdateFailed();// 0x6718520
	void StartCDNUpdateAfterDolphinUpdateFailed();// 0x671850c
	void ShutdownUnrealNetwork();// 0x67184f0
	void SetShouldShowAdaptTipInLobby(bool bShoudShow);// 0x671846c
	void SetGameSubMode(FString SubMode);// 0x67183c4
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x671826c
	void SetClientEnterBattleStage(FString InStageStr);// 0x67181c4
	void SetAccountByWebLogin(int Channel, FString OpenID, FString userId, FString TokenID, const int ExpireTime);// 0x6717fd8
	void RetryDownload();// 0x6717fc4
	void RetryCDNDownload();// 0x6717fb0
	void RequestPhotoPermission(delegate PermissionResultEvent);// 0x6717f14
	void RequestCameraPermission(delegate PermissionResultEvent);// 0x6717e78
	void ReportNetContinuousSaturate();// 0x6717e64
	void RemoveSuppotAdaptationBind(PanelSlot* PanelSlot);// 0x6717de8
	void ReleaseBattleUtils();// 0x6717dd4
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x6717d38
	void RegisterUIShowHideEventDelegate(FString Source, delegate Delegate);// 0x6717ba8
	void PickImageDetectQRCode(delegate ImagePickDetectEvent);// 0x6717b0c
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x6717a2c
	void OnWebviewActionNotify(FString URL);// 0x67178f8
	void OnUAAssistantEvent(out const UAAssistantInfoWrapper UAAssistentInfo);// 0x6717814
	void OnSDKCallbackEvent(out const SDKCallbackInfoWrapper sdkCallbackInfo);// 0x6717730
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x6717674
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x67174b4
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x67173d0
	void OnPlatformFriendNotify(out const PlatformFriendInfoMap PlatformFriendInfoMap);// 0x67172e0
	void OnNotUpdateFinished();// 0x67172cc
	void OnLoginFlowNotify(int _Flow, int _Param, FString ExtraData);// 0x6717114
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* downloader);// 0x6717060
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x6716fac
	void OnGetTicketNotify(FString Ticket);// 0x6716e78
	void OnGetShortUrlNotify(int Ret, FString ShortUrl);// 0x6716d04
	void OnGetCountryNoNotify(int country);// 0x6716c88
	void OnGenQRImgNotify(int Ret, int Size, FString imgPath);// 0x6716b64
	void OnGameMasterEvent(FString EventName, int Ret);// 0x67169f4
	void OnConnectorNetStateChangeNotify(int State, int EventParam1, int EventParam2, int EventParam3);// 0x67168cc
	void OnCheckUpdateStateFinished(out const DownloaderInfo Info);// 0x67167ec
	void OnAreaChanged(FString InArea);// 0x6716744
	void NotifyLoadingUIOperation(int OperationType);// 0x67166c8
	void MakeToSuppotAdaptation(PanelSlot* PanelSlot);// 0x671664c
	void LuaDoString(FString LuaString);// 0x671659c
	bool IsWindowOB();// 0x6716564
	bool IsInstallPlatform(FString PlatForm);// 0x6716424
	bool IsCEHideLobbyUI();// 0x67163ec
	bool HasAnyNetMsgToHandle();// 0x67163b4
	bool GetWidgetRenderCanChange();// 0x671637c
	VoiceSDKInterface* GetVoiceSDKInterface();// 0x6716340
	SaveGame* GetUserSettings();// 0x6716304
	GDolphinUpdater* GetUpdater();// 0x67162e8
	Translator* GetTranslator();// 0x67162cc
	bool GetShouldShowAdaptTipInLobby();// 0x6716294
	SettingSubsystem* GetSettingSubsystem();// 0x6716260
	GCPufferDownloader* GetPufferDownloader();// 0x6716244
	FString GetPlayerStatusReportInfo();// 0x67161a0
	FString GetPingReportInfo();// 0x67160fc
	int GetPhotoPermission();// 0x67160c8
	FString GetPacketLossReportInfo();// 0x6716024
	LuaStateWrapper* GetLuaStateWrapper();// 0x6715ff0
	LuaEventBridge* GetLuaEventBridge();// 0x6715fbc
	LuaBlueprintMgr* GetLuaBlueprintSysMgr();// 0x6715f88
	HttpWrapper* GetHttpWrapper();// 0x6715f6c
	FString GetGameSubMode();// 0x6715ee8
	GameStateBase* GetGameState();// 0x6715eb4
	FString GetFPSReportInfo();// 0x6715e10
	EffectSettingMgr* GetEffectSettingMgr();// 0x6715dd4
	int GetDetailNetInfoFromDPM();// 0x6715da0
	ColorBlindnessMgr* GetColorBlindnessMgr();// 0x6715d64
	Object* GetClientNetObj();// 0x6715d30
	FString GetClientEnterBattleStageCostTime();// 0x6715c8c
	FString GetClientEnterBattleStage();// 0x6715c08
	int GetCameraPermission();// 0x6715bd4
	BugReporter* GetBugReporter();// 0x6715ba0
	BattleUtils* GetBattleUtils();// 0x6715b6c
	FString GetBattleIDHexStr();// 0x6715ac8
	AsyncLoadHelper* GetAsyncLoadHelper();// 0x6715a94
	void FinishModifyUserSettings();// 0x6715a80
	void EnableFPSAndMemoryLog(bool bEnable);// 0x67159fc
	void DispatchLongTimeNoOperation(out const int TimeOutCounter);// 0x6715970
	void DispatchConfirmMisKill(FString KillerName);// 0x67158d8
	Texture2D* CreateQRCodeTexture(FString Text);// 0x6715820
	void CreateBattleUtils();// 0x671580c
	void CallGlobalScriptFunction(FString InFunctionName);// 0x671575c
	void BeginModifyUserSettings();// 0x6715748
	void BattleUtilsGameEnd();// 0x6715734
	void AfterLoadedEditorLogin();// 0x6715720
	void AddAdaptationWidgetDelegateEx(PanelSlot* PanelSlot);// 0x67156a4
	void AddAdaptationWidgetDelegate(PanelSlot* PanelSlot);// 0x6715628
<----------Generated by SSpawner v1.0.4---------->


Class: VoiceSDKInterface.Object
	int lbsRoomMemberID;//[Offset: 0x30, Size: 0x4]
	delegate OnSTTReportCallback;//[Offset: 0x50, Size: 0x10]
	delegate OnRSTSCallback;//[Offset: 0x60, Size: 0x10]
	delegate OnRSTSSpeechToTextCallback;//[Offset: 0x70, Size: 0x10]
	FString ServerInfo;//[Offset: 0x90, Size: 0x10]
	uint32 openVoiceSDKLog;//[Offset: 0xa0, Size: 0x4]
	uint32 MicVolumeMUFactor;//[Offset: 0xa4, Size: 0x4]
	uint32 SpeekerVolumeMUFactor;//[Offset: 0xa8, Size: 0x4]
	int RoomOperationTimeout;//[Offset: 0xac, Size: 0x4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xb0, Size: 0x8]
	delegate OpenMicFail;//[Offset: 0x148, Size: 0x10]
	delegate OpenMicSuccess;//[Offset: 0x158, Size: 0x10]
	delegate CloseMicFail;//[Offset: 0x168, Size: 0x10]
	delegate CloseMicSuccess;//[Offset: 0x178, Size: 0x10]
	delegate OpenSpeakerFail;//[Offset: 0x188, Size: 0x10]
	delegate OpenSpeakerSuccess;//[Offset: 0x198, Size: 0x10]
	delegate CloseSpeakerFail;//[Offset: 0x1a8, Size: 0x10]
	delegate CloseSpeakerSuccess;//[Offset: 0x1b8, Size: 0x10]
	delegate JoinRoomFail;//[Offset: 0x1c8, Size: 0x10]
	delegate JoinRoomNotify;//[Offset: 0x1d8, Size: 0x10]
	delegate QuitRoomNotify;//[Offset: 0x1e8, Size: 0x10]
	delegate JoinLbsRoomNotify;//[Offset: 0x1f8, Size: 0x10]
	delegate QuitLbsRoomNotify;//[Offset: 0x208, Size: 0x10]
	delegate RoomStatusUpdatedNotify;//[Offset: 0x218, Size: 0x10]
	delegate SetAppInfoSuccess;//[Offset: 0x228, Size: 0x10]
	delegate SetAppInfoFail;//[Offset: 0x238, Size: 0x10]
	delegate GetReconnectInfo;//[Offset: 0x248, Size: 0x10]
	delegate ImSpeakingNotify;//[Offset: 0x258, Size: 0x10]
	delegate TestMicFail;//[Offset: 0x268, Size: 0x10]
	delegate TestMicSuccess;//[Offset: 0x278, Size: 0x10]
	delegate QuitRoomFail;//[Offset: 0x288, Size: 0x10]
	delegate DownLoadFileNotify;//[Offset: 0x298, Size: 0x10]
	delegate UploadFileNotify;//[Offset: 0x2a8, Size: 0x10]
	delegate ApplyMessageKeyNotify;//[Offset: 0x2b8, Size: 0x10]
	delegate MemberIsSpeakingNotify;//[Offset: 0x2c8, Size: 0x10]
	delegate LbsMemberIsSpeakingNotify;//[Offset: 0x2d8, Size: 0x10]
	delegate OnMuteSwitchResult;//[Offset: 0x2e8, Size: 0x10]
	delegate ReportVoiceTimeToServer;//[Offset: 0x2f8, Size: 0x10]
	delegate RecordSuccess;//[Offset: 0x308, Size: 0x10]
	delegate RecordFail;//[Offset: 0x318, Size: 0x10]
	delegate UploadSuccess;//[Offset: 0x328, Size: 0x10]
	delegate UploadFail;//[Offset: 0x338, Size: 0x10]
	delegate DownloadFileSuccess;//[Offset: 0x348, Size: 0x10]
	delegate DownloadFileFail;//[Offset: 0x358, Size: 0x10]
	delegate EnableRoomMicrophone;//[Offset: 0x368, Size: 0x10]
	delegate ExitInfectionGameMode;//[Offset: 0x378, Size: 0x10]
	delegate JoinInfectionGameMode;//[Offset: 0x388, Size: 0x10]
	delegate RequestPrivacyInSetting;//[Offset: 0x398, Size: 0x10]
	delegate OnReportPlayerCallback;//[Offset: 0x3a8, Size: 0x10]
	delegate OnVoiceSDKEvent;//[Offset: 0x3b8, Size: 0x10]
	void UploadRecordFile(bool InPermanent);// 0x678589c
	int UploadRecordedFile(FString InFilePath, int InTimeout, bool InPermanent);// 0x6785760
	int UpdateVoiceCoordinate(FString InRoomName, int64 X, int64 Y, int64 Z, int64 Radius);// 0x67855bc
	void TestMic();// 0x67855a8
	bool TeamSpeakerEnable();// 0x678558c
	bool TeamMicphoneEnable();// 0x6785570
	void SwitchMode(enum CharMode);// 0x67854f4
	void SwitchMicphoneWhenCorpsMode();// 0x67854e0
	void SwitchCampRoom(enum campMode);// 0x6785464
	int StopRecording();// 0x6785430
	void StopRecord();// 0x678541c
	void StopPlayRecordFile();// 0x6785408
	void StopInterphone();// 0x67853f4
	void StopCampMode();// 0x67853e0
	int StartRecording(FString InFilePath, bool InNotVoip);// 0x67852e0
	void StartRecord();// 0x67852cc
	void StartInterphone();// 0x67852b8
	void StartCampMode(FString ZombieCampRoomName, FString ManCampRoomName, FString userId);// 0x6785144
	void ShowOpenSpeakerAtFirstMsg();// 0x6785128
	void ShowCorpsModeCannotUseLBSVoice();// 0x678510c
	void SetVoiceServer(FString ServerInfo);// 0x6785064
	void SetVoiceSDKSupportBackgroundChat(bool isSupportBGChat);// 0x6784fe0
	void SetVoiceSDKChatServiceEnable(bool IsEnable);// 0x6784f5c
	void SetVoiceMode(int Type);// 0x6784ee0
	void SetSpeakerVolum(float Value);// 0x6784e64
	void SetSpeakerStatus(bool Flag);// 0x6784de0
	int SetServerInfo(FString URL, FString InDefaultIpSvr);// 0x6784cc0
	void SetRoomOperationTimeout(int InTimeout);// 0x6784c44
	void SetReportBufferTime(int nTimeSec);// 0x6784bc8
	void SetPlayerVolume(FString InPlayerId, int InVol);// 0x6784a58
	int SetNotify();// 0x6784a24
	int SetMode(int InGVMode);// 0x6784998
	void SetMicphoneVolum(float Value);// 0x678491c
	void SetMicphoneStatus(bool Flag);// 0x6784898
	void SetLbsVoiceRadius(float Radius);// 0x6784820
	void SetLbsRoomEnableStatus(bool Flag);// 0x678479c
	void SetGMServerUrl(FString InServerUrl);// 0x67846ac
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x6784630
	void SetFeature(int8 InFeature, bool Inactive);// 0x6784570
	void SetCurrentDownloadFieldID(FString filedId);// 0x67843fc
	int SetAppInfo(FString InAppId, FString InAppKey, FString InOpenId);// 0x6784278
	void SetAllVoiceStatus(bool Flag);// 0x67841ec
	void RSTSStopRecording();// 0x67841d8
	int RSTSSpeechToText(int InSrcLang);// 0x678414c
	void ResetWhenLogOut();// 0x6784138
	bool ReportPlayers(FString InExtraInfo, FString[] InOpenids);// 0x6783e80
	int ReportFileForAbroad(FString InFilePath, bool InTranslate, bool InChangeVoice, int InTime);// 0x6783cf8
	void ReactiveLbsStatus();// 0x6783ce4
	int QuitVoiceRoom(FString InRoomName);// 0x6783c2c
	void QuitRoom();// 0x6783c18
	void QuitCommonRoom(FString InRoomName);// 0x6783b70
	int Poll();// 0x6783b3c
	void PlayRecordFile();// 0x6783b28
	int PlayRecordedFile(FString InDownloadInFilePath);// 0x6783a70
	int OpenVoiceSpeaker();// 0x6783a3c
	int OpenVoiceMic();// 0x6783a08
	void OpenTeamSpeakerOnly(bool ShowTips);// 0x6783984
	int OpenTeamMicphoneOnly(bool ShowTips);// 0x67838f0
	int OpenTeamInterphone();// 0x67838bc
	int OpenSpeaker();// 0x6783888
	void OpenMicAndSpeakerAfterJoinLbsRoom();// 0x6783874
	int OpenMic();// 0x6783840
	void OpenIngameSpeaker();// 0x678382c
	int OpenIngameMicphone();// 0x67837f8
	void OpenAllSpeaker(bool ShowTips);// 0x6783774
	int OpenAllMicphone(bool ShowTips);// 0x67836e0
	int OpenAllInterphone();// 0x67836ac
	void OnRoomTypeChanged(FString itemtext);// 0x67835a0
	void OnResume();// 0x678358c
	void OnPause();// 0x6783578
	bool LbsSpeakerEnable();// 0x678355c
	bool LbsMicphoneEnable();// 0x6783540
	int JoinTeamRoom(FString InRoomName);// 0x6783488
	void JoinRoom(FString room, FString userId);// 0x6783278
	int JoinRangeRoom(FString InRoomName);// 0x67831c0
	void JoinLbsRoom(FString lbsRoom, FString userId);// 0x6782fb0
	void JoinCommonRoom(FString InRoomName);// 0x6782f08
	bool IsVoiceSDKEnable();// 0x6782ed0
	bool IsTeamInterphoneOpenned();// 0x6782eb4
	bool IsSpeaking();// 0x6782e7c
	bool IsLbsInterphoneOpenned();// 0x6782e60
	bool IsInterphoneMode();// 0x6782e30
	bool IsEnableCivilFile();// 0x6782df8
	int Invoke(uint32 InCmd, uint32 InParam1, uint32 InParam2, FString InExterInfo);// 0x6782c8c
	void InitVoiceSDKComponent(FString userId);// 0x6782b58
	int InitVoiceSDK();// 0x6782b24
	void Init();// 0x6782b10
	bool HaveTeamRoom();// 0x6782ad8
	bool HaveLbsRoom();// 0x6782aa0
	float GetVoiceLength();// 0x6782a6c
	FString GetTeamRoomName();// 0x67829c8
	int GetRoomStatus(FString InRoomName);// 0x6782910
	int GetPlayerVolume(FString InPlayerId);// 0x67827d4
	int GetMicState();// 0x67827a0
	FString GetLocalRecordFilePath(FString InFileName);// 0x6782684
	FString GetLbsRoomName();// 0x67825e0
	FString GetGMServerUrl();// 0x67824e0
	void GetAuthKey();// 0x67824cc
	int GetAudioDeviceConnectionState();// 0x6782498
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x67823d8
	int ForbidMemberVoice(int InMember, bool InEnable, FString InRoomName);// 0x678229c
	void ForbidLbsMemberVoiceById(int memberID, bool IsEnable);// 0x67821dc
	int EnableVoiceRoomMicrophone(FString InRoomName, bool InEnable);// 0x67820dc
	void EnableVoiceChat(bool InEnable);// 0x6782058
	int EnableRoomSpeaker(FString InRoomName, bool InEnable);// 0x6781f58
	int EnableReportForAbroad(bool InIsWholeRoundaudit);// 0x6781ec4
	bool EnableReportALLAbroad(bool InEnable, bool InWithEncryption, int InTimeout);// 0x6781da4
	int EnableMultiRoom(bool InEnable);// 0x6781d10
	void EnableLog(bool InEnable);// 0x6781c8c
	int EnableCivilFile(bool Enable);// 0x6781bf8
	void EnableBluetoothSCO(bool InEnable);// 0x6781b74
	void DownloadRecordFile(bool InPermanent);// 0x6781af0
	int DownloadRecordedFile(FString InFileID, FString InDownloadInFilePath, int InTimeout, bool InPermanent);// 0x6781950
	void CommonTestMic();// 0x678193c
	int CloseVoiceSpeaker();// 0x6781908
	int CloseVoiceMic();// 0x67818d4
	void CloseSpeaker();// 0x67818c0
	void CloseMic();// 0x67818ac
	void CloseIngameSpeaker();// 0x6781890
	void CloseIngameMicphone();// 0x6781874
	void CloseAllSpeaker(bool ShowTips);// 0x67817f0
	void CloseAllMicphone(bool ShowTips);// 0x678176c
	int CheckDeviceMuteState();// 0x6781738
	void CheckAndEnableRoomSpeaker();// 0x6781724
	void ChatShowAgeRestrictionMsgInLobby();// 0x6781708
	void ChatShowAgeRestrictionMsgInFighting();// 0x67816ec
	void ChatShowAgeRestrictionMsgInChat();// 0x67816d0
	void ChatRequestPrivacyInSetting();// 0x67816bc
	void ChatRequestPrivacyInGame();// 0x67816a8
	int ApplyMessageKey();// 0x6781674
	void AlwaysDisableRoomMic(FString InRoomName, bool WithClear);// 0x6781584
<----------Generated by SSpawner v1.0.4---------->


Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString ImagePath, float X, float Y, float Z);// 0x67044b8
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, bool zipLogUpload);// 0x6704168
	void ReadZipLog(FString Filename);// 0x6704034
	byte[] CompressLog(bool pullAllLog);// 0x6703f38
<----------Generated by SSpawner v1.0.4---------->


Class: GMLogShare.Object
	static void ShareLogFile();// 0x6727360
	static void Init();// 0x672734c
<----------Generated by SSpawner v1.0.4---------->


Class: GDolphinUpdater.Object
	<FString,FString> pakHashList;//[Offset: 0x68, Size: 0x50]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192, Size: 0x1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x194, Size: 0x4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x198, Size: 0x4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x19c, Size: 0x4]
	bool EnableRandomBackupURL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	bool EnablePufferUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1, Size: 0x1]
	FString UpdateInfoPath;//[Offset: 0x1b8, Size: 0x10]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	void StartAppUpdate();// 0x6721d08
	void SetEnableCDNGetVersion(bool Enable);// 0x6721c84
	void OnUpdateError(int curVersionStage, int ErrorCode);// 0x6721bd0
	void OnDolphinBGDownloadDone();// 0x6721bbc
	void OnAreaChanged(FString InArea);// 0x6721b14
	bool IsUpdating();// 0x6721adc
	bool IsInstallInApp();// 0x6721aa4
	bool IsGrayUpdate();// 0x6721a6c
	bool IsExamine();// 0x6721a34
	void Install();// 0x6721a20
	int GetTotalValue();// 0x67219ec
	int GetCurValue();// 0x67219b8
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x6721874
	float GetCurPercent();// 0x6721840
	uint32 GetChannelIDWithHUD(GameFrontendHUD* InGameFrontendHUD);// 0x67217b4
	uint32 GetChannelID();// 0x6721780
	void FinishUpdate();// 0x672176c
	void FinishPufferUpdate();// 0x6721758
	void EnableIOSBGDownload4G(bool bEnableCellularAccess);// 0x67216d4
	bool EnableCDNGetVersion();// 0x672169c
	void ContinueUpdate();// 0x6721688
	void CancelUpdate();// 0x6721674
	void CancelAppUpdate();// 0x6721660
<----------Generated by SSpawner v1.0.4---------->


Class: Translator.Object
	FString SubscriptionKey;//[Offset: 0x28, Size: 0x10]
	FString StoredAccessToken;//[Offset: 0x38, Size: 0x10]
	delegate OnGetAccessTokenDelegate;//[Offset: 0x48, Size: 0x10]
	delegate OnDetectDelegate;//[Offset: 0x58, Size: 0x10]
	delegate OnTranslateDelegate;//[Offset: 0x68, Size: 0x10]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xf8, Size: 0x8]
	void TranslateV2(int Channel, int ID, FString Text);// 0x6774920
	void Translate(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x677469c
	void PostMsg(FString URL, FString Content);// 0x677458c
	void OnTranslateV2(bool Success, FString Data);// 0x6774494
	void OnTranslate__DelegateSignature(bool IsSuccess, FString LanguageFrom, FString Translation);// 0x70644c4
	void OnTranslate(bool Success, FString Data);// 0x677439c
	void OnGetAccessTokenV2(bool Success, FString Data);// 0x67742a4
	void OnGetAccessToken__DelegateSignature(bool IsSuccess, FString Token);// 0x70644c4
	void OnGetAccessToken(bool Success, FString Data);// 0x67741ac
	void OnDetectV2(bool Success, FString Data);// 0x67740b4
	void OnDetect__DelegateSignature(bool IsSuccess, FString from, FString to);// 0x70644c4
	void OnDetect(bool Success, FString Data);// 0x6773fbc
	bool HasTranslating();// 0x6773f84
	void GetAccessToken(bool bForceGet, FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x6773cb4
	void Detect(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x6773a30
<----------Generated by SSpawner v1.0.4---------->


Class: HttpWrapper.Object
	delegate OnResponseEvent;//[Offset: 0x28, Size: 0x10]
	delegate OnImageDownloadResponseEvent;//[Offset: 0x38, Size: 0x10]
	void SimplePostForLua(FString URL, FString Content, int Priority, int QueueType);// 0x6728d64
	void SetQueueSize(int QueueType, int InSize);// 0x6728cb0
	void SetQueueEnable(bool InEnableQueue);// 0x6728c30
	void SetPoolEnable(bool InEnablePool);// 0x6728ba8
	int RequestForLua(FString URL, FString Verb, out <FString,FString> Headers, FString Content, int Priority, int QueueType);// 0x672890c
	int ImageDownloadRequestForLua(FString URL, FString Verb, out <FString,FString> Headers, FString Content, int Priority);// 0x67286a8
	bool GetQueueEnable();// 0x672868c
	bool GetPoolEnable();// 0x672865c
	int GetInternalIndex();// 0x6728640
	void CancelRequestAll(int QueueType);// 0x67285c4
	void CancelRequest(int QueueType, int ReqIndex);// 0x6728510
<----------Generated by SSpawner v1.0.4---------->


Class: GCPufferDownloader.Object
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	FString DownloadDir;//[Offset: 0x388, Size: 0x10]
	FString PufferTmpDir;//[Offset: 0x398, Size: 0x10]
	uint32 CleanFlagVer;//[Offset: 0x3a8, Size: 0x4]
	FString[] CleanFileNamePattern;//[Offset: 0x3b0, Size: 0x10]
	bool PreFetchPakEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	bool PreFetchFileClearEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 0x1]
	bool PreFetchConvertEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 0x1]
	FString[] PreFetchPakNames;//[Offset: 0x3c8, Size: 0x10]
	uint32 PreFetchReserveredDiskSpace;//[Offset: 0x3d8, Size: 0x4]
	bool PreFetchODPak_Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1]
	int PreFetchODPaks_MaxNum;//[Offset: 0x3e0, Size: 0x4]
	int PreFetchODPaks_BatchSize;//[Offset: 0x3e4, Size: 0x4]
	int PreFetchODPaks_FetchedNum;//[Offset: 0x3e8, Size: 0x4]
	int PreFetchODPaks_FetchedIndex;//[Offset: 0x3ec, Size: 0x4]
	FString[] PreFetchODPaks_Filenames;//[Offset: 0x3f0, Size: 0x10]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 0x1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x402, Size: 0x1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x404, Size: 0x4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x408, Size: 0x4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x40c, Size: 0x4]
	bool DisableBGDownloadNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	float PreFetchODPaks_StartTime;//[Offset: 0x414, Size: 0x4]
	FString PreFetchODPaks_ConfigName;//[Offset: 0x418, Size: 0x10]
	bool StopTask(uint64 TaskId);// 0x6726018
	int StopMergeBinDiffPak(int outterTaskID);// 0x6725f8c
	bool StopCheckDownloadFileFraming(int outterTaskID);// 0x6725efc
	void StopBGDownloadNotification();// 0x6725ee8
	bool StopAllTask();// 0x6725eb0
	void StartDownloadItem(uint32 ItemId, uint32 Priority, delegate downloadDelegate);// 0x6725da0
	void StartBGDownloadNotification(uint64 InDownloadedSize);// 0x6725d24
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x6725b58
	void SetTempProductIdBase(int ProductIdRaw);// 0x6725adc
	void SetTempProductId(FString ProductIdRaw);// 0x67259a8
	void SetPrefetchConfig(bool pakEnable, bool fileClearEnable, bool convertEnable, int reserveredDiskSpace, FString FileList, int InPreFetchODPaksMaxNum, int InPreFetchODPaksBatchSize);// 0x67256e4
	void SetIOSBGDownloadAttribute(bool bEnableCellularAccess, bool bEnableResumeData, int nMinFileSize, int nMaxTasks);// 0x67255a0
	bool SetImmDLMaxSpeed(uint64 MaxSpeed);// 0x6725510
	void SetBattleDownloadSwitch(bool Enable);// 0x672548c
	static int ReturnSplitMiniPakFilelist_LuaState();// 0x6725474
	static int ReturnLocalFiles_LuaState();// 0x672545c
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x67252d4
	bool RemountPakFiles();// 0x672529c
	FString ReadFile(FString Filename);// 0x6725100
	bool PreFetchPakFiles();// 0x67250c8
	int PreFetchODPakFilesUpdate();// 0x6725094
	bool PreFetchODPakFilesPreProcess(bool Start);// 0x6724ffc
	bool PreFetchODPakFilesPostProcess(int ErrorCode);// 0x6724f6c
	bool PreFetchODPakFiles(bool Start);// 0x6724ed4
	void OnItemDownloadedInFighting(FString PackHash, FString ErrorCode);// 0x6724cc4
	void OnHashGenerateFinished(int outterTaskID, FString hashCode);// 0x6724b50
	int MoveFileTo(FString Filename, FString from, FString to);// 0x672485c
	int MoveFile(FString from, FString to);// 0x6724644
	int MergeBinDiffPak(int outterTaskID, FString PakFilenameOld, FString PakFilenameDiff, FString PakFilenameNew, bool fast);// 0x67242c4
	bool IsODPaks(FString FilePath);// 0x6724184
	bool IsODFileExists(FString Path);// 0x67240c8
	bool IsInitSuccess();// 0x6724090
	bool IsFileReady(FString FilePath);// 0x6723f50
	bool IsFileExist(FString Filename, FString extension);// 0x6723d34
	bool InitializeODPaks();// 0x6723cfc
	FString GetTempWorkPath();// 0x6723c58
	void GetProductIDBase(out int[] ProductIDs);// 0x6723ba0
	void GetProductID(out int[] ProductIDs);// 0x6723ae8
	int GetODPakNum();// 0x6723ab4
	FString GetODPakName(FString Path);// 0x6723998
	uint32 GetInitErrcode();// 0x6723964
	uint64 GetFileSizeCompressed(FString FilePath);// 0x6723828
	float GetFileSize(FString Filename);// 0x67236ec
	FString GetDownloadPath();// 0x6723648
	float GetCurrentSpeed();// 0x6723614
	int GetBatchODPaksDownloadList_LuaState();// 0x67235fc
	void EnableUseOldInterface(bool Enable);// 0x6723578
	bool DeleteFileEvenIfUnfinished(FString FilePath);// 0x6723438
	static bool DeleteFile(FString fullPath);// 0x6723300
	bool ConvertPreFetchFiles();// 0x67232c8
	FString ConvertItemIdToPakName(uint32 ItemId);// 0x67231d4
	bool ClearUselessODPaks();// 0x672319c
	bool ClearPreFetchODPaksFiles();// 0x6723164
	bool ClearPreFetchFiles();// 0x672312c
	bool CheckDownloadFileFraming(int outterTaskID, FString Filename, int chunkSize);// 0x6722f68
<----------Generated by SSpawner v1.0.4---------->


Class: LaggingReporter.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x48, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AsyncTaskDownloader.BlueprintAsyncActionBase.Object
	delegate onRequestHandler;//[Offset: 0x58, Size: 0x10]
	static AsyncTaskDownloader* DownloadContent(const FString URL, int loaderType, const FString savedDir, bool breakpointContinualTransfer);// 0x67001e4
<----------Generated by SSpawner v1.0.4---------->


Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x8c9cc24
<----------Generated by SSpawner v1.0.4---------->


Class: CDNUpdate.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xb8, Size: 0x8]
	void StartUpdateApp();// 0x670efd4
	void StartAppUpdate(bool StartGrayUpdate);// 0x670ef50
	void OnRequestProgress(out const CDNDownloaderInfo Info);// 0x670ee94
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x670edd8
	bool IsUpdating();// 0x670eda0
	bool IsGrayUpdate();// 0x670ed68
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x670ec24
	void FinishUpdate();// 0x670ec10
	void ContinueUpdate();// 0x670ebfc
	void CancelUpdate();// 0x670ebe8
<----------Generated by SSpawner v1.0.4---------->


Class: CDNDownloaderInfo
	enum State;//[Offset: 0x0, Size: 0x1]
	FString FileSavePath;//[Offset: 0x8, Size: 0x10]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int BytesSent;//[Offset: 0x1c, Size: 0x4]
	int BytesReceived;//[Offset: 0x20, Size: 0x4]
	int ContentType;//[Offset: 0x24, Size: 0x4]
	int ResponseCode;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: LuaEventBridge.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x28, Size: 0x8]
	<FString,EventTypeContainer> RegisterEventMap;//[Offset: 0x38, Size: 0x50]
	<FString,LuaEventTypeContainer> LuaRegisterEventMap;//[Offset: 0x88, Size: 0x50]
	<uint32,LuaEventTypeToIDSet> FilterKeyRegisterMap;//[Offset: 0xd8, Size: 0x50]
	LuaTemBPData*[] CurrentParamArray;//[Offset: 0x128, Size: 0x10]
	Property*[] Params;//[Offset: 0x138, Size: 0x10]
	void SyncLuaRegisterEventNum(FString EventType, FString EventId, int Number);// 0x648aa38
	LuaTemBPData*[] GetCurrentParam();// 0x648a9b4
	void DeactivateEventsByFilterKey(out const uint32 FilterKey);// 0x648a928
	bool CheckNeedPostEventWithFilterKey(out const uint32 FilterKey, FString EventType, FString EventId, bool bCheckNeedPostLua);// 0x648a770
	void ActiveEventByFilterKey(out const uint32 FilterKey, FString EventType, FString EventId, const bool bActive);// 0x648a5c4
<----------Generated by SSpawner v1.0.4---------->


Class: EventTypeContainer
	<FString,EventIDContainer> EventIDContainer;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: EventIDContainer
	EventValueContainer[] EventValueContainer;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: EventValueContainer
	Object* ObjContext;//[Offset: 0x0, Size: 0x8]
	FString FunctionName;//[Offset: 0x8, Size: 0x10]
	FString EventType;//[Offset: 0x18, Size: 0x10]
	FString EventId;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LuaEventTypeContainer
	<FString,int> EventIDContainer;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: LuaEventTypeToIDSet
	<FString,LuaEventTypeIDSet> EventTypeToIDSet;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: LuaEventTypeIDSet
	<FString> EventIDSet;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: LuaTemBPData.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BattleWindowMgrLuaUtils.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x28, Size: 0x8]
	FString LuaManagerName;//[Offset: 0x30, Size: 0x10]
	FString ShowUI;//[Offset: 0x40, Size: 0x10]
	FString HideUI;//[Offset: 0x50, Size: 0x10]
	FString CheckWindowOpen;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LuaBlueprintMgr.Object
	<FString,LuaBluepirntSys*> SystemMap;//[Offset: 0x28, Size: 0x50]
	LuaBluepirntSys* GetSystemByName(const FString SystemName);// 0x67352a0
	void AddSystem(const FString SystemName, const FString BPPath);// 0x6735090
<----------Generated by SSpawner v1.0.4---------->


Class: LuaBluepirntSys.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 0x10]
	void Init();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: TssManager.Object
	FString TssHostInfo;//[Offset: 0x28, Size: 0x10]
	FString TssCDNHostInfo;//[Offset: 0x38, Size: 0x10]
	FString TssBuildInIpInfo;//[Offset: 0x48, Size: 0x10]
	int TssLocal;//[Offset: 0x58, Size: 0x4]
	static int SendSkdData_LuaState();// 0x67751d0
	static int SendEigeninfoData_LuaState();// 0x67751b8
	static uint32 SaveSendEigeninfoCode_LuaState();// 0x67751a0
	static int OnRecvData_LuaState();// 0x6775188
	static uint32 InvokeSDKIoctl(int Command, FString InCmdData);// 0x67750a0
	static int GetUserTag4Lua_LuaState();// 0x6775088
	static int GetDeviceFeature_LuaState();// 0x6775070
	static int EigenArrayObfuscationVerify_LuaState();// 0x6775058
<----------Generated by SSpawner v1.0.4---------->


Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	FString FileURL;//[Offset: 0x48, Size: 0x10]
	FString CompreesedFileUrl;//[Offset: 0x58, Size: 0x10]
	FString FileSavePath;//[Offset: 0x68, Size: 0x10]
	FString CompreesedFileSavePath;//[Offset: 0x78, Size: 0x10]
	FString UrlHash;//[Offset: 0x88, Size: 0x10]
	FString CompreesedUrlHash;//[Offset: 0x98, Size: 0x10]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	bool ForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 0x1]
	void Start(FString URL);// 0x67298bc
	static ImageDownloader* MakeDownloaderInGame();// 0x6729888
	static ImageDownloader* MakeDownloader();// 0x6729854
	Texture2D* GetTextureFromUrlWithoutDownload(FString URL);// 0x6729718
	static FString CheckAndGetEncryptUrl(out FString InUrl);// 0x67295fc
<----------Generated by SSpawner v1.0.4---------->


Class: UDPPingCollector.Object
	<FString,PingServerInfo> mUDPPingInfoMap;//[Offset: 0x58, Size: 0x50]
	delegate UDPPingShadowResultToLuaDelegate;//[Offset: 0xc8, Size: 0x10]
	void TickUDPPing(float DeltaTime);// 0x677ceb0
	void setUDPPingServerAddress(FString ServerIP, FString ServerPort, int ZoneID, int WaterMarkType);// 0x677cc2c
	void PingServer(FString address, float Timeout, int WaterMarkType);// 0x677ca80
	void OnPingServerResultDelegate__DelegateSignature(FString address, int IsSuccess, float Time);// 0x70644c4
	bool IsChooingZoneAccess();// 0x677ca48
	bool isAllZoneHasPingValue();// 0x677ca10
	void Init(float MinPingintervalTime, float pingintervalTime, float pingTimeoutSecond, float normalDelayMilliSecond, float maxAutoChooseZoneDelayMilliSecond);// 0x677c8ac
	float GetZoneServerDelay(FString ServerAddress);// 0x677c770
	int GetMinDealyAddress();// 0x677c73c
	void ChoosingZone(int ZoneID, FString AddrIP);// 0x677c5c8
<----------Generated by SSpawner v1.0.4---------->


Class: PingServerInfo
<----------Generated by SSpawner v1.0.4---------->


Class: Package.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ColorBlindnessMgr.Object
	<int,LinearColor> CBColorMap;//[Offset: 0x28, Size: 0x50]
	<int,ParticleSysColor> CBParticleColorMap;//[Offset: 0x78, Size: 0x50]
	<uint32,ImageOriginal> HandleCBColorImageContaner;//[Offset: 0xc8, Size: 0x50]
	<uint32,HandleMesh> HandleCBColorMeshContaner;//[Offset: 0x118, Size: 0x50]
	<uint32,HandleParticleSystem> HandleCBColorParticleContaner;//[Offset: 0x168, Size: 0x50]
	void Reset();// 0x5e4d9b8
	void RemoveParticleSystem(ParticleSystemComponent* ParticleSystem);// 0x5e4d93c
	void RemoveMeshComponent(MeshComponent* Mesh);// 0x5e4d8c0
	void RemoveImage(Image* Image);// 0x5e4d844
	void HandleUserSettingChange();// 0x5e4d830
	LinearColor GetColorByType(int Type);// 0x5e4d7a0
	void Clear();// 0x5e4d78c
	void AddParticleSystem(ParticleSystemComponent* ParticleSystem, int Type);// 0x5e4d6d4
	void AddMeshComponent(MeshComponent* Mesh, int Type);// 0x5e4d61c
	void AddImage(Image* Image, LinearColor Color, int Type);// 0x5e4d528
	void AddColorByType(FString Type, LinearColor Color);// 0x5e4d3b8
<----------Generated by SSpawner v1.0.4---------->


Class: ParticleSysColor
	<FString,LinearColor> colorMap;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: ImageOriginal
	LinearColor OriginalColir;//[Offset: 0x8, Size: 0x10]
	int Type;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: HandleMesh
	int Type;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: HandleParticleSystem
	int Type;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0, Size: 0x4]
	UAEUserWidget* pWidget;//[Offset: 0x4, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AsyncLoadHelper.Object
	<FString,Object*> PreloadObjectMap;//[Offset: 0x28, Size: 0x50]
	void SetMaxTaskNum(int Num);// 0x66febe4
	void RunNextTask();// 0x66febd0
	void OnLoadCallBack(SoftObjectPath softObjPath);// 0x66fea94
	void ClearOneTask(FString ObjectPath);// 0x66fe960
	void ClearAllTask();// 0x66fe94c
	void AddTask(FString ObjectPath, int LoadPriority);// 0x66fe7dc
<----------Generated by SSpawner v1.0.4---------->


Class: BattleUtils.Object
	GameFrontendHUD* OwningFrontendHUD;//[Offset: 0x88, Size: 0x8]
	UAEGameMode* BattleGameMode;//[Offset: 0xa0, Size: 0x8]
	BattlePlayer*[] BattlePlayerList;//[Offset: 0xa8, Size: 0x10]
	BattleGameInfo CachedBattleGameInfo;//[Offset: 0xb8, Size: 0x38]
	GameModeAIPlayerParams CachedAIPlayerParams;//[Offset: 0xf0, Size: 0x3d0]
	FString LuaFilePath;//[Offset: 0x4c0, Size: 0x10]
	uint32 SyncNewBattlePlayer(uint64 UID, out const PlayerInfoData Info);// 0x6702c44
	void SyncGameInfo(out const BattleGameInfo Info);// 0x6702b5c
	void SyncGameExit();// 0x6702b48
	void SyncBattlePlayerExit(uint64 UID, FName PlayerType, FString Reason);// 0x6702990
	GameModePlayerParams RetrievePlayerParams(PlayerID PlayerID);// 0x67028cc
	GameModeAIPlayerParams RetrieveAIPlayerParams(PlayerID PlayerID);// 0x67027f4
	void ResponPlayerWeaponDIYData(uint64 PlayerUID, WeaponDIYData InWeaponDIYData);// 0x67026e8
	void RequestSomePlayersBattleData(uint64[] PlayerUIDList, byte DataType);// 0x6702578
	void RequestPlayerWeaponDIYData(uint64 PlayerUID, int WeaponSkinID, int PlanID);// 0x6702488
	void RequestOnePlayersBattleData(uint64 PlayerUID, byte DataType);// 0x67023d0
	void RequestAllPlayersBattleData(byte DataType);// 0x6702354
	void OnPostLoadMapWithWorld(World* World);// 0x67022d8
	BattlePlayer* NewBattlePlayer();// 0x67022a4
	BattleAIPlayer* NewBattleAIPlayer();// 0x6702270
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x67021e4
	UAEGameMode* GetBattleGameMode();// 0x67021b0
	void GenerateAIPlayerParams(out const PlayerInfoData Info);// 0x67020a8
	BattlePlayer* FindPlayerByUID(uint64 UID, FName PlayerType);// 0x6701fe4
	BattlePlayer* FindPlayerByPlayerName(FString PlayerName, FName PlayerType);// 0x6701e6c
	BattlePlayer* FindPlayerByPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x6701da4
<----------Generated by SSpawner v1.0.4---------->


Class: BattlePlayer.Object
	uint64 UID;//[Offset: 0x28, Size: 0x8]
	PlayerInfoData PlayerInfoData;//[Offset: 0x30, Size: 0xc8]
	PlayerAvatarData PlayerAvatarData;//[Offset: 0xf8, Size: 0x18]
	<int,WeaponDIYData> WeaponDIYData;//[Offset: 0x110, Size: 0x50]
	BattleUtils* OwningBattleUtils;//[Offset: 0x160, Size: 0x8]
	GameModePlayerParams ExtractGameModePlayerParams();// 0x6701410
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerInfoData.ResponResult
	FString PlayerType;//[Offset: 0x8, Size: 0x10]
	FString PlayerName;//[Offset: 0x18, Size: 0x10]
	uint32 PlayerKey;//[Offset: 0x28, Size: 0x4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	byte PlayerGender;//[Offset: 0x2d, Size: 0x1]
	int TeamID;//[Offset: 0x30, Size: 0x4]
	int64 CampID;//[Offset: 0x38, Size: 0x8]
	int PlayerBornPointID;//[Offset: 0x40, Size: 0x4]
	GameModePlayerItem[] ItemList;//[Offset: 0x48, Size: 0x10]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0x58, Size: 0x10]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x68, Size: 0xc]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x78, Size: 0x10]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x88, Size: 0x38]
	int planeAvatarId;//[Offset: 0xc0, Size: 0x4]
	int RolewearIndex;//[Offset: 0xc4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerAvatarData.ResponResult
	AvatarBackpack[] AvatarBackpackData;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarBackpack
	int[] WeaponAvatarList;//[Offset: 0x0, Size: 0x10]
	int[] VehicleAvatarList;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleGameInfo
	uint64 GameID;//[Offset: 0x0, Size: 0x8]
	FString GameModeID;//[Offset: 0x8, Size: 0x10]
	int GameMapID;//[Offset: 0x18, Size: 0x4]
	int WeatherID;//[Offset: 0x1c, Size: 0x4]
	FString WeatherName;//[Offset: 0x20, Size: 0x10]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerID
	FName PlayerType;//[Offset: 0x0, Size: 0x8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleAIPlayer.BattlePlayer.Object
	GameModeAIPlayerParams ExtractGameModeAIPlayerParams();// 0x6701930
<----------Generated by SSpawner v1.0.4---------->


Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 0x4]
	FString Reason;//[Offset: 0x8, Size: 0x10]
	int extend;//[Offset: 0x18, Size: 0x4]
	int Extend2;//[Offset: 0x1c, Size: 0x4]
	FString MsgData;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UAAssistantInfoWrapper
	enum UAType;//[Offset: 0x0, Size: 0x1]
	int Result;//[Offset: 0x4, Size: 0x4]
	FString ExtraJson;//[Offset: 0x8, Size: 0x10]
	FString RetsultMsg;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SDKCallbackInfoWrapper
	enum CallbackType;//[Offset: 0x0, Size: 0x1]
	FString CallbackParameter;//[Offset: 0x8, Size: 0x10]
	FString ExtraJson;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WakeupInfoWrapper
<----------Generated by SSpawner v1.0.4---------->


Class: PlatformFriendInfoMap
	int page;//[Offset: 0x0, Size: 0x4]
	<FString,FString> friendsInfo;//[Offset: 0x8, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0, Size: 0x4]
	int Flag;//[Offset: 0x4, Size: 0x4]
	int ErrorCode;//[Offset: 0x8, Size: 0x4]
	int PlatForm;//[Offset: 0xc, Size: 0x4]
	FString Desc;//[Offset: 0x10, Size: 0x10]
	NoschatGroupInfomation noschatGroupInfo;//[Offset: 0x20, Size: 0x30]
<----------Generated by SSpawner v1.0.4---------->


Class: NoschatGroupInfomation
	FString OpenIdList;//[Offset: 0x0, Size: 0x10]
	FString MemberNum;//[Offset: 0x10, Size: 0x10]
	FString ChatRoomURL;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DownloaderInfo
	enum State;//[Offset: 0x0, Size: 0x1]
	FString FileSavePath;//[Offset: 0x8, Size: 0x10]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int BytesSent;//[Offset: 0x1c, Size: 0x4]
	int BytesReceived;//[Offset: 0x20, Size: 0x4]
	int ContentType;//[Offset: 0x24, Size: 0x4]
	int ResponseCode;//[Offset: 0x28, Size: 0x4]
	FString StringContent;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SettingConfig_C.SaveGame.Object
	void ConditionSetFireGyroData(bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue2, bool CallFunc_EqualEqual_FloatFloat_ReturnValue3, bool CallFunc_EqualEqual_FloatFloat_ReturnValue4, bool CallFunc_EqualEqual_FloatFloat_ReturnValue5, bool CallFunc_EqualEqual_FloatFloat_ReturnValue6, bool CallFunc_EqualEqual_FloatFloat_ReturnValue7, bool CallFunc_EqualEqual_FloatFloat_ReturnValue8, bool CallFunc_EqualEqual_FloatFloat_ReturnValue9, bool CallFunc_EqualEqual_FloatFloat_ReturnValue10);// 0x70644c4
	void Init(FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x70644c4
	int CrossHairColor;//[Offset: 0x28, Size: 0x4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 0x1]
	int LeftHandFire;//[Offset: 0x30, Size: 0x4]
	int Gyroscope;//[Offset: 0x34, Size: 0x4]
	int ArtQuality;//[Offset: 0x38, Size: 0x4]
	float ViewPercentage;//[Offset: 0x3c, Size: 0x4]
	int FireMode;//[Offset: 0x40, Size: 0x4]
	int VehicleControlMode;//[Offset: 0x44, Size: 0x4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	int CameraLensSensibility;//[Offset: 0x4c, Size: 0x4]
	float CamLensSenNoneSniper;//[Offset: 0x50, Size: 0x4]
	float CamLensSenRedDotSniper;//[Offset: 0x54, Size: 0x4]
	float CamLensSen2XSniper;//[Offset: 0x58, Size: 0x4]
	float CamLensSen4XSniper;//[Offset: 0x5c, Size: 0x4]
	float CamLensSen8XSniper;//[Offset: 0x60, Size: 0x4]
	int FireCameraLensSensibility;//[Offset: 0x64, Size: 0x4]
	float FireCamLensSenNoneSniper;//[Offset: 0x68, Size: 0x4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x6c, Size: 0x4]
	float FireCamLensSen2XSniper;//[Offset: 0x70, Size: 0x4]
	float FireCamLensSen4XSniper;//[Offset: 0x74, Size: 0x4]
	float FireCamLensSen8XSniper;//[Offset: 0x78, Size: 0x4]
	int GyroscopeSensibility;//[Offset: 0x7c, Size: 0x4]
	float GyroscopeSenNoneSniper;//[Offset: 0x80, Size: 0x4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x84, Size: 0x4]
	float GyroscopeSen2XSniper;//[Offset: 0x88, Size: 0x4]
	float GyroscopeSen4XSniper;//[Offset: 0x8c, Size: 0x4]
	float GyroscopeSen8XSniper;//[Offset: 0x90, Size: 0x4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	float MainVolumValue;//[Offset: 0x98, Size: 0x4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float EffectVolumValue;//[Offset: 0xa0, Size: 0x4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	float UIVolumValue;//[Offset: 0xa8, Size: 0x4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	float BGMVolumValue;//[Offset: 0xb0, Size: 0x4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	int VoiceChannel;//[Offset: 0xb8, Size: 0x4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MicphoneVolumValue;//[Offset: 0xc0, Size: 0x4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	float SocialIslandOtherVolume;//[Offset: 0xc8, Size: 0x4]
	float SpeakerVolumValue;//[Offset: 0xcc, Size: 0x4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 0x1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 0x1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 0x1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 0x1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 0x1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	int LimitBandage;//[Offset: 0xe4, Size: 0x4]
	int LimitMedical;//[Offset: 0xe8, Size: 0x4]
	int LimitAnodyne;//[Offset: 0xec, Size: 0x4]
	int LimitEnergyDrinks;//[Offset: 0xf0, Size: 0x4]
	int LimitAdrenaline;//[Offset: 0xf4, Size: 0x4]
	int LimitShouliudan;//[Offset: 0xf8, Size: 0x4]
	int LimitYanwudan;//[Offset: 0xfc, Size: 0x4]
	int LimitZhenbaodan;//[Offset: 0x100, Size: 0x4]
	int LimitRanshaodan;//[Offset: 0x104, Size: 0x4]
	int LimitBullet9mm;//[Offset: 0x108, Size: 0x4]
	int LimitBullet7_62mm;//[Offset: 0x10c, Size: 0x4]
	int Limit12koujing;//[Offset: 0x110, Size: 0x4]
	int Limit45koujing;//[Offset: 0x114, Size: 0x4]
	int Limit300magenandanyao;//[Offset: 0x118, Size: 0x4]
	int Limitbolt;//[Offset: 0x11c, Size: 0x4]
	int LimitBullet5;//[Offset: 0x120, Size: 0x4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	int FPSLevel;//[Offset: 0x128, Size: 0x4]
	int ArtStyle;//[Offset: 0x12c, Size: 0x4]
	int RecordTipShowLastTime;//[Offset: 0x130, Size: 0x4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x138, Size: 0x50]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x188, Size: 0x50]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da, Size: 0x1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1e0, Size: 0x50]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	int[] DefaultPlayerChatQuickTextIDList;//[Offset: 0x238, Size: 0x10]
	int[] ChatOptiongList1;//[Offset: 0x248, Size: 0x10]
	int LRShootMode;//[Offset: 0x258, Size: 0x4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 0x1]
	int[] ChatOptiongList2;//[Offset: 0x260, Size: 0x10]
	int[] ChatOptiongList3;//[Offset: 0x270, Size: 0x10]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	int NewGetActorID;//[Offset: 0x284, Size: 0x4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	float 3DTouchValue;//[Offset: 0x28c, Size: 0x4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	int ShotGunShootMode;//[Offset: 0x294, Size: 0x4]
	int SingleShotWeaponShootMode;//[Offset: 0x298, Size: 0x4]
	int isFirstOpenMicCheck;//[Offset: 0x29c, Size: 0x4]
	float VehicleEye;//[Offset: 0x2a0, Size: 0x4]
	float ParachuteEye;//[Offset: 0x2a4, Size: 0x4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x2a8, Size: 0x10]
	int RepeatingWeaponShootMode;//[Offset: 0x2b8, Size: 0x4]
	int DrivingViewMode;//[Offset: 0x2bc, Size: 0x4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	int FpViewValue;//[Offset: 0x2c4, Size: 0x4]
	float CamFpFreeEye;//[Offset: 0x2c8, Size: 0x4]
	float CamLensSenNoneSniperFP;//[Offset: 0x2cc, Size: 0x4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x2d0, Size: 0x4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x2d4, Size: 0x4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	int DaliyWarmodeInfo;//[Offset: 0x2dc, Size: 0x4]
	FString currentLanguage;//[Offset: 0x2e0, Size: 0x10]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	FString lastViewDayTime;//[Offset: 0x2f8, Size: 0x10]
	FString lastViewWeekTime;//[Offset: 0x308, Size: 0x10]
	bool DoblySwitch2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	bool DoblySwitch1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 0x1]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 0x1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b, Size: 0x1]
	float CamLensSen3XSniper;//[Offset: 0x31c, Size: 0x4]
	float CamLensSen6XSniper;//[Offset: 0x320, Size: 0x4]
	float FireCamLensSen3XSniper;//[Offset: 0x324, Size: 0x4]
	float FireCamLensSen6XSniper;//[Offset: 0x328, Size: 0x4]
	float GyroscopeSen3XSniper;//[Offset: 0x32c, Size: 0x4]
	float GyroscopeSen6XSniper;//[Offset: 0x330, Size: 0x4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 0x1]
	int RedDotCHColor;//[Offset: 0x338, Size: 0x4]
	int RedDotCHType;//[Offset: 0x33c, Size: 0x4]
	int HolographicCHColor;//[Offset: 0x340, Size: 0x4]
	int HolographicCHType;//[Offset: 0x344, Size: 0x4]
	int Sinper2xCHColor;//[Offset: 0x348, Size: 0x4]
	int Sinper2xCHType;//[Offset: 0x34c, Size: 0x4]
	int Sniper3xCHColor;//[Offset: 0x350, Size: 0x4]
	int Sniper3xCHType;//[Offset: 0x354, Size: 0x4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 0x1]
	<int,int> PickUpCountSetting;//[Offset: 0x360, Size: 0x50]
	int LimitFirstAidKit;//[Offset: 0x3b0, Size: 0x4]
	FString XGLanguageTag;//[Offset: 0x3b8, Size: 0x10]
	FString XGTimezoneTag;//[Offset: 0x3c8, Size: 0x10]
	FString XGPushNightTag;//[Offset: 0x3d8, Size: 0x10]
	FString XGPushDayTag;//[Offset: 0x3e8, Size: 0x10]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	int SelectUIElemIndex1;//[Offset: 0x3fc, Size: 0x4]
	int SelectUIElemIndex2;//[Offset: 0x400, Size: 0x4]
	int SelectUIElemIndex3;//[Offset: 0x404, Size: 0x4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	int LimitSniper2X;//[Offset: 0x40c, Size: 0x4]
	int LimitSniper3X;//[Offset: 0x410, Size: 0x4]
	int LimitSniper4X;//[Offset: 0x414, Size: 0x4]
	int LimitSniper6X;//[Offset: 0x418, Size: 0x4]
	int LimitSniper8X;//[Offset: 0x41c, Size: 0x4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
	int SidewaysMode;//[Offset: 0x424, Size: 0x4]
	int OpenMirrorMode;//[Offset: 0x428, Size: 0x4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]
	bool OBS_TrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 0x1]
	bool OBS_Perspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42e, Size: 0x1]
	bool OBS_BulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42f, Size: 0x1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	int LobbyStyleID;//[Offset: 0x434, Size: 0x4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 0x1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 0x1]
	float ScreenLightness;//[Offset: 0x43c, Size: 0x4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x442, Size: 0x1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x443, Size: 0x1]
	FString FirstChargeVersion;//[Offset: 0x448, Size: 0x10]
	FString RechargePosSave;//[Offset: 0x458, Size: 0x10]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 0x1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46a, Size: 0x1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46b, Size: 0x1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x470, Size: 0x50]
	int LimitViscidityBomb;//[Offset: 0x4c0, Size: 0x4]
	int LimitZombieGrenade;//[Offset: 0x4c4, Size: 0x4]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	bool AutoPickUpPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 0x1]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ca, Size: 0x1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x4cc, Size: 0x4]
	int SideMirrorMode;//[Offset: 0x4d0, Size: 0x4]
	int[] DefaultPlayerWheelChatQuickTextIDList;//[Offset: 0x4d8, Size: 0x10]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 0x1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ea, Size: 0x1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4eb, Size: 0x1]
	int LimitYeDanGrenade;//[Offset: 0x4ec, Size: 0x4]
	int LimitAntidote;//[Offset: 0x4f0, Size: 0x4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 0x1]
	int[] ChatOptiongList4;//[Offset: 0x4f8, Size: 0x10]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	int ScoreTips_TModeCnt;//[Offset: 0x50c, Size: 0x4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 0x1]
	int FPPFireMode;//[Offset: 0x514, Size: 0x4]
	int SelectUIElemIndexFPP1;//[Offset: 0x518, Size: 0x4]
	int SelectUIElemIndexFPP2;//[Offset: 0x51c, Size: 0x4]
	int SelectUIElemIndexFPP3;//[Offset: 0x520, Size: 0x4]
	byte TurboLastQuality;//[Offset: 0x524, Size: 0x1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x528, Size: 0x50]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x578, Size: 0x50]
	int[] UselessWeakGuidIDs;//[Offset: 0x5c8, Size: 0x10]
	bool SettingOperateZombieLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 0x1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5da, Size: 0x1]
	int[] ChatOptiongList5;//[Offset: 0x5e0, Size: 0x10]
	int[] ChatOptiongList6;//[Offset: 0x5f0, Size: 0x10]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	int TD_FireMode;//[Offset: 0x604, Size: 0x4]
	int TD_FPPFireMode;//[Offset: 0x608, Size: 0x4]
	bool TD_3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 0x1]
	float TD_3DTouchValue;//[Offset: 0x610, Size: 0x4]
	bool FirstTime_TMode_HardPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1]
	bool ShovelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1]
	int isFirstOpenMicCheckVehicleWar;//[Offset: 0x618, Size: 0x4]
	bool VulkanEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	int LimitSnowMan;//[Offset: 0x620, Size: 0x4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 0x1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x625, Size: 0x1]
	bool OpenChatHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x626, Size: 0x1]
	int ColorBlindnessType;//[Offset: 0x628, Size: 0x4]
	bool DeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 0x1]
	bool UAVSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62d, Size: 0x1]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62e, Size: 0x1]
	float UAVSpeedPercent;//[Offset: 0x630, Size: 0x4]
	float UAVScopePercent;//[Offset: 0x634, Size: 0x4]
	bool OpenUAVHelicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	bool FirstTime_ShowAutoGroupParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 0x1]
	int SideMirrorType;//[Offset: 0x63c, Size: 0x4]
	int SideMirrorColor;//[Offset: 0x640, Size: 0x4]
	bool AutoPickUpSideSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 0x1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 0x1]
	bool isCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x646, Size: 0x1]
	FString CloudSensitivityPlayerId;//[Offset: 0x648, Size: 0x10]
	bool SettingHasOperateQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]
	bool SettingSideSightFunctionRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 0x1]
	bool SettingUploadSensibilityRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65a, Size: 0x1]
	bool SettingClassicCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65b, Size: 0x1]
	bool SettingTDCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 0x1]
	bool SettingQuickSwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65d, Size: 0x1]
	bool SocialIslandCanAcceptDuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65e, Size: 0x1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65f, Size: 0x1]
	bool DisableAutoPickDropMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 0x1]
	int AutoPickClipType;//[Offset: 0x664, Size: 0x4]
	int[] QuickSignIDList;//[Offset: 0x668, Size: 0x10]
	int[] QuickSignWheelIDList;//[Offset: 0x678, Size: 0x10]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 0x1]
	bool SettingEffectRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68a, Size: 0x1]
	int HitEffectColor;//[Offset: 0x68c, Size: 0x4]
	int HurtEffectColor;//[Offset: 0x690, Size: 0x4]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 0x1]
	bool bHasMapCBToES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 0x1]
	int ProfiledScreenSwitch;//[Offset: 0x698, Size: 0x4]
	bool FirstTime_TMode_ArmsRace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1]
	bool bOpenSprHghQltyComparison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d, Size: 0x1]
	int BuildDoubleClick;//[Offset: 0x6a0, Size: 0x4]
	float BuildDoubleClickDuration;//[Offset: 0x6a4, Size: 0x4]
	float DoubleClickSpeed;//[Offset: 0x6a8, Size: 0x4]
	int DoubleClickDistance;//[Offset: 0x6ac, Size: 0x4]
	bool ChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]
	int BattleFPS;//[Offset: 0x6b4, Size: 0x4]
	int BattleRenderStyle;//[Offset: 0x6b8, Size: 0x4]
	int BattleRenderQuality;//[Offset: 0x6bc, Size: 0x4]
	int LobbyFPS;//[Offset: 0x6c0, Size: 0x4]
	int LobbyRenderStyle;//[Offset: 0x6c4, Size: 0x4]
	int LobbyRenderQuality;//[Offset: 0x6c8, Size: 0x4]
	bool HasGraphicsSeparateConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 0x1]
	bool SettingOperateInfect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cd, Size: 0x1]
	bool FirstTime_Infect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ce, Size: 0x1]
	bool OBS_LogoShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cf, Size: 0x1]
	bool OBS_HitFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 0x1]
	<int,int> BulletPickUpCountSetting_XT;//[Offset: 0x6d8, Size: 0x50]
	<int,int> Drug_PickUpCountSetting_XT;//[Offset: 0x728, Size: 0x50]
	<int,int> NormalInfilling_PickUpCountSetting_XT;//[Offset: 0x778, Size: 0x50]
	<int,int> HalloweenInfilling_PickUpCountSetting_XT;//[Offset: 0x7c8, Size: 0x50]
	<int,int> ThrowObj_PickUpCountSetting_XT;//[Offset: 0x818, Size: 0x50]
	<int,int> MultipleMirror_PickUpCountSetting_XT;//[Offset: 0x868, Size: 0x50]
	bool UseIngameLike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 0x1]
	bool isOtherCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b9, Size: 0x1]
	bool IsCloudAndLocalSame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ba, Size: 0x1]
	bool RingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bb, Size: 0x1]
	bool RingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 0x1]
	bool CarPreciseChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bd, Size: 0x1]
	bool SettingSensibilityEnterTrainRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8be, Size: 0x1]
	bool SettingVehicleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bf, Size: 0x1]
	bool LRSwitcherGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 0x1]
	<int,int> PickUpCountSetting_Drug;//[Offset: 0x8c8, Size: 0x50]
	<int,int> PickUpCountSetting_ThrowObj;//[Offset: 0x918, Size: 0x50]
	<int,int> PickUpCountSetting_MultipleMirror;//[Offset: 0x968, Size: 0x50]
	<int,int> PickUpCountSetting_FixConsumeItemMap;//[Offset: 0x9b8, Size: 0x50]
	bool bTranslatePickupSettingToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa08, Size: 0x1]
	bool OBS_CustomKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa09, Size: 0x1]
	bool LocalHideHelmet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0a, Size: 0x1]
	bool SettingDisableAutoPickupDropMirrorRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0b, Size: 0x1]
	bool ScreenShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0c, Size: 0x1]
	float CamLensSenShoulderTPP;//[Offset: 0xa10, Size: 0x4]
	float CamLensSenShoulderFPP;//[Offset: 0xa14, Size: 0x4]
	float FireCamLensSenShoulderTPP;//[Offset: 0xa18, Size: 0x4]
	float GyroscopeSenShoulderTPP;//[Offset: 0xa1c, Size: 0x4]
	float FireCamLensSenShoulderFPP;//[Offset: 0xa20, Size: 0x4]
	float GyroscopeSenShoulderFPP;//[Offset: 0xa24, Size: 0x4]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 0x1]
	bool RotateViewWithShoulderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa29, Size: 0x1]
	int ShoulderMode;//[Offset: 0xa2c, Size: 0x4]
	bool SettingHasOperatedShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 0x1]
	bool SettingHasOperatedRotateWithShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa31, Size: 0x1]
	bool OBS_SmokeGrenadeCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa32, Size: 0x1]
	bool OBS_SmokeGrenadeAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa33, Size: 0x1]
	bool bGunAccessoriesAddDefauleM4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa34, Size: 0x1]
	bool bGunAccessoriesGuidedRemoveSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa35, Size: 0x1]
	bool bGunAccessoriesGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa36, Size: 0x1]
	bool bGunAccessoriesGuidedSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa37, Size: 0x1]
	bool bGunAccessoriesGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 0x1]
	bool bAddedGunAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa39, Size: 0x1]
	bool bGunSensitivityGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3a, Size: 0x1]
	bool bGunSensitivityGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3b, Size: 0x1]
	bool bGunSensitivityGuidedCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3c, Size: 0x1]
	int GunSensitivitySingleTrainingGuideCount;//[Offset: 0xa40, Size: 0x4]
	bool bGunSensitivitySingleTrainingGuideTiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa44, Size: 0x1]
	bool OBS_ShowOwnWeaponKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa45, Size: 0x1]
	bool isCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa46, Size: 0x1]
	FString CloudSensitivityPlayerId_Custom;//[Offset: 0xa48, Size: 0x10]
	bool isOtherCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 0x1]
	bool IsCloudAndLocalSame_SensitivityCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa59, Size: 0x1]
	bool isCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5a, Size: 0x1]
	FString CloudAccessoriesPlayerId_Custom;//[Offset: 0xa60, Size: 0x10]
	bool isOtherCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 0x1]
	bool IsCloudAndLocalSame_AccessoriesCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa71, Size: 0x1]
	int TpViewValue;//[Offset: 0xa74, Size: 0x4]
	bool bHasCloudCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa78, Size: 0x1]
	int PickUpListMode;//[Offset: 0xa7c, Size: 0x4]
	bool GyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa80, Size: 0x1]
	bool bHasCloudCustomAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa81, Size: 0x1]
	float FireGyroscopeSenNoneSniper;//[Offset: 0xa84, Size: 0x4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0xa88, Size: 0x4]
	float FireGyroscopeSen2XSniper;//[Offset: 0xa8c, Size: 0x4]
	float FireGyroscopeSen4XSniper;//[Offset: 0xa90, Size: 0x4]
	float FireGyroscopeSen8XSniper;//[Offset: 0xa94, Size: 0x4]
	float FireGyroscopeSen3XSniper;//[Offset: 0xa98, Size: 0x4]
	float FireGyroscopeSen6XSniper;//[Offset: 0xa9c, Size: 0x4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0xaa0, Size: 0x4]
	bool AutoParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa4, Size: 0x1]
	bool MapMarkEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa5, Size: 0x1]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0xaa8, Size: 0x4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0xaac, Size: 0x4]
	bool FireGyroscopeRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 0x1]
	bool HasOperateRingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab1, Size: 0x1]
	bool HasOperatedRingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab2, Size: 0x1]
	bool SettingBasicGyroRverseRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab3, Size: 0x1]
	bool bLbsNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab4, Size: 0x1]
	bool bLbsWarZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab5, Size: 0x1]
	bool AutoContinueHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab6, Size: 0x1]
	bool FocalLengthModifySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab7, Size: 0x1]
	bool FocalLengthModifySwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab8, Size: 0x1]
	bool bRecordWonderfulReplayOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab9, Size: 0x1]
	int AntiAliasingValue;//[Offset: 0xabc, Size: 0x4]
	bool OneKeyProneAndCrouchSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac0, Size: 0x1]
	bool HasOperateOneKeyProneAndCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac1, Size: 0x1]
	bool bLbsMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac2, Size: 0x1]
	bool bLbsChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac3, Size: 0x1]
	bool bOpenBattleNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac4, Size: 0x1]
	bool bOpenLobbyNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac5, Size: 0x1]
	int JoystickSprintSensitity;//[Offset: 0xac8, Size: 0x4]
	bool bHideIngameUIAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacc, Size: 0x1]
	bool bCloseHitHeadAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacd, Size: 0x1]
	int HightLightReshowAirLineTimes;//[Offset: 0xad0, Size: 0x4]
	bool bHasSetWonderfulReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad4, Size: 0x1]
	bool bIsShowedHideUIGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad5, Size: 0x1]
	bool bAmericanCustomSettingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad6, Size: 0x1]
	float CamLensSenNoneSniper;//[Offset: 0xad8, Size: 0x4]
	float CamLensSenRedDotSniper;//[Offset: 0xadc, Size: 0x4]
	float CamLensSen2XSniper;//[Offset: 0xae0, Size: 0x4]
	float CamLensSen4XSniper;//[Offset: 0xae4, Size: 0x4]
	float CamLensSen8XSniper;//[Offset: 0xae8, Size: 0x4]
	float FireCamLensSenNoneSniper;//[Offset: 0xaec, Size: 0x4]
	float FireCamLensSenRedDotSniper;//[Offset: 0xaf0, Size: 0x4]
	float FireCamLensSen2XSniper;//[Offset: 0xaf4, Size: 0x4]
	float FireCamLensSen4XSniper;//[Offset: 0xaf8, Size: 0x4]
	float FireCamLensSen8XSniper;//[Offset: 0xafc, Size: 0x4]
	float GyroscopeSenNoneSniper;//[Offset: 0xb00, Size: 0x4]
	float GyroscopeSenRedDotSniper;//[Offset: 0xb04, Size: 0x4]
	float GyroscopeSen2XSniper;//[Offset: 0xb08, Size: 0x4]
	float GyroscopeSen4XSniper;//[Offset: 0xb0c, Size: 0x4]
	float GyroscopeSen8XSniper;//[Offset: 0xb10, Size: 0x4]
	float VehicleEye;//[Offset: 0xb14, Size: 0x4]
	float ParachuteEye;//[Offset: 0xb18, Size: 0x4]
	float CamFpFreeEye;//[Offset: 0xb1c, Size: 0x4]
	float CamLensSenNoneSniperFP;//[Offset: 0xb20, Size: 0x4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0xb24, Size: 0x4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0xb28, Size: 0x4]
	float CamLensSen3XSniper;//[Offset: 0xb2c, Size: 0x4]
	float CamLensSen6XSniper;//[Offset: 0xb30, Size: 0x4]
	float FireCamLensSen3XSniper;//[Offset: 0xb34, Size: 0x4]
	float FireCamLensSen6XSniper;//[Offset: 0xb38, Size: 0x4]
	float GyroscopeSen3XSniper;//[Offset: 0xb3c, Size: 0x4]
	float GyroscopeSen6XSniper;//[Offset: 0xb40, Size: 0x4]
	float CamLensSenShoulderTPP;//[Offset: 0xb44, Size: 0x4]
	float CamLensSenShoulderFPP;//[Offset: 0xb48, Size: 0x4]
	float FireCamLensSenShoulderTPP;//[Offset: 0xb4c, Size: 0x4]
	float GyroscopeSenShoulderTPP;//[Offset: 0xb50, Size: 0x4]
	float FireCamLensSenShoulderFPP;//[Offset: 0xb54, Size: 0x4]
	float GyroscopeSenShoulderFPP;//[Offset: 0xb58, Size: 0x4]
	float FireGyroscopeSenNoneSniper;//[Offset: 0xb5c, Size: 0x4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0xb60, Size: 0x4]
	float FireGyroscopeSen2XSniper;//[Offset: 0xb64, Size: 0x4]
	float FireGyroscopeSen4XSniper;//[Offset: 0xb68, Size: 0x4]
	float FireGyroscopeSen8XSniper;//[Offset: 0xb6c, Size: 0x4]
	float FireGyroscopeSen3XSniper;//[Offset: 0xb70, Size: 0x4]
	float FireGyroscopeSen6XSniper;//[Offset: 0xb74, Size: 0x4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0xb78, Size: 0x4]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0xb7c, Size: 0x4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0xb80, Size: 0x4]
	bool bInitedCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb84, Size: 0x1]
	bool bFireGyroSenUseGryo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb85, Size: 0x1]
	bool bFireCamSenUseCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb86, Size: 0x1]
	bool AutoHitMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb87, Size: 0x1]
	bool bResetDeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb88, Size: 0x1]
	bool SwitchSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb89, Size: 0x1]
	bool bConsumeThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8a, Size: 0x1]
	int[] MaxACCount;//[Offset: 0xb90, Size: 0x10]
	int[] DefaultACCount;//[Offset: 0xba0, Size: 0x10]
	bool HasOperateSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb0, Size: 0x1]
	bool UseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb1, Size: 0x1]
	<FString,int> OpenStoreTimes;//[Offset: 0xbb8, Size: 0x50]
	<int,int> setting_ver_info;//[Offset: 0xc08, Size: 0x50]
	bool bIsBackpackExpand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 0x1]
	bool OpenMotivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc59, Size: 0x1]
	int HapticSwitch;//[Offset: 0xc5c, Size: 0x4]
	int HapticVoiceSwitch;//[Offset: 0xc60, Size: 0x4]
	int HapticCharacterSwitch;//[Offset: 0xc64, Size: 0x4]
	int HapticWeaponSwitch;//[Offset: 0xc68, Size: 0x4]
	int HapticVehicleSwitch;//[Offset: 0xc6c, Size: 0x4]
	bool bHapticVoiceStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 0x1]
	bool bHapticVoiceGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc71, Size: 0x1]
	bool bHapticVoiceGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc72, Size: 0x1]
	bool bHapticVoiceVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc73, Size: 0x1]
	bool bHapticCharacterBeGunAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74, Size: 0x1]
	bool bHapticCharacterBeOtherAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc75, Size: 0x1]
	bool bHapticCharacterFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc76, Size: 0x1]
	bool bHapticWeaponAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc77, Size: 0x1]
	bool bHapticWeaponAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc78, Size: 0x1]
	bool bHapticWeaponSemiAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc79, Size: 0x1]
	bool bHapticWeaponSniper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7a, Size: 0x1]
	bool bHapticWeaponOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7b, Size: 0x1]
	bool bHapticVehicleDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7c, Size: 0x1]
	bool bHapticVehicleBeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7d, Size: 0x1]
	bool bHapticVehicleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7e, Size: 0x1]
	bool bIsOpenMapTaskUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7f, Size: 0x1]
	bool AmmoRemain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc80, Size: 0x1]
	bool ReshowAirlineRouteBtnChecked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc81, Size: 0x1]
	bool OBMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc82, Size: 0x1]
	bool OBTeammateList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc83, Size: 0x1]
	bool OBPlayerInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc84, Size: 0x1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xc88, Size: 0x10]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xc98, Size: 0x10]
	int[] PlayerChatQuickTextIDList;//[Offset: 0xca8, Size: 0x10]
	int PlayerChatIndex;//[Offset: 0xcb8, Size: 0x4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xcc0, Size: 0x10]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xcd0, Size: 0x10]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0xce0, Size: 0x10]
	int PlayerChatActorID;//[Offset: 0xcf0, Size: 0x4]
	bool bHasCloudBasicSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 0x1]
	bool isCloudSettingBasicUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf5, Size: 0x1]
	FString NewbieGuideDailyLimit;//[Offset: 0xcf8, Size: 0x10]
	int LastSaveSettingBasicTM;//[Offset: 0xd08, Size: 0x4]
	bool OpenSilentChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0c, Size: 0x1]
	bool DoubleIntimacyHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0d, Size: 0x1]
	bool backgroundChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0e, Size: 0x1]
	bool bCanMapLongPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0f, Size: 0x1]
	float NoUIOpacity;//[Offset: 0xd10, Size: 0x4]
	int OldMarkStyle;//[Offset: 0xd14, Size: 0x4]
	<FString,FString> PlayerFeatureVoiceCfg;//[Offset: 0xd18, Size: 0x50]
	int SoundVisualizationType;//[Offset: 0xd68, Size: 0x4]
	bool OBS_SwitchOBHttpComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6c, Size: 0x1]
	bool LocalHideMetroArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6d, Size: 0x1]
	int TargetNameGuideTimes;//[Offset: 0xd70, Size: 0x4]
	int DangerousGuideTimes;//[Offset: 0xd74, Size: 0x4]
	int HunterTaskGuideTimes;//[Offset: 0xd78, Size: 0x4]
	FString SynthesizeFormula;//[Offset: 0xd80, Size: 0x10]
	bool GrenadeSettingPredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd90, Size: 0x1]
	bool AutoEquipMelleeWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd91, Size: 0x1]
	bool LocalHideMetroBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd92, Size: 0x1]
	int LevelPreLoadSetting;//[Offset: 0xd94, Size: 0x4]
	bool bSpectatingPetVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd98, Size: 0x1]
	int DBCollectGuideNum;//[Offset: 0xd9c, Size: 0x4]
	int preTeamUpChat;//[Offset: 0xda0, Size: 0x4]
	bool bLastIsPreTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda4, Size: 0x1]
	bool bLastMicPreTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda5, Size: 0x1]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda6, Size: 0x1]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda7, Size: 0x1]
	int NewVar;//[Offset: 0xda8, Size: 0x4]
	int AutoPickMeleeType;//[Offset: 0xdac, Size: 0x4]
	bool AutoUseMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 0x1]
	int AuxiliaryVoice;//[Offset: 0xdb4, Size: 0x4]
	int InterruptReloadType;//[Offset: 0xdb8, Size: 0x4]
	bool OpenPetSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdbc, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: AITouchSelectComp_C.STTouchSelectComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x198, Size: 0x8]
	void UpdateViewportLocalSize(PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_GetWidgetsByName_ReturnValue, Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_GetLocalSize_ReturnValue);// 0x70644c4
	Vector2D ModifyTouchLoc(out Geometry MyGeometry, out Vector2D TouchLoc, Vector2D CallFunc_AbsoluteToLocal_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_EqualEqual_Vector2DVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void OnTouchSelect(Actor* SelectActor, out const Vector2D TouchLoc);// 0x70644c4
	void OnViewPortChange(Vector2D OldViewportSize, Vector2D NewViewportSize);// 0x70644c4
	void ExecuteUbergraph_AITouchSelectComp(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, Actor* K2Node_CustomEvent_SelectActor, const Vector2D K2Node_CustomEvent_TouchLoc, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, delegate K2Node_CreateDelegate_OutputDelegate3, Vector2D K2Node_CustomEvent_OldViewportSize, Vector2D K2Node_CustomEvent_NewViewportSize);// 0x70644c4
	Vector2D ViewportLocalSize;//[Offset: 0x1a0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STTouchSelectComponent.ActorComponent.Object
	float TouchMoveDistanceAllow;//[Offset: 0x160, Size: 0x4]
	float TouchEndGapAllow;//[Offset: 0x164, Size: 0x4]
	float TraceSelectCD;//[Offset: 0x168, Size: 0x4]
	float TraceRange;//[Offset: 0x16c, Size: 0x4]
	byte CollisionChannel;//[Offset: 0x170, Size: 0x1]
	class Actor* SelectTargetClass;//[Offset: 0x178, Size: 0x8]
	delegate OnTouchSelectActorEvent;//[Offset: 0x180, Size: 0x10]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x190, Size: 0x8]
	Actor* TraceForTarget(out const Vector2D TouchLoc);// 0x625b258
	void OnJoystickTouchEvent(out const Geometry MyGeometry, out const Vector2D TouchLoc, int FingerIndex, bool bIsStart);// 0x625b0f0
	Vector2D ModifyTouchLoc(out const Geometry MyGeometry, out const Vector2D TouchLoc);// 0x625affc
	void BindTouchDelegate();// 0x625afe8
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_BlueholeHurtEffectConfig_type
	FString ColorA_0_53F9F300120D08787CAD4F6400DF1E21;//[Offset: 0x0, Size: 0x10]
	FString ColorB_1_53FAF340120D08797CAD4F6500DF1E22;//[Offset: 0x10, Size: 0x10]
	FString ColorG_2_53FFF480120D087E7CAD4F6E00DF1E27;//[Offset: 0x20, Size: 0x10]
	FString ColorR_3_540AF740120D08897CAD4F7500DF1E32;//[Offset: 0x30, Size: 0x10]
	FString ID_4_722F46406A7371C3780F88AE0B284084;//[Offset: 0x40, Size: 0x10]
	FString ResPath_5_101890C0245C77892EEC8CC30D7AECB8;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_KoreaHurtEffectConfig_type
	FString ColorA_0_463EE38073B0E8305CFF6EAE0F8DA261;//[Offset: 0x0, Size: 0x10]
	FString ColorB_1_463FE3C073B0E8315CFF6EAF0F8DA262;//[Offset: 0x10, Size: 0x10]
	FString ColorG_2_4644E50073B0E8365CFF6EA80F8DA267;//[Offset: 0x20, Size: 0x10]
	FString ColorR_3_464FE7C073B0E8415CFF6E9F0F8DA272;//[Offset: 0x30, Size: 0x10]
	FString ID_4_7F7536C04FE524AB454A945D09B40F34;//[Offset: 0x40, Size: 0x10]
	FString ResPath_5_0DED414024DEE0F1299E986806532848;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_JapanHurtEffectConfig_type
	FString ColorA_0_7161A1805092E8283C37D458017CA281;//[Offset: 0x0, Size: 0x10]
	FString ColorB_1_7162A1C05092E8293C37D459017CA282;//[Offset: 0x10, Size: 0x10]
	FString ColorG_2_7167A3005092E82E3C37D442017CA287;//[Offset: 0x20, Size: 0x10]
	FString ColorR_3_7172A5C05092E8393C37D449017CA292;//[Offset: 0x30, Size: 0x10]
	FString ID_4_4B93F4C06A90502378DD12550EB4E124;//[Offset: 0x40, Size: 0x10]
	FString ResPath_5_5790FF405EB723F9117DDA6C072326A8;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_VNHurtEffectConfig_type
	FString ColorA_0_7D96F0000B2443BE0817B8950597C5D1;//[Offset: 0x0, Size: 0x10]
	FString ColorB_1_7D97F0400B2443BF0817B8940597C5D2;//[Offset: 0x10, Size: 0x10]
	FString ColorG_2_7D9CF1800B2443C40817B8930597C5D7;//[Offset: 0x20, Size: 0x10]
	FString ColorR_3_7DA7F4400B2443CF0817B8840597C5C2;//[Offset: 0x30, Size: 0x10]
	FString ID_5_57064340101F06091D643D670393B5C4;//[Offset: 0x40, Size: 0x10]
	FString ResPath_6_41070DC0638F9D1F5F3BC77009F153E8;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_GlobalHurtEffectConfig_type
	FString ColorA_0_22F27B40670E563B084B4DAB0F7D1981;//[Offset: 0x0, Size: 0x10]
	FString ColorB_1_22F37B80670E563C084B4DA80F7D1982;//[Offset: 0x10, Size: 0x10]
	FString ColorG_2_22F87CC0670E5641084B4DAD0F7D1987;//[Offset: 0x20, Size: 0x10]
	FString ColorR_3_23037F80670E564C084B4DB80F7D1992;//[Offset: 0x30, Size: 0x10]
	FString ID_4_1EC84E807CB64F767420B3EF092FEF24;//[Offset: 0x40, Size: 0x10]
	FString ResPath_5_7AD0F90011863CA45B459C05075A9648;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_BlueholeHitEffectConfig_type
	FString ID_0_2E9026C02E6AE54D311F78F4021D9A54;//[Offset: 0x0, Size: 0x10]
	FString Layer1ColorA_1_62E27F005A367E3856CC8AD60E50D7A1;//[Offset: 0x10, Size: 0x10]
	FString Layer1ColorB_2_62E37F405A367E3956CC8AD50E50D7A2;//[Offset: 0x20, Size: 0x10]
	FString Layer1ColorG_3_62E880805A367E3E56CC8AD80E50D7A7;//[Offset: 0x30, Size: 0x10]
	FString Layer1ColorR_4_62F383405A367E4956CC8AC50E50D7B2;//[Offset: 0x40, Size: 0x10]
	FString Layer2ColorA_5_21EABF4028E6A19F15CD6A640D50D7A1;//[Offset: 0x50, Size: 0x10]
	FString Layer2ColorB_6_21EBBF8028E6A1A015CD6A650D50D7A2;//[Offset: 0x60, Size: 0x10]
	FString Layer2ColorG_7_21F0C0C028E6A1A515CD6A6E0D50D7A7;//[Offset: 0x70, Size: 0x10]
	FString Layer2ColorR_8_21FBC38028E6A1B015CD6A750D50D7B2;//[Offset: 0x80, Size: 0x10]
	FString Layer3ColorA_9_60F2FF807796C50644BCCD790C50D7A1;//[Offset: 0x90, Size: 0x10]
	FString Layer3ColorB_10_60F3FFC07796C50744BCCD780C50D7A2;//[Offset: 0xa0, Size: 0x10]
	FString Layer3ColorG_11_60F901007796C50C44BCCD770C50D7A7;//[Offset: 0xb0, Size: 0x10]
	FString Layer3ColorR_12_610403C07796C51744BCCD080C50D7B2;//[Offset: 0xc0, Size: 0x10]
	FString Layer4ColorA_13_1FFB3FC04646E86D222AAFA20350D7A1;//[Offset: 0xd0, Size: 0x10]
	FString Layer4ColorB_14_1FFC40004646E86E222AAFA10350D7A2;//[Offset: 0xe0, Size: 0x10]
	FString Layer4ColorG_15_200141404646E873222AAFA40350D7A7;//[Offset: 0xf0, Size: 0x10]
	FString Layer4ColorR_16_200C44004646E87E222AAFB10350D7B2;//[Offset: 0x100, Size: 0x10]
	FString ResPath_17_5CB03140570F34CF370E01C100E9B118;//[Offset: 0x110, Size: 0x10]
	FString SettingColorA_18_78BEEB001EC66138380176F00A906191;//[Offset: 0x120, Size: 0x10]
	FString SettingColorB_19_78BFEB401EC66139380176F70A906192;//[Offset: 0x130, Size: 0x10]
	FString SettingColorG_20_78C4EC801EC6613E380176CA0A906197;//[Offset: 0x140, Size: 0x10]
	FString SettingColorR_21_78CFEF401EC66149380176C70A906182;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_KoreaHitEffectConfig_type
	FString ID_0_24E657402045C5513215900907325EE4;//[Offset: 0x0, Size: 0x10]
	FString Layer1ColorA_1_78362F806C3EB5A27592B9890A9BF861;//[Offset: 0x10, Size: 0x10]
	FString Layer1ColorB_2_78372FC06C3EB5A37592B98A0A9BF862;//[Offset: 0x20, Size: 0x10]
	FString Layer1ColorG_3_783C31006C3EB5A87592B98F0A9BF867;//[Offset: 0x30, Size: 0x10]
	FString Layer1ColorR_4_784733C06C3EB5B37592B99A0A9BF872;//[Offset: 0x40, Size: 0x10]
	FString Layer2ColorA_5_373E6FC03E5CF0D969850E51099BF861;//[Offset: 0x50, Size: 0x10]
	FString Layer2ColorB_6_373F70003E5CF0DA69850E56099BF862;//[Offset: 0x60, Size: 0x10]
	FString Layer2ColorG_7_374471403E5CF0DF69850E2B099BF867;//[Offset: 0x70, Size: 0x10]
	FString Layer2ColorR_8_374F74003E5CF0EA69850E26099BF872;//[Offset: 0x80, Size: 0x10]
	FString Layer3ColorA_9_7646B000107B2C1063163E5F089BF861;//[Offset: 0x90, Size: 0x10]
	FString Layer3ColorB_10_7647B040107B2C1163163E5E089BF862;//[Offset: 0xa0, Size: 0x10]
	FString Layer3ColorG_11_764CB180107B2C1663163E25089BF867;//[Offset: 0xb0, Size: 0x10]
	FString Layer3ColorR_12_7657B440107B2C2163163E2E089BF872;//[Offset: 0xc0, Size: 0x10]
	FString Layer4ColorA_13_354EF0406299674731C7E897079BF861;//[Offset: 0xd0, Size: 0x10]
	FString Layer4ColorB_14_354FF0806299674831C7E896079BF862;//[Offset: 0xe0, Size: 0x10]
	FString Layer4ColorG_15_3554F1C06299674D31C7E891079BF867;//[Offset: 0xf0, Size: 0x10]
	FString Layer4ColorR_16_355FF4806299675831C7E886079BF872;//[Offset: 0x100, Size: 0x10]
	FString SettingColorA_17_7E425B802DDA8C3E19FFB76F013EBDD1;//[Offset: 0x110, Size: 0x10]
	FString SettingColorB_18_7E435BC02DDA8C3F19FFB76C013EBDD2;//[Offset: 0x120, Size: 0x10]
	FString SettingColorG_19_7E485D002DDA8C4419FFB751013EBDD7;//[Offset: 0x130, Size: 0x10]
	FString SettingColorR_20_7E535FC02DDA8C4F19FFB75C013EBDC2;//[Offset: 0x140, Size: 0x10]
	FString ResPath_21_4EF521C06CF12EC7512E0C520BBB4D58;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_JapanHitEffectConfig_type
	FString ID_0_2004154035E60089325471EE00425C34;//[Offset: 0x0, Size: 0x10]
	FString Layer1ColorA_1_56DDED805AB1952A7719137C086EA861;//[Offset: 0x10, Size: 0x10]
	FString Layer1ColorB_2_56DEEDC05AB1952B7719137D086EA862;//[Offset: 0x20, Size: 0x10]
	FString Layer1ColorG_3_56E3EF005AB195307719137A086EA867;//[Offset: 0x30, Size: 0x10]
	FString Layer1ColorR_4_56EEF1C05AB1953B7719136D086EA872;//[Offset: 0x40, Size: 0x10]
	FString Layer2ColorA_5_15E62DC02CCFD06102CF06030B6EA861;//[Offset: 0x50, Size: 0x10]
	FString Layer2ColorB_6_15E72E002CCFD06202CF06020B6EA862;//[Offset: 0x60, Size: 0x10]
	FString Layer2ColorG_7_15EC2F402CCFD06702CF061D0B6EA867;//[Offset: 0x70, Size: 0x10]
	FString Layer2ColorR_8_15F732002CCFD07202CF06120B6EA872;//[Offset: 0x80, Size: 0x10]
	FString Layer3ColorA_9_54EE6E007EEE0B9813DAB5170A6EA861;//[Offset: 0x90, Size: 0x10]
	FString Layer3ColorB_10_54EF6E407EEE0B9913DAB5080A6EA862;//[Offset: 0xa0, Size: 0x10]
	FString Layer3ColorG_11_54F46F807EEE0B9E13DAB50D0A6EA867;//[Offset: 0xb0, Size: 0x10]
	FString Layer3ColorR_12_54FF72407EEE0BA913DAB5780A6EA872;//[Offset: 0xc0, Size: 0x10]
	FString Layer4ColorA_13_13F6AE40510C46CF68D4DCAF056EA861;//[Offset: 0xd0, Size: 0x10]
	FString Layer4ColorB_14_13F7AE80510C46D068D4DCA0056EA862;//[Offset: 0xe0, Size: 0x10]
	FString Layer4ColorG_15_13FCAFC0510C46D568D4DCA5056EA867;//[Offset: 0xf0, Size: 0x10]
	FString Layer4ColorR_16_1407B280510C46E068D4DC50056EA872;//[Offset: 0x100, Size: 0x10]
	FString SettingColorA_17_08EB1980027FAA0615B3A9020C6BBDF1;//[Offset: 0x110, Size: 0x10]
	FString SettingColorB_18_08EC19C0027FAA0715B3A9030C6BBDF2;//[Offset: 0x120, Size: 0x10]
	FString SettingColorG_19_08F11B00027FAA0C15B3A91C0C6BBDF7;//[Offset: 0x130, Size: 0x10]
	FString SettingColorR_20_08FC1DC0027FAA1715B3A9130C6BBDE2;//[Offset: 0x140, Size: 0x10]
	FString ResPath_21_7A17DFC049D32EBF221C5AF806CC4D78;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_VNHitEffectConfig_type
	FString ID_17_1855A3C018BE7CE74928E35406902744;//[Offset: 0x0, Size: 0x10]
	FString Layer1ColorA_1_4996FC000E081E3E2ECB32D60D3C5A11;//[Offset: 0x10, Size: 0x10]
	FString Layer1ColorB_2_4997FC400E081E3F2ECB32C90D3C5A12;//[Offset: 0x20, Size: 0x10]
	FString Layer1ColorG_3_499CFD800E081E442ECB32CC0D3C5A17;//[Offset: 0x30, Size: 0x10]
	FString Layer1ColorR_4_49A800400E081E4F2ECB33390D3C5A02;//[Offset: 0x40, Size: 0x10]
	FString Layer2ColorA_5_089F3C405B10804508668D7F0E3C5A11;//[Offset: 0x50, Size: 0x10]
	FString Layer2ColorB_6_08A03C805B10804608668D700E3C5A12;//[Offset: 0x60, Size: 0x10]
	FString Layer2ColorG_7_08A53DC05B10804B08668D750E3C5A17;//[Offset: 0x70, Size: 0x10]
	FString Layer2ColorR_8_08B040805B10805608668D600E3C5A02;//[Offset: 0x80, Size: 0x10]
	FString Layer3ColorA_9_47A77C802818E24C47025FA50F3C5A11;//[Offset: 0x90, Size: 0x10]
	FString Layer3ColorB_10_47A87CC02818E24D47025FA40F3C5A12;//[Offset: 0xa0, Size: 0x10]
	FString Layer3ColorG_11_47AD7E002818E25247025FAF0F3C5A17;//[Offset: 0xb0, Size: 0x10]
	FString Layer3ColorR_12_47B880C02818E25D47025FB40F3C5A02;//[Offset: 0xc0, Size: 0x10]
	FString Layer4ColorA_13_06AFBCC0752144532F29F712003C5A11;//[Offset: 0xd0, Size: 0x10]
	FString Layer4ColorB_14_06B0BD00752144542F29F713003C5A12;//[Offset: 0xe0, Size: 0x10]
	FString Layer4ColorG_15_06B5BE40752144592F29F6EC003C5A17;//[Offset: 0xf0, Size: 0x10]
	FString Layer4ColorR_16_06C0C100752144642F29F6E3003C5A02;//[Offset: 0x100, Size: 0x10]
	FString SettingColorA_18_5304E80078FE8A3257CFE4B00B489841;//[Offset: 0x110, Size: 0x10]
	FString SettingColorB_19_5305E84078FE8A3357CFE4B10B489842;//[Offset: 0x120, Size: 0x10]
	FString SettingColorG_20_530AE98078FE8A3857CFE48E0B489847;//[Offset: 0x130, Size: 0x10]
	FString SettingColorR_21_5315EC4078FE8A4357CFE4810B489852;//[Offset: 0x140, Size: 0x10]
	FString ResPath_22_064D2E40633E42F55CDC31C801A16AC8;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_GlobalHitEffectConfig_type
	FString ID_0_0DB94F0058294F3A04F02029003DEC94;//[Offset: 0x0, Size: 0x10]
	FString Layer1ColorA_1_193A67401A3937D379BAA750090EF7D1;//[Offset: 0x10, Size: 0x10]
	FString Layer1ColorB_2_193B67801A3937D479BAA753090EF7D2;//[Offset: 0x20, Size: 0x10]
	FString Layer1ColorG_3_194068C01A3937D979BAA756090EF7D7;//[Offset: 0x30, Size: 0x10]
	FString Layer1ColorR_4_194B6B801A3937E479BAA763090EF7C2;//[Offset: 0x40, Size: 0x10]
	FString Layer2ColorA_5_5842A7807EFA541A4F4A16C50C0EF7D1;//[Offset: 0x50, Size: 0x10]
	FString Layer2ColorB_6_5843A7C07EFA541B4F4A16C40C0EF7D2;//[Offset: 0x60, Size: 0x10]
	FString Layer2ColorG_7_5848A9007EFA54204F4A16C30C0EF7D7;//[Offset: 0x70, Size: 0x10]
	FString Layer2ColorR_8_5853ABC07EFA542B4F4A16F40C0EF7C2;//[Offset: 0x80, Size: 0x10]
	FString Layer3ColorA_9_174AE7C063BB706137E935960B0EF7D1;//[Offset: 0x90, Size: 0x10]
	FString Layer3ColorB_10_174BE80063BB706237E935950B0EF7D2;//[Offset: 0xa0, Size: 0x10]
	FString Layer3ColorG_11_1750E94063BB706737E935980B0EF7D7;//[Offset: 0xb0, Size: 0x10]
	FString Layer3ColorR_12_175BEC0063BB707237E935850B0EF7C2;//[Offset: 0xc0, Size: 0x10]
	FString Layer4ColorA_13_56532800487C8CA85663AED0060EF7D1;//[Offset: 0xd0, Size: 0x10]
	FString Layer4ColorB_14_56542840487C8CA95663AED1060EF7D2;//[Offset: 0xe0, Size: 0x10]
	FString Layer4ColorG_15_56592980487C8CAE5663AEDA060EF7D7;//[Offset: 0xf0, Size: 0x10]
	FString Layer4ColorR_16_56642C40487C8CB95663AEC1060EF7C2;//[Offset: 0x100, Size: 0x10]
	FString SettingColorA_17_5126B340631EA20D7C7C0CF6066E64F1;//[Offset: 0x110, Size: 0x10]
	FString SettingColorB_18_5127B380631EA20E7C7C0CF7066E64F2;//[Offset: 0x120, Size: 0x10]
	FString SettingColorG_19_512CB4C0631EA2137C7C0CF0066E64F7;//[Offset: 0x130, Size: 0x10]
	FString SettingColorR_20_5137B780631EA21E7C7C0CE7066E64E2;//[Offset: 0x140, Size: 0x10]
	FString ResPath_21_2BA8B9801447FA32396A63CB0CCBB678;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_GuideText_type
	int GuideID_0_A5FF72E542F02CBBCE5E2696B9B5AE1E;//[Offset: 0x0, Size: 0x4]
	int TriggerTimes_1_092A596A4CD84CDBCEAB7CAC1E5C6784;//[Offset: 0x4, Size: 0x4]
	FString text4_2_0681BED6478BF4BE2672C1B126FF6E1E;//[Offset: 0x8, Size: 0x10]
	FString text1_3_0B618F7F449909BFB58A3E98E3DB73DE;//[Offset: 0x18, Size: 0x10]
	FString text2_4_F5471C1F44A2ADB1B71AD3A2991F2C29;//[Offset: 0x28, Size: 0x10]
	FString text3_5_5E534A744DCD782353B99F94D72CF42E;//[Offset: 0x38, Size: 0x10]
	int IsFloat_7_5631F6C015B003AF4D2C60B3037F0B64;//[Offset: 0x48, Size: 0x4]
	int ShapeType_8_6317EF000ACBA582315244FA09B48A85;//[Offset: 0x4c, Size: 0x4]
	int XOffset_10_1D6AFA00689E1E0E6D67A078005D0714;//[Offset: 0x50, Size: 0x4]
	int YOffset_11_5C733A401ADE00450611FA950F5D0704;//[Offset: 0x54, Size: 0x4]
	int OutOffset_12_336A92002DF8BFBC469DDB2F0A823C04;//[Offset: 0x58, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_JKColorBlindnessConfig_type
	FString CBBlueColorA_0_1A321BC068EC5CE10F6EEF990DA69541;//[Offset: 0x0, Size: 0x10]
	FString CBBlueColorB_1_1A331C0068EC5CE20F6EEF9E0DA69542;//[Offset: 0x10, Size: 0x10]
	FString CBBlueColorG_2_1A381D4068EC5CE70F6EEF930DA69547;//[Offset: 0x20, Size: 0x10]
	FString CBBlueColorR_3_1A43200068EC5CF20F6EEFAE0DA69552;//[Offset: 0x30, Size: 0x10]
	FString CBGreenColorA_4_4571D60028624EFE0DB593EC02ABB561;//[Offset: 0x40, Size: 0x10]
	FString CBGreenColorB_5_4572D64028624EFF0DB593E302ABB562;//[Offset: 0x50, Size: 0x10]
	FString CBGreenColorG_6_4577D78028624F040DB593E602ABB567;//[Offset: 0x60, Size: 0x10]
	FString CBGreenColorR_7_4582DA4028624F0F0DB5939302ABB572;//[Offset: 0x70, Size: 0x10]
	FString CBRedColorA_8_41F0E0805F44DE5C3DFB5D0601E64FD1;//[Offset: 0x80, Size: 0x10]
	FString CBRedColorB_9_41F1E0C05F44DE5D3DFB5D0701E64FD2;//[Offset: 0x90, Size: 0x10]
	FString CBRedColorG_10_41F6E2005F44DE623DFB5D0C01E64FD7;//[Offset: 0xa0, Size: 0x10]
	FString CBRedColorR_11_4201E4C05F44DE6D3DFB5D1701E64FC2;//[Offset: 0xb0, Size: 0x10]
	FString ID_12_0AB56BC00DEC06DD7427B978061094A4;//[Offset: 0xc0, Size: 0x10]
	FString NormalColorA_13_71D012C041F9112D68401C9A05E69591;//[Offset: 0xd0, Size: 0x10]
	FString NormalColorB_14_71D1130041F9112E68401C9B05E69592;//[Offset: 0xe0, Size: 0x10]
	FString NormalColorG_15_71D6144041F9113368401C9405E69597;//[Offset: 0xf0, Size: 0x10]
	FString NormalColorR_16_71E1170041F9113E68401CAB05E69582;//[Offset: 0x100, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_VNColorBlindnessConfig_type
	FString CBBlueColorA_0_48A05F80565F18D25FB7B3780DADA841;//[Offset: 0x0, Size: 0x10]
	FString CBBlueColorB_1_48A15FC0565F18D35FB7B3790DADA842;//[Offset: 0x10, Size: 0x10]
	FString CBBlueColorG_2_48A66100565F18D85FB7B3760DADA847;//[Offset: 0x20, Size: 0x10]
	FString CBBlueColorR_3_48B163C0565F18E35FB7B3090DADA852;//[Offset: 0x30, Size: 0x10]
	FString CBGreenColorA_4_797A39C016C4BF072EFE2933021A8561;//[Offset: 0x40, Size: 0x10]
	FString CBGreenColorB_5_797B3A0016C4BF082EFE2932021A8562;//[Offset: 0x50, Size: 0x10]
	FString CBGreenColorG_6_79803B4016C4BF0D2EFE290D021A8567;//[Offset: 0x60, Size: 0x10]
	FString CBGreenColorR_7_798B3E0016C4BF182EFE2902021A8572;//[Offset: 0x70, Size: 0x10]
	FString CBRedColorA_8_77B50440671A3E3B5F43162201E6BC01;//[Offset: 0x80, Size: 0x10]
	FString CBRedColorB_9_77B60480671A3E3C5F43162101E6BC02;//[Offset: 0x90, Size: 0x10]
	FString CBRedColorG_10_77BB05C0671A3E415F43162401E6BC07;//[Offset: 0xa0, Size: 0x10]
	FString CBRedColorR_11_77C60880671A3E4C5F43163101E6BC12;//[Offset: 0xb0, Size: 0x10]
	FString ID_19_20AE6F800EBB4E6435B639D10F2D94A4;//[Offset: 0xc0, Size: 0x10]
	FString NormalColorA_13_203E56802F6BCD1E3143D4E005EDA891;//[Offset: 0xd0, Size: 0x10]
	FString NormalColorB_14_203F56C02F6BCD1F3143D4E105EDA892;//[Offset: 0xe0, Size: 0x10]
	FString NormalColorG_15_204458002F6BCD243143D4EA05EDA897;//[Offset: 0xf0, Size: 0x10]
	FString NormalColorR_16_204F5AC02F6BCD2F3143D49105EDA882;//[Offset: 0x100, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_ColorBlindnessConfig_type
	FString CBBlueColorA_19_362F368060B105F828F4BADE0EAF4721;//[Offset: 0x0, Size: 0x10]
	FString CBBlueColorB_27_363036C060B105F928F4BADF0EAF4722;//[Offset: 0x10, Size: 0x10]
	FString CBBlueColorG_29_3635380060B105FE28F4BAA40EAF4727;//[Offset: 0x20, Size: 0x10]
	FString CBBlueColorR_23_36403AC060B1060928F4BAAF0EAF4732;//[Offset: 0x30, Size: 0x10]
	FString CBGreenColorA_17_5F0D90C03949D01D2EBEC7C9023492B1;//[Offset: 0x40, Size: 0x10]
	FString CBGreenColorB_28_5F0E91003949D01E2EBEC7CE023492B2;//[Offset: 0x50, Size: 0x10]
	FString CBGreenColorG_32_5F1392403949D0232EBEC7C3023492B7;//[Offset: 0x60, Size: 0x10]
	FString CBGreenColorR_25_5F1E95003949D02E2EBEC7DE023492A2;//[Offset: 0x70, Size: 0x10]
	FString CBRedColorA_18_12FF5B40473229556BCC523607F696F1;//[Offset: 0x80, Size: 0x10]
	FString CBRedColorB_26_13005B80473229566BCC522907F696F2;//[Offset: 0x90, Size: 0x10]
	FString CBRedColorG_30_13055CC04732295B6BCC522C07F696F7;//[Offset: 0xa0, Size: 0x10]
	FString CBRedColorR_24_13105F80473229666BCC521907F696E2;//[Offset: 0xb0, Size: 0x10]
	FString ID_35_5A5046801FF3596E474DD8DF0D82F7A4;//[Offset: 0xc0, Size: 0x10]
	FString NormalColorA_31_0DCD2D8036DBB8744E67B41408EF47F1;//[Offset: 0xd0, Size: 0x10]
	FString NormalColorB_22_0DCE2DC036DBB8754E67B41508EF47F2;//[Offset: 0xe0, Size: 0x10]
	FString NormalColorG_21_0DD32F0036DBB87A4E67B41E08EF47F7;//[Offset: 0xf0, Size: 0x10]
	FString NormalColorR_20_0DDE31C036DBB8854E67B42508EF47E2;//[Offset: 0x100, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_BattleSound_type
	FString Bank_0_184E3DC068C2BF413A229E4A0982F59B;//[Offset: 0x0, Size: 0x10]
	int ID_1_2A476200426F1DEA2637969B03D982A4;//[Offset: 0x10, Size: 0x4]
	FString Region_2_79F1F7C0268B0C797F1F0D4403F807DE;//[Offset: 0x18, Size: 0x10]
	FString Event_3_1B79FF4077296A014966EB0F082BF7C4;//[Offset: 0x28, Size: 0x10]
	int SoundID_4_46DBA4405283EB7B3BA231390F57D0E4;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10]
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18]
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_EmoteBPTable_type
	FString Path_0_247605C000C1809320361CC70BC26958;//[Offset: 0x0, Size: 0x10]
	FString CName_1_20BFF38058E1993E3181765E0C385985;//[Offset: 0x10, Size: 0x10]
	int ID_2_6D1FE5C03D4B9B6365DA363A01FBC3D4;//[Offset: 0x20, Size: 0x4]
	FString LobbyPath_3_17CBE3C0186812E1377BBB6D07222BE8;//[Offset: 0x28, Size: 0x10]
	FString LobbyEmoteAdapt_4_6274998039C4B44E5D4A1AFE0DB5A954;//[Offset: 0x38, Size: 0x10]
	FString BattleLowPath_5_4F3B89400282AC756B607A450BF84618;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemRecordDataForPC5
	int ItemID_3_2C55A5F2477A39E2006109BD19E76D0C;//[Offset: 0x0, Size: 0x4]
	int ItemType_5_B88A873B4FDA20CFAF0E798B7EC9084D;//[Offset: 0x4, Size: 0x4]
	int BPID_7_204F423F43E79BBD48973B8D51C6F4D7;//[Offset: 0x8, Size: 0x4]
	FString ItemSmallIcon_10_611147EB460F1885DD467290EF57AAC3;//[Offset: 0x10, Size: 0x10]
	FString ItemSmallIcon2_12_D841285E4F88F8A3220502B369A1CAE3;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UIAdaptationStructure
	FString DeviceName_2_A8CF6E1F40D8116DD8A17D97AD6515ED;//[Offset: 0x0, Size: 0x10]
	float LeftOffset_5_61C5916847A6DB0845C03799C935F0CD;//[Offset: 0x10, Size: 0x4]
	float RightOffset_7_338321234218040563FB88B423EA8023;//[Offset: 0x14, Size: 0x4]
	float TopOffset_9_68D32A004301A63A4ABF20B129DBC8DE;//[Offset: 0x18, Size: 0x4]
	float BottomOffset_11_0C31E5BC4AA9CD8E9DBA4A9D456E101E;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: GlobalConfigActor.Actor.Object
	bool bInitComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	void Init();// 0x68e7b74
<----------Generated by SSpawner v1.0.4---------->


Class: BP_SAVEGAME_UIElemLayout_C.SaveGame.Object
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict1;//[Offset: 0x28, Size: 0x50]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict2;//[Offset: 0x78, Size: 0x50]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict3;//[Offset: 0xc8, Size: 0x50]
	bool IsDataValid1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool IsDataValid2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	bool IsDataValid3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]
	float RushTriggerLength1;//[Offset: 0x11c, Size: 0x4]
	float RushTriggerLength2;//[Offset: 0x120, Size: 0x4]
	float RushTriggerLength3;//[Offset: 0x124, Size: 0x4]
	FString SaveSlotName;//[Offset: 0x128, Size: 0x10]
	FString LayoutName1;//[Offset: 0x138, Size: 0x10]
	FString LayoutName2;//[Offset: 0x148, Size: 0x10]
	FString LayoutName3;//[Offset: 0x158, Size: 0x10]
	int TimeTag;//[Offset: 0x168, Size: 0x4]
	int[] InvalidArray1;//[Offset: 0x170, Size: 0x10]
	int[] InvalidArray2;//[Offset: 0x180, Size: 0x10]
	int[] InvalidArray3;//[Offset: 0x190, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_UIElemLayoutDetail
	int Type_23_55DBE0E544DAFBECC9EFB6BB17ABA028;//[Offset: 0x0, Size: 0x4]
	Vector2D Scale_17_041C81B04F88C44906CC9C9124ED2CF5;//[Offset: 0x4, Size: 0x8]
	float Opacity_7_DA1E8BC343F74DC18A9B0FBB6DA17CCB;//[Offset: 0xc, Size: 0x4]
	Anchors AnchorType_16_8C6A88824F5B4009F1532EBCA05CA534;//[Offset: 0x10, Size: 0x10]
	Vector2D RelativePos_19_41E2D4F647EC741044D6AC9C8DD94ED4;//[Offset: 0x20, Size: 0x8]
	Vector2D OriginSize_22_61D9CB8A48FFB415806311A1771BDF74;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: TemBPDataAddr
	uint64 Value;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: InGameUIManager.GameBusinessManager.LogicManagerBase.Object
	class Object[] InGameUIList;//[Offset: 0x178, Size: 0x10]
	<FString,UAEUserWidget*> WidgetsMap;//[Offset: 0x1f0, Size: 0x50]
	<int,DynamicWidgetAsyncLoadData> PendingAsyncLoadRequests;//[Offset: 0x240, Size: 0x50]
	void SubUIWidgetListWithMountData(out const InGameWidgetData[] InGameWidgetDataList, out const FString[] GameStatusStrList, bool InPersistentUI, bool InUsedByControler, bool InOberverOnly, int inUIControlState);// 0x672fc1c
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool InPersistentUI, bool InUsedByControler, bool InOberverOnly);// 0x672f9c4
	void SubDynamicUIWidgetList(out const DynamicWidgetData[] DynamicWidgetMap);// 0x672f89c
	void OnAsyncLoadWidgetClassObj(Object* InClassObj, int RequestID);// 0x672f7e4
	void HandleUIMessage(FString UIMessage);// 0x672f73c
	void HandleMountWidget(InGameUIManager* IngameManager);// 0x672f6c0
	void HandleDynamicDestroy();// 0x672f6ac
	void HandleDynamicCreation(bool isAsyncLoad);// 0x672f628
	void GetWidgetHandleAsyncWithCallBack(FString WidgetKey, delegate InCallback);// 0x672f520
	UAEUserWidget* GetWidgetHandle(FString WidgetKey);// 0x672f468
	CanvasPanel* GetMountCanvasPanel(FString MountOuterName, FString MountName);// 0x672f348
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x672f2a4
<----------Generated by SSpawner v1.0.4---------->


Class: GameBusinessManager.LogicManagerBase.Object
	GameWidgetConfig[] WidgetConfigList;//[Offset: 0xf8, Size: 0x10]
	UAEPlayerController* OwningController;//[Offset: 0x158, Size: 0x8]
	LuaClassObj* LuaObject;//[Offset: 0x168, Size: 0x8]
	UAEUserWidget* GetWidget(int Index);// 0x67150e4
	LuaClassObj* GetLuaObject();// 0x67150b0
	GameFrontendHUD* GetGameFrontendHUD();// 0x671507c
<----------Generated by SSpawner v1.0.4---------->


Class: GameWidgetConfig
	FString Path;//[Offset: 0x0, Size: 0x10]
	FString Container;//[Offset: 0x10, Size: 0x10]
	int ZOrder;//[Offset: 0x20, Size: 0x4]
	class Object* WidgetClass;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: LuaClassObj.LuaContext.Actor.Object
	GameBusinessManager* pManager;//[Offset: 0x410, Size: 0x8]
	bool bClearSourceCodeAfterInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41a, Size: 0x1]
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool bPersistentUI, bool InStatusConcern, bool bDynamicWidget, bool bKeepDynamicWidget);// 0x673673c
	void SubShowHideEvent(out const FString[] WidgetPathList);// 0x6736628
	void SubDefaultSceneCamera(const int sceneCameraIndex);// 0x67365ac
	void SubDefaultChildUI(out const FString[] childList);// 0x6736498
	void SubDefaultBaseUI(FString baseUI);// 0x67363f0
	void SubCollapseWidgetList(FString RootWidgetName, out FString[] ChildWidgetNames);// 0x6736274
	void SetWidgetZorder(const int Index, const int ZOrder);// 0x67361c0
	void RestoreWidgetZorder(const int Index);// 0x6736144
	void RestoreAllWidgetZorder();// 0x6736130
	bool IsTopStackPanel();// 0x67360f8
	bool IsPushedPanel();// 0x67360c0
	bool InCombatState();// 0x6736088
	void HandleUIMessageNoFetch(FString UIMessage);// 0x6735fe0
	void HandleUIMessage(FString UIMessage);// 0x6735f38
	void HandleStopAsyncLoad();// 0x6735f24
	void HandleDynamicDestroy();// 0x6735f10
	void HandleDynamicCreationInternal(bool isAsyncLoad);// 0x6735e8c
	void HandleDynamicCreation(bool isAsyncLoad);// 0x6735e08
	void HandleCollapseWidgetList(FString RootWidgetName);// 0x6735d60
	FString GetTopStackPanelSrcTag();// 0x6735cbc
	FString GetTopStackPanelDstTag();// 0x6735c18
	FString GetGameStatus();// 0x6735b74
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x6735ad0
	void AddToTopStackPanel();// 0x6735abc
<----------Generated by SSpawner v1.0.4---------->


Class: LuaContext.Actor.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x3f8, Size: 0x8]
	Object* OwningObject;//[Offset: 0x400, Size: 0x8]
	ScriptContextComponent* ScriptContextComponent;//[Offset: 0x408, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ScriptContextComponent.ActorComponent.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x118, Size: 0x8]
	void PushScriptArrayIndexData(FString ParamName, int Index);// 0x9d0c448
	void PushOneScriptPropertyValues(FString ParamName);// 0x9d0c30c
	void PushAllScriptPropertyValues();// 0x9d0c2f0
	void FetchScriptArrayIndexData(FString ParamName, int Index);// 0x9d0c180
	void FetchOneScriptPropertyValues(FString ParamName);// 0x9d0c044
	void FetchAllScriptPropertyValues();// 0x9d0c028
	void CallScriptFunctionWithoutFetch(FString FunctionName);// 0x9d0bef4
	void CallScriptFunction(FString FunctionName);// 0x9d0bdc0
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicWidgetAsyncLoadData
	FString WidgetKey;//[Offset: 0x0, Size: 0x10]
	DynamicWidgetData DynamicWidgetData;//[Offset: 0x10, Size: 0x98]
	delegate Callback;//[Offset: 0xa8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicWidgetData
	bool bAutoDestory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString MountModule;//[Offset: 0x8, Size: 0x10]
	InGameWidgetData InGameWidgetData;//[Offset: 0x18, Size: 0x80]
<----------Generated by SSpawner v1.0.4---------->


Class: InGameWidgetData
	int bAutoShow;//[Offset: 0x0, Size: 0x4]
	GameWidgetConfig GameWidgetConfig;//[Offset: 0x8, Size: 0x30]
	WidgetMountData WidgetMountData;//[Offset: 0x38, Size: 0x48]
<----------Generated by SSpawner v1.0.4---------->


Class: WidgetMountData
	Margin MarginData;//[Offset: 0x0, Size: 0x10]
	Anchors AnchorsData;//[Offset: 0x10, Size: 0x10]
	Vector2D Position;//[Offset: 0x20, Size: 0x8]
	FString MountName;//[Offset: 0x28, Size: 0x10]
	FString MountOuterName;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SecurityImprisonComp.ActorComponent.Object
	STExtraPlayerController* OwnerPC;//[Offset: 0x110, Size: 0x8]
	STExtraBaseCharacter* CharacterWaitForOp;//[Offset: 0x118, Size: 0x8]
	uint64[] TeammateKillerUID;//[Offset: 0x120, Size: 0x10]
	byte[] TeammateKillType;//[Offset: 0x130, Size: 0x10]
	void ReleaseTeammate(const uint64 PlayerUID);// 0x6b1f4ec
	void ImprisonmentUIUpdate(const uint64 PlayerUID, const bool bIsImprison);// 0x6b1f3e8
	void ImprisonmentTeammate(const uint64 PlayerUID, const bool bIscomplaint);// 0x6b1f2e4
	void ImprisonmentReport(const uint64 PlayerUID);// 0x6b1f268
<----------Generated by SSpawner v1.0.4---------->


Class: HiggsBosonComponent.LuaActorComponent.ActorComponent.Object
	void RPC_Client_ShowSecurityAlertWindow(FString StrProperty);// 0x9f84450
	void RPC_Client_ServerNameAck();// 0x9f84450
	void RPC_Server_TellServerName(FString StrProperty);// 0x9f84450
	void RPC_Server_ReportWechatRobot(FString StrProperty);// 0x9f84450
	bool bOpenActorChannelErrorReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f7, Size: 0x1]
	FString TraceData;//[Offset: 0x2f8, Size: 0x10]
	FString GameTraceData;//[Offset: 0x308, Size: 0x10]
	uint32 HeartBreaks;//[Offset: 0x318, Size: 0x4]
	FString HeartInfo;//[Offset: 0x320, Size: 0x10]
	delegate OnSwiftHawkDelegate;//[Offset: 0x330, Size: 0x10]
	delegate OnGlueHiaRayResult;//[Offset: 0x340, Size: 0x10]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x350, Size: 0x8]
	STExtraPlayerController* PlayerController;//[Offset: 0x358, Size: 0x8]
	bool bClientInfoReceived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	uint32[] ClientInfoAsUInt32Array;//[Offset: 0x368, Size: 0x10]
	byte[] IntegrityItemCheckResultAsBytes;//[Offset: 0x378, Size: 0x10]
	bool bRoofTouchActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	int RoofTouchStatus;//[Offset: 0x3d4, Size: 0x4]
	bool bEnableMoveInputRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	float MoveInputRecordCooldown;//[Offset: 0x3e0, Size: 0x4]
	int MoveInputRecordLimit;//[Offset: 0x3e4, Size: 0x4]
	MoveInput[] ReceivedMoveInputs;//[Offset: 0x408, Size: 0x10]
	SCoronaClientData* SecurityCoronaLabClientDataPointer;//[Offset: 0xb88, Size: 0x8]
	bool bMHActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf8, Size: 0x1]
	<int,int> FFItemIDMap;//[Offset: 0xc58, Size: 0x50]
	FString[] MatchedApps;//[Offset: 0xcb0, Size: 0x10]
	FString[] ReceivedInstalledApp;//[Offset: 0xcd8, Size: 0x10]
	delegate OnServerReceiveInstalledAppDelegate;//[Offset: 0xce8, Size: 0x10]
	float TouchScreenActiveTimeRatioThreshold;//[Offset: 0xd8c, Size: 0x4]
	float MouTa;//[Offset: 0xd94, Size: 0x4]
	void Zanwu(FString Param1);// 0x6b1bd04
	void SyncServerParam(bool Param1);// 0x6b1bc80
	void SwiftHawk(const byte[] Hawks, uint32 Magic);// 0x6b1bb60
	void ShowABCD(FString Message, bool bIsClientShowWindow);// 0x70644c4
	void SetSchemeForInitialize(int Index, uint32 VerifyLen, byte[] VerifyHashArray, PatchPoint[] PatchPointArray);// 0x6b1b8c8
	void SetSchemeForGet(int Index, uint32 VerifyLen, byte[] VerifyHashArray, PatchPoint[] PatchPointArray);// 0x6b1b630
	void ServerWheat(const float Param1, const float Param2);// 0x6b1b548
	void ServerReceiveInstalledApp(const FString[] PackageNames);// 0x6b1b410
	void ServerPoPo(out byte[] Array);// 0x6b1b358
	void RPC_ServerGlueHiaPark(int8 HeShui, const byte[] GlueHiaParkArr, uint32 HiaStatus, const byte[] GlueArg, const byte[] GlueHiaParkArr2, const uint32 HiaStatus2);// 0x6b1b0e8
	void RPC_ServerCapbo(int8 BoCapC, int8 InBoType, const byte[] BoDataArr);// 0x6b1af88
	void RPC_ClientCoronaLab(byte bAllSwitch, const byte[] CoronaLab, uint32 CoronaState);// 0x6b1ae28
	void OnWeaponAimInput(float InDistToEnemy, float InYaw, float InPitch, float InRoll);// 0x6b1ad00
	void OnTouchInput(float InYaw, float InPitch, float InRoll);// 0x6b1ac10
	void OnStopFireEvent();// 0x6b1abfc
	void OnStartFireEvent();// 0x6b1abe8
	void OnSkillInteruptVisual(const Actor* InTarget, const Actor* InCauser);// 0x6b1ab34
	void OnSkillEndVisual(const Actor* InTarget, const Actor* InCauser);// 0x6b1aa80
	void OnSkillEndTrans(const Actor* InTarget, const Actor* InCauser);// 0x6b1a9cc
	void OnSkillBeginVisual(const Actor* InTarget, const Actor* InCauser);// 0x6b1a918
	void OnSkillBeginTrans(const Actor* InTarget, const Actor* InCauser);// 0x6b1a864
	void OnPlayerScopeOut(bool bBegan);// 0x6b1a7e0
	void OnPlayerScopeIn(bool bBegan);// 0x6b1a75c
	void OnMyPawnRespawn(UAEPlayerController* InPlayerController);// 0x6b1a6e0
	void OnKillSomeOneEvent(const Actor* InSomeOne);// 0x6b1a664
	void OnGyroInput(float InYaw, float InPitch, float InRoll);// 0x6b1a574
	void OnClientAdjustPosition(Vector NewLoc, enum Reason);// 0x6b1a4bc
	void OnCapboReturn(int BoCapC, int InBoType, out const byte[] RetData);// 0x6b1a388
	void OnBulletImpactEvent(const Actor* InCauser, out const HitResult InImpactResult);// 0x6b1a27c
	void HandleClientReconnect();// 0x6b1a268
	float GetServerGuey();// 0x6b1a234
	void FlushGameEnd();// 0x6b1a220
	void Ezio(const int Param1, const int Param2, const int param3, const int Param4);// 0x6b1a0c0
	int EnableTickEncrypt();// 0x6b1a08c
	void EnableEnhancedDynamicActors(int Index);// 0x6b1a010
	void DispatchIntegrityCheckItem(uint32 PlatID, uint32 AreaID, uint32 GameBits, uint32 Index, int Offset, uint32 Len, uint32 Type);// 0x6b19e38
	void DevPVSCheckClientLocationC2S(STExtraBaseCharacter* PtrOtherCharacter, const Vector D, const Vector A, const Vector V, const Vector C, const bool b1);// 0x6b19c44
	void DevPVSCheckClientLocation(Actor* PtrSimulatedProxy, const Vector D);// 0x6b19b58
	void ControlRoofTouch(const int Switch);// 0x6b19adc
	void ControlMoveInputRecord(const int Switch, const float InMoveInputRecordCooldown, const int InMoveInputRecordLimit);// 0x6b199e8
	void ControlMHActive(const int Switch);// 0x6b1996c
	void ClientSwiftHawkWithParams(const byte[] Hawks);// 0x6b198bc
	void ClientSwiftHawk(byte Type, int SequenceID);// 0x6b197fc
	void ClientReceiveEx(const byte[] RPCConstArray);// 0x6b19720
	void ClientInstalledApp(int Type, const FString[] PackageNames);// 0x6b195a4
	void ClientDoJT(bool bDelayUntilShot);// 0x6b19520
<----------Generated by SSpawner v1.0.4---------->


Class: MoveInput
	float TimeSeconds;//[Offset: 0x0, Size: 0x4]
	float ForwardInputRate;//[Offset: 0x4, Size: 0x4]
	float RightInputRate;//[Offset: 0x8, Size: 0x4]
	uint64 CurrentStates;//[Offset: 0x10, Size: 0x8]
	int ZeroMoveInputCount;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: SCoronaClientData.FuzzyObject.Object
<----------Generated by SSpawner v1.0.4---------->


Class: FuzzyObject.Object
	int Param1;//[Offset: 0x348, Size: 0x4]
	bool SetUInt8ValueByName(const int Name, const byte Value);// 0x6b16fd0
	bool SetUInt64ValueByName(const int Name, const uint64 Value);// 0x6b16f04
	bool SetUInt32ValueByName(const int Name, const uint32 Value);// 0x6b16e3c
	bool SetUInt16ValueByName(const int Name, const uint16 Value);// 0x6b16d70
	bool SetInt8ValueByName(const int Name, const int8 Value);// 0x6b16ca4
	bool SetInt64ValueByName(const int Name, const int64 Value);// 0x6b16bd8
	bool SetInt32ValueByName(const int Name, const int Value);// 0x6b16b10
	bool SetInt16ValueByName(const int Name, const int16 Value);// 0x6b16a44
	bool SetFloatValueByName(const int Name, const float Value);// 0x6b16978
	bool SetBoolValueByName(const int Name, const bool Value);// 0x6b168a4
	bool GetUInt8ValueByName(const int Name, out byte OutValue);// 0x6b167c8
	bool GetUInt64ValueByName(const int Name, out uint64 OutValue);// 0x6b166ec
	bool GetUInt32ValueByName(const int Name, out uint32 OutValue);// 0x6b16610
	bool GetUInt16ValueByName(const int Name, out uint16 OutValue);// 0x6b16534
	bool GetInt8ValueByName(const int Name, out int8 OutValue);// 0x6b16458
	bool GetInt64ValueByName(const int Name, out int64 OutValue);// 0x6b1637c
	bool GetInt32ValueByName(const int Name, out int OutValue);// 0x6b162a0
	bool GetInt16ValueByName(const int Name, out int16 OutValue);// 0x6b161c4
	bool GetFloatValueByName(const int Name, out float OutValue);// 0x6b160e8
	bool GetBoolValueByName(const int Name, out bool OutValue);// 0x6b1600c
<----------Generated by SSpawner v1.0.4---------->


Class: PatchPoint
	int Offset;//[Offset: 0x0, Size: 0x4]
	uint32 Old;//[Offset: 0x4, Size: 0x4]
	uint32 New;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: LuaTaskComponent.ActorComponent.Object
	XTaskSyncData[] TaskSyncList;//[Offset: 0x110, Size: 0x10]
	XTaskSaveData[] TaskList;//[Offset: 0x120, Size: 0x10]
	DailyTaskAwardInfo[] RewardList;//[Offset: 0x130, Size: 0x10]
	delegate TaskSyncListRefreshDelegate;//[Offset: 0x140, Size: 0x10]
	delegate OnEndPlay;//[Offset: 0x150, Size: 0x10]
	delegate TaskAreaStateChangeDelegate;//[Offset: 0x160, Size: 0x10]
	XTaskExtraSyncData[] TaskExtraSyncData;//[Offset: 0x170, Size: 0x10]
	delegate TaskExtraSyncDataRefreshDelegate;//[Offset: 0x180, Size: 0x10]
	void SyncTaskList(out XTaskSaveData[] SyncList);// 0x5f55e14
	void SetTestTaskReportData();// 0x5f55e00
	void RPC_Server_GetReward(int TaskId);// 0x5f55d50
	void RPC_Client_GetRewardRes(bool IsSuccess);// 0x5f55cc4
	void RPC_Client_ExitTaskArea(int TaskId);// 0x5f55c40
	void RPC_Client_EnterTaskArea(int TaskId, float Duration);// 0x5f55b80
	void RefreshSyncTaskList();// 0x5f55b6c
	void RefreshPlayerDailyTaskStoreInfo();// 0x5f55b58
	void RecordRewardInfo(int TaskId, TaskAwardItemInfo[] AwardList);// 0x5f559e4
	void OnRep_TaskSyncList();// 0x5f559d0
	void OnRep_TaskExtraSyncData();// 0x5f559bc
	void ModifyTaskExtraSyncData(int TaskId, XTaskExtraSyncData SaveData);// 0x5f558d0
	void ModifyTaskBySaveData(int TaskId, XTaskSaveData SaveData);// 0x5f55800
	void ModifyTask(int TaskId, int Progress, int State);// 0x5f55710
	void ModifySyncTask(int TaskId);// 0x5f55694
	bool IsTaskDone(int TaskId);// 0x5f55604
	enum GetTaskStateByTaskId(int TaskId);// 0x5f55578
	XTaskExtraSyncData GetTaskExtraDataByTaskId(int TaskId);// 0x5f554dc
	XTaskSyncData GetTaskDataByTaskId(int TaskId);// 0x5f55444
	DailyTaskReportInfo GetDailyTaskReportData();// 0x5f552b8
	void DeleteTask(int TaskId);// 0x5f5523c
	void CollapseTaskInfo();// 0x5f55228
	void AddTask(int TaskId, int Aim);// 0x5f55174
<----------Generated by SSpawner v1.0.4---------->


Class: XTaskSyncData
	int TaskId;//[Offset: 0x0, Size: 0x4]
	int CurProgress;//[Offset: 0x4, Size: 0x4]
	int AimProgress;//[Offset: 0x8, Size: 0x4]
	enum State;//[Offset: 0xc, Size: 0x1]
	enum TaskType;//[Offset: 0xd, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: XTaskSaveData
	int TaskId;//[Offset: 0x0, Size: 0x4]
	int CurProgress;//[Offset: 0x4, Size: 0x4]
	int AimProgress;//[Offset: 0x8, Size: 0x4]
	int FobidShow;//[Offset: 0xc, Size: 0x4]
	enum State;//[Offset: 0x10, Size: 0x1]
	enum TaskType;//[Offset: 0x11, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: XTaskExtraSyncData
	int TaskId;//[Offset: 0x0, Size: 0x4]
	enum TaskType;//[Offset: 0x4, Size: 0x1]
	bool TimerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	float CurAccumTime;//[Offset: 0x8, Size: 0x4]
	float TotalTime;//[Offset: 0xc, Size: 0x4]
	float ServerStartTime;//[Offset: 0x10, Size: 0x4]
	Vector Position;//[Offset: 0x14, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: QuickSignComponent_BP_C.QuickSignComponent.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7a8, Size: 0x8]
	void PostFinishEvent(int TextId);// 0x70644c4
	void PlayVoiceAutoLanguage(int actorid, int audioID);// 0x70644c4
	void GetTextID(int SingType, out int TextId, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue);// 0x70644c4
	void GetAudioID(int actorid, int SignType, int MsgID, out int audioID, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2);// 0x70644c4
	void GetMarkTextShowedInChatBox(FString PlayerKey, int OldTextID, out FString Text, GameStateBase* CallFunc_GetGameState_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetLocalizeVoiceText_Text, STExtraBaseCharacter* CallFunc_FindCharacterByPlayerKey_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue, STExtraBallVehicle* K2Node_DynamicCast_AsSTExtra_Ball_Vehicle, bool K2Node_DynamicCast_bSuccess2, FString CallFunc_Conv_IntToString_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_GetLocalizeBattleText_Text, enum CallFunc_GetCurrentMotionState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x70644c4
	void SpectatorActorMark(out QuickSignMsg OriMarkInfo, out QuickSignMsg MarkInfo, Actor* Actor, enum SubType, FString ConfigKey);// 0x70644c4
	void GetTeamateColor(FString PlayerName, out LinearColor Color, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, LinearColor CallFunc_GetPlayerTeamColor_Result, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerState*[] CallFunc_GetTeamMatePlayerStateList_OutList, int CallFunc_Array_Length_ReturnValue, STExtraPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x70644c4
	void SetDistanceText(Vector HidPosition, enum MsgType, FString CallFunc_GetLocalizeText_Text, bool CallFunc_NotEqual_VectorVector_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, FText CallFunc_Conv_StringToText_ReturnValue2, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Contains_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* CallFunc_GetCurPlayerCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Dist2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_FloatFloat_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x70644c4
	void GetAudioEventAndBank(int audioID, int actorid, out FString OutBankName, out FString OutEventName, FString BankName, FString EventName, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Conv_StringToText_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetActorBankByID_BankName);// 0x70644c4
	void GetLocalizeActorID(int AudioKey, out int actorid, int CallFunc_Divide_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsActorInGlobal_IsExist, bool CallFunc_IsBankExistByActorID_bExist, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	void PlayVoiceAndText(QuickSignMsg MsgItem, bool IsSelf, FString PlayerKey, int SignType, int TextId, int audioID, int actorid, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_GetLocalizeActorID_ActorID, int CallFunc_GetAudioID_AudioID, bool CallFunc_NotEqual_IntInt_ReturnValue, QuickSignMsg K2Node_MakeStruct_QuickSignMsg, int CallFunc_GetTextID_TextID, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, VoiceSDKInterface* CallFunc_GetVoiceSDKInterface_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess2, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_GetStrArgument_StrArgument, FString CallFunc_OrganizeMsg_MsgString);// 0x70644c4
	int GetVoiceAudioID(enum MsgType, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_GetQuickSignAudio_AudioID);// 0x70644c4
	void GetStrArgument(FString QuickSignID, FString StringParam, out FString StrArgument, FString AttachSlotName, FString FinalString, FString CallFunc_GetLocalizeBattleText_Text, FString CallFunc_GetLocalizeBattleText_Text2, bool CallFunc_NotEqual_StrStr_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue2, bool CallFunc_NotEqual_StrStr_ReturnValue3, FString CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, FString[] CallFunc_ParseIntoArray_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue4, int CallFunc_Array_Length_ReturnValue, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_GetLocalizeBattleText_Text3, FString CallFunc_GetLocalizeBattleText_Text4, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue5, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue3, bool CallFunc_IsNumeric_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizeBattleText_Text5, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x70644c4
	void OrganizeMsg(int TextId, FString PlayerName, bool IsSelf, FString StrParam, Vector HitPos, enum MsgType, FString PlayerKey, out FString MsgString, FText DistanceText, FString msgContent, FString CallFunc_GetMarkTextShowedInChatBox_Text, bool CallFunc_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_StartsWith_ReturnValue, FString CallFunc_SelectString_ReturnValue, FString CallFunc_GetLocalizeText_Text, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Concat_StrStr_ReturnValue3, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FText CallFunc_Conv_StringToText_ReturnValue2, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, FString CallFunc_GetLocalizeText_Text2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetLocalizeText_Text3, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11);// 0x70644c4
	void PickupWrapperActorHandle(FString Param, out QuickSignMark MarkInfo, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, bool CallFunc_IsNumeric_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark);// 0x70644c4
	bool GenerateMarkInfo(out QuickSignMsg MsgItem, out QuickSignMark MarkInfo, QuickSignMark QuickSignMarkInfo, bool K2Node_SwitchString_CmpSuccess, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark);// 0x70644c4
	void LoadConfig(int Temp_int_Array_Index_Variable, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, int Temp_int_Loop_Counter_Variable, BP_STRUCT_QuickSignCfg_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void ShowMsgTipsVoice(out const QuickSignMsg MsgItem, bool IsSelf, FString PlayerKey);// 0x70644c4
	void PlayVoiceCD(float Duration);// 0x70644c4
	void ReportQuickSign(out const QuickSignMsg MsgItem);// 0x70644c4
	void ExecuteUbergraph_QuickSignComponent_BP(int EntryPoint, int Temp_int_Variable, QuickSignMsg K2Node_Event_MsgItem2, bool K2Node_Event_IsSelf, FString K2Node_Event_PlayerKey, float K2Node_CustomEvent_Duration, QuickSignMsg K2Node_Event_MsgItem, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue);// 0x70644c4
	UAEDataTable* QuickSignDataTable;//[Offset: 0x7b0, Size: 0x8]
	<FString,BP_STRUCT_QuickSignCfg_type> QuickTableConfigMap;//[Offset: 0x7b8, Size: 0x50]
	<FString,QuickSignMark> QuickMarkMap;//[Offset: 0x808, Size: 0x50]
	FString TeammateColor;//[Offset: 0x858, Size: 0x10]
	FString SelfColor;//[Offset: 0x868, Size: 0x10]
	FString ColonChar;//[Offset: 0x878, Size: 0x10]
	FString EndChar;//[Offset: 0x888, Size: 0x10]
	FString SelfName;//[Offset: 0x898, Size: 0x10]
	QuickSignMsg CurrMsg;//[Offset: 0x8a8, Size: 0x70]
	bool IsPlayVoiceCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 0x1]
	<enum,int> WeaponAttachmentSocketTextIDMap;//[Offset: 0x920, Size: 0x50]
	<int,int> DefaultAudioMap;//[Offset: 0x970, Size: 0x50]
	FText distanceString;//[Offset: 0x9c0, Size: 0x18]
	bool isShowDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 0x1]
	enum[] ShowDistanceTypes;//[Offset: 0x9e0, Size: 0x10]
	int CurDistance;//[Offset: 0x9f0, Size: 0x4]
	int MaxShowVoiceDistance;//[Offset: 0x9f4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraBallVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STExtraBallMovementComponent* BallMovement;//[Offset: 0x14a8, Size: 0x8]
	CameraComponent* CameraComponent;//[Offset: 0x14b0, Size: 0x8]
	float JumpImpulseForward;//[Offset: 0x14b8, Size: 0x4]
	float JumpImpulseUpward;//[Offset: 0x14bc, Size: 0x4]
	bool bEnableJumpTwice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c0, Size: 0x1]
	float TwiceJumpImpuleForward;//[Offset: 0x14c4, Size: 0x4]
	float TwiceJumpImpuleUpward;//[Offset: 0x14c8, Size: 0x4]
	bool bEnableTwiceCleanVel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14cc, Size: 0x1]
	bool bEnableBoostCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14cd, Size: 0x1]
	float BoostCD;//[Offset: 0x14d0, Size: 0x4]
	float BoostCDTimer;//[Offset: 0x14d4, Size: 0x4]
	bool bEnableHeightFloorLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d8, Size: 0x1]
	float BoostFloorHeight;//[Offset: 0x14dc, Size: 0x4]
	float BallRadius;//[Offset: 0x14e0, Size: 0x4]
	float PlayDustEffectVelSqr;//[Offset: 0x14e4, Size: 0x4]
	float PlayLandEffectNormalZ;//[Offset: 0x14e8, Size: 0x4]
	float PlayLandEffectImpulse;//[Offset: 0x14ec, Size: 0x4]
	float MaxEnterWaitingStateVel;//[Offset: 0x14f0, Size: 0x4]
	float InterruptWaitingStateVel;//[Offset: 0x14f4, Size: 0x4]
	float ExitBallVehicleVel;//[Offset: 0x14f8, Size: 0x4]
	bool bLeaveCheckInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14fc, Size: 0x1]
	bool bEnterVehicleByItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14fd, Size: 0x1]
	Vector VehicleHitImpulse;//[Offset: 0x1500, Size: 0xc]
	float VehicleHitImpulseScale;//[Offset: 0x150c, Size: 0x4]
	float MaxVehicleHitImpulse;//[Offset: 0x1510, Size: 0x4]
	float VehicleHitImpulseCD;//[Offset: 0x1514, Size: 0x4]
	bool bServerAuthorizeByMotionState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1518, Size: 0x1]
	float KickRaiseHeight;//[Offset: 0x151c, Size: 0x4]
	class CameraShake* JumpCameraShake;//[Offset: 0x1520, Size: 0x8]
	float JumpCameraShakeScale;//[Offset: 0x1528, Size: 0x4]
	bool bSteerCameraYawAgainStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152c, Size: 0x1]
	enum CurrentMotionState;//[Offset: 0x152d, Size: 0x1]
	delegate OnBallVehicleMotionStateChanged;//[Offset: 0x1530, Size: 0x10]
	bool bHasBallInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1540, Size: 0x1]
	DecorationCircle DecorationCircle;//[Offset: 0x1550, Size: 0x90]
	bool bCheckCharacterAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e0, Size: 0x1]
	float ClientWaterStateCheckInterval;//[Offset: 0x15e4, Size: 0x4]
	AkAudioEvent* Sfx_EngineLoop_InAir;//[Offset: 0x15f0, Size: 0x8]
	AkAudioEvent* Sfx_BoostJump;//[Offset: 0x15f8, Size: 0x8]
	AkAudioEvent* Sfx_BoostJumpTwice;//[Offset: 0x1600, Size: 0x8]
	AkAudioEvent* Sfx_KickVehicle;//[Offset: 0x1608, Size: 0x8]
	AkAudioEvent* Sfx_BallSlip;//[Offset: 0x1610, Size: 0x8]
	float BallSlipCosMax;//[Offset: 0x1618, Size: 0x4]
	FString BallLandingRTPCName;//[Offset: 0x1620, Size: 0x10]
	float EngineSfxMinSpeed;//[Offset: 0x1630, Size: 0x4]
	void VehicleAirStateChanged(bool bIsFoundFloor);// 0x60fda4c
	void UpdateEffect();// 0x60fda30
	void TryChangeWaitingForKickState(bool bReady);// 0x60fd9ac
	void SyncClientWaterStateToServer();// 0x60fd94c
	void SetHandBrake(float rate);// 0x60fd8c8
	bool SetBoosting(bool bEnalbed);// 0x60fd828
	void ServerKickVehicle(Vector KickImpulse);// 0x60fd7ac
	void ServerInitBallVehicle(bool bInit);// 0x60fd728
	void ServerHandleApplyImpulseByHit(Vector HitImpulse);// 0x60fd6ac
	void RspKickVehicle(Vector KickImpulse);// 0x60fd628
	void RspBoostJump(bool bInMidAir);// 0x60fd59c
	void RspApplyImpulseByHit(Vector HitImpulse);// 0x60fd518
	void ReqServerChangeWaitingKickState(bool bReady);// 0x60fd454
	void ReqServerBoostJump();// 0x60fd3f4
	bool RaiseBallVehicle(float DeltaHeight);// 0x60fd364
	void PlayJumpCameraEffect(bool bInMidAir);// 0x70644c4
	void OnVehicleKicked();// 0x70644c4
	void OnRep_CurrentMotionState();// 0x60fd350
	void OnRep_BallInitialized();// 0x60fd33c
	void OnPlayLandEffect(Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x70644c4
	void OnHitOther(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x60fd1bc
	void OnBoostJump();// 0x70644c4
	void MoveRight(float rate);// 0x60fd138
	void MoveForward(float rate);// 0x60fd0b4
	void KickVehicleInternal(Vector Impulse);// 0x60fd038
	bool IsInServerAuthorizeNewInternal();// 0x60fcff8
	bool IsBoostInMidAir();// 0x60fcfc0
	void InitializeBallInternal(bool bInit);// 0x70644c4
	Vector GetRotationInputDir();// 0x60fcf80
	FString GetMovementInfoStr();// 0x60fcedc
	float GetForwardSpeed();// 0x60fcea0
	enum GetCurrentMotionState();// 0x60fce80
	STExtraBallMovementComponent* GetBallMovement();// 0x60fce4c
	void EnterBallVehicleMotionState(enum NewState);// 0x60fcdd0
	void ClientHandleChangeWaitingState(bool bSuccess);// 0x70644c4
	void ChangeWaitingForKickState(bool bReady);// 0x60fcd4c
	bool CanLeaveVehicle();// 0x60fcd0c
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraBallMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool UseCustomPowerMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	float MaxForwardTorque;//[Offset: 0x194, Size: 0x4]
	float MaxBackTorque;//[Offset: 0x198, Size: 0x4]
	float MaxSideTorque;//[Offset: 0x19c, Size: 0x4]
	float SlipStiffness;//[Offset: 0x1a0, Size: 0x4]
	float MaxAcc;//[Offset: 0x1a4, Size: 0x4]
	float MaxAngularVel;//[Offset: 0x1a8, Size: 0x4]
	float ReverseTorqueFactor;//[Offset: 0x1ac, Size: 0x4]
	float ExtraGravity;//[Offset: 0x1b0, Size: 0x4]
	bool EnableAirControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 0x1]
	float AirControlAcc;//[Offset: 0x1b8, Size: 0x4]
	float AirControlMaxLinearVel;//[Offset: 0x1bc, Size: 0x4]
	float SteeringSpeed;//[Offset: 0x1c0, Size: 0x4]
	float SteeringDistThreshold;//[Offset: 0x1c4, Size: 0x4]
	float SteeringWheelRate;//[Offset: 0x1c8, Size: 0x4]
	float AngularDamping;//[Offset: 0x1cc, Size: 0x4]
	float BrakeAngularDamping;//[Offset: 0x1d0, Size: 0x4]
	float StopAngularVel;//[Offset: 0x1d4, Size: 0x4]
	float PowerDamping;//[Offset: 0x1d8, Size: 0x4]
	float FreeDamping;//[Offset: 0x1dc, Size: 0x4]
	float BrakeDamping;//[Offset: 0x1e0, Size: 0x4]
	float StopLinearVel;//[Offset: 0x1e4, Size: 0x4]
	float LowSpeedThresholdTime;//[Offset: 0x1e8, Size: 0x4]
	float StickyFrictionDamping;//[Offset: 0x1ec, Size: 0x4]
	float MaxForwardSeatAngle;//[Offset: 0x1f0, Size: 0x4]
	float MaxForwardSeatAngleVel;//[Offset: 0x1f4, Size: 0x4]
	float MaxSlideSeatAngle;//[Offset: 0x1f8, Size: 0x4]
	float MaxSlideSeatAngleVel;//[Offset: 0x1fc, Size: 0x4]
	float SeatAngleSpeed;//[Offset: 0x200, Size: 0x4]
	float SeatAngleThreshold;//[Offset: 0x204, Size: 0x4]
	float WheelRotationScale;//[Offset: 0x208, Size: 0x4]
	float WheelLinearRotationScale;//[Offset: 0x20c, Size: 0x4]
	bool AnimType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	float MinSwitchAnimValue;//[Offset: 0x214, Size: 0x4]
	float FindFloorDist;//[Offset: 0x218, Size: 0x4]
	float FindFloorRadius;//[Offset: 0x21c, Size: 0x4]
	float BounceThreshold;//[Offset: 0x220, Size: 0x4]
	float ClearBounceThreshold;//[Offset: 0x224, Size: 0x4]
	float FloorHeight;//[Offset: 0x228, Size: 0x4]
	float ServerAuthHeight;//[Offset: 0x22c, Size: 0x4]
	float ServerAuthLastTime;//[Offset: 0x230, Size: 0x4]
	float FloorNormalZ;//[Offset: 0x234, Size: 0x4]
	float TargetFloorHeight;//[Offset: 0x238, Size: 0x4]
	float AdjustUpSpeed;//[Offset: 0x23c, Size: 0x4]
	float AdjustDownSpeed;//[Offset: 0x240, Size: 0x4]
	float MaxStaticCosTheta;//[Offset: 0x244, Size: 0x4]
	float MaxCosTheta;//[Offset: 0x248, Size: 0x4]
	float MaxDownSpeed;//[Offset: 0x24c, Size: 0x4]
	float MaxDownVelDirZ;//[Offset: 0x250, Size: 0x4]
	float MaxRaiseHeight;//[Offset: 0x254, Size: 0x4]
	float ObstacleNormalZ;//[Offset: 0x258, Size: 0x4]
	float ObstacleMinSpeed;//[Offset: 0x25c, Size: 0x4]
	float ObstacleMinHeight;//[Offset: 0x260, Size: 0x4]
	float ObstacleMaxHeight;//[Offset: 0x264, Size: 0x4]
	bool CheckObstacleTwice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	float DeltaTimeFactor;//[Offset: 0x26c, Size: 0x4]
	bool ReduceBounceZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	float ReduceZFactor;//[Offset: 0x274, Size: 0x4]
	bool AddBounceXY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	float AddXYFactor;//[Offset: 0x27c, Size: 0x4]
	float ModifyContactSpeedSquare;//[Offset: 0x280, Size: 0x4]
	float BallRadius;//[Offset: 0x284, Size: 0x4]
	bool UseOldPowerOffLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	float ForwardInputRate;//[Offset: 0x28c, Size: 0x4]
	float RightInputRate;//[Offset: 0x290, Size: 0x4]
	float CameraRationYaw;//[Offset: 0x294, Size: 0x4]
	float HandBrakeRate;//[Offset: 0x298, Size: 0x4]
	float STForwardInputRate;//[Offset: 0x29c, Size: 0x4]
	float STRightInputRate;//[Offset: 0x2a0, Size: 0x4]
	float STCameraRationYaw;//[Offset: 0x2a4, Size: 0x4]
	float STHandBrakeRate;//[Offset: 0x2a8, Size: 0x4]
	float CurrentRotationYaw;//[Offset: 0x2ac, Size: 0x4]
	bool CurrentRotationYawDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	Vector CacheBodyCOM;//[Offset: 0x320, Size: 0xc]
	float CacheAngularVelSize;//[Offset: 0x32c, Size: 0x4]
	HitResult FloorHit;//[Offset: 0x330, Size: 0x98]
	bool FoundFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	float CurrentHeight;//[Offset: 0x3cc, Size: 0x4]
	bool bIsEngineOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	float LowSpeedTimer;//[Offset: 0x42c, Size: 0x4]
	bool StickyFrictionOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 0x1]
	STExtraBallVehicle* OwnerVehicle;//[Offset: 0x438, Size: 0x8]
	VehicleSpringArmComponent* VehicleSpringArm;//[Offset: 0x440, Size: 0x8]
	Vector LastVel;//[Offset: 0x4e8, Size: 0xc]
	float ServerAuthTimer;//[Offset: 0x4f4, Size: 0x4]
	void StopMovementImmediately();// 0x60fbd98
	void ServerUpdateInput(float FowardInput, float RightInput, float InCameraRationYaw, float InHandBrakeRate);// 0x60fbc38
	bool IsShouldDsControl();// 0x60fbbf8
	bool IsLogBallVehicle();// 0x60fbbc0
	bool HasPower();// 0x60fbb88
	Vector GetInputDirection();// 0x60fbb50
	float CalculVelAndInputDiff();// 0x60fbb1c
<----------Generated by SSpawner v1.0.4---------->


Class: DecorationCircle
	SkeletalMesh* AssetMesh;//[Offset: 0x0, Size: 0x28]
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Transform DefaultTransform;//[Offset: 0x30, Size: 0x30]
	FName MatSlotName;//[Offset: 0x60, Size: 0x8]
	DecorationCircleMatParams[] MatParams;//[Offset: 0x68, Size: 0x10]
	SkeletalMeshComponent* MeshComponent;//[Offset: 0x78, Size: 0x8]
	MaterialInstanceDynamic* MatInstance;//[Offset: 0x80, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DecorationCircleMatParams
	Vector2D HPRange;//[Offset: 0x0, Size: 0x8]
	FName ColorParamName;//[Offset: 0x8, Size: 0x8]
	FName LightColorParamName;//[Offset: 0x10, Size: 0x8]
	LinearColor Color;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ChatComponent_BP_C.ChatComponent.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4a0, Size: 0x8]
	void GetIsForbidCustomChat(out bool bIsForbid);// 0x70644c4
	void PlayAutoLanguageMsg(int actorid, int MsgID);// 0x70644c4
	void CheckCDMsgs(int MsgID, out bool bIsShow);// 0x70644c4
	void SendDirtyFilterLua(FString dirtyString, FString prefixString, int UID, bool bNeedTranslate);// 0x70644c4
	void AddMarkAndPlaySound(FString Name, FString Content, int MsgID, int ItemId, FString PlayerKeyString, bool bIsMe, bool PlaySound, bool ShowChat, float Distance);// 0x70644c4
	void AddOneMarkToUIInner(bool bIsMe, FString TextMsg, const TemBPDataAddr[] K2Node_MakeArray_Array, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x70644c4
	void IsActorInGlobal(int actorid, out bool IsExist);// 0x70644c4
	void CheckIsAddReplyBtn(int MsgID, FString PlayerName, <int> NeedReplyMsgID, <int> K2Node_MakeVariable_MakeVariableOutput, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, TemBPDataAddr[] K2Node_MakeArray_Array, bool CallFunc_Set_Contains_ReturnValue);// 0x70644c4
	void GetSpecialDistanceString(FString SendPlayerName, out FText DistanceText, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, PlayerController* CallFunc_GetPlayerController_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Contains_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, STExtraBaseCharacter* CallFunc_GetCurPlayerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Vector CallFunc_K2_GetActorLocation_ReturnValue, STExtraPlayerState*[] CallFunc_GetTeamMatePlayerStateList_OutList, int CallFunc_Array_Length_ReturnValue, STExtraPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue3, STExtraBaseCharacter* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_Dist2D_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Round_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x70644c4
	void DistanceToString(int Distance, int MsgID, FString PlayerName, out FText DistanceText, bool IsShowDistanceMsgContainsID, FText CallFunc_GetSpecialDistanceString_DistanceText, int CallFunc_Percent_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Greater_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetLocalizeText_Text, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, QuickChatFlag CallFunc_Array_Get_Item, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Format_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2, bool CallFunc_Contains_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	void GetActorNameByID(int actorid, out FString actorName, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x70644c4
	void GetLocalText(int MsgID, int ItemId, FString PlayerKeyString, int Distance, FString PlayerName, out FString ContentMsg, FString Msg2Split, int RealTextID, FText CallFunc_DistanceToString_DistanceText, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, FString CallFunc_Conv_TextToString_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FString CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_Divide_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, int Temp_int_Array_Index_Variable, BP_STRUCT_VoiceText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_GetCurrentLanguage_ReturnValue, STExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, STExtraPlayerState*[] CallFunc_GetTeamMatePlayerStateList_OutList, int Temp_int_Loop_Counter_Variable, STExtraPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_GetStringPlayerKey_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue4, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_GetLocalizeVoiceText_Text2, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_SelectString_ReturnValue, FString CallFunc_Split_LeftS2, FString CallFunc_Split_RightS2, bool CallFunc_Split_ReturnValue2, FString CallFunc_SelectString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12);// 0x70644c4
	void LoadVehicleModeQuickMsg(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable2, int Temp_int_Array_Index_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int Temp_int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int Temp_int_Array_Index_Variable3, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_VehicleWarModeMsgIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item2, FString CallFunc_Array_Get_Item3, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue3);// 0x70644c4
	void IsVehicleWarMode(out bool IsVehicleWarMode, GameStateBase* CallFunc_GetGameState_ReturnValue, VehicleWarGameState* K2Node_DynamicCast_AsVehicle_War_Game_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void InitActorIDList();// 0x70644c4
	void UpdateInfectModeMsgByPlayerType(enum PlayerType, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int Temp_int_Array_Index_Variable2, int Temp_int_Array_Index_Variable3, int Temp_int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int Temp_int_Array_Index_Variable4, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, int Temp_int_Loop_Counter_Variable4, PVEInfectionPlayerState* K2Node_DynamicCast_AsPVEInfection_Player_State, bool K2Node_DynamicCast_bSuccess2, int CallFunc_Add_IntInt_ReturnValue4, bool CallFunc_IsValid_ReturnValue, enum CallFunc_ConvertSubTypeToMainType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, int CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Percent_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, int CallFunc_Percent_IntInt_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio3, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue4, int CallFunc_Percent_IntInt_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue4, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio4, int CallFunc_Array_AddUnique_ReturnValue2);// 0x70644c4
	void LoadInfectModeQuickMsg(FString NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int Temp_int_Array_Index_Variable2, int Temp_int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int Temp_int_Loop_Counter_Variable4, int Temp_int_Loop_Counter_Variable5, int CallFunc_Add_IntInt_ReturnValue4, int CallFunc_Add_IntInt_ReturnValue5, int Temp_int_Array_Index_Variable3, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, PVEInfectionGameState* K2Node_DynamicCast_AsPVEInfection_Game_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable4, PlayerController* CallFunc_GetPlayerController_ReturnValue, int Temp_int_Array_Index_Variable5, PVEInfectionPlayerState* K2Node_DynamicCast_AsPVEInfection_Player_State, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, enum CallFunc_GetMainType_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue3, BP_STRUCT_InfectModeMsgIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item2, FString CallFunc_Array_Get_Item3, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue3, FString[] CallFunc_ParseIntoArray_ReturnValue3, FString[] CallFunc_ParseIntoArray_ReturnValue4, FString CallFunc_Array_Get_Item4, FString CallFunc_Array_Get_Item5, int CallFunc_Conv_StringToInt_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue4, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Length_ReturnValue4, int CallFunc_Array_Length_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue5);// 0x70644c4
	void IsInfectMode(out bool IsInfectMode, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x70644c4
	void InitChatFlagList(enum Temp_byte_Variable, enum Temp_byte_Variable2, enum Temp_byte_Variable3, int Temp_int_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable2, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_FlagIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item2, enum K2Node_Select_Default, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, QuickChatFlag K2Node_MakeStruct_QuickChatFlag, int CallFunc_Array_AddUnique_ReturnValue2);// 0x70644c4
	void SetTurnplateQuickChatList(int[] PlayerChatIDList, int AlternateTextID, int RealTextID, int chatTextID, int[] TextIDList, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc_Percent_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, QuickChatIDAndAudio K2Node_SetFieldsInStruct_StructOut, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_VoiceText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, int CallFunc_Array_Add_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x70644c4
	void GetActorBankByID(int actorid, out FString BankName, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x70644c4
	void SwitchActorAudio(int actorid, int LocalActorID);// 0x70644c4
	void LoadSingleAudio(int chatTextID, FString CallFunc_Conv_IntToString_ReturnValue, QuickChatOption K2Node_MakeStruct_QuickChatOption, FText CallFunc_Conv_StringToText_ReturnValue, int CallFunc_Array_Add_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, delegate K2Node_CreateDelegate_OutputDelegate, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue);// 0x70644c4
	void LoadAllAudio(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int Temp_int_Array_Index_Variable2, int Temp_int_Array_Index_Variable3, int Temp_int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int Temp_int_Array_Index_Variable4, int Temp_int_Loop_Counter_Variable4, int CallFunc_Add_IntInt_ReturnValue4, int Temp_int_Loop_Counter_Variable5, int Temp_int_Loop_Counter_Variable6, int CallFunc_Add_IntInt_ReturnValue5, int CallFunc_Add_IntInt_ReturnValue6, int Temp_int_Array_Index_Variable5, int Temp_int_Array_Index_Variable6, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, int CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue4, int CallFunc_Array_Get_Item5, int CallFunc_Array_Length_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue5, int CallFunc_Array_Get_Item6, int CallFunc_Array_Length_ReturnValue6, bool CallFunc_Less_IntInt_ReturnValue6);// 0x70644c4
	void CreateAudio(Object* audio, int resID, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void SetQuickChatList(int[] PlayerChatIDList, int AlternateTextID, int RealTextID, int chatTextID, int[] TextIDList, int chatQuickID, bool bFind, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const TemBPDataAddr[] K2Node_MakeArray_Array, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, QuickChatIDAndAudio K2Node_SetFieldsInStruct_StructOut, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_VoiceText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x70644c4
	void InitFromSetting(SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2);// 0x70644c4
	void AddOneMsgToUIInner(bool isMe, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void PlaySound(int MsgID, int actorid, int LocalActorID, bool CallFunc_IsActorInGlobal_IsExist, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_CheckCDMsgs_bIsShow, bool CallFunc_IsBankExistByActorID_bExist, bool CallFunc_Set_Contains_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_GetActorBankByID_BankName, FText CallFunc_Conv_StringToText_ReturnValue2, FString CallFunc_GetPublishRegion_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, bool CallFunc_EqualEqual_StrStr_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, VoiceSDKInterface* CallFunc_GetVoiceSDKInterface_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue);// 0x70644c4
	void AddToArray(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2);// 0x70644c4
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x70644c4
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x70644c4
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x70644c4
	void OnFilterFinish(FString filterText);// 0x70644c4
	void CloseChatHistoryList();// 0x70644c4
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x70644c4
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x70644c4
	void ReportBattleChat(int MsgID, FString Msg, int MsgExtraParam);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void OnLiveStateChanged(enum LiveState);// 0x70644c4
	void AddOneMarkToUI(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x70644c4
	void OnFilterFinishWithMsgID(FString filterText, int MsgID, FString Name);// 0x70644c4
	void SendDirtyFilter(FString Name, FString Content, bool isMe, bool bSTTMsg);// 0x70644c4
	void ExecuteUbergraph_ChatComponent_BP(int EntryPoint, FString CallFunc_GetLocalizeText_Text, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue2, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller2, bool K2Node_DynamicCast_bSuccess2, FString K2Node_Event_str_gid3, FString K2Node_Event_sender_name3, FString K2Node_Event_chat_content, bool K2Node_Event_self_msg, FString K2Node_Event_str_gid2, FString K2Node_Event_sender_name2, Actor* CallFunc_GetOwner_ReturnValue3, FString K2Node_Event_str_gid, FString K2Node_Event_sender_name, bool K2Node_Event_bReply, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller3, bool K2Node_DynamicCast_bSuccess3, Actor* CallFunc_GetOwner_ReturnValue4, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller4, bool K2Node_DynamicCast_bSuccess4, FString K2Node_Event_filterText2, Actor* CallFunc_GetOwner_ReturnValue5, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller5, bool K2Node_DynamicCast_bSuccess5, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess6, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue6, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess7, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller6, bool K2Node_DynamicCast_bSuccess8, int K2Node_Event_msgID5, int K2Node_Event_resID, int K2Node_Event_alternateMsgID, FString CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_GetLocalizeText_Text2, FString CallFunc_GetLocalizeText_Text3, FString CallFunc_GetLocalizeText_Text4, FString CallFunc_GetLocalizeText_Text5, FString CallFunc_GetLocalizeText_Text6, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetLocalizeText_Text7, FString CallFunc_Concat_StrStr_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess9, FString CallFunc_GetLocalizeText_Text8, FString CallFunc_GetLocalizeText_Text9, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetLocalizeText_Text10, FString CallFunc_Concat_StrStr_ReturnValue5, FString K2Node_Event_name4, FString K2Node_Event_content3, int K2Node_Event_msgID4, int K2Node_Event_audioID2, int K2Node_Event_itemID2, FString K2Node_Event_PlayerKeyString2, bool K2Node_Event_isMe3, bool K2Node_Event_playSound2, bool K2Node_Event_ShowChat2, float K2Node_Event_Distance2, FString CallFunc_Concat_StrStr_ReturnValue6, int CallFunc_FTrunc_ReturnValue, FString CallFunc_GetLocalText_ContentMsg, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_IsInfectMode_IsInfectMode, bool CallFunc_IsVehicleWarMode_IsVehicleWarMode, int K2Node_Event_MsgID3, FString K2Node_Event_msg, int K2Node_Event_msgExtraParam, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess10, FString CallFunc_Concat_StrStr_ReturnValue7, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue8, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess11, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, bool CallFunc_IsDedicatedServer_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue11, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, enum K2Node_CustomEvent_LiveState, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess12, FString K2Node_Event_name3, FString K2Node_Event_content2, int K2Node_Event_msgID2, int K2Node_Event_audioID, int K2Node_Event_itemID, FString K2Node_Event_PlayerKeyString, bool K2Node_Event_isMe2, bool K2Node_Event_playSound, bool K2Node_Event_ShowChat, float K2Node_Event_Distance, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, FString K2Node_Event_filterText, int K2Node_Event_msgID, FString K2Node_Event_name2, FString CallFunc_Concat_StrStr_ReturnValue15, FString CallFunc_GetLocalizeText_Text11, FString K2Node_Event_name, FString K2Node_Event_content, bool K2Node_Event_isMe, bool K2Node_Event_bSTTMsg, FString CallFunc_Concat_StrStr_ReturnValue16, FString CallFunc_Concat_StrStr_ReturnValue17, FString CallFunc_Concat_StrStr_ReturnValue18, FString CallFunc_Concat_StrStr_ReturnValue19, FString CallFunc_Concat_StrStr_ReturnValue20, FString CallFunc_Concat_StrStr_ReturnValue21, FString CallFunc_Concat_StrStr_ReturnValue22, FString CallFunc_Concat_StrStr_ReturnValue23, FString CallFunc_Concat_StrStr_ReturnValue24, FString CallFunc_Concat_StrStr_ReturnValue25, FString CallFunc_Concat_StrStr_ReturnValue26);// 0x70644c4
	FString addToUIText;//[Offset: 0x4a8, Size: 0x10]
	FString[] UITextArray;//[Offset: 0x4b8, Size: 0x10]
	int FirstIndex;//[Offset: 0x4c8, Size: 0x4]
	FString currContentMsg;//[Offset: 0x4d0, Size: 0x10]
	bool bInitSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]
	FString FriendChatStrGid;//[Offset: 0x4e8, Size: 0x10]
	FString FriendChatSenderName;//[Offset: 0x4f8, Size: 0x10]
	FString FriendChatContent;//[Offset: 0x508, Size: 0x10]
	bool FriendChatSelfMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	FString FriendInviteStrGid;//[Offset: 0x520, Size: 0x10]
	FString FriendInviteSenderName;//[Offset: 0x530, Size: 0x10]
	FString FriendInviteBattleTextValue;//[Offset: 0x540, Size: 0x10]
	FString FriendReplyStrGid;//[Offset: 0x550, Size: 0x10]
	FString FriendReplySenderName;//[Offset: 0x560, Size: 0x10]
	bool FriendReplyReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 0x1]
	int UI_MsgID;//[Offset: 0x574, Size: 0x4]
	FString UI_ItemName;//[Offset: 0x578, Size: 0x10]
	int UI_AlternateMsgID;//[Offset: 0x588, Size: 0x4]
	SettingConfig_C* SettingConfig;//[Offset: 0x590, Size: 0x8]
	int[] ChatFlagTypeList;//[Offset: 0x598, Size: 0x10]
	int[] TmpChatIDList;//[Offset: 0x5a8, Size: 0x10]
	bool bIsInfectMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	int[] ChatQuikcTextIDList_HumanMenu;//[Offset: 0x5c0, Size: 0x10]
	int[] ChatQuikcTextIDList_HumanTurnplate;//[Offset: 0x5d0, Size: 0x10]
	int[] ChatQuikcTextIDList_ZombieMenu;//[Offset: 0x5e0, Size: 0x10]
	int[] ChatQuikcTextIDList_ZombieTurnplate;//[Offset: 0x5f0, Size: 0x10]
	int[] InfectModePlayerType;//[Offset: 0x600, Size: 0x10]
	enum CurInfectModePlayerType;//[Offset: 0x610, Size: 0x1]
	QuickChatIDAndAudio QuickChat;//[Offset: 0x614, Size: 0xc]
	<int> GlobalActorIDList;//[Offset: 0x620, Size: 0x50]
	bool bIsVehicleWarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1]
	int[] ChatQuikcTextIDList_VWMenu;//[Offset: 0x678, Size: 0x10]
	int[] ChatQuikcTextIDList_VWTurnplate;//[Offset: 0x688, Size: 0x10]
	int TraceItemID;//[Offset: 0x698, Size: 0x4]
	<int> MuteOnGlobal;//[Offset: 0x6a0, Size: 0x50]
	<int> MuteMsgOnBluehole;//[Offset: 0x6f0, Size: 0x50]
	int[] SpecialShowDistanceMsgID;//[Offset: 0x740, Size: 0x10]
	int MaxShowVoiceDistance;//[Offset: 0x750, Size: 0x4]
	bool bIsMarkText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 0x1]
	FString MarkText;//[Offset: 0x758, Size: 0x10]
	FString[] MarkTextArray;//[Offset: 0x768, Size: 0x10]
	int addToUIMsgID;//[Offset: 0x778, Size: 0x4]
	<int,int> UIMsgIDMap;//[Offset: 0x780, Size: 0x50]
	<int> CDMsgIDs;//[Offset: 0x7d0, Size: 0x50]
	float CDMsgDuration;//[Offset: 0x820, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_VoiceActorCfg_type
	int ActorItemID_1_7EA64A805D4CF7C83F9ED7C20956DD34;//[Offset: 0x0, Size: 0x4]
	int ActorID_2_66EEA6C00EC097255E83F50D0C7CE884;//[Offset: 0x4, Size: 0x4]
	FString ActorName_5_084563C0289004B337AECB5D0CE91C45;//[Offset: 0x8, Size: 0x10]
	int SortKey_9_023E1980778A370A5BD689D703B81F89;//[Offset: 0x18, Size: 0x4]
	int IsUnLock_11_5BD327406959D86F0700649705BBD32B;//[Offset: 0x1c, Size: 0x4]
	bool IsPlayInGlobal_12_14DF9BC04FFBCB15583BB67E0769332C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	FString OpenTime_15_14046D8013EB228646C4CC690BBB4AE5;//[Offset: 0x28, Size: 0x10]
	FString BankDepend_16_1453384006553C13591DBA5107495114;//[Offset: 0x38, Size: 0x10]
	FString BankName_17_72DF248073CEC0563E7F45210B58A305;//[Offset: 0x48, Size: 0x10]
	bool IsLimitRegion_19_4FEB4D00214E87C4181FAD020238523E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool IsShowUntilGet_20_24C807804D192C0A34758E20002987D4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	FString OpenPublish_21_4EEE3F807004AA067FA56CB009D6AB28;//[Offset: 0x60, Size: 0x10]
	FString OpenRegion_22_25FEC2C01D13489B7B49BCAA0B6D05EE;//[Offset: 0x70, Size: 0x10]
	int ActorQuality_23_309BFDC07AD15BDF4630985F0D71FE29;//[Offset: 0x80, Size: 0x4]
	int IsMultiLanguage_24_68B560007D614E8A22F1FC6B03037045;//[Offset: 0x84, Size: 0x4]
	bool IsWardrobeHidden_25_55BBB4C002A2206144511CB70982EAFE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	FString MultiLanguageActorIDList_26_10829980195F82E04E49A4FC0FDD54F4;//[Offset: 0x90, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_VoiceText_type
	int VoiceTextId_0_6FC5DE403E05E86B27664BDF0A63A1A4;//[Offset: 0x0, Size: 0x4]
	FString VoiceTextValue_1_0BE5D24055E8B9FB76C1783D0A09E585;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_SupplyText_type
	int ChatID_0_55CE55406726E16144B6347C05241D24;//[Offset: 0x0, Size: 0x4]
	int AlternateTextID_1_1256E6805FE8A11C280F72C50934EDE4;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_VehicleWarModeMsgIDCfg_type
	FString MenuChatIDList_0_07E0C1C07AEC576705A4CE190E543504;//[Offset: 0x0, Size: 0x10]
	FString TurnplateChatIDList_1_2B152C4068877793720058A50A584EB4;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	int MatchCountDownTime;//[Offset: 0x1408, Size: 0x4]
	VehicleBattleResultData CurResultData;//[Offset: 0x1410, Size: 0x68]
	delegate OnShowGeneralTip;//[Offset: 0x1488, Size: 0x10]
	delegate OnMatchCountDownTime;//[Offset: 0x1498, Size: 0x10]
	float FightStartTime;//[Offset: 0x14a8, Size: 0x4]
	int RoundNum;//[Offset: 0x14ac, Size: 0x4]
	int IconID;//[Offset: 0x14b0, Size: 0x4]
	int InstanceID;//[Offset: 0x14b4, Size: 0x4]
	Vector CircleCenter;//[Offset: 0x14b8, Size: 0xc]
	float Radius;//[Offset: 0x14c4, Size: 0x4]
	VehicleGemRoundData[] RoundData;//[Offset: 0x14c8, Size: 0x10]
	Vector[] TreasureLocations;//[Offset: 0x14d8, Size: 0x10]
	delegate OnGemStoneNumChangeDelegate;//[Offset: 0x14e8, Size: 0x10]
	delegate OnDestoryVehicleCountDelegate;//[Offset: 0x14f8, Size: 0x10]
	int GemStoneForMatchPoint;//[Offset: 0x1508, Size: 0x4]
	delegate OnGemStoneForMatchPointChangedDelegate;//[Offset: 0x1510, Size: 0x10]
	delegate OnVehicleEatSuperDelegate;//[Offset: 0x1520, Size: 0x10]
	VehicleWarRankData[] TeamRankData;//[Offset: 0x1530, Size: 0x10]
	delegate OnVehicleWarRankDataDelegate;//[Offset: 0x1540, Size: 0x10]
	<int,VehicleWarRouteDetailData> RouteDetailMap;//[Offset: 0x1550, Size: 0x50]
	VehicleWarRouteDetailData[] TeamRankDetailData;//[Offset: 0x15a0, Size: 0x10]
	XTPoint*[] RoutePoints;//[Offset: 0x15b0, Size: 0x10]
	float RouteLength;//[Offset: 0x15c0, Size: 0x4]
	VehicleWarTeamKillData[] VehicleWarTeamKillDataArray;//[Offset: 0x15c8, Size: 0x10]
	delegate OnVehicleWarTeamKillDataDelegate;//[Offset: 0x15d8, Size: 0x10]
	VehicleWarCampGroup[] VehicleWarCampGroupArray;//[Offset: 0x15e8, Size: 0x10]
	delegate OnVehicleWarCampGroupArrayDelegate;//[Offset: 0x15f8, Size: 0x10]
	VehicleWarGemMatchState VehicleWarGemMatchState;//[Offset: 0x1608, Size: 0xc]
	delegate VehicleWarGemMatchStateDelegate;//[Offset: 0x1618, Size: 0x10]
	delegate VehicleWarKillInfoDelegate;//[Offset: 0x1628, Size: 0x10]
	delegate BoxRoundNumDelegate;//[Offset: 0x1638, Size: 0x10]
	delegate FightStartTimeDelegate;//[Offset: 0x1648, Size: 0x10]
	delegate OnTeamContinueKillNumChangedDelegate;//[Offset: 0x1658, Size: 0x10]
	int MatchPointContinueTime;//[Offset: 0x1668, Size: 0x4]
	int ShowContinueKillEffectNumV1;//[Offset: 0x166c, Size: 0x4]
	int ShowContinueKillEffectNumV2;//[Offset: 0x1670, Size: 0x4]
	bool IsCampMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1674, Size: 0x1]
	int RemainMatchTime;//[Offset: 0x1678, Size: 0x4]
	delegate OnRemainMatchTimeDelegate;//[Offset: 0x1680, Size: 0x10]
	delegate OnVehicleAddHPDelegate;//[Offset: 0x1690, Size: 0x10]
	BattleOpenSequencerInfo OpenSequencerInfo;//[Offset: 0x16b0, Size: 0x50]
	delegate OpenSequencerStartVehicleDelegate;//[Offset: 0x1700, Size: 0x10]
	FString SequenceName;//[Offset: 0x1718, Size: 0x10]
	<int,uint32> TeamVehicleDriverMap;//[Offset: 0x1728, Size: 0x50]
	<int,TeamMedalTotalKillData> TeamTotalKillMap;//[Offset: 0x1778, Size: 0x50]
	<int,int> TeamContinueKillMap;//[Offset: 0x17c8, Size: 0x50]
	<int,TeamMedalBeAttackedData> TeamRecentBeAttackedMap;//[Offset: 0x1818, Size: 0x50]
	<int,VehicleBeAttackMapData> TeamBeAttackedMap;//[Offset: 0x1868, Size: 0x50]
	float FarMedalRadius;//[Offset: 0x18b8, Size: 0x4]
	float AssistMedalTime;//[Offset: 0x18bc, Size: 0x4]
	float CooperationMedalTime;//[Offset: 0x18c0, Size: 0x4]
	AutoChangeSeatData[] AutoChangeSeatDataArray;//[Offset: 0x18c8, Size: 0x10]
	int WinCampID;//[Offset: 0x18d8, Size: 0x4]
	float GamePlayTime;//[Offset: 0x18dc, Size: 0x4]
	int MatchPointNum;//[Offset: 0x18e0, Size: 0x4]
	int WinCampTreasureScore;//[Offset: 0x18e4, Size: 0x4]
	int FailCampTreasureScore;//[Offset: 0x18e8, Size: 0x4]
	<int,VehicleBattleVehicleStatiscs> VehicleStaticsMap;//[Offset: 0x18f0, Size: 0x50]
	<int,VehicleBattleWeaponStatiscs> WeaponStatiscsMap;//[Offset: 0x1940, Size: 0x50]
	int VehicleStuckResetTimes;//[Offset: 0x1990, Size: 0x4]
	int HealthPropItemTimes;//[Offset: 0x1994, Size: 0x4]
	int NormalPropItemTimes;//[Offset: 0x1998, Size: 0x4]
	int SuperPropItemTimes;//[Offset: 0x199c, Size: 0x4]
	<int,int> TeamLastChooseVehicleIDMap;//[Offset: 0x19a0, Size: 0x50]
	<int,int> TeamLastChooseVehicleShapeMap;//[Offset: 0x19f0, Size: 0x50]
	VehicleCampKills[] VehicleCampsKills;//[Offset: 0x1a40, Size: 0x10]
	delegate OnVehicleCampsKillsChangedDelegate;//[Offset: 0x1a50, Size: 0x10]
	TireConfig*[] TireConfigCahce;//[Offset: 0x1a60, Size: 0x10]
	void VehicleTakeDamageForMedal(uint32 KillerPlayKey, int VictimTeamID, float Damage);// 0x633d118
	void UpdateRank();// 0x633d104
	void ShowOpenSequencer(float showTime);// 0x633d088
	void ShowBoxWarning();// 0x633d074
	void SetWinCamp(int InCampId);// 0x633cff8
	void SetUseWeaponID(uint32 PlayerKey, int FirstWeaponID, int SecondWeaponID);// 0x633cf08
	void SetGemMatchState(int GemMatchState, int CampID, float ServerEndTime);// 0x633ce18
	void SetCanAutoChangeSeat(int TeamID, bool bCanAutoChangeSeat);// 0x633cd58
	void ServerUpdateVechicleResult();// 0x633cd44
	void RecordTeamChooseVehicle(int TeamID, int VehicleID, int VehicleShapeType);// 0x633cc54
	void OnRep_VehicleWarTeamRankData();// 0x633cc40
	void OnRep_VehicleWarTeamKillDataArray();// 0x633cc2c
	void OnRep_VehicleWarRemainMatchTime();// 0x633cc18
	void OnRep_VehicleWarGemMatchState();// 0x633cc04
	void OnRep_VehicleWarCampGroupArray();// 0x633cbf0
	void OnRep_VehicleCampsKills();// 0x633cbdc
	void OnRep_RoundNum();// 0x633cbc8
	void OnRep_MatchPointContinueTime();// 0x633cbb4
	void OnRep_MatchCountDownTime();// 0x633cba0
	void OnRep_GemStoneForMatchPoint();// 0x633cb8c
	void OnRep_FightStartTime();// 0x633cb78
	void OnContinueKillNumChanged(int CampID, int TeamID);// 0x633cac4
	void InitRoutePoint();// 0x633cab0
	void HideBoxWarning();// 0x633ca9c
	float GetVehicleTotalDamageByPlayerKey(int VictimTeamID, uint32 KillerPlayerKey);// 0x633c9d8
	int GetTotalContinueKillNum(int CampID, int TeamID);// 0x633c914
	VehicleWarRankData GetTeamRankDataByTeamId(int TeamID);// 0x633c878
	int GetTeamKillDataIndexByTeamID(int TeamID);// 0x633c7ec
	bool GetTeamKillDataByTeamID(int TeamID, out VehicleWarTeamKillData TeamKillData);// 0x633c708
	STExtraPlayerState*[] GetPlayerStateListByTeamId(int TeamID);// 0x633c614
	bool GetPlayersByCampAndTeamID(int CampID, int TeamID, out VehicleWarTeamGroupInfo OutPlayers);// 0x633c4d0
	int GetPlayerChoose(uint32 PlayerKey);// 0x633c444
	bool GetIsCooperationKill(int VicTeamId, int KillerTeamId, uint32 KillerPlayerKey);// 0x633c340
	FString GetFormatRemainTimeText();// 0x633c29c
	Vector GetFootOfPerpendicularXY(out Vector OutPoint, out Vector BeginPoint, out Vector EndPoint);// 0x633c160
	VehicleWarRankData[] GetCampSortedTeamRankData();// 0x633c0bc
	int GetCampKillNum(int CampID);// 0x633c030
	bool GetCampGroupByCampID(int CampID, out VehicleWarCampGroup VehicleWarCampGroup);// 0x633becc
	void GenerateVehicleRole(VehicleWarPlayerState* PS);// 0x633be50
	void GenerateCampInfo();// 0x633be3c
	void FinishTeamRoute(int TeamID);// 0x633bdc0
	void DropWeapons(uint32 PlayerKey);// 0x633bd44
	void CountAttackForMedal(int KillerTeamId, STExtraBaseCharacter* Killer, int VictimTeamID, int DamageType);// 0x633bc18
	void ClearAllPlayerStateChoose();// 0x633bc04
	void CheckPlayIsDriver(VehicleWarPlayerState* PS);// 0x633bb88
	void ChangeMatchCountDownTime();// 0x633bb74
	bool CanAutoChangeSeat(int TeamID);// 0x633bae4
	void BroadcastTemporaryMessage(FString Message);// 0x633ba34
	void BroadcastGeneralTip(int TipType, FString AdditionParam);// 0x633b944
	void BroadCast_OnVehicleEatSuper(int CampID);// 0x633b8c0
	void BroadCast_OnVehicleAddHP(STExtraVehicleWarVehicle* Vehicle);// 0x633b83c
	void BeginMatchCountDown(int TimeSeconds);// 0x633b7c0
	void AddWeaponKillTimes(int WeaponId, int Num);// 0x633b70c
	void AddWeaponDamage(int WeaponId, float Damage);// 0x633b654
	void AddWeaponChooseTimes(int WeaponId, int Num);// 0x633b5a0
	void AddVehicleWeaponDamage(int VehicleType, float Damage);// 0x633b4e8
	void AddVehicleKillTimes(int VehicleType, int Num);// 0x633b434
	void AddVehicleHitDamage(int VehicleType, float Damage);// 0x633b37c
	void AddVehicleDeadTimes(int VehicleType, int Num);// 0x633b2c8
	void AddVehicleChooseTimes(int VehicleType, int Num);// 0x633b214
	void AddTeamBeDestoryedNum(int TeamID, int AddDestoryCount);// 0x633b160
	void AddMedalForPlayer(STExtraBaseCharacter* Killer, FString MedalMessage);// 0x633b078
	void AddCooperationBuffToTeam(int TeamID);// 0x633affc
	void AddCampKillNum(int CampID, int Num);// 0x633af48
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleBattleResultData
	VehiclePlayerBattleResultData[] playerList;//[Offset: 0x0, Size: 0x10]
	VehicleCampKills[] VehicleCampKills;//[Offset: 0x10, Size: 0x10]
	int WinCampID;//[Offset: 0x20, Size: 0x4]
	float GamePlayTime;//[Offset: 0x24, Size: 0x4]
	int MatchPointNum;//[Offset: 0x28, Size: 0x4]
	int WinCampTreasureScore;//[Offset: 0x2c, Size: 0x4]
	int FailCampTreasureScore;//[Offset: 0x30, Size: 0x4]
	VehicleBattleVehicleStatiscs[] VehicleStaticsList;//[Offset: 0x38, Size: 0x10]
	VehicleBattleWeaponStatiscs[] WeaponStatiscsList;//[Offset: 0x48, Size: 0x10]
	int VehicleStuckResetTimes;//[Offset: 0x58, Size: 0x4]
	int HealthPropItemTimes;//[Offset: 0x5c, Size: 0x4]
	int NormalPropItemTimes;//[Offset: 0x60, Size: 0x4]
	int SuperPropItemTimes;//[Offset: 0x64, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehiclePlayerBattleResultData
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 0x4]
	FString PlayerName;//[Offset: 0x10, Size: 0x10]
	int TeamID;//[Offset: 0x20, Size: 0x4]
	int CampID;//[Offset: 0x24, Size: 0x4]
	int Score;//[Offset: 0x28, Size: 0x4]
	int Distance;//[Offset: 0x2c, Size: 0x4]
	int KillNum;//[Offset: 0x30, Size: 0x4]
	int AssistKillNum;//[Offset: 0x34, Size: 0x4]
	int DriverKillNum;//[Offset: 0x38, Size: 0x4]
	int ShooterKillNum;//[Offset: 0x3c, Size: 0x4]
	int BeKillNum;//[Offset: 0x40, Size: 0x4]
	int TeamKillNum;//[Offset: 0x44, Size: 0x4]
	int GetItemNum;//[Offset: 0x48, Size: 0x4]
	int OpenTreasureNum;//[Offset: 0x4c, Size: 0x4]
	int ShootTreasureNum;//[Offset: 0x50, Size: 0x4]
	UseItemFlow[] UseItemFlow;//[Offset: 0x58, Size: 0x10]
	int StrikeKillVehicleNum;//[Offset: 0x68, Size: 0x4]
	int ItemKillVehicleNum;//[Offset: 0x6c, Size: 0x4]
	int GunKillVehicleNum;//[Offset: 0x70, Size: 0x4]
	float CauseDamage;//[Offset: 0x74, Size: 0x4]
	int GemStoneCount;//[Offset: 0x78, Size: 0x4]
	bool HasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	float FinishedTime;//[Offset: 0x80, Size: 0x4]
	bool IsEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	int VehicleID;//[Offset: 0x88, Size: 0x4]
	int VehicleShapeType;//[Offset: 0x8c, Size: 0x4]
	float ExitPlayerPlayTime;//[Offset: 0x90, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleCampKills
	int CampID;//[Offset: 0x0, Size: 0x4]
	int Kills;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleBattleVehicleStatiscs
	int VehicleID;//[Offset: 0x0, Size: 0x4]
	int ChooseTimes;//[Offset: 0x4, Size: 0x4]
	int DeadTimes;//[Offset: 0x8, Size: 0x4]
	int Kills;//[Offset: 0xc, Size: 0x4]
	float VehicleWeaponDamage;//[Offset: 0x10, Size: 0x4]
	float HitDamage;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleBattleWeaponStatiscs
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	int ChooseTimes;//[Offset: 0x4, Size: 0x4]
	int TotalDamage;//[Offset: 0x8, Size: 0x4]
	int Kills;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleGemRoundData
	float RoundTime;//[Offset: 0x0, Size: 0x4]
	int TreasureNum;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarRankData
	int RoundNo;//[Offset: 0x0, Size: 0x4]
	int TeamID;//[Offset: 0x4, Size: 0x4]
	int Distance;//[Offset: 0x8, Size: 0x4]
	int Score;//[Offset: 0xc, Size: 0x4]
	int GemStoneNum;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarRouteDetailData
	int TeamID;//[Offset: 0x0, Size: 0x4]
	int RoundNo;//[Offset: 0x4, Size: 0x4]
	float Distance;//[Offset: 0x8, Size: 0x4]
	bool IsFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float FinishTime;//[Offset: 0x10, Size: 0x4]
	Vector ProjectionPoint;//[Offset: 0x14, Size: 0xc]
	int CompleteLogicCircleNum;//[Offset: 0x20, Size: 0x4]
	int[] LastRoutePointRecord;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: XTPoint.Actor.Object
	int CustomIValue;//[Offset: 0x3f4, Size: 0x4]
	int GetIntValueTwo();// 0x638a6e0
	int GetIntValueThree();// 0x638a6a4
	int GetIntValueOne();// 0x638a668
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarTeamKillData
	int TeamID;//[Offset: 0x0, Size: 0x4]
	int ContinueKillNum;//[Offset: 0x4, Size: 0x4]
	int TotalKillNum;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarCampGroup
	int CampID;//[Offset: 0x0, Size: 0x4]
	VehicleWarTeamGroupInfo[] CampGroups;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarTeamGroupInfo
	int TeamID;//[Offset: 0x0, Size: 0x4]
	VehicleWarPlayerState*[] TeamPlayers;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	NetVehilceProps NetVehicleProps;//[Offset: 0x1a20, Size: 0x38]
	delegate OnVehilcePropsChangeDel;//[Offset: 0x1a58, Size: 0x10]
	int GemStoneNum;//[Offset: 0x1a68, Size: 0x4]
	delegate OnPlayerGemStoneNumChangeDelegate;//[Offset: 0x1a70, Size: 0x10]
	int TeamGemStoneNum;//[Offset: 0x1a80, Size: 0x4]
	delegate OnTeamGemStoneNumChangeDelegate;//[Offset: 0x1a88, Size: 0x10]
	int DestoryVehicleCount;//[Offset: 0x1a98, Size: 0x4]
	delegate OnDestoryVehicleCountChangeDelegate;//[Offset: 0x1aa0, Size: 0x10]
	int BeDestoryedCount;//[Offset: 0x1ab0, Size: 0x4]
	int DriverKillNum;//[Offset: 0x1ab4, Size: 0x4]
	int ShooterKillNum;//[Offset: 0x1ab8, Size: 0x4]
	int AssistKillNum;//[Offset: 0x1abc, Size: 0x4]
	int ContinueDestoryVehicleCount;//[Offset: 0x1ac0, Size: 0x4]
	delegate OnContinueDestoryVehicleCountChangeDelegate;//[Offset: 0x1ac8, Size: 0x10]
	STExtraVehicleWarVehicle* CurAttackSignTarget;//[Offset: 0x1ad8, Size: 0x8]
	STExtraVehicleWarVehicle* CurAttackTarget;//[Offset: 0x1ae0, Size: 0x8]
	float CurCumulativeDamage;//[Offset: 0x1ae8, Size: 0x4]
	float CumulativeDamageForSign;//[Offset: 0x1aec, Size: 0x4]
	float CurCumulativeDamageTime;//[Offset: 0x1af0, Size: 0x4]
	float CumulativeDamageCalcuTime;//[Offset: 0x1af4, Size: 0x4]
	float SignExistTime;//[Offset: 0x1af8, Size: 0x4]
	float SignStartTime;//[Offset: 0x1afc, Size: 0x4]
	delegate OnCurAttackSignTargetChangeDelegate;//[Offset: 0x1b00, Size: 0x10]
	int OpenTreasureNum;//[Offset: 0x1b10, Size: 0x4]
	int ShootTreasureNum;//[Offset: 0x1b14, Size: 0x4]
	int StrikeKillVehicleNum;//[Offset: 0x1b18, Size: 0x4]
	int ItemKillVehicleNum;//[Offset: 0x1b1c, Size: 0x4]
	int GunKillVehicleNum;//[Offset: 0x1b20, Size: 0x4]
	float TotalCauseDamage;//[Offset: 0x1b24, Size: 0x4]
	int ClientTotalDamage;//[Offset: 0x1b28, Size: 0x4]
	delegate OnClientTotalDamageChangeDelegate;//[Offset: 0x1b30, Size: 0x10]
	delegate OnBeDestoryedCountChangeDelegate;//[Offset: 0x1b40, Size: 0x10]
	bool PlayerIsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b50, Size: 0x1]
	delegate OnPlayerDriverStateChanged;//[Offset: 0x1b58, Size: 0x10]
	float VehicleSpawnServerTime;//[Offset: 0x1b68, Size: 0x4]
	bool PlayerHasLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b6c, Size: 0x1]
	float VehicleMoveRecordInstance;//[Offset: 0x1b70, Size: 0x4]
	int VehicleMoveFlowCount;//[Offset: 0x1b78, Size: 0x4]
	int VehicleN2oSkillId;//[Offset: 0x1b7c, Size: 0x4]
	int VehicleCarPetSkillId;//[Offset: 0x1b80, Size: 0x4]
	bool CanShowMatchData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba8, Size: 0x1]
	bool FinishedShowMatchData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba9, Size: 0x1]
	bool CanShowUseItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1baa, Size: 0x1]
	bool CanShowFireGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bab, Size: 0x1]
	bool FinishedShowFireGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bac, Size: 0x1]
	bool CanShowEyesGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bad, Size: 0x1]
	bool CanShowBuffGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bae, Size: 0x1]
	bool CanShowAnimFrameGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1baf, Size: 0x1]
	float PlayerExitTime;//[Offset: 0x1bb0, Size: 0x4]
	bool PlayerHasExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb4, Size: 0x1]
	void SetVehicleSpawnServerTime(float STime);// 0x6341054
	void OnRep_VehicleProps();// 0x6341040
	void OnRep_TeamGemStoneNum();// 0x634102c
	void OnRep_PlayerIsDriver();// 0x6341018
	void OnRep_GemStoneNum();// 0x6341004
	void OnRep_DestoryVehicleCount();// 0x6340ff0
	void OnRep_CurAttackSignTarget();// 0x6340fdc
	void OnRep_ContinueDestoryVehicleCount();// 0x6340fc8
	void OnRep_ClientTotalDamage();// 0x6340fb4
	void OnRep_BeDestoryedCount();// 0x6340fa0
	int GetVehiclePropsItem(int Index);// 0x6340f14
	void DispatchPlayerExitEvent();// 0x6340ef8
<----------Generated by SSpawner v1.0.4---------->


Class: NetVehilceProps
	int ItemNum;//[Offset: 0x0, Size: 0x4]
	ItemDefineID[] PropsItem;//[Offset: 0x8, Size: 0x10]
	VehicleWarEquipItem[] ChooseEquip;//[Offset: 0x18, Size: 0x10]
	int PlayerChoose;//[Offset: 0x28, Size: 0x4]
	int FirstWeaponID;//[Offset: 0x2c, Size: 0x4]
	int SecondWeaponID;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarEquipItem
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int ItemNum;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraVehicleWarVehicle.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	VehicleWarLockData VehicleWarLockData;//[Offset: 0x1848, Size: 0x10]
	byte CurVehicleWarBeLockedState;//[Offset: 0x1858, Size: 0x1]
	delegate OnVehicleWarBeLockedStateChangedDelegate;//[Offset: 0x1860, Size: 0x10]
	delegate OnVehicleWarKillInfoDelegate;//[Offset: 0x1870, Size: 0x10]
	VehicleWarVehicleReceiveDamageRecord[] VehicleWarVehicleReceiveDamageRecordArray;//[Offset: 0x1880, Size: 0x10]
	delegate ForceShowVehicleHPBarDelegate;//[Offset: 0x1890, Size: 0x10]
	float DamageRecordExitTime;//[Offset: 0x18a0, Size: 0x4]
	float TickVehicleTireFrictionInterval;//[Offset: 0x18a4, Size: 0x4]
	float DefaultTurnOverBroadcastTime;//[Offset: 0x18ac, Size: 0x4]
	float CurTurnOverBroadcastTime;//[Offset: 0x18b0, Size: 0x4]
	delegate OnVehicleWarVehicleTurnOver;//[Offset: 0x18b8, Size: 0x10]
	float MinTurnOverDegree;//[Offset: 0x18c8, Size: 0x4]
	float CheckBlockInterval;//[Offset: 0x18cc, Size: 0x4]
	float BlockResetInterval;//[Offset: 0x18d4, Size: 0x4]
	float MaxBlockVelocity;//[Offset: 0x18d8, Size: 0x4]
	float MaxBlockNotInAirWheelNums;//[Offset: 0x18dc, Size: 0x4]
	int MaxCheckTurnOverCount;//[Offset: 0x18e4, Size: 0x4]
	int MaxCheckBlockCount;//[Offset: 0x18ec, Size: 0x4]
	delegate OnVehicleWarVehicleBlockedDelegate;//[Offset: 0x18f8, Size: 0x10]
	bool bOpenShieldHitProtectEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1908, Size: 0x1]
	int ShieldSkillID;//[Offset: 0x190c, Size: 0x4]
	SoftObjectPath ShieldHitProtectEffectPath;//[Offset: 0x1910, Size: 0x18]
	bool bTeammateVehicleDamageFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1928, Size: 0x1]
	bool bEnableActivePhysicsWhenChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1929, Size: 0x1]
	PhysicsAsset* SimplePhysicsAsset;//[Offset: 0x1930, Size: 0x8]
	bool bEnableCheckBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1938, Size: 0x1]
	void UpdateOwnerLockedState();// 0x6246acc
	void TickCheckBlockAndAutoTurn();// 0x6246ab8
	void StartAllowAvatarOutline();// 0x6246aa4
	void SetVehicleMass(float NewMass, bool bAddToCurrent);// 0x62469e4
	void ServerChangeWeaponRotation(STExtraWeapon* Weapon, Rotator InRot);// 0x6246924
	void Server_ChangeLockState(byte InState, Actor* CurLockTarget);// 0x6246834
	void RPCServerChangeWeaponRotation(STExtraWeapon* Weapon, Rotator Rot);// 0x6246740
	void ReqResetBlockPosition();// 0x62466e0
	void RemoveOfflineBuffToPlayer(STExtraPlayerCharacter* InPlayer);// 0x70644c4
	void ProcessAvatarOutline();// 0x62466c4
	void OnVehicleWarKillInfoDelegate__DelegateSignature(out const VehicleWarKillInfoData VehicleWarKillInfoData);// 0x70644c4
	void OnVehicleWarBeLockedStateChangedDelegate__DelegateSignature(byte VehicleWarBeLockedState);// 0x70644c4
	void OnRep_VehicleWarVehicleReceiveDamageRecordArray();// 0x62466b0
	void OnRep_VehicleWarLockData();// 0x624669c
	bool IsVehicleTurnOver();// 0x6246664
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x62464f0
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x62463f4
	void ForceShowVehicleHPBarDelegate__DelegateSignature(bool bNewShow);// 0x70644c4
	void DelayNotifyClientVehicleWarRespawnCallback();// 0x62463e0
	void CheckOnePlayerInFighting();// 0x62463cc
	void ChangeToSimplePhysicsAsset();// 0x62463b8
	void BroadCastFatalDamage(const VehicleWarKillInfoData VehicleWarKillInfoData);// 0x62462d8
	void BPTickCheckBlockAndAutoTurn();// 0x70644c4
	void AddOfflineBuffToPlayer(STExtraPlayerCharacter* InPlayer);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarLockData
	byte LockState;//[Offset: 0x0, Size: 0x1]
	Actor* LockTarget;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarVehicleReceiveDamageRecord
	int DamageFromTeamID;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarKillInfoData
	int DamageType;//[Offset: 0x0, Size: 0x4]
	int AdditionalParam;//[Offset: 0x4, Size: 0x4]
	FString CauserName;//[Offset: 0x8, Size: 0x10]
	FString CauserNation;//[Offset: 0x18, Size: 0x10]
	FString VictimName;//[Offset: 0x28, Size: 0x10]
	FString VictimNation;//[Offset: 0x38, Size: 0x10]
	FString KillerIconURL;//[Offset: 0x48, Size: 0x10]
	int KillerPlayerLevel;//[Offset: 0x58, Size: 0x4]
	int KillerAvatarBoxId;//[Offset: 0x5c, Size: 0x4]
	float TotalDamage;//[Offset: 0x60, Size: 0x4]
	bool IsCooperationKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	int KillerTeamId;//[Offset: 0x68, Size: 0x4]
	int VictimTeamID;//[Offset: 0x6c, Size: 0x4]
	float ThisDamage;//[Offset: 0x70, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleWarGemMatchState
	enum GemMatchState;//[Offset: 0x0, Size: 0x1]
	int CampID;//[Offset: 0x4, Size: 0x4]
	float CampWinServerTime;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: TeamMedalTotalKillData
	<int> TotalKillData;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: TeamMedalBeAttackedData
	<uint32,float> BeAttackedMap;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleBeAttackMapData
	<uint32,float> BeAttackedMap;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: AutoChangeSeatData
	int TeamID;//[Offset: 0x0, Size: 0x4]
	bool bCanAutoChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PVEInfectionPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	float CurExp;//[Offset: 0x1a78, Size: 0x4]
	int CurLevel;//[Offset: 0x1a80, Size: 0x4]
	int MainSkillId;//[Offset: 0x1a84, Size: 0x4]
	bool IsUseMainSkillInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a88, Size: 0x1]
	int CurAssistLevel;//[Offset: 0x1a8c, Size: 0x4]
	delegate OnPlayerLevelChanged;//[Offset: 0x1a90, Size: 0x10]
	delegate OnPlayerExpChanged;//[Offset: 0x1aa0, Size: 0x10]
	int SelectCombieCount;//[Offset: 0x1ac0, Size: 0x4]
	delegate InfectionClientOnRespawn;//[Offset: 0x1ac8, Size: 0x10]
	delegate InfectionClientOnBeKilled;//[Offset: 0x1ad8, Size: 0x10]
	bool bSwitchTeammateStateList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae8, Size: 0x1]
	enum PawnSubType;//[Offset: 0x1ae9, Size: 0x1]
	int ShowKillNum;//[Offset: 0x1aec, Size: 0x4]
	delegate OnInfectionKillNumChanged;//[Offset: 0x1af0, Size: 0x10]
	delegate OnLevelUp;//[Offset: 0x1b00, Size: 0x10]
	enum RespawnBeforeType;//[Offset: 0x1b10, Size: 0x1]
	float PlayerRoundStartTime;//[Offset: 0x1b14, Size: 0x4]
	float PlayerMoveDistance;//[Offset: 0x1b18, Size: 0x4]
	float PlayerMoveTime;//[Offset: 0x1b1c, Size: 0x4]
	float[] PlayerMoveSpeedArray;//[Offset: 0x1b20, Size: 0x10]
	int PlayerJumpHeightMax;//[Offset: 0x1b30, Size: 0x4]
	int PlayerJumpSpeedMax;//[Offset: 0x1b34, Size: 0x4]
	uint32 RoundStartTime;//[Offset: 0x1b38, Size: 0x4]
	int8 RoleTypeStart;//[Offset: 0x1b3c, Size: 0x1]
	int8 RoleTypeEnd;//[Offset: 0x1b3d, Size: 0x1]
	int RoleTypeSwitchTime;//[Offset: 0x1b40, Size: 0x4]
	float AbsorbTime;//[Offset: 0x1b44, Size: 0x4]
	bool IsInAbsorb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b48, Size: 0x1]
	bool IsInfectionDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b49, Size: 0x1]
	bool IsClientChangeDeathPosi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4a, Size: 0x1]
	void StartMainSkill();// 0x602055c
	void SetPawnSubType(enum SubType);// 0x60204e0
	void ServerRPC_ClientStartRound(int64 ClientRoundStartTime);// 0x6020430
	void ServerRPC_ActorGuidTrigger_TLog(int GuidID);// 0x6020380
	void ServerRPC_ActorGuidClose_TLog(int GuidID, bool bArriveClose);// 0x602027c
	void RespawnBufferReplay();// 0x6020268
	void ResetOnRoundStart();// 0x6020254
	void OnRep_ShowKillNum();// 0x6020240
	void OnRep_PawnSubType();// 0x602022c
	void OnRep_CurLevel();// 0x6020218
	void OnRep_CurExp();// 0x6020204
	void OnRep_CurAssistLevel();// 0x60201f0
	void OnNewRound();// 0x60201d4
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x60200dc
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x601ffe4
	bool IsPlayer();// 0x601ffac
	bool IsCanUseMainSkill();// 0x601ff74
	int GetShowKillNum();// 0x601ff40
	enum GetMainType();// 0x601ff0c
	float GetMainSkillInterval();// 0x601fed8
	int GetMainSkillId();// 0x601fea4
	float GetMainSkillCD();// 0x601fe70
	float GetExpPercent();// 0x601fe3c
	enum ConvertSubTypeToMainType(enum SubType);// 0x601fdb0
	void ClientRPC_OnRevengerSpawn();// 0x601fd94
	void ClientRPC_OnRespawnInfectionPawn(enum PrevType, enum NewType);// 0x601fcd4
	void ClientRPC_OnKilled(Pawn* VictimPawn, const DamageType* DamageType, bool bIsRoundEnd);// 0x601fbd4
	void ClientRPC_OnGeneraterMaternalZombies(enum CurSubType);// 0x601fb50
	void ClientRPC_OnBeKilled(Pawn* KillerPawn, bool bIsRoundEnd);// 0x601fa88
	void ClientRPC_BroadcastInfectionLevelUp(int Level);// 0x601fa04
	void ClientRoundStart();// 0x601f9f0
	void AddShowKillNum(int AddNum);// 0x601f974
	void AddExpOnNextFrame();// 0x601f960
	void AddCurLevelUpBuffCallback();// 0x601f94c
<----------Generated by SSpawner v1.0.4---------->


Class: PVEInfectionGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	int RespawnInvincibleTime;//[Offset: 0x1408, Size: 0x4]
	delegate OnInfectionTeamMarkGlobalNotifyDelegate;//[Offset: 0x1410, Size: 0x10]
	delegate GameStart;//[Offset: 0x1420, Size: 0x10]
	delegate GameEnd;//[Offset: 0x1430, Size: 0x10]
	delegate RoundStart;//[Offset: 0x1440, Size: 0x10]
	delegate RoundEnd;//[Offset: 0x1450, Size: 0x10]
	delegate RoundCountDownEnd;//[Offset: 0x1460, Size: 0x10]
	delegate OnPlayerPawnActive;//[Offset: 0x1470, Size: 0x10]
	delegate OnInfectionSelfChangeType;//[Offset: 0x1480, Size: 0x10]
	delegate OnPlayerUseSkill;//[Offset: 0x1490, Size: 0x10]
	delegate OnInfectionPlayerAssistNumChanged;//[Offset: 0x14a0, Size: 0x10]
	InfectionGainExpInfo PlayerGainExpConfig;//[Offset: 0x14b0, Size: 0x1c]
	InfectionGainExpInfo ZombieGainExpConfig;//[Offset: 0x14cc, Size: 0x1c]
	<int,InfectionRoleLevelMap> RoleLevelConfig;//[Offset: 0x14e8, Size: 0x50]
	int CurRoundNum;//[Offset: 0x1538, Size: 0x4]
	enum CurRoundState;//[Offset: 0x153c, Size: 0x1]
	enum CurInfectionBGMStateType;//[Offset: 0x153d, Size: 0x1]
	int MaxRoundNum;//[Offset: 0x1540, Size: 0x4]
	delegate OnCurRoundNumChanged;//[Offset: 0x1548, Size: 0x10]
	float BeforeRoundTime;//[Offset: 0x1558, Size: 0x4]
	FString RoleInfoTablePath;//[Offset: 0x1560, Size: 0x10]
	FString ScoreInfoTablePath;//[Offset: 0x1570, Size: 0x10]
	int MaxPersonScore;//[Offset: 0x1580, Size: 0x4]
	int MaxMonsterScore;//[Offset: 0x1584, Size: 0x4]
	float RoundEndWorldTimeSeconds;//[Offset: 0x1588, Size: 0x4]
	int RoundPlayerNum;//[Offset: 0x158c, Size: 0x4]
	int RoundZombieNum;//[Offset: 0x1590, Size: 0x4]
	int RoundAllPlayerNum;//[Offset: 0x1594, Size: 0x4]
	int RoundAllZombieNum;//[Offset: 0x1598, Size: 0x4]
	int PersonWinRoundNum;//[Offset: 0x159c, Size: 0x4]
	int ZombieWinRoundNum;//[Offset: 0x15a0, Size: 0x4]
	int KillZombieNum;//[Offset: 0x15a4, Size: 0x4]
	int InfectedHumanNum;//[Offset: 0x15a8, Size: 0x4]
	int BecomeHeroNum;//[Offset: 0x15ac, Size: 0x4]
	int CurRoundWinRole;//[Offset: 0x15b0, Size: 0x4]
	float CurRoundStartTime;//[Offset: 0x15b4, Size: 0x4]
	delegate ShowRoundResultDelegate;//[Offset: 0x15b8, Size: 0x10]
	InfectionRoundResultData CurRoundResultData;//[Offset: 0x15c8, Size: 0x118]
	int CurRoundResultShowTime;//[Offset: 0x16e0, Size: 0x4]
	delegate OnInfectionKillInfoChanged;//[Offset: 0x16e8, Size: 0x10]
	<uint32,InfectionPlayerScoreData> InfectionPlayerStateDataMap;//[Offset: 0x16f8, Size: 0x50]
	<int,InfectionRoundTlogCountData> InfectionRoundTlogCountDataMap;//[Offset: 0x1748, Size: 0x50]
	<int,InfectionRoleTableRow> RoleTableMap;//[Offset: 0x1798, Size: 0x50]
	delegate RoundPlayerNumChanged;//[Offset: 0x17e8, Size: 0x10]
	delegate RoundZombieNumChanged;//[Offset: 0x17f8, Size: 0x10]
	<FString,InfectionScoreTableRow> ScoreTableMap;//[Offset: 0x1808, Size: 0x50]
	delegate ShowInfectionKillTipsDelegate;//[Offset: 0x1858, Size: 0x10]
	delegate InfectionRoundStateChanged;//[Offset: 0x1868, Size: 0x10]
	delegate InfectionBGMStateChanged;//[Offset: 0x1878, Size: 0x10]
	int HaveShowRoundResultNum;//[Offset: 0x1888, Size: 0x4]
	void ShowRoundResult(InfectionRoundResultData RoundData, int showTime);// 0x601b598
	void ShowInfectionKillTips__DelegateSignature(FString KillerName, FString VictimName, FString killerKey, FString VictimKey, enum killerSubType, enum victimSubType);// 0x70644c4
	void SetRoundZombieNum(int Num);// 0x601b51c
	void SetRoundPlayerNum(int Num);// 0x601b4a0
	void ServerOnRoundStart(int RoundNum);// 0x601b424
	void ServerOnRoundEnd(int RoundNum);// 0x601b3a8
	void OnUseSpringJump(STExtraPlayerCharacter* Character, int SpringID);// 0x601b2f0
	void OnRoundZombieNumChange();// 0x601b2dc
	void OnRoundPlayerNumChange();// 0x601b2c8
	void OnRep_RoundZombieNumChange();// 0x601b2b4
	void OnRep_RoundStateChanged();// 0x601b2a0
	void OnRep_RoundPlayerNumChange();// 0x601b28c
	void OnRep_ReadyStateTime();// 0x601b270
	void OnRep_InfectionBGMStateChanged();// 0x601b25c
	void OnRep_CurRoundNum();// 0x601b248
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x601b188
	void OnKillInfoChanged(out const InfectionContinuousKillInfo Info);// 0x601b0bc
	void OnKilledTlog(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x601af8c
	void OnKilled(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x601ae5c
	void OnGeneraterMaternalZombies();// 0x601ae48
	void OnFinishRestartPlayer(Controller* NewPlayer, out const Rotator StartRotation);// 0x601ad84
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x601acc8
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage, out const DamageEvent DamageEvent, float DamageBeforeCalArmor, bool bIsFatalHealthCost, Actor* DamageCauser, bool bIsNearDeathHealthCost);// 0x601aa68
	void MulticastRPC_InfectionKillInfoChanged(const InfectionContinuousKillInfo Info);// 0x601a9a4
	void MulticastRPC_InfectionCharacterList(const STExtraBaseCharacter*[] CharacterList);// 0x601a8f4
	void MulticastRPC_BroadcastTeamMarkNotify(const PVEInfectionPlayerState*[] PlayerStateArray);// 0x601a844
	bool IsVisibleType(enum OriginType, enum TargetType);// 0x601a778
	void InitScoreTable();// 0x601a764
	void InitRoleTable();// 0x601a750
	FString GetSkillIcon(enum SubType);// 0x601a65c
	InfectionRoundResultPlayerShowData GetRoundResultByPlayerKey(FString PlayerKey);// 0x601a424
	int GetRoundPlayerNum();// 0x601a3f0
	InfectionPlayerScoreData GetPlayerScoreData(uint32 PlayerKey);// 0x601a2ec
	InfectionRoundScoreData GetPlayerRoundScoreData(uint32 PlayerKey, int RoundNum);// 0x601a21c
	float GetLeftRoundTime();// 0x601a1e8
	InfectionRoleTableRow GetInfectionRoleInfo(enum FindPawnType);// 0x601a134
	enum GetCurRoundWinCamp();// 0x601a100
	InfectionRoundTlogCountData GetCurRoundTlogCountData();// 0x601a0c8
	STExtraBaseCharacter* GetCharacterByPlayerKey(FString PlayerKey);// 0x6019f8c
	<STExtraBaseCharacter*> GetAllCharacterSetWithoutSelf();// 0x6019e4c
	<STExtraBaseCharacter*> GetAllCharacterSet();// 0x6019d0c
	STExtraBaseCharacter*[] GetAllCharacter();// 0x6019c68
	enum ConvertSubTypeToMainType(enum SubType);// 0x6019bdc
	STExtraBaseCharacter* ClientGetCharacterByPlayerKey(FString PlayerKey);// 0x6019aa0
	void ClientBroadcast_InfectionShowKilledTip(FString KillerName, FString VictimName, uint32 killerKey, uint32 VictimKey, enum killerSubType, enum victimSubType);// 0x601989c
	void CheckInitMatrixEffect(PlayerState* PState);// 0x6019820
	void BroadcastClientOnRoundStart(int RoundNum);// 0x601979c
	void BroadcastClientOnRoundEnd(int RoundNum);// 0x6019718
	void BeginShowRoundResult(int RoundNum, int showTime);// 0x6019664
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x60195a8
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x60194ec
	void AddRoundWinScore();// 0x60194d8
	void AddRevengerPlayerKillWinTimes(uint32 PlayerKey, int Times);// 0x6019424
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x6019228
	void AddDamageToRevengerPlayer(uint32 PlayerKey, int Damage);// 0x6019174
	void AddDamageToMonster(uint32 PlayerKey, int Damage);// 0x60190c0
	void AddChooseZombieTimes(uint32 PlayerKey, enum SubType, int Times);// 0x6018fcc
	void AddBeRevengerPlayerTimes(uint32 PlayerKey, int Times);// 0x6018f18
	void AddBePersonWinTimes(uint32 PlayerKey, int Times);// 0x6018e64
	void AddBeMonsterWinTimes(uint32 PlayerKey, int Times);// 0x6018db0
	void AddBeMatrixMonsterTimes(uint32 PlayerKey, int Times);// 0x6018cfc
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionGainExpInfo
	int KillExp;//[Offset: 0x0, Size: 0x4]
	int AssistExp;//[Offset: 0x4, Size: 0x4]
	float AssistExpAcceptRange;//[Offset: 0x8, Size: 0x4]
	float DamageExpRate;//[Offset: 0xc, Size: 0x4]
	float HealthExpRate;//[Offset: 0x10, Size: 0x4]
	float SecondExp;//[Offset: 0x14, Size: 0x4]
	float GainExpInterval;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionRoleLevelMap
	<int,InfectionRoleLevelInfo> LevelMap;//[Offset: 0x0, Size: 0x50]
	int MaxLevel;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionRoleLevelInfo
	int Exp;//[Offset: 0x0, Size: 0x4]
	int BuffID;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionRoundResultData
	int RoundNum;//[Offset: 0x0, Size: 0x4]
	enum WinType;//[Offset: 0x4, Size: 0x1]
	InfectionRoundResultPlayerShowData BestPerson;//[Offset: 0x8, Size: 0x80]
	InfectionRoundResultPlayerShowData BestMonster;//[Offset: 0x88, Size: 0x80]
	InfectionRoundResultPlayerShowData[] AllDataArray;//[Offset: 0x108, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionRoundResultPlayerShowData
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	FString PlayerName;//[Offset: 0x8, Size: 0x10]
	int TeamID;//[Offset: 0x18, Size: 0x4]
	InfectionPlayerInfo InfectionPlayerInfo;//[Offset: 0x20, Size: 0x48]
	InfectionShowRoundScoreData RoundScoreData;//[Offset: 0x68, Size: 0x14]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionPlayerInfo
	uint64 UID;//[Offset: 0x0, Size: 0x8]
	FString UIDString;//[Offset: 0x8, Size: 0x10]
	FString PlayerName;//[Offset: 0x18, Size: 0x10]
	FString iconUrl;//[Offset: 0x28, Size: 0x10]
	byte gender;//[Offset: 0x38, Size: 0x1]
	byte PlatformGender;//[Offset: 0x39, Size: 0x1]
	int PlayerLevel;//[Offset: 0x3c, Size: 0x4]
	int SegmentLevel;//[Offset: 0x40, Size: 0x4]
	int AvatarBoxId;//[Offset: 0x44, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionShowRoundScoreData
	int RoundNo;//[Offset: 0x0, Size: 0x4]
	int MonsterScore;//[Offset: 0x4, Size: 0x4]
	int PersonScore;//[Offset: 0x8, Size: 0x4]
	int KillMonsters;//[Offset: 0xc, Size: 0x4]
	int KillPersons;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionPlayerScoreData
	uint32 PlayerKey;//[Offset: 0x0, Size: 0x4]
	FString PlayerName;//[Offset: 0x8, Size: 0x10]
	int TeamID;//[Offset: 0x18, Size: 0x4]
	float PlayerEnterGameTime;//[Offset: 0x1c, Size: 0x4]
	InfectionPlayerInfo InfectionPlayerInfo;//[Offset: 0x20, Size: 0x48]
	<int,InfectionRoundScoreData> RoundScoreData;//[Offset: 0x68, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionRoundScoreData
	int RoundNo;//[Offset: 0x0, Size: 0x4]
	float MonsterScore;//[Offset: 0x4, Size: 0x4]
	float PersonScore;//[Offset: 0x8, Size: 0x4]
	int KillMonsters;//[Offset: 0xc, Size: 0x4]
	int KillPersons;//[Offset: 0x10, Size: 0x4]
	float RoundDamage;//[Offset: 0x14, Size: 0x4]
	int BeMatrixMonsterTimes;//[Offset: 0x18, Size: 0x4]
	int BeRevengerPlayerTimes;//[Offset: 0x1c, Size: 0x4]
	uint32 Headshot4Avenger;//[Offset: 0x20, Size: 0x4]
	int RevengerPlayerKillWinTimes;//[Offset: 0x24, Size: 0x4]
	int BeMonsterWinTimes;//[Offset: 0x28, Size: 0x4]
	int BePersonWinTimes;//[Offset: 0x2c, Size: 0x4]
	int UseSpringJumpTimes;//[Offset: 0x30, Size: 0x4]
	int UseEnhancerTimes;//[Offset: 0x34, Size: 0x4]
	int DamageToMonster;//[Offset: 0x38, Size: 0x4]
	int DamageToRevengerPlayer;//[Offset: 0x3c, Size: 0x4]
	int ChooseZombieFirstTimes;//[Offset: 0x40, Size: 0x4]
	int ChooseZombieSecondTimes;//[Offset: 0x44, Size: 0x4]
	int ChooseZombieThirdTimes;//[Offset: 0x48, Size: 0x4]
	uint32 PlayerKilled;//[Offset: 0x4c, Size: 0x4]
	uint32 PlayerHurtCount;//[Offset: 0x50, Size: 0x4]
	uint32 PlayerDamageCount;//[Offset: 0x54, Size: 0x4]
	uint32 HeadshotCounts;//[Offset: 0x58, Size: 0x4]
	uint32 GunKillingTimes;//[Offset: 0x5c, Size: 0x4]
	int8 RoleType;//[Offset: 0x60, Size: 0x1]
	int8 RoleTypeEnd;//[Offset: 0x61, Size: 0x1]
	uint32 RoleTypeSwitchTime;//[Offset: 0x64, Size: 0x4]
	int PlayerJumpHeightMax;//[Offset: 0x68, Size: 0x4]
	int PlayerJumpSpeedMax;//[Offset: 0x6c, Size: 0x4]
	uint32 PlayerMoveDistance;//[Offset: 0x70, Size: 0x4]
	uint32 PlayerMoveTime;//[Offset: 0x74, Size: 0x4]
	int PlayerMoveSpeedAvg;//[Offset: 0x78, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionRoundTlogCountData
	float RoundStartTime;//[Offset: 0x0, Size: 0x4]
	float RoundEndTime;//[Offset: 0x4, Size: 0x4]
	int WinCamp;//[Offset: 0x8, Size: 0x4]
	bool bSpawnRevenger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float RevengerSpawmTime;//[Offset: 0x10, Size: 0x4]
	int RevengerDoSkillCount;//[Offset: 0x14, Size: 0x4]
	int ZombieReviveCount;//[Offset: 0x18, Size: 0x4]
	int NormalZombieDoSkillCount;//[Offset: 0x1c, Size: 0x4]
	int InvisibleZombieDoSkillCount;//[Offset: 0x20, Size: 0x4]
	int ThrowerZombieDoSkillCount;//[Offset: 0x24, Size: 0x4]
	int MotherZombieDoSkillCount;//[Offset: 0x28, Size: 0x4]
	<int,InfectionRoundTlogGuidData> GuidCount;//[Offset: 0x30, Size: 0x50]
	InfectionPlayerDeadTlogData[] DeadList;//[Offset: 0x80, Size: 0x10]
	<int,int> ZombieLevelNumMap;//[Offset: 0x90, Size: 0x50]
	int[] EnhancerUserList;//[Offset: 0xe0, Size: 0x10]
	<int,InfectionSpringUseData> SpringUseMap;//[Offset: 0xf0, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionRoundTlogGuidData
	int GuidTriggerCount;//[Offset: 0x0, Size: 0x4]
	int GuidHandCloseCount;//[Offset: 0x4, Size: 0x4]
	int GuidArriveCloseCount;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionPlayerDeadTlogData
	int DeadPawnSubType;//[Offset: 0x0, Size: 0x4]
	float DeadPosiX;//[Offset: 0x4, Size: 0x4]
	float DeadPosiY;//[Offset: 0x8, Size: 0x4]
	float DeadPosiZ;//[Offset: 0xc, Size: 0x4]
	int KillPawnSubType;//[Offset: 0x10, Size: 0x4]
	float KillPosiX;//[Offset: 0x14, Size: 0x4]
	float KillPosiY;//[Offset: 0x18, Size: 0x4]
	float KillPosiZ;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionSpringUseData
	int SpringTag;//[Offset: 0x0, Size: 0x4]
	int NormalPlayerUseTimes;//[Offset: 0x4, Size: 0x4]
	int AvengerPlayerUseTimes;//[Offset: 0x8, Size: 0x4]
	int MotherZombieUseTimes;//[Offset: 0xc, Size: 0x4]
	int NormalZombieUseTimes;//[Offset: 0x10, Size: 0x4]
	int InvisibleZombieUseTimes;//[Offset: 0x14, Size: 0x4]
	int ThrowerZombieUseTimes;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionRoleTableRow
	int ID;//[Offset: 0x0, Size: 0x4]
	FString RoleName;//[Offset: 0x8, Size: 0x10]
	int DieExchange;//[Offset: 0x18, Size: 0x4]
	int MatrixEffect;//[Offset: 0x1c, Size: 0x4]
	int BornChoose;//[Offset: 0x20, Size: 0x4]
	FString WeIcon;//[Offset: 0x28, Size: 0x10]
	FString EnemyIcon;//[Offset: 0x38, Size: 0x10]
	enum[] VisibleRange;//[Offset: 0x48, Size: 0x10]
	int MainSkillId;//[Offset: 0x58, Size: 0x4]
	int[] BornSkillList;//[Offset: 0x60, Size: 0x10]
	FString SkillIcon;//[Offset: 0x70, Size: 0x10]
	FString SkillCDIcon;//[Offset: 0x80, Size: 0x10]
	FString SkillName;//[Offset: 0x90, Size: 0x10]
	FString SkillDetail;//[Offset: 0xa0, Size: 0x10]
	float SkillCD;//[Offset: 0xb0, Size: 0x4]
	FString HeroIcon;//[Offset: 0xb8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionScoreTableRow
	int ID;//[Offset: 0x0, Size: 0x4]
	int Identity;//[Offset: 0x4, Size: 0x4]
	FString Action;//[Offset: 0x8, Size: 0x10]
	int Param1;//[Offset: 0x18, Size: 0x4]
	int Score;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: InfectionContinuousKillInfo
	enum PawnType;//[Offset: 0x0, Size: 0x1]
	int KillNumber;//[Offset: 0x4, Size: 0x4]
	FString KillerName;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_InfectModeMsgIDCfg_type
	int FlagType_0_72B3F500739E321A0A23CC9D077EF635;//[Offset: 0x0, Size: 0x4]
	FString TurnplateChatIDList_1_096F880020F397FC54CCF31403E9DA74;//[Offset: 0x8, Size: 0x10]
	FString MenuChatIDList_2_3D047D80224763B807E924800784F994;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_FlagIDCfg_type
	FString MinDist_6_0B46994033686B57353ADBF500714494;//[Offset: 0x0, Size: 0x10]
	FString ChatIDList_1_4EF37580641F954251E0DAFB019B9714;//[Offset: 0x10, Size: 0x10]
	int FlagType_2_11577240100B60A917DCD1AD0B460365;//[Offset: 0x20, Size: 0x4]
	int FlagIndex_3_792107C04BF74D1D091F4261042C7A78;//[Offset: 0x24, Size: 0x4]
	FString TraceDist_7_58300C000EE7C4781954B3CD040DA8B4;//[Offset: 0x28, Size: 0x10]
	int AlternateChatID_5_30B4D68067E6F79C260EA2C400C3E5D4;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_QuickSignCfg_type
	FString AudioPath_15_542FCCC0273B734F1E867B74099F88F8;//[Offset: 0x0, Size: 0x10]
	FString IconBGPath_16_5BDF54C04BC63EDF39F3D4B505D210D8;//[Offset: 0x10, Size: 0x10]
	FString IconPath_17_79023280522DA7F41B3040310874D6D8;//[Offset: 0x20, Size: 0x10]
	FString ID_18_3F8DB04004E99B570550F27B0E37BE54;//[Offset: 0x30, Size: 0x10]
	int LifeSpan_19_0AFEB18006FB71A602526E5601FD19DE;//[Offset: 0x40, Size: 0x4]
	int MaxNum_20_73CA82807AF1FB3255FB24340FB7020D;//[Offset: 0x44, Size: 0x4]
	FString RespondID_21_0E2787006157EE48655D98DC092FB8F4;//[Offset: 0x48, Size: 0x10]
	FString ScriptParam_22_3C7BC68011D8B81C27E5F03F0C67C40D;//[Offset: 0x58, Size: 0x10]
	int TextID_23_7A2819807E81ADFC4845A72A0F22CF64;//[Offset: 0x68, Size: 0x4]
	int SignSubType_24_6FD8044017325E7F589E0E8C0146BF25;//[Offset: 0x6c, Size: 0x4]
	FString OutScreenArrowPath_27_3B0A390024BFB9D000BD28FC0036EE38;//[Offset: 0x70, Size: 0x10]
	FString IconOutScreenBGPath_30_365F3AC03DE161730C8814750C718E08;//[Offset: 0x80, Size: 0x10]
	FString IconOutScreenPath_31_3B2818806791463445FB230906AD7548;//[Offset: 0x90, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_MapUIMarkManager_C.MapUIMarkManager.LuaActorComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BP_ChangeWearingComp_C.ChangeWearingComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ChangeWearingComponent.ActorComponent.Object
	int WillChangeWearIndex;//[Offset: 0x110, Size: 0x4]
	float CoolDownTime;//[Offset: 0x114, Size: 0x4]
	float SocialIslandCoolDownTime;//[Offset: 0x118, Size: 0x4]
	float LastChangeWearTime;//[Offset: 0x11c, Size: 0x4]
	void ServerRequestChangeWearInPhoto(int Index);// 0x5e24b88
	void ServerRequestChangeWear(int Index);// 0x5e24ad8
	bool RequestChangeWearInPhoto(int Index);// 0x5e24a48
	bool RequestChangeWearInBattle(int Index);// 0x5e249b8
	bool RequestChangeWear(int Index);// 0x5e24928
	void RealChangeWearInBattle(int Index);// 0x5e248ac
	bool IsInCoolDownTime(bool bWithLog);// 0x5e24814
	bool IsInBattleState(bool bWithLog);// 0x5e2477c
	bool IsChangeWearingOpend();// 0x5e24744
	bool IsAllowChangeWearingState(bool bWithLog);// 0x5e246ac
	float GetCoolDownTime();// 0x5e24678
	void ClientChangeWearDone(int Index, float ChangeWearTime, const GameModePlayerRolewearInfo[] AllWearData);// 0x5e24560
	bool CheckCanChangeWearing(bool bWithLog);// 0x5e244c8
<----------Generated by SSpawner v1.0.4---------->


Class: BP_GameEventListener_C.GameEventListener.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1e8, Size: 0x8]
	void SetDefaultNearClipPlane(bool CallFunc_IsIOSPlatform_IsIOS);// 0x70644c4
	void IsIOSPlatform(out bool IsIOS, int CallFunc_GetPlatformInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x70644c4
	void SetDefaultRendering();// 0x70644c4
	void EnableGrassLOD(int Enable, GameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void ChangeStreamingLevel(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x70644c4
	void InitIncaseReconnect(GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsPlayerLandFromTheAir_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsIOSPlatform_IsIOS, bool CallFunc_IsIOSPlatform_IsIOS2, bool CallFunc_IsPlayerFlying_ReturnValue);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void CustomEvent(byte gamePawnEvent);// 0x70644c4
	void ReceiveEndPlay(byte EndPlayReason);// 0x70644c4
	void UnloadTree();// 0x70644c4
	void LoadTree();// 0x70644c4
	void ExecuteUbergraph_BP_GameEventListener(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_gamePawnEvent, byte K2Node_Event_EndPlayReason, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsDedicatedServer_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, int CallFunc_GetDeviceLevel_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue3, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance3, bool K2Node_DynamicCast_bSuccess3);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: GameEventListener.ActorComponent.Object
	delegate OnGameEventListener;//[Offset: 0x110, Size: 0x10]
	float HeightCheck_High;//[Offset: 0x120, Size: 0x4]
	float HeightCheck_Mid;//[Offset: 0x124, Size: 0x4]
	float HeightCheck_Low;//[Offset: 0x128, Size: 0x4]
	byte CurGamePawnEvent;//[Offset: 0x12c, Size: 0x1]
	float FlyingScreenSizeCullingFactor;//[Offset: 0x138, Size: 0x4]
	float FlyingDistanceCullingFactor;//[Offset: 0x13c, Size: 0x4]
	float HighMidFightingScreenSizeCullingFactor;//[Offset: 0x140, Size: 0x4]
	float HighMidFightingDistanceCullingFactor;//[Offset: 0x144, Size: 0x4]
	float LowFightingScreenSizeCullingFactor;//[Offset: 0x148, Size: 0x4]
	float LowFightingDistanceCullingFactor;//[Offset: 0x14c, Size: 0x4]
	float HighFastSpeedMoveScreenFactor;//[Offset: 0x150, Size: 0x4]
	float HighFastSpeedMoveCullFactor;//[Offset: 0x154, Size: 0x4]
	float MidLowFastSpeedScreenFactor;//[Offset: 0x158, Size: 0x4]
	float MidLowFastSpeedMoveCullFactor;//[Offset: 0x15c, Size: 0x4]
	float DelaySecondsForExitNgiht;//[Offset: 0x164, Size: 0x4]
	float[] LODDistanceScaleAtNight;//[Offset: 0x168, Size: 0x10]
	float[] ViewDistanceScaleAtNight;//[Offset: 0x180, Size: 0x10]
	float[] FoliageViewDistanceScaleAtNight;//[Offset: 0x198, Size: 0x10]
	float[] ScreenSizeCullingFactorAtNight;//[Offset: 0x1b0, Size: 0x10]
	bool bUsetoControlNearClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 0x1]
	bool bNearClipInPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5, Size: 0x1]
	int NearClipLanded;//[Offset: 0x1c8, Size: 0x4]
	int NearClipFlying;//[Offset: 0x1cc, Size: 0x4]
	void StarCalcJump();// 0x5ee6054
	void SetClearPlaneFast(int Val);// 0x5ee5fd8
	void ScaleScreenSizeCulling(byte pawnevent);// 0x5ee5f5c
	void ScaleCullingFastMode(byte pawnevent);// 0x5ee5ee0
	bool ScaleCullingFast(float ScreenSize, float Distance);// 0x5ee5e18
	void OnChangeViewTarget();// 0x5ee5e04
	bool IsPlayerLandFromTheAir();// 0x5ee5dcc
	bool IsPlayerLanded();// 0x5ee5d94
	bool IsPlayerInPlane();// 0x5ee5d5c
	bool IsPlayerFlying();// 0x5ee5d24
	void HeightCheck();// 0x5ee5d10
	void GameEventReBirth();// 0x5ee5cfc
	void GameEventPlane_KeepNearClipNotChanged();// 0x5ee5ce8
	void GameEventPlane();// 0x5ee5cd4
	void GameEventParachute();// 0x5ee5cc0
	void GameEventLanded();// 0x5ee5cac
	void GameEventJump();// 0x5ee5c98
	void GameEventFinished();// 0x5ee5c84
	void GameEventFighting();// 0x5ee5c70
	void GameEventExitNight();// 0x5ee5c5c
	void GameEventEnterNight();// 0x5ee5c48
	void GameEventDie(float currentHP, float ratioHP);// 0x5ee5b94
	void GameEventBirth();// 0x5ee5b80
	void ChangeViewtargetToPlane();// 0x5ee5b6c
	void ChangeGamePawnEvent(byte Event);// 0x5ee5af0
<----------Generated by SSpawner v1.0.4---------->


Class: GuideComponent_BP_C.GuideComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x138, Size: 0x8]
	void ShowGuideByStep(int Data, Vector2D Offset, Vector2D focusAbsPos, Vector2D focusAbsSize, Widget* FocusWidget, Image* guideImage, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void AddUIGuide(Widget* widget1, int guildUI1, Vector2D offset1, Vector2D size1, int childData1, GuideInfo K2Node_MakeStruct_GuideInfo, int CallFunc_Array_Add_ReturnValue);// 0x70644c4
	void InitUIGuide();// 0x70644c4
	void CreateGuideUI();// 0x70644c4
	void ExecuteUbergraph_GuideComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	int guideStep;//[Offset: 0x140, Size: 0x4]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_ServerSwitcher_C.ServerSwitchComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x178, Size: 0x8]
	void ReceiveBeginPlay();// 0x70644c4
	void CustomEvent(bool BoolValue);// 0x70644c4
	void ExecuteUbergraph_BP_ServerSwitcher(int EntryPoint, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_CustomEvent_BoolValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: ServerSwitchComponent.ActorComponent.Object
	delegate OnFPSMonitorConfigSwitchRecv;//[Offset: 0x110, Size: 0x10]
	delegate OnFPSLowWarning;//[Offset: 0x120, Size: 0x10]
	FPSMonitorConfigSwitch FPSMonitorConfigSwitch;//[Offset: 0x130, Size: 0x14]
	float LowFPSWarningTipsLastTime;//[Offset: 0x144, Size: 0x4]
	FString[] FPSLowWarningSDKMatch;//[Offset: 0x148, Size: 0x10]
	bool bLocalSwitcherFPSLowWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	void RequireConfigRPC();// 0x605ef38
	void OnUserQualitySettingChanged(int renderlevel);// 0x605eebc
	void MakeLowFPSWarningEx();// 0x605eea8
	void MakeLowFPSWarning(float targetFPS, float currentFPS);// 0x605edf4
	void CountingDown();// 0x605ede0
	void CloseFPSCheck();// 0x605edcc
	void AnswerconfigRPC(FPSMonitorConfigSwitch configswitch);// 0x605ed1c
<----------Generated by SSpawner v1.0.4---------->


Class: FPSMonitorConfigSwitch
	bool bFPSMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float FPSCollectInternal;//[Offset: 0x4, Size: 0x4]
	int FPSCollectCountForGroup;//[Offset: 0x8, Size: 0x4]
	float FPSThreshold;//[Offset: 0xc, Size: 0x4]
	int FPSLowActionType;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_CommonBtn_C.CommonBtnComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x130, Size: 0x8]
	void OnChangeOpenDoorMode(int openmode);// 0x70644c4
	void UnRegistShowDoorButton();// 0x70644c4
	void OnShowDoorButton(byte Type);// 0x70644c4
	void RegistShowDoorButton();// 0x70644c4
	void ShowDoorButton(bool Show, bool Open, int openmode, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController);// 0x70644c4
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void CharacterStatusChanged(bool IsNearDeath, bool IsRescueingOther);// 0x70644c4
	void PlayerControllerReconnectedDelegate_Event();// 0x70644c4
	void UI_Click(bool bSimulateExtraDoor);// 0x70644c4
	void ToogleDoor();// 0x70644c4
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x70644c4
	void AutoOpenDoor(bool BoolValue);// 0x70644c4
	void BP_SimulateUIClick(bool bExtraDoor);// 0x70644c4
	void ExecuteUbergraph_BP_CommonBtn(int EntryPoint, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_IsNearDeath, bool K2Node_CustomEvent_IsRescueingOther, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool K2Node_CustomEvent_bSimulateExtraDoor, bool Temp_bool_Has_Been_Initd_Variable, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool Temp_bool_IsClosed_Variable, bool K2Node_Event_bShow, bool K2Node_Event_bOpen, int K2Node_Event_doorOpenMode, bool CallFunc_IsValid_ReturnValue2, BP_DoorMetallic_C* K2Node_DynamicCast_AsBP_Door_Metallic, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue3, BP_DoorNormal_C* K2Node_DynamicCast_AsBP_Door_Normal, bool K2Node_DynamicCast_bSuccess3, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue4, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess4, bool K2Node_CustomEvent_BoolValue, bool Temp_bool_Variable2, bool K2Node_Event_bExtraDoor, PUBGDoor* CallFunc_GetPriorityDoor_ReturnValue, bool CallFunc_IsAimingExtraDoor_ReturnValue, bool CallFunc_IsValid_ReturnValue5, bool K2Node_Select_Default);// 0x70644c4
	int openmode;//[Offset: 0x138, Size: 0x4]
	byte BtnType;//[Offset: 0x13c, Size: 0x1]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 0x1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_DoorMetallic_C.PUBGDoor.UAENetActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6a0, Size: 0x8]
	void UserConstructionScript();// 0x70644c4
	void Timeline_0__FinishedFunc();// 0x70644c4
	void Timeline_0__UpdateFunc();// 0x70644c4
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x70644c4
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x70644c4
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x70644c4
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void OnBPRespawned();// 0x70644c4
	void ExecuteUbergraph_BP_DoorMetallic(int EntryPoint, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue3, bool Temp_bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, int Temp_int_Variable, int Temp_int_Variable2, int K2Node_Event_doorStateDst2, bool K2Node_Event_bExtraDoor2, float CallFunc_Lerp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, int K2Node_Event_doorStateDst, bool K2Node_Event_bExtraDoor, bool K2Node_SwitchInteger2_CmpSuccess, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, int K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue4, bool CallFunc_IsValid_ReturnValue3);// 0x70644c4
	BoxComponent* InterForce;//[Offset: 0x6a8, Size: 0x8]
	BoxComponent* Interaction;//[Offset: 0x6b0, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x6b8, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x6c0, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x6c8, Size: 0x8]
	float Timeline_0_DoorNormalCurve_3AD59F7245D2BF58B24C7D8879A0FBEE;//[Offset: 0x6d0, Size: 0x4]
	byte Timeline_0__Direction_3AD59F7245D2BF58B24C7D8879A0FBEE;//[Offset: 0x6d4, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x6d8, Size: 0x8]
	float from;//[Offset: 0x6e0, Size: 0x4]
	float to;//[Offset: 0x6e4, Size: 0x4]
	int FromState;//[Offset: 0x6e8, Size: 0x4]
	int ToState;//[Offset: 0x6ec, Size: 0x4]
	AkAudioEvent* OpenDoorAudio;//[Offset: 0x6f0, Size: 0x8]
	AkAudioEvent* CloseDoorAudio;//[Offset: 0x6f8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0x110, Size: 0xa0]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b0, Size: 0x1]
	void Stop();// 0x8e69e60
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x8e69dac
	void SetTimelineLengthMode(byte NewLengthMode);// 0x8e69d30
	void SetTimelineLength(float NewLength);// 0x8e69cb4
	void SetPlayRate(float NewRate);// 0x8e69c38
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x8e69b2c
	void SetNewTime(float NewTime);// 0x8e69ab0
	void SetLooping(bool bNewLooping);// 0x8e69a2c
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x8e69978
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x8e698f4
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x8e69840
	void ReverseFromEnd();// 0x8e6982c
	void Reverse();// 0x8e69818
	void PlayFromStart();// 0x8e69804
	void Play();// 0x8e697f0
	void OnRep_Timeline();// 0x8e697dc
	bool IsReversing();// 0x8e697a4
	bool IsPlaying();// 0x8e6976c
	bool IsLooping();// 0x8e69734
	float GetTimelineLength();// 0x8e69700
	float GetPlayRate();// 0x8e696cc
	float GetPlaybackPosition();// 0x8e69698
	bool GetIgnoreTimeDilation();// 0x8e69660
<----------Generated by SSpawner v1.0.4---------->


Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	float PlayRate;//[Offset: 0xc, Size: 0x4]
	float Position;//[Offset: 0x10, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x18, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x28, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x38, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x48, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x58, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x68, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x88, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x90, Size: 0x8]
	Property* DirectionProperty;//[Offset: 0x98, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]
	StructProperty* VectorProperty;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]
	FloatProperty* FloatProperty;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: FloatProperty.NumericProperty.Property.Field.Object
<----------Generated by SSpawner v1.0.4---------->


Class: NumericProperty.Property.Field.Object
<----------Generated by SSpawner v1.0.4---------->


Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]
	StructProperty* LinearColorProperty;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_DoorNormal_C.PUBGDoor.UAENetActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6a0, Size: 0x8]
	void UserConstructionScript();// 0x70644c4
	void ZeroToOne__FinishedFunc();// 0x70644c4
	void ZeroToOne__UpdateFunc();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x70644c4
	void EventTimer();// 0x70644c4
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x70644c4
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x70644c4
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x70644c4
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x70644c4
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x70644c4
	void OnBPRespawned();// 0x70644c4
	void ExecuteUbergraph_BP_DoorNormal(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue3, bool Temp_bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, int Temp_int_Variable, int Temp_int_Variable2, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, const BP_GrenadeDamageType_C* K2Node_DynamicCast_AsBP_Grenade_Damage_Type, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Lerp_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, FString CallFunc_Concat_StrStr_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_BooleanOR_ReturnValue2, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess3, int K2Node_Event_doorStateDst2, bool K2Node_Event_bExtraDoor3, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, bool K2Node_Event_isBeginPlay, bool K2Node_Event_bExtraDoor2, bool CallFunc_SetStaticMesh_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int K2Node_Event_doorStateDst, bool K2Node_Event_bExtraDoor, bool K2Node_SwitchInteger2_CmpSuccess, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, Vector CallFunc_MakeVector_ReturnValue4, int CallFunc_PostEventAtLocation_ReturnValue, int K2Node_Select_Default, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, int CallFunc_PostEventAtLocation_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue5, int CallFunc_PostEventAtLocation_ReturnValue3, bool CallFunc_K2_IsValidTimerHandle_ReturnValue2);// 0x70644c4
	BoxComponent* InterForce;//[Offset: 0x6a8, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x6b0, Size: 0x8]
	BoxComponent* Interaction;//[Offset: 0x6b8, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x6c0, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x6c8, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x6d0, Size: 0x8]
	float ZeroToOne_DoorNormalCurve_E90A1C0246A80C0D1E9E33BE7ED870B3;//[Offset: 0x6d8, Size: 0x4]
	byte ZeroToOne__Direction_E90A1C0246A80C0D1E9E33BE7ED870B3;//[Offset: 0x6dc, Size: 0x1]
	TimelineComponent* ZeroToOne;//[Offset: 0x6e0, Size: 0x8]
	StaticMesh* BrokenMesh;//[Offset: 0x6e8, Size: 0x8]
	float HP;//[Offset: 0x6f0, Size: 0x4]
	float HPTimer;//[Offset: 0x6f4, Size: 0x4]
	float to;//[Offset: 0x6f8, Size: 0x4]
	float from;//[Offset: 0x6fc, Size: 0x4]
	float HPDummy;//[Offset: 0x700, Size: 0x4]
	TimerHandle DummyTimerHandler;//[Offset: 0x708, Size: 0x8]
	float GrenadeDamageRatio;//[Offset: 0x710, Size: 0x4]
	int FromState;//[Offset: 0x714, Size: 0x4]
	int ToState;//[Offset: 0x718, Size: 0x4]
	AkAudioEvent* CloseDoorAudio;//[Offset: 0x720, Size: 0x8]
	AkAudioEvent* OpenDoorAudio;//[Offset: 0x728, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_GrenadeDamageType_C.DamageType.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BP_VehicleUser_C.VehicleUserComponent.VehicleUserComponentBase.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x488, Size: 0x8]
	void EditorAxisMoveFreezed();// 0x70644c4
	void SetUAVSpeedPercent(float SpeedPercent);// 0x70644c4
	void SetUAVCameraMode(bool FreeCamera);// 0x70644c4
	void OnUnmanedVehicleHPChanged(float HP, float MaxHp, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void OnUnmanedVehicleFuelChanged(float Fuel, float MacFuel, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int CallFunc_PostEvent_ReturnValue, STExtraUAVVehicleBase* K2Node_DynamicCast_AsSTExtra_UAVVehicle_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue3);// 0x70644c4
	void SendUIMsgWhenChangeSeatCompleted(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void SendUIMsgWhenEnterVehicleCompleted(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsUAV_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, SurfBoardComp* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3);// 0x70644c4
	void SendUIMsgWhenExitVehicleCompleted(class STExtraVehicleBase CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsUAV_ReturnValue, FString CallFunc_GetClassDisplayName_ReturnValue, bool CallFunc_EqualEqual_StriStri_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, SurfBoardComp* CallFunc_GetComponentByClass_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3);// 0x70644c4
	void GetVehicleGoStraight(out float VehicleGoStraight, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void SetHelicopterCameraMode(bool IsFreeCamera);// 0x70644c4
	void HandleCharacterUnequipWeapon(STExtraWeapon* NewParam);// 0x70644c4
	void HandleCharacterEquipWeapon(STExtraWeapon* NewWeapon, byte Slot);// 0x70644c4
	void SwitchToLastWeapon(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SwitchWeaponBySlot_ReturnValue);// 0x70644c4
	void CacheLastUseWeaponSlot(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, byte CallFunc_GetCurrentUsingPropSlot_ReturnValue);// 0x70644c4
	void SetDrivingViewMode(int int mode, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsUCAV_ReturnValue, VehicleSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x70644c4
	void ResetInputs(bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void OnMotorcycleContactChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void FixGoStraight(float InMoveRightRate, float GoStraightThreshold, out float OutMoveRightRate, float absInputRight, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_FMax_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2);// 0x70644c4
	void OnUpdateSeatGUI(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void OnVehicleWheelsHPChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void StopPlayerAutoSprint(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void OnVehicleFuelChanged(float Fuel, float FuelMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void OnVehicleHPChanged(float HP, float HPMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void ExitVehicle();// 0x70644c4
	void EnterVehicle(bool IsDriver, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, PlayerMantleComponent* CallFunc_GetVaultComponent_ReturnValue, bool CallFunc_HasState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController2, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue2, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_TryEnterVehicle_ReturnValue, bool CallFunc_TryEnterVehicle_ReturnValue2);// 0x70644c4
	void OnEnterVehicleCompleted(enum SeatType);// 0x70644c4
	void OnExitVehicleCompleted();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x70644c4
	void OnCurrrentClosestVehicleChanged();// 0x70644c4
	void EventSetDrivingViewMode(int IntValue);// 0x70644c4
	void OnInputAxisMoveForward(float rate);// 0x70644c4
	void OnInputAxisMoveRight(float rate);// 0x70644c4
	void EventSetCarMusicSwitch(bool BoolValue);// 0x70644c4
	void EventSetHelicopterFreeCamera(bool BoolValue);// 0x70644c4
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x70644c4
	void OnLaunchUnmannedVehicleCompleted();// 0x70644c4
	void OnPauseUnmannedVehicleCompleted();// 0x70644c4
	void EventSetUAVFreeCamera(bool BoolValue);// 0x70644c4
	void EventSetSpeedPercent(float FloatValue);// 0x70644c4
	void EventUAVSingleOperate(bool BoolValue);// 0x70644c4
	void ExecuteUbergraph_BP_VehicleUser(int EntryPoint, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, enum K2Node_Event_SeatType2, enum K2Node_Event_SeatType, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, float CallFunc_GetFuelMax_ReturnValue, float CallFunc_GetVehicleHPMax_ReturnValue, float CallFunc_GetFuel_ReturnValue, float CallFunc_GetVehicleHP_ReturnValue, bool CallFunc_IsValid_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_IsValid_ReturnValue4, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue3, bool CallFunc_IsValid_ReturnValue5, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue4, bool CallFunc_IsValid_ReturnValue6, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue7, BP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController2, bool CallFunc_IsValid_ReturnValue8, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController3, bool CallFunc_IsValid_ReturnValue9, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int K2Node_CustomEvent_IntValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, delegate K2Node_CreateDelegate_OutputDelegate8, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, float K2Node_Event_rate2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue2, float K2Node_Event_rate, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess3, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController4, bool CallFunc_IsValid_ReturnValue10, bool K2Node_CustomEvent_BoolValue4, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController5, delegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_IsValid_ReturnValue11, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4, delegate K2Node_CreateDelegate_OutputDelegate10, bool K2Node_CustomEvent_BoolValue3, float CallFunc_GetVehicleGoStraight_VehicleGoStraight, float CallFunc_FixGoStraight_OutMoveRightRate, float K2Node_Event_cdTime, bool CallFunc_IsValid_ReturnValue12, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController6, bool K2Node_CustomEvent_BoolValue2, float K2Node_CustomEvent_FloatValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController7, bool K2Node_CustomEvent_BoolValue, bool CallFunc_IsValid_ReturnValue13, delegate K2Node_CreateDelegate_OutputDelegate11, delegate K2Node_CreateDelegate_OutputDelegate12, bool CallFunc_IsValid_ReturnValue14, delegate K2Node_CreateDelegate_OutputDelegate13, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue15, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue16, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess5, bool CallFunc_GetActorEnableCollision_ReturnValue, bool CallFunc_IsValid_ReturnValue17, delegate K2Node_CreateDelegate_OutputDelegate14, bool CallFunc_IsValid_ReturnValue18);// 0x70644c4
	bool AxisMoveForwardFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	bool AxisMoveRightFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1]
	float Fuel;//[Offset: 0x494, Size: 0x4]
	float FuelMax;//[Offset: 0x498, Size: 0x4]
	float HP;//[Offset: 0x49c, Size: 0x4]
	float HPMax;//[Offset: 0x4a0, Size: 0x4]
	float OutMoveRightRate;//[Offset: 0x4a4, Size: 0x4]
	float RawSpeed;//[Offset: 0x4a8, Size: 0x4]
	enum SeatType;//[Offset: 0x4ac, Size: 0x1]
	byte LastWeaponSlot;//[Offset: 0x4ad, Size: 0x1]
	float UnmanedFuel;//[Offset: 0x4b0, Size: 0x4]
	float UnmanedFuelMax;//[Offset: 0x4b4, Size: 0x4]
	float UnmanedHP;//[Offset: 0x4b8, Size: 0x4]
	float UnmanedHPMax;//[Offset: 0x4bc, Size: 0x4]
	float UnmanedCallBackTime;//[Offset: 0x4c0, Size: 0x4]
	bool bShowUnmanedLowPowerTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraUAVVehicleBase.STExtraVehicleBase.Pawn.Actor.Object
	VehicleUserComponent* UAVVehicleUserComponent;//[Offset: 0x14b0, Size: 0x8]
	CameraComponent* CameraComponent;//[Offset: 0x14b8, Size: 0x8]
	SpringArmComponent* SpringArmComp;//[Offset: 0x14c0, Size: 0x8]
	FName CameraBoneName;//[Offset: 0x14c8, Size: 0x8]
	delegate OnVehicleUAVStateChanged;//[Offset: 0x14d8, Size: 0x10]
	float FPP_TargetArmLength;//[Offset: 0x14e8, Size: 0x4]
	float TPP_TargetArmLength;//[Offset: 0x14ec, Size: 0x4]
	float UAVFPPCameraFovPercent;//[Offset: 0x14f0, Size: 0x4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f4, Size: 0x1]
	enum UAVVehicleState;//[Offset: 0x14fc, Size: 0x1]
	float CoolDownTimeSpeed;//[Offset: 0x1500, Size: 0x4]
	float CoolDownTimeMin;//[Offset: 0x1504, Size: 0x4]
	float MaxOperateDistanceToPlayer;//[Offset: 0x1508, Size: 0x4]
	float MaxOperateFalloffDistance;//[Offset: 0x150c, Size: 0x4]
	float LowFuelWarning;//[Offset: 0x1510, Size: 0x4]
	float SkillRecallingTime;//[Offset: 0x1514, Size: 0x4]
	float SkillDisappearingTime;//[Offset: 0x1518, Size: 0x4]
	float SkillDestoryTime;//[Offset: 0x151c, Size: 0x4]
	float MaxCameraFOV;//[Offset: 0x153c, Size: 0x4]
	float MinCameraFOV;//[Offset: 0x1540, Size: 0x4]
	DriverAttachmentData[] DriverAttachmentDataList;//[Offset: 0x1548, Size: 0x10]
	void SetViewTargetAgainForOB();// 0x622a548
	void SetUAVVehicleState(enum NewState);// 0x622a4cc
	void SetFPPCameraFov(float factor);// 0x622a450
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x622a374
	void SendToServerUAVFPPCameraFovPercent(float percent);// 0x622a2c4
	void SendToServerIsFPP(bool IsFirstPerson);// 0x622a200
	void SendToServerClientInitOK();// 0x622a1a0
	void SendToServerChangeCameraMode(bool isFreeMode);// 0x622a0dc
	void SendToAllChangeCameraMode(bool isFreeMode);// 0x622a050
	void OnRep_UAVVehicleState();// 0x622a034
	void OnRep_IsFPPChanged();// 0x622a020
	void OnRep_FPPCameraFovChanged();// 0x622a00c
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x6229ee4
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x6229d20
	float GetDisToPlayer();// 0x6229cec
	bool CheckCanSwitchFPP();// 0x6229cac
<----------Generated by SSpawner v1.0.4---------->


Class: DriverAttachmentData
	FName AttachmentDataName;//[Offset: 0x0, Size: 0x8]
	StaticMesh* AttachmentMesh;//[Offset: 0x8, Size: 0x28]
	StaticMesh* AttachmentMeshLod;//[Offset: 0x30, Size: 0x28]
	FName AttachSocket;//[Offset: 0x58, Size: 0x8]
	float AttachDelayTime;//[Offset: 0x60, Size: 0x4]
	float DettachDelayTime;//[Offset: 0x64, Size: 0x4]
	StaticMeshComponent* AttachmentComponentInstance;//[Offset: 0x70, Size: 0x8]
	STExtraPlayerCharacter* AttachDriverCache;//[Offset: 0x78, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SurfBoardComp.ActorComponent.Object
	float SpeedThresholds;//[Offset: 0x110, Size: 0x4]
	float JumpImpulse;//[Offset: 0x114, Size: 0x4]
	float JumpImpulseBig;//[Offset: 0x118, Size: 0x4]
	float MaxStateTime_Jump;//[Offset: 0x11c, Size: 0x4]
	float RealStateTime_Jump;//[Offset: 0x120, Size: 0x4]
	float FloorInWaterLow;//[Offset: 0x124, Size: 0x4]
	float HalfInWaterLow;//[Offset: 0x128, Size: 0x4]
	float RealInWaterLow;//[Offset: 0x12c, Size: 0x4]
	float MaxHalfInWaterLowTime;//[Offset: 0x130, Size: 0x4]
	float JumpCeilingHeight;//[Offset: 0x134, Size: 0x4]
	float HalfJumpHeight;//[Offset: 0x138, Size: 0x4]
	float RealJumpHeight;//[Offset: 0x13c, Size: 0x4]
	float MaxInHalfJumpHeightTime;//[Offset: 0x140, Size: 0x4]
	float MaxSpeed;//[Offset: 0x144, Size: 0x4]
	float RealMaxSpeed;//[Offset: 0x148, Size: 0x4]
	float InWaterTolerance;//[Offset: 0x14c, Size: 0x4]
	int LeaveFlyPointNum;//[Offset: 0x15c, Size: 0x4]
	int PersistanceFrameThreshold;//[Offset: 0x160, Size: 0x4]
	float AutoExitHeightThreshold;//[Offset: 0x164, Size: 0x4]
	float HitTestToSeaLevelBias;//[Offset: 0x168, Size: 0x4]
	enum SurfBoardState;//[Offset: 0x16c, Size: 0x1]
	void ServerSetSurfBoardState(enum InState);// 0x625c818
	void OnRep_SurfBoardState();// 0x625c804
	void ClientSetSurfBoardState(enum InState);// 0x625c754
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	void ClientResetToTransform();// 0x9f84450
	void ClientApplyVehicleImpulse(Vector ClientApplyVehicleImpulse_param1);// 0x9f84450
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x17c0, Size: 0x8]
	void OnClientVehicleHealthStateChangedToDestory();// 0x70644c4
	void CreateDMI();// 0x70644c4
	void SetDMIParam(MaterialInstanceDynamic* Dim, FName Name, float Value, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void UpdateExhaustFx(FName ExhaustName, int Temp_int_Array_Index_Variable, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, ParticleSoftWrapperArray CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, ParticleSoftWrapper CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, CustomParticleSystemComponent* CallFunc_SpawnCustomEmitterAttached_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void OnEngineStart();// 0x70644c4
	void OnEngineStop();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void OnSetTailLightValue(float LightValue);// 0x70644c4
	void OnBoostingChanged();// 0x70644c4
	void VehicleMeshChanged();// 0x70644c4
	void BPPlayOverlapDamageCameraShake();// 0x70644c4
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x70644c4
	void AdvanceVehicleMeshChanged();// 0x70644c4
	void ExecuteUbergraph_BP_STExtraWheeledVehicle(int EntryPoint, FName CallFunc_Conv_StringToName_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, float K2Node_Event_LightValue, bool CallFunc_IsDedicatedServer_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, CameraShake* CallFunc_PlayCameraShake_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor* K2Node_Event_OtherActor, VehicleAdvanceAvatarComponent* CallFunc_GetVehicleAdvanceAvatar_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetTailLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFFPLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue2, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue3, MaterialInstanceDynamic* CallFunc_GetFFPLightDIM_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue2);// 0x70644c4
	BP_VehicleMusic_C* BP_VehicleMusic;//[Offset: 0x17c8, Size: 0x8]
	WheeledVehicleProtectionComponent* VehicleProtection;//[Offset: 0x17d0, Size: 0x8]
	BP_VehicleShowFrameComp_C* BP_VehicleShowFrameComp;//[Offset: 0x17d8, Size: 0x8]
	VehicleAvatarComponent_BP_C* VehicleAvatarComponent_BP;//[Offset: 0x17e0, Size: 0x8]
	CameraComponent* Camera;//[Offset: 0x17e8, Size: 0x8]
	VehicleSpringArmComponent* VehicleSpringArm;//[Offset: 0x17f0, Size: 0x8]
	bool IsPlayingEngineAk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f8, Size: 0x1]
	FName TailLightParamName;//[Offset: 0x1800, Size: 0x8]
	FName FrontLightParamName;//[Offset: 0x1808, Size: 0x8]
	FName FPPBoostLightParamName;//[Offset: 0x1810, Size: 0x8]
	bool bEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1818, Size: 0x1]
	float LastOverlapShakeTime;//[Offset: 0x181c, Size: 0x4]
	float OverlapShakeInterval;//[Offset: 0x1820, Size: 0x4]
	bool bLobbyShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1824, Size: 0x1]
	bool bInvincibleProtect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1825, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_VehicleMusic_C.VehicleMusicComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleMusicComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnSongChanged;//[Offset: 0x1d8, Size: 0x10]
	AkAudioEvent* AudioEventPause;//[Offset: 0x1e8, Size: 0x28]
	AkAudioEvent* AudioEventResume;//[Offset: 0x210, Size: 0x28]
	AkAudioEvent*[] ControlEvents;//[Offset: 0x238, Size: 0x10]
	STExtraVehicleBase* Vehicle;//[Offset: 0x248, Size: 0x8]
	float ComponentTickInterval;//[Offset: 0x2c8, Size: 0x4]
	bool bVehicleMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	bool bEnableAvatarMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd, Size: 0x1]
	int ServerPlayingAvatarMusicID;//[Offset: 0x2d0, Size: 0x4]
	bool bServerPlayState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bClientPlayState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	<int,SongInfo> DefaultMusicInfoMap;//[Offset: 0x3b0, Size: 0x50]
	<int,SongInfo> AvatarMusicInfoMap;//[Offset: 0x410, Size: 0x50]
	bool bIsCurrentDefaultMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x485, Size: 0x1]
	void SyncAvatarMusicIDClientToServer(int ClientPlayMusicID);// 0x6313bb0
	void StopCurrentMusic();// 0x6313b9c
	void StartPlayVehicleMusic(bool bIsDefault);// 0x6313b18
	void SetDefaultMusicPlayState(bool bDefaultMusicEnabled);// 0x6313a94
	void RequirePlayOrPause(bool InPlay);// 0x63139d0
	void PrevSong();// 0x63139bc
	void PlayOrPause();// 0x63139a8
	void OnSongChangedDelegate__DelegateSignature();// 0x70644c4
	void OnRep_ServerPlayState();// 0x6313994
	void OnRep_ServerPlayingAvatarMusicID();// 0x6313980
	void OnDefaultMusicLoaded(int MusicID);// 0x6313904
	void OnCurrentMusicFinished();// 0x63138f0
	void OnAvatarMusicLoaded(int MusicID);// 0x6313874
	void NextSong();// 0x6313860
	void LoadAvatarMusicInfo(int MusicID);// 0x70644c4
	bool IsPlaying();// 0x6313828
	void InitDefaultMusicList(out const SongInfo[] InSongs);// 0x6313784
	void InitAvatarMusicList(out const SongInfo[] InSongs);// 0x63136e0
	FString GetSongName(int InSongID);// 0x63135ec
	bool CanPlayMusic();// 0x63135b4
	void CallbackLoadedPauseEvent();// 0x63135a0
	void AsyncPlayMusic(int MusicID);// 0x6313524
<----------Generated by SSpawner v1.0.4---------->


Class: SongInfo
	int SongID;//[Offset: 0x0, Size: 0x4]
	FString SongName;//[Offset: 0x8, Size: 0x10]
	float SongDuration;//[Offset: 0x18, Size: 0x4]
	FString SongEvent;//[Offset: 0x20, Size: 0x10]
	SoftObjectPath SongEventObject;//[Offset: 0x30, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: WheeledVehicleProtectionComponent.VehicleProtectionComponentBase.VehicleComponent.LuaActorComponent.ActorComponent.Object
	bool bEnablePreventFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleProtectionComponentBase.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnProtectionEnable;//[Offset: 0x1d8, Size: 0x10]
	delegate OnActorHit;//[Offset: 0x1e8, Size: 0x10]
	bool bEnableProtection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	bool bUsePhysicsOBBOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 0x1]
	Vector OBBScale;//[Offset: 0x1fc, Size: 0xc]
	byte QueryShapeType;//[Offset: 0x208, Size: 0x1]
	bool bCacheValidTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	float ValidHeight;//[Offset: 0x27c, Size: 0x4]
	float DistBetweenValidTrans;//[Offset: 0x280, Size: 0x4]
	float DistSqBetweenValidTrans;//[Offset: 0x284, Size: 0x4]
	int NumValidTrans;//[Offset: 0x288, Size: 0x4]
	Vector ValidLocationOffset;//[Offset: 0x28c, Size: 0xc]
	float ValidAngle;//[Offset: 0x298, Size: 0x4]
	bool bEnablePreventPene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	byte[] IgnoredObjectTypesForPene;//[Offset: 0x2b8, Size: 0x10]
	bool bPreventPene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	delegate OnResolveStuck;//[Offset: 0x2d8, Size: 0x10]
	bool bEnableResolveStuck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	bool bEnableResolveStuckOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 0x1]
	float CheckStuckInterval;//[Offset: 0x2ec, Size: 0x4]
	float StuckDuration;//[Offset: 0x2f0, Size: 0x4]
	float StuckTolerance;//[Offset: 0x2f4, Size: 0x4]
	void SetValidTransform(Vector NewCenter, Transform NewValidTransform);// 0x631c348
	void SetQueryShapeType(byte InQueryBodyType);// 0x631c2cc
	void ResolveStuckDelegate__DelegateSignature(bool Success);// 0x70644c4
	void ResetValidTransform();// 0x631c2b8
	void ProtectoinEnableDelegate__DelegateSignature(bool Enable);// 0x70644c4
	bool IsProtectionEnabled();// 0x631c280
	void HandleActorHitFromClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x631c100
	void HandleActorHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x631bf80
	void EnableProtection(bool InEnable);// 0x631bef4
	void ClearValidTransform();// 0x631bec8
	void CacheValidTransform(bool InCache);// 0x631be48
<----------Generated by SSpawner v1.0.4---------->


Class: BP_VehicleShowFrameComp_C.ShowActorFrameComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ShowActorFrameComponent.SceneComponent.ActorComponent.Object
	FrameUITransformData FrameUITransformData;//[Offset: 0x2d0, Size: 0x40]
	MaterialBillboardComponent* FrameUI;//[Offset: 0x310, Size: 0x8]
	int TranslucentSortPriority;//[Offset: 0x318, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x320, Size: 0x8]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x328, Size: 0x8]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x338, Size: 0x8]
	FString FrameDetailsUIPath;//[Offset: 0x340, Size: 0x10]
	FString FrameDetailsParentWidgetName;//[Offset: 0x350, Size: 0x10]
	FString FrameDetailsParentOuterName;//[Offset: 0x360, Size: 0x10]
	FString BPFunction_WhenWidgetCreate;//[Offset: 0x370, Size: 0x10]
	FString BPFunction_WhenWidgetDestroy;//[Offset: 0x380, Size: 0x10]
	ActorPositionWidget* DetailsWidget;//[Offset: 0x390, Size: 0x8]
	ActorPositionWidget* GetDetailsWidget();// 0x606670c
	void DestroyFrameUI();// 0x60666f8
	bool CreateFrameUI(int ParamIfNecessary);// 0x6066668
<----------Generated by SSpawner v1.0.4---------->


Class: FrameUITransformData
	Transform Offset;//[Offset: 0x0, Size: 0x30]
	float BaseSizeX;//[Offset: 0x30, Size: 0x4]
	float BaseSizeY;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x770, Size: 0x10]
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x8d8a7d8
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x8d8a628
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 0x8]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float BaseSizeX;//[Offset: 0x14, Size: 0x4]
	float BaseSizeY;//[Offset: 0x18, Size: 0x4]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ActorPositionWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* MyCanvasPanelSlot;//[Offset: 0x490, Size: 0x8]
	TextBlock* TextBlockDist;//[Offset: 0x498, Size: 0x8]
	Actor* AttachedActor;//[Offset: 0x4a0, Size: 0x8]
	Vector4 Limit;//[Offset: 0x4b0, Size: 0x10]
	Vector2D UIOffset;//[Offset: 0x4c0, Size: 0x8]
	Vector LocOffset;//[Offset: 0x4c8, Size: 0xc]
	bool BNeedShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]
	float AlphaBegin;//[Offset: 0x4d8, Size: 0x4]
	float AlphaEnd;//[Offset: 0x4dc, Size: 0x4]
	float AlphaStep;//[Offset: 0x4e0, Size: 0x4]
	float AlphaBeginDistance;//[Offset: 0x4e4, Size: 0x4]
	float AlphaEndDistance;//[Offset: 0x4e8, Size: 0x4]
	float ScaleBegin;//[Offset: 0x4ec, Size: 0x4]
	float ScaleEnd;//[Offset: 0x4f0, Size: 0x4]
	float ScaleStep;//[Offset: 0x4f4, Size: 0x4]
	float ScaleBeginDistance;//[Offset: 0x4f8, Size: 0x4]
	float ScaleEndDistance;//[Offset: 0x4fc, Size: 0x4]
	float MaxShowDistance;//[Offset: 0x500, Size: 0x4]
	int TargetDistance;//[Offset: 0x504, Size: 0x4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x518, Size: 0x8]
	void ShowArrowAngle(bool Visible, float Angle);// 0x70644c4
	void SetCurrentWidgetVisible(bool Visible);// 0x70644c4
	void SetActorImage(Texture2D* Texture);// 0x70644c4
	void PostAttachmentChanged();// 0x70644c4
	void DetachFromActor(Actor* InActor);// 0x5d30e14
	void AttachToActor(Actor* InActor);// 0x5d30d98
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAvatarComponent_BP_C.VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x720, Size: 0x8]
	FName GetReflectionCubeName_Lobby();// 0x70644c4
	void TryAddLightEffect(BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, BackpackVehicleAvatarHandle* K2Node_DynamicCast_AsBackpack_Vehicle_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, class BackpackVehicleAvatarHandle CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue);// 0x70644c4
	FString GetItemAvatarHandlePath(int ItemId, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetPath_ReturnValue, FString CallFunc_GetPath_ReturnValue2, bool CallFunc_IsBattleItemHandlePathExist_ReturnValue);// 0x70644c4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId, bool NewLocalVar, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, bool CallFunc_IsLobbyAvatar_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLobbyAvatar_ReturnValue2, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle2, bool K2Node_DynamicCast_bSuccess2);// 0x70644c4
	void OnLoaded_F4972C3D46F3CFC0E0742D8E88D4527B(Object* Loaded);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void VehicleAvatarEquiped();// 0x70644c4
	void OnAddLightEffect(ParticleSystem* LightEffect);// 0x70644c4
	void VehicleFPPMeshLoaded();// 0x70644c4
	void LoadedBrokenMat();// 0x70644c4
	void ClearVehicleLightEffect();// 0x70644c4
	void BPBeginPlay();// 0x70644c4
	void ExecuteUbergraph_VehicleAvatarComponent_BP(int EntryPoint, Object* K2Node_CustomEvent_Loaded, delegate K2Node_CreateDelegate_OutputDelegate, Object* Temp_object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, ParticleSystem* K2Node_CustomEvent_LightEffect, delegate K2Node_CreateDelegate_OutputDelegate4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_EqualEqual_SoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x70644c4
	ParticleSystem* CurLightEffect;//[Offset: 0x728, Size: 0x28]
	ParticleSystemComponent* LightEffect;//[Offset: 0x750, Size: 0x8]
	bool VehicleBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: UAELoadedClassManager.Object
	<FString,BPTable*> BPTableMap;//[Offset: 0x28, Size: 0x50]
	<FString,BPTable*> BPTableMap_Mod;//[Offset: 0x78, Size: 0x50]
	<int,FString> BPTableNameMap;//[Offset: 0xc8, Size: 0x50]
	FString LoadedClassManagerClassName;//[Offset: 0x118, Size: 0x10]
	<Object*,SoftClassPath> AsyncLoadClassDict;//[Offset: 0x2f0, Size: 0x50]
	void InitTableData();// 0x64a7694
	void InitialModTableItemMap();// 0x64a7678
	void InitBPTableMap_Mod();// 0x70644c4
	void InitBPTableMap();// 0x70644c4
	void HandleTableModNameChanged(FString InModName);// 0x64a75d0
	FString GetWrapperPath(FString BPTableName, int ID);// 0x64a7478
	class Object GetWrapperClass(FString BPTableName, int ID);// 0x64a7380
	FString GetPath(FString BPTableName, int ID, bool IsLobby, bool bForceLobby);// 0x64a71a0
	Object* GetObject(FString BPTableName, int ID, Object* Outer, bool IsLobby, bool IsLowDevice);// 0x64a6fe4
	class Object GetCustom1Class(FString BPTableName, int ID);// 0x64a6eec
	class Object GetClass(FString BPTableName, int ID, bool IsLobby, bool IsLowDevice);// 0x64a6d6c
	FString GetBPTableName(int Type);// 0x64a6c78
	void GetAssetByAssetReferenceAsync(SoftObjectPath AssetReference, delegate AssetLoadSuccessDelegate);// 0x64a6ae0
	static UAELoadedClassManager* Get();// 0x64a6aac
	BPTable* CreateAndAddBPTable_Mod(FString BPTableName);// 0x64a69f4
	BPTable* CreateAndAddBPTable(FString BPTableName);// 0x64a693c
	void ClearModTableItemMap();// 0x64a6920
	void ClearBPTable_Mod();// 0x64a690c
	void ClearBPTable();// 0x64a68f8
	void ClearAssetByAssetReferenceAsync(delegate AssetLoadSuccessDelegate);// 0x64a685c
	void ClearAllData();// 0x64a6848
<----------Generated by SSpawner v1.0.4---------->


Class: BPTable.Object
	FString BPTableName;//[Offset: 0x28, Size: 0x10]
	<int,BPTableItem> BPTableItemMap;//[Offset: 0x38, Size: 0x50]
	<int,BPTableItem> BPTableItemMap_Mod;//[Offset: 0x88, Size: 0x50]
	FString GetWrapperPath(int ID);// 0x64a60c4
	class Object GetWrapperClass(int ID);// 0x64a6038
	FString GetPath(int ID, bool IsLobby, bool bForceLobby);// 0x64a5ebc
	Object* GetObject(int ID, Object* Outer, bool IsLobby, bool IsLowDevice);// 0x64a5d6c
	Object* GetModObject(int ID, Object* Outer, bool IsLobby);// 0x64a5c60
	class Object GetModClass(int ID, bool IsLobby);// 0x64a5b90
	class Object GetCustom1Class(int ID);// 0x64a5b04
	class Object GetClass(int ID, bool IsLobby, bool IsLowDevice);// 0x64a59f0
	void ConvertPath(int ID);// 0x64a5974
<----------Generated by SSpawner v1.0.4---------->


Class: BPTableItem
	int ID;//[Offset: 0x0, Size: 0x4]
	FString Name;//[Offset: 0x8, Size: 0x10]
	FString Path;//[Offset: 0x18, Size: 0x10]
	FString LobbyPath;//[Offset: 0x28, Size: 0x10]
	FString WrapperPath;//[Offset: 0x38, Size: 0x10]
	FString Custom1;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DecalBakingActorMgr.DecalBakingActor.Actor.Object
	DecalBakingRTCache[] DecalBakingRTCacheList;//[Offset: 0x448, Size: 0x10]
	DecalBakingRTCache[] DecalBakingRTCacheListII;//[Offset: 0x458, Size: 0x10]
	float RTCacheLifeTime;//[Offset: 0x468, Size: 0x4]
	int MaxRTCacheCount;//[Offset: 0x46c, Size: 0x4]
	float RTCacheLifeTimeII;//[Offset: 0x470, Size: 0x4]
	int MaxRTCacheCountII;//[Offset: 0x474, Size: 0x4]
	float TickUpdateCacheInterval;//[Offset: 0x478, Size: 0x4]
	void ResetDecalBakingRTCacheParam();// 0x5e79608
	static DecalBakingActorMgr* GetWorldInstance(Object* WorldContextObject);// 0x5e7958c
	Vector GetSpawanDBPActorLocationByDiyData(out const DIYData InDIYData, SceneComponent* InSceneComponent);// 0x5e7947c
	DecalParameter[] GetRelativeDecalParameterFromWorld(SceneComponent* InSceneComponent);// 0x5e79388
	static DecalBakingActorMgr* GetInstance();// 0x5e79354
	DecalParameter[] GetDecalParameterFromWorld(Actor* InActor);// 0x5e79260
	DecalParameter GetDecalParameter(SceneComponent* InSceneComponent, DecalBakingParameterComponent* InComponent);// 0x5e7916c
	TextureRenderTarget2D* CreateNewTextureRenderTarget2D(int X, int Y);// 0x5e790a8
	DecalParameter ConvertDIYDataToDecalParam(out const DIYData InDIYData);// 0x5e78fa8
	DIYData ConvertDecalParamToDIYData(SceneComponent* InSceneComponent, DecalBakingParameterActor* InDBPActor, bool ZProjection);// 0x5e78e90
	void ClearDecalBackingRTCacheII(enum InType, FString PlayerUID);// 0x5e78d1c
	void ClearDecalBackingRTCache(enum InType, FString PlayerUID, bool bCacheII);// 0x5e78b5c
<----------Generated by SSpawner v1.0.4---------->


Class: DecalBakingActor.Actor.Object
	uint32 MaxDecalProcessPerFame;//[Offset: 0x3f4, Size: 0x4]
	DecalBakingRequest[] DecalBakeRequests;//[Offset: 0x3f8, Size: 0x10]
	void SetMaxDecalProcessPerFame(int InValue);// 0x8ccd944
	void OnBakingFinished(TextureRenderTarget2D* InRenderTarget);// 0x8ccd8c0
	int GetMaxDecalProcessPerFame();// 0x8ccd8a4
	int FindDecalBakingRequestID(TextureRenderTarget2D* RenderTarget);// 0x8ccd818
	void EndDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x8ccd79c
	void DoCompression(TextureRenderTarget2D* InRenderTarget);// 0x8ccd720
	Texture* CompressTexture(TextureRenderTarget2D* InRenderTarget, bool bInRGBA, bool bUsePunchthroughAlpha, bool bUseOptimizeOpaque);// 0x8ccd5c0
	void CancelDecalBakingRequest(int RequestID);// 0x8ccd544
	void BeginDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x8ccd4c8
	int BakeDecalForStaticMesh(TextureRenderTarget2D* RenderTarget, StaticMesh* StaticMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x8ccd2c0
	int BakeDecalForSkeletalMesh(TextureRenderTarget2D* RenderTarget, SkeletalMesh* SkeletalMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x8ccd0b8
<----------Generated by SSpawner v1.0.4---------->


Class: DecalBakingRTCache
	enum DecalBakingType;//[Offset: 0x0, Size: 0x1]
	FString PlayerUID;//[Offset: 0x8, Size: 0x10]
	int WeaponAvatarID;//[Offset: 0x18, Size: 0x4]
	TextureRenderTarget2D* TextureRenderTarget;//[Offset: 0x20, Size: 0x8]
	float LastActiveTime;//[Offset: 0x28, Size: 0x4]
	bool bMainRoleRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: DIYData
	Texture2D* Texture;//[Offset: 0x0, Size: 0x8]
	LinearColor Color;//[Offset: 0x8, Size: 0x10]
	Vector2D Scale;//[Offset: 0x18, Size: 0x8]
	Vector2D Offset;//[Offset: 0x20, Size: 0x8]
	float Rotation;//[Offset: 0x28, Size: 0x4]
	enum Direction;//[Offset: 0x2c, Size: 0x1]
	LinearColor UVClip;//[Offset: 0x30, Size: 0x10]
	LinearColor UVInfo;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DecalBakingParameterComponent.SceneComponent.ActorComponent.Object
	Texture2D* DecalTexture;//[Offset: 0x2d0, Size: 0x8]
	Vector DecalSize;//[Offset: 0x2d8, Size: 0xc]
	Vector4 UVScaleBias;//[Offset: 0x2f0, Size: 0x10]
	LinearColor TintColor;//[Offset: 0x300, Size: 0x10]
	Vector4 CropUVScaleBias;//[Offset: 0x310, Size: 0x10]
	float CropRotation;//[Offset: 0x320, Size: 0x4]
	bool bEnableDepthCompare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	LinearColor GetUVScaleBias();// 0x8cce334
	BoxSphereBounds GetDecalBounds();// 0x8cce2e8
	LinearColor GetCropUVScaleBias();// 0x8cce2b8
<----------Generated by SSpawner v1.0.4---------->


Class: DecalBakingParameterActor.Actor.Object
	DecalBakingParameterComponent* DecalBakingParam;//[Offset: 0x3f8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_WeaponScopeFOV_type
	FString ScopeGroupID_6_49CF3E400C41B18D667A9238018BF244;//[Offset: 0x0, Size: 0x10]
	float ScopeFov_f_7_6553D3C0033D7BFF701FD78D06949766;//[Offset: 0x10, Size: 0x4]
	int AimedAngle_8_3E02AB0072EDDA440E9C5E950B8A5745;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STR_CameraSetting
	float TargetArmLength_30_2007ABB34694949F7A9AC4BB2C7AE57D;//[Offset: 0x0, Size: 0x4]
	float LagSpeed_34_CBFA29604D40F5BC431D969F9216FCF7;//[Offset: 0x4, Size: 0x4]
	Vector SocketOffset_26_FD34F6424351327A3F447882FEBC198D;//[Offset: 0x8, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterBoundCapsuleComonent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float LocalViewProneBoundsExpandAmount;//[Offset: 0x79c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DynamicOptimizeCharacterComps_C.DynamicOptimizeActorComponents.LuaActorComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BP_CharacterCarryBackComp_C.STCharacterCarryBackComp.LuaActorComponent.ActorComponent.Object
	void FindFreedomLocationAndRotation(Character* Character, out bool bValid, out Vector Location, out Rotator Rotation, Actor*[] Temp_object_Variable, Vector CallFunc_GetActorForwardVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_GetActorRightVector_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue3, Rotator CallFunc_Conv_VectorToRotator_ReturnValue4, Vector CallFunc_GetActorForwardVector_ReturnValue3, Vector CallFunc_K2_GetActorLocation_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, Rotator K2Node_Select_Default, int Temp_int_Loop_Counter_Variable, Vector CallFunc_Array_Get_Item, Vector CallFunc_Multiply_VectorVector_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_BoxTraceSingle_OutHit, bool CallFunc_BoxTraceSingle_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x70644c4
	Vector[] PutDownLocationOffset;//[Offset: 0x2b0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BuildSystemComp_BP_C.STBuildSystemComponent.BuildSystemComponent.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4a0, Size: 0x8]
	bool IsOverlayBuildHeightValid(Vector BuildLocation, float OverlayMaxHeightFromGround, Vector CallFunc_Add_VectorVector_ReturnValue, int Temp_int_Array_Index_Variable, Actor*[] Temp_object_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, byte[] K2Node_MakeArray_Array, HitResult[] CallFunc_LineTraceMultiForObjects_OutHits, bool CallFunc_LineTraceMultiForObjects_ReturnValue, int CallFunc_Array_Length_ReturnValue, HitResult CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_IsValid_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x70644c4
	bool CheckPlacementWithPitch(out HitResult Hit, out Vector OutLocation, out Rotator OutRotation, out Vector BoxExtent, out BuildingData CurBuildData, float ErrorTolerance, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_IsActorProhibited_ReturnValue, ConstructableActorBase_C* K2Node_DynamicCast_AsConstructable_Actor_Base, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_DegAcos_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue);// 0x70644c4
	Rotator GetNewDestRotation(Rotator DestRotation, Actor* CacheActor, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, Rotator CallFunc_MakeRotator_ReturnValue);// 0x70644c4
	bool IsLocationValid(Vector Location, float MaxBuildDist, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSizeSquared_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x70644c4
	Vector GetNewDestLocation(Vector DestLocation, Actor* CacheActor, Vector ViewLocation, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FMax_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x70644c4
	bool BPProcessNothingHitTrace(Vector DestLocation, Rotator DestRotation, float MaxBuildDist, int buildIndex, out Vector OutLocation, Vector TempOutLocation, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetCDOByIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsLocationValid_ReturnValue, Actor*[] Temp_object_Variable, FString CallFunc_Conv_VectorToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, byte[] K2Node_MakeArray_Array, HitResult[] CallFunc_LineTraceMultiForObjects_OutHits, bool CallFunc_LineTraceMultiForObjects_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BuildingGridComponent* K2Node_DynamicCast_AsBuilding_Grid_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CheckShouldSkipByVisibility_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsActorProhibited_ReturnValue, bool CallFunc_DoesImplementInterface_ReturnValue, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x70644c4
	bool BPCheckPlacement(out HitResult[] HitArray, Vector BoxExtent, BuildingData CurBuildData, Rotator ControlRot, Vector ViewLocation, out Vector OutLocation, out bool bHasForbiddenObject, bool TempHasForbiddenObject, Vector TempDestLcation, Vector TempOutLocation, int Temp_int_Array_Index_Variable, Vector CallFunc_GetForwardVector_ReturnValue, HitResult CallFunc_Array_Get_Item, Vector CallFunc_Normal_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_IsActorProhibited_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_CheckShouldSkipByVisibility_ReturnValue, Actor*[] Temp_object_Variable, int CallFunc_Subtract_IntInt_ReturnValue2, Actor* CallFunc_GetCDOByIndex_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue3, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, int Temp_int_Loop_Counter_Variable, float CallFunc_VSizeSquared_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte[] K2Node_MakeArray_Array, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit2, bool CallFunc_BreakHitResult_bInitialOverlap2, float CallFunc_BreakHitResult_Time2, float CallFunc_BreakHitResult_Distance2, Vector CallFunc_BreakHitResult_Location2, Vector CallFunc_BreakHitResult_ImpactPoint2, Vector CallFunc_BreakHitResult_Normal2, Vector CallFunc_BreakHitResult_ImpactNormal2, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat2, Actor* CallFunc_BreakHitResult_HitActor2, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent2, FName CallFunc_BreakHitResult_HitBoneName2, int CallFunc_BreakHitResult_HitItem2, int CallFunc_BreakHitResult_FaceIndex2, Vector CallFunc_BreakHitResult_TraceStart2, Vector CallFunc_BreakHitResult_TraceEnd2, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Conv_VectorToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_VectorToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x70644c4
	bool ProccessNothingHitTraceOverlap(out Vector DestLocation, out Rotator DestRotation, float MaxBuildDist, out Vector OutLocation, int buildIndex, out Vector ViewLocation, Vector TempOutLocation, int Temp_int_Array_Index_Variable, Actor* CallFunc_GetCDOByIndex_ReturnValue, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_GetNewDestRotation_ReturnValue, bool CallFunc_IsLocationValid_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Actor* CallFunc_GetCDOByIndex_ReturnValue2, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Actor*[] Temp_object_Variable, byte[] K2Node_MakeArray_Array, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_GetNewDestLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, HitResult[] CallFunc_BoxTraceMultiForObjects_OutHits, bool CallFunc_BoxTraceMultiForObjects_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_CheckShouldSkipByVisibility_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsActorProhibited_ReturnValue, bool CallFunc_DoesImplementInterface_ReturnValue, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2);// 0x70644c4
	bool CheckPlacementOverlap(out HitResult[] HitArray, out Vector OutLocation, out Vector BoxExtent, out BuildingData CurBuildData, out Rotator BuildRotation, out Rotator ControlRot, out Vector ViewLocation, out bool HasForbiddenObject, bool TempHasForbiddenObject, Vector TempDestLcation, Vector TempOutLocation, Vector CallFunc_BPCheckPlacement_OutLocation, bool CallFunc_BPCheckPlacement_bHasForbiddenObject, bool CallFunc_BPCheckPlacement_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, HitResult CallFunc_Array_Get_Item, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_CheckShouldSkipByVisibility_ReturnValue, bool CallFunc_IsActorProhibited_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, int Temp_int_Loop_Counter_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, Actor* CallFunc_GetCDOByIndex_ReturnValue, Rotator CallFunc_GetNewDestRotation_ReturnValue, bool CallFunc_IsLocationValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue3, Actor* CallFunc_GetCDOByIndex_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocationValid_ReturnValue2, int CallFunc_Subtract_IntInt_ReturnValue4, Actor* CallFunc_GetCDOByIndex_ReturnValue3, bool CallFunc_IsValid_ReturnValue2, byte[] K2Node_MakeArray_Array, Vector CallFunc_GetNewDestLocation_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Actor*[] Temp_object_Variable, FString CallFunc_Conv_VectorToString_ReturnValue2, HitResult CallFunc_BoxTraceSingleForObjects_OutHit, bool CallFunc_BoxTraceSingleForObjects_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_BreakHitResult_bBlockingHit2, bool CallFunc_BreakHitResult_bInitialOverlap2, float CallFunc_BreakHitResult_Time2, float CallFunc_BreakHitResult_Distance2, Vector CallFunc_BreakHitResult_Location2, Vector CallFunc_BreakHitResult_ImpactPoint2, Vector CallFunc_BreakHitResult_Normal2, Vector CallFunc_BreakHitResult_ImpactNormal2, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat2, Actor* CallFunc_BreakHitResult_HitActor2, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent2, FName CallFunc_BreakHitResult_HitBoneName2, int CallFunc_BreakHitResult_HitItem2, int CallFunc_BreakHitResult_FaceIndex2, Vector CallFunc_BreakHitResult_TraceStart2, Vector CallFunc_BreakHitResult_TraceEnd2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsActorProhibited_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x70644c4
	bool ShouldEnableDoubleTouchMode(bool CallFunc_NotEqual_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	bool IsCanPlaceBuildingBP(int InBuildID, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BuildingActorTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, byte CallFunc_GetRole_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, BackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, int CallFunc_GetItemCountByItemSpecialID_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void InitBuildDataFromDataTable();// 0x70644c4
	void OnConstructionComplete_Event(bool bWasSuccessful, byte ConstructionType, bool bIsFromServer);// 0x70644c4
	void OnInsufficientMaterial_Event(byte BuildType);// 0x70644c4
	void RegisterUIEvents();// 0x70644c4
	void CustomEvent(float FloatValue);// 0x70644c4
	void UpdateParameters();// 0x70644c4
	void CustomEvent(int IntValue);// 0x70644c4
	void CustomEvent(int IntValue);// 0x70644c4
	void CustomEvent(float FloatValue);// 0x70644c4
	void LuaReceiveBeginPlay();// 0x70644c4
	void TryAttachToMoveablePlatform(Actor* SpawnedBuilding, Vector BuildLocation);// 0x70644c4
	void ExecuteUbergraph_BuildSystemComp_BP(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable2, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int Temp_int_Array_Index_Variable2, int Temp_int_Array_Index_Variable3, bool Temp_bool_Variable2, bool CallFunc_GetIsHasInitData_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, UAELoadedClassManager* CallFunc_Get_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue2, BP_STRUCT_BuildingActorTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue, BuildingConsumeData K2Node_MakeStruct_BuildingConsumeData, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetTableData_String_ReturnValue, int Temp_int_Loop_Counter_Variable3, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue3, byte[] K2Node_MakeArray_Array, byte[] K2Node_MakeArray_Array2, bool K2Node_CustomEvent_bWasSuccessful, byte K2Node_CustomEvent_ConstructionType, bool K2Node_CustomEvent_bIsFromServer, byte[] K2Node_Select_Default, BuildingData K2Node_MakeStruct_BuildingData, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select2_Default, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Conv_BoolToString_ReturnValue, byte K2Node_CustomEvent_BuildType, FString CallFunc_Concat_StrStr_ReturnValue4, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float K2Node_CustomEvent_FloatValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate3, int K2Node_CustomEvent_IntValue2, float CallFunc_Conv_IntToFloat_ReturnValue4, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, int K2Node_CustomEvent_IntValue, Controller* CallFunc_GetControllerSafety_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, float K2Node_CustomEvent_FloatValue, bool CallFunc_IsEditor_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess4, UTSkillManagerComponent* CallFunc_GetSkillManager_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate4, UAESkillManagerComponent* K2Node_DynamicCast_AsUAESkill_Manager_Component, bool K2Node_DynamicCast_bSuccess5, int[] CallFunc_GetCurAllSkillIDs_ReturnValue, int CallFunc_Array_Get_Item2, delegate K2Node_CreateDelegate_OutputDelegate5, int CallFunc_Array_Length_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess6, UTSkillManagerComponent* CallFunc_GetSkillManager_ReturnValue2, UAESkillManagerComponent* K2Node_DynamicCast_AsUAESkill_Manager_Component2, bool K2Node_DynamicCast_bSuccess7, int[] CallFunc_GetCurAllSkillIDs_ReturnValue2, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, Actor* K2Node_Event_SpawnedBuilding, Vector K2Node_Event_BuildLocation, byte[] K2Node_MakeArray_Array3, bool CallFunc_IsValid_ReturnValue3, Actor*[] K2Node_MakeArray_Array4, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate6, Vector CallFunc_Add_VectorVector_ReturnValue2, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_ComponentHasTag_ReturnValue, bool CallFunc_IsValid_ReturnValue4);// 0x70644c4
	UAEDataTable* DataTable;//[Offset: 0x4a8, Size: 0x8]
	bool bPNHDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 0x1]
	bool bCPODebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 0x1]
	bool bOverlapPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b2, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: STBuildSystemComponent.BuildSystemComponent.LuaActorComponent.ActorComponent.Object
	delegate OnInsufficientMaterial;//[Offset: 0x440, Size: 0x10]
	delegate OnBuildSuccess;//[Offset: 0x450, Size: 0x10]
	int CurrentUIBuildingID;//[Offset: 0x460, Size: 0x4]
	class ConstructBot* ConstructBotTemplate;//[Offset: 0x468, Size: 0x8]
	bool hasConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	int MaxmumBuildingAllowed;//[Offset: 0x474, Size: 0x4]
	ConstructBot* ConstructBot;//[Offset: 0x478, Size: 0x8]
	STExtraPlayerController* CachedOwnerPlayerController;//[Offset: 0x480, Size: 0x8]
	STExtraBaseCharacter* OwnerPlayer;//[Offset: 0x490, Size: 0x8]
	void SpawnConstructBot();// 0x60d6ac8
	void SetCheatBuilding(bool IsCheat);// 0x60d6a44
	void SetBuildingConfig(const int Config);// 0x60d69c8
	void ServerSpawnConstructBot();// 0x60d6968
	void ServerDestroyConstructBot();// 0x60d6908
	void ServerCheckPlaceBuilding(int BuildingIndex, Vector BuildLocation, Rotator BuildRotation, uint32 InResult);// 0x60d6790
	void RestartConstructBot();// 0x70644c4
	void PlayerControllerReconnectedHandler();// 0x60d677c
	void OnUIInterfaceCreated();// 0x60d6768
	void OnLostConnectionHandler(UAEPlayerController* Controller, float DeltaTime);// 0x60d66a8
	void OnControllerBeginTouch(out const Vector2D ScreenPosition);// 0x60d6620
	void OnConnectionRestoredHandler(UAEPlayerController* Controller);// 0x60d659c
	void JoystickTouchBeginHandler(out const Vector2D ScreenPosition, int PointerIndex, bool IsBegin);// 0x60d6488
	bool IsCanPlaceBuilding(int InBuildID, byte _TYPE);// 0x60d63b4
	void InitializeComponent();// 0x60d6398
	void InitBuildDataFromDataTable();// 0x70644c4
	void HandleStopPlaceBuilding();// 0x60d637c
	void HandleStartPlaceBuilding();// 0x60d6360
	void HandleServerPlaceBuildingSuccess(Actor* BuiltActor, int SkillID);// 0x60d62a0
	PlayerController* GetOwnerPlayerController();// 0x60d6264
	STExtraPlayerController* GetExtraPlayerController();// 0x60d6230
	int GetCurrentBuildIDFromUI();// 0x60d61f4
	bool GetBuildingConsumeDataByID(int InBuildingID, out BuildingConsumeData OutBuildData);// 0x60d610c
	void DoSpawnConstructBot();// 0x60d60f8
	void DoShutdownConstructBot();// 0x60d60e4
	void DestroyConstructBot();// 0x60d60d0
	bool CustomizedCheck(out const BuildingData CurBuildData, out const Rotator DestRotation, out const Vector DestLocation);// 0x60d5f34
	void CheckPlaceBuilding();// 0x60d5f18
	void BindTouchEvents();// 0x60d5f04
	void BeginPlay();// 0x60d5ee8
	void AddBuildingConsumeData(BuildingConsumeData InData);// 0x60d5e48
<----------Generated by SSpawner v1.0.4---------->


Class: BuildSystemComponent.LuaActorComponent.ActorComponent.Object
	bool UseFixedDistanceBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]
	delegate OnConstructionComplete;//[Offset: 0x1d8, Size: 0x10]
	delegate OnDoubleClickMode2Event;//[Offset: 0x1e8, Size: 0x10]
	delegate OnDoubleClickMode2PercentEvent;//[Offset: 0x1f8, Size: 0x10]
	float MaxmumConstructingDistance;//[Offset: 0x208, Size: 0x4]
	int CurrentAvatarID;//[Offset: 0x20c, Size: 0x4]
	class SelectBuildActor* BuildingSelectorClass;//[Offset: 0x248, Size: 0x8]
	class SelectBuildActor* SelectBuildMeshClass;//[Offset: 0x250, Size: 0x8]
	float UpdateBuildEnableTimer;//[Offset: 0x258, Size: 0x4]
	float MinBuildDist;//[Offset: 0x25c, Size: 0x4]
	float GridGroundThreshold;//[Offset: 0x260, Size: 0x4]
	bool AIIsOpenAdsorb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	bool AIIsOpenLeftAndRightTry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 0x1]
	float GridGroundCheckDepth;//[Offset: 0x268, Size: 0x4]
	WorldGridData WorldGridData;//[Offset: 0x26c, Size: 0xc]
	bool bCanPlaceOnConstructableActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	int bIsFastPlacementMode;//[Offset: 0x27c, Size: 0x4]
	int Mode2PressTouchBuildIndex;//[Offset: 0x280, Size: 0x4]
	bool bIsStartPreBuildMode2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	Vector2D Mode2PreBuildPos;//[Offset: 0x288, Size: 0x8]
	float CurrentDoubleClickDuration;//[Offset: 0x290, Size: 0x4]
	float ValidDoubleClickDuration;//[Offset: 0x294, Size: 0x4]
	float ValidDoubleClickInterval;//[Offset: 0x298, Size: 0x4]
	float ValidDoubleClickDistance;//[Offset: 0x29c, Size: 0x4]
	bool bSouldSkipOwningPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bNativeTouchActorBuildEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	bool bNativeDoubleCkickBuildEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1]
	<int,class SelectBuildActor> ActorSelectorMap;//[Offset: 0x2a8, Size: 0x50]
	class Object[] SkippingObjects;//[Offset: 0x2f8, Size: 0x10]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bPickLocationDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	class Object[] FilterTemplates;//[Offset: 0x310, Size: 0x10]
	class Object[] ActorsShouldSkipVisiblityCheck;//[Offset: 0x320, Size: 0x10]
	byte BuildingGridChannel;//[Offset: 0x330, Size: 0x1]
	float MaxCanAdsorbAngle;//[Offset: 0x334, Size: 0x4]
	float SnappingDistance;//[Offset: 0x338, Size: 0x4]
	float SnappingDetectRadius;//[Offset: 0x33c, Size: 0x4]
	float AIMaxCanRotateAngle;//[Offset: 0x340, Size: 0x4]
	bool bCheckPlaceActorPosSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	float FloatErrorTolerance;//[Offset: 0x348, Size: 0x4]
	SelectBuildActor* SelectBuildActor;//[Offset: 0x350, Size: 0x8]
	int CachedCDOIndex;//[Offset: 0x378, Size: 0x4]
	Actor* CachedCDOActor;//[Offset: 0x380, Size: 0x8]
	void TryAttachToMoveablePlatform(Actor* SpawnedBuilding, Vector BuildLocation);// 0x70644c4
	void StopPlaceBuilding();// 0xa2f8b2c
	void StartPrePlaceBuilding(int InBuildID, int AvatarID, byte viewType);// 0xa2f8a34
	void SkipCDTimeByBuildID(int InBuildID, float IncreaseRate);// 0xa2f897c
	bool ShouldEnableDoubleTouchMode();// 0xa2f893c
	void SetPrebuildEnabled(bool CanBePlaced, bool IsVisible);// 0xa2f886c
	void SetBuildingData(int Index, BuildingData InData);// 0xa2f86f8
	void ServerStopPlaceBuilding();// 0xa2f8698
	void ServerStartPrePlaceBuilding();// 0xa2f8638
	void ServerPlaceBuildActor(int BuildingIndex, Vector BuildLocation, Rotator BuildRotation, uint32 InResult, int AvatarID);// 0xa2f8488
	void S2C_SkipCDTimeByBuildID(int InBuildID, float IncreaseRate);// 0xa2f83c8
	void S2C_ResetBuildngCDByBuildID(int InBuildID, float InNewCDTime);// 0xa2f8308
	void ResetBuildngCDByBuildID(int InBuildID, float InNewCDTime);// 0xa2f8250
	void ResetBuildList();// 0xa2f8234
	bool ProccessNothingHitTraceOverlap(out const Vector DestLocation, out const Rotator DestRotation, const float MaxBuildDist, out Vector OutLocation, int buildIndex, out const Vector ViewLocation);// 0x70644c4
	void PlaceBuildingWithIndex(int buildIndex, int AvatarID);// 0xa2f8178
	void PlaceBuildingAtLocation(int buildIndex, out const Vector Loc, out const Rotator Rot);// 0xa2f8058
	void PlaceBuilding(int AvatarID);// 0xa2f7fd4
	void OverriveDeploymentTransform(out const Rotator rotIn, out const Vector locIn, out Rotator rotOut, out Vector locOut);// 0xa2f7e50
	void OverrideBuildingMaxBuildDistance(float BuildingMaxDistance, bool SetAll, int BuildingID);// 0xa2f7d4c
	void OnTouchedConstructableBoxEnded(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0xa2f7c8c
	void OnTouchedConstructableBox(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0xa2f7bcc
	void OnTouchActorBuild(out const Vector2D ScreenPosition, PlayerController* Controller);// 0xa2f7af4
	void OnAsyncLoadingEffectFinished(ParticleSystem* EffectPtr, int buildIndex);// 0xa2f7978
	void OnAsyncLoadingBuildingFinished(class Actor AcotrPtr, int buildIndex);// 0xa2f77fc
	bool IsValidAvatar(int AvatarID);// 0xa2f7764
	bool IsOverlayBuildHeightValid(Vector BuildLocation, const float OverlayMaxHeightFromGround);// 0x70644c4
	bool IsInPreBuildingMode();// 0xa2f7740
	bool IsCanPlaceBuildingBP(int InBuildID);// 0xa2f76a8
	bool IsCanPlaceBuilding(int InBuildID, byte _TYPE);// 0xa2f75d4
	bool IsActorProhibited(Actor* Actor);// 0xa2f7544
	SoftObjectPath GetPreBuildingEffectPath(int InBuildID, int AvatarID);// 0x70644c4
	PlayerController* GetOwnerPlayerController();// 0xa2f7508
	float GetMaxDistance();// 0xa2f74cc
	bool GetIsHasInitData();// 0xa2f748c
	int GetIndexByBuildingID(int BuildID);// 0xa2f7400
	byte GetCurrentBuildType();// 0xa2f73cc
	Actor* GetCDOByIndex(int Index);// 0xa2f7340
	BuildingData[] GetBuildingList();// 0xa2f72d4
	void EnableBuildingByID(int BuildID, bool bEnable);// 0xa2f7214
	void DoSceenTouchBuild(int buildIndex, out const Vector2D ScreenPostion, int PointerIndex, byte _TYPE, bool IsBegin, byte CustomBuildEvent);// 0xa2f7044
	bool DensityCheck(out const BuildingActorDensityCheck DensityCheckParmas);// 0xa2f6f60
	bool CheckShouldSkipByVisibility(PrimitiveComponent* _comp, int buildIndex);// 0xa2f6e94
	bool CheckPlacementWithPitch(out const HitResult Hit, out Vector OutLocation, out Rotator OutRotation, out const Vector BoxExtent, out const BuildingData CurBuildData);// 0x70644c4
	bool CheckPlacementOverlap(out const HitResult[] HitArray, out Vector OutLocation, out const Vector BoxExtent, out const BuildingData CurBuildData, out const Rotator BuildRotation, out const Rotator ControlRot, out const Vector ViewLocation, out bool HasForbiddenObject);// 0x70644c4
	bool CheckObjectIsOneOfTheTemplate(Object* Obj, class Object[] _ActorFilterTemplates);// 0xa2f6d0c
	bool CheckCollisionNeedSkipOwner(int buildIndex);// 0xa2f6c7c
	bool BuildAtWorldLoc(int buildIndex, out const Transform tranx, Vector EndLocation, bool bUseTrace, byte BuildType);// 0xa2f6ab8
	void AddBuildingData(BuildingData InData);// 0xa2f698c
<----------Generated by SSpawner v1.0.4---------->


Class: SelectBuildActor.Actor.Object
	ParticleSystemComponent* SelectBuildEffect;//[Offset: 0x3f8, Size: 0x8]
	void SetSelectActorTemplate(ParticleSystem* Template);// 0xa2f9e14
	void SetSelectActorPlacementEnable(bool PlacementEnable, bool IsVisible);// 0xa2f9d44
	void SetIsPlacementEnable(bool Val);// 0xa2f9cc4
	void OnParticleLoaded();// 0xa2f9ca8
	bool IsCurrentPlacementEnable();// 0xa2f9c8c
	bool GetIsPlacementEnable();// 0xa2f9c70
<----------Generated by SSpawner v1.0.4---------->


Class: WorldGridData
	Vector GridSize;//[Offset: 0x0, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: ConstructBot.Actor.Object
	AnimationAsset* StartupAnimation;//[Offset: 0x3f8, Size: 0x8]
	AnimationAsset* LoopAnimation;//[Offset: 0x400, Size: 0x8]
	AnimationAsset* ShutdownAnimation;//[Offset: 0x408, Size: 0x8]
	SkeletalMeshComponent* Mesh;//[Offset: 0x410, Size: 0x8]
	ParticleSystemComponent* GFX;//[Offset: 0x418, Size: 0x8]
	void ShutdownConstructBot();// 0x5e52760
	void RestartConstructBot();// 0x5e52744
	void OnLoopAnimation();// 0x5e52730
	void OnEndingAnimation();// 0x5e5271c
<----------Generated by SSpawner v1.0.4---------->


Class: BuildingData
	int BuildingID;//[Offset: 0x0, Size: 0x4]
	byte BuildingType;//[Offset: 0x4, Size: 0x1]
	SoftObjectPath BuildingActorClassPath;//[Offset: 0x8, Size: 0x18]
	byte[] BlockingChannels;//[Offset: 0x20, Size: 0x10]
	float MaxBuildDist;//[Offset: 0x30, Size: 0x4]
	float CDInterval;//[Offset: 0x34, Size: 0x4]
	int MaxBuildCount;//[Offset: 0x38, Size: 0x4]
	bool bAutoRefreshCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int GroupBuildingIdForMaxBuild;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ConstructableActorBase_C.STBuildingActorBase.BuildingActorBase.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x880, Size: 0x8]
	void UserConstructionScript();// 0x70644c4
	void OnPlayDestroyAnimation(bool bUseParticle);// 0x70644c4
	void ExecuteUbergraph_ConstructableActorBase(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, bool K2Node_Event_bUseParticle);// 0x70644c4
	bool ShouldSetAsDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: STBuildingActorBase.BuildingActorBase.LuaActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x710, Size: 0x10]
	int[] SubObjectStates;//[Offset: 0x720, Size: 0x10]
	BoxComponent* DoorDetectBox;//[Offset: 0x730, Size: 0x8]
	float ReturnRate;//[Offset: 0x738, Size: 0x4]
	bool bCheckMeshOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 0x1]
	float PickupRangeSquared;//[Offset: 0x740, Size: 0x4]
	bool bImmuneToTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x744, Size: 0x1]
	float VehicleHitDamageFactor;//[Offset: 0x748, Size: 0x4]
	float MinVehicleHitVelSize;//[Offset: 0x74c, Size: 0x4]
	float MaxVehicleHitVelSize;//[Offset: 0x750, Size: 0x4]
	FString BuildingQuickSignTypeID;//[Offset: 0x758, Size: 0x10]
	class Actor* DoorBaseClass;//[Offset: 0x768, Size: 0x8]
	FString OwnerPlayerUID;//[Offset: 0x770, Size: 0x10]
	StaticMeshComponent* RootCollisionMesh;//[Offset: 0x780, Size: 0x8]
	STCustomMeshComponent* StaticMesh;//[Offset: 0x788, Size: 0x8]
	AnimSequence* BornAnimation;//[Offset: 0x790, Size: 0x8]
	AnimSequence* LoopAnimation;//[Offset: 0x798, Size: 0x8]
	bool bCheckDoorCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 0x1]
	bool UseLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a1, Size: 0x1]
	AkAudioEvent* DestroyAkEvent;//[Offset: 0x7a8, Size: 0x8]
	AkAudioEvent* RecycleAkEvent;//[Offset: 0x7b0, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x7b8, Size: 0x8]
	float LifeSpanBeforeFighting;//[Offset: 0x7c0, Size: 0x4]
	float VehicleDamageCD;//[Offset: 0x7c4, Size: 0x4]
	bool bRefreshSKillCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1]
	class UTSkill* AssociatedSkill;//[Offset: 0x7d0, Size: 0x28]
	float CDScaleFactor;//[Offset: 0x7f8, Size: 0x4]
	bool bHideStaticMeshWhenPlayConstructAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fc, Size: 0x1]
	bool bHandleVehicleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fd, Size: 0x1]
	int AdditionalDataID;//[Offset: 0x810, Size: 0x4]
	bool bIsBeginAnimationPlayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x814, Size: 0x1]
	bool bDestroyAnimationPlayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x815, Size: 0x1]
	AIShootingOffsetComponent* AIShootingOffsetComp;//[Offset: 0x818, Size: 0x8]
	TimerHandle DestroyAnimationTimeHandle;//[Offset: 0x820, Size: 0x8]
	TimerHandle BornAnimaionTimeHandle;//[Offset: 0x828, Size: 0x8]
	uint16 TickFrequencyPerCollisionCheck;//[Offset: 0x846, Size: 0x2]
	FString OverlapCheckComponnentName;//[Offset: 0x848, Size: 0x10]
	ShapeComponent* OverlapCheckComp;//[Offset: 0x860, Size: 0x8]
	void OnRespawned();// 0x60d22f0
	void OnRep_SubObjectStatesChanged();// 0x70644c4
	void OnRep_IsBeginAnimationPlayed();// 0x60d22dc
	void OnRecycled();// 0x60d22c0
	void OnPlayerLeave(STExtraBaseCharacter* Character);// 0x70644c4
	void OnPlayerEnter(STExtraBaseCharacter* Character);// 0x70644c4
	void OnLeaveRegion();// 0x70644c4
	void OnEnterRegion();// 0x70644c4
	void Multicast_PlayDestroyAnimation(bool bUseParticle);// 0x60d21fc
	bool IsOwnerLocalController();// 0x60d21c4
	float HandleBuildingModifyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x60d2080
	int GetTeamId();// 0x60d2064
	Actor* GetOwnerByUID();// 0x60d2030
	enum[] GetDamageableGameObjectType();// 0x60d1f84
	void DrawVehicleDebugString(float Vel, float FinalDamageTaken, bool bTookDamage);// 0x60d1e84
	void BP_OnRespawned();// 0x70644c4
	void BP_OnRecycled();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: BuildingActorBase.LuaActor.Actor.Object
	bool bCustomBlockingChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 0x1]
	byte[] CustomBlockingChannels;//[Offset: 0x4e0, Size: 0x10]
	bool bCheckVisibilitySkipTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	bool bSkipCheckOwnerCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f1, Size: 0x1]
	class Object[] VisibilitySkipTypes;//[Offset: 0x4f8, Size: 0x10]
	BuildingActorWorldSnapSetup WorldSnapSetup;//[Offset: 0x508, Size: 0x24]
	float DebugHealthDistance;//[Offset: 0x52c, Size: 0x4]
	Vector DebugHealthOffset;//[Offset: 0x530, Size: 0xc]
	class Object[] ProhibitedActorTemplateList;//[Offset: 0x540, Size: 0x10]
	class Object[] EnableBuildingList;//[Offset: 0x550, Size: 0x10]
	SoftObjectPath PreBuildingEffectPath;//[Offset: 0x560, Size: 0x18]
	bool CanBuildUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 0x1]
	bool bShouldSnapToWorldGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]
	float UnderWaterMaxBuildDepth;//[Offset: 0x57c, Size: 0x4]
	Transform DestroyedParticleTransformOffset;//[Offset: 0x580, Size: 0x30]
	SoftObjectPath DestroyBuildingEffectPath;//[Offset: 0x5b0, Size: 0x18]
	bool bUseExtraCenterOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	bool bUseExtraCenterRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 0x1]
	Vector ActorCollisionBoxExtern;//[Offset: 0x5cc, Size: 0xc]
	Vector ActorCollisionBoxCenter;//[Offset: 0x5d8, Size: 0xc]
	Rotator ActorCollisionBoxRotator;//[Offset: 0x5e4, Size: 0xc]
	Vector ViewLocationOffset;//[Offset: 0x5f0, Size: 0xc]
	float Health;//[Offset: 0x5fc, Size: 0x4]
	bool bDestroyWhenZeroHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	delegate OnHealthChangeNotify;//[Offset: 0x608, Size: 0x10]
	float MaxDeviation;//[Offset: 0x618, Size: 0x4]
	float MaxTraceDepth;//[Offset: 0x61c, Size: 0x4]
	bool bDoQuadTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 0x1]
	byte ConstructingMode;//[Offset: 0x621, Size: 0x1]
	bool bEnableOverlayPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x622, Size: 0x1]
	bool bEnablePitchRotatePlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x623, Size: 0x1]
	bool bAutoPickValidPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 0x1]
	float OverlayPlaceHeight;//[Offset: 0x628, Size: 0x4]
	float OverlayMaxHeightFromGround;//[Offset: 0x62c, Size: 0x4]
	float DetectDeath;//[Offset: 0x630, Size: 0x4]
	int MaxCountLimit;//[Offset: 0x638, Size: 0x4]
	bool bDoDensityCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 0x1]
	FString LuaModPath;//[Offset: 0x640, Size: 0x10]
	static void SpawnDestroyParticle(bool bSpawnParticle, out const Transform Loc, out const SoftObjectPath DestroyBuildingEffectPath, World* World);// 0xa2f018c
	void PlayDestroyAnimation(bool bUseParticle);// 0xa2f0100
	void OnTakeDamageFromVehicle(Actor* DamagedActor, float ForwardSpeed, Actor* DamageCauser);// 0x70644c4
	void OnRep_Health();// 0xa2f00ec
	void OnPlayDestroyAnimation(bool bUseParticle);// 0x70644c4
	void OnBuildingActorDamaged(float Health);// 0xa2f0068
	void OnBornAnimationPlayEndInClient();// 0x70644c4
	int GetBuildID();// 0xa2f004c
	void BPOnOwnerChanged();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: STCustomMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object[] ObjectsForChecking;//[Offset: 0x900, Size: 0x10]
	FName[] ObjectsNamesForIgnore;//[Offset: 0x910, Size: 0x10]
	byte InitCollisionType;//[Offset: 0x920, Size: 0x1]
	void SetCollisionTraceFlag(byte Flag);// 0x60e7af4
	void RebuildBodyWithCollisionTraceFlag(byte Flag);// 0x60e7a78
	bool CheckAnyOverlappingActor(World* World, Transform tranx);// 0x60e7984
<----------Generated by SSpawner v1.0.4---------->


Class: AIShootingOffsetComponent.ActorComponent.Object
	Vector AIShootingCenterOffset;//[Offset: 0x110, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: BuildingActorWorldSnapSetup
	Vector GridSizeScale;//[Offset: 0x0, Size: 0xc]
	Vector Pivot;//[Offset: 0xc, Size: 0xc]
	Rotator SnapRotation;//[Offset: 0x18, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: BuildingGridComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FName CollisionProfileName;//[Offset: 0x7a0, Size: 0x8]
	Vector BuildCenterOffset;//[Offset: 0x7a8, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: BuildingConsumeData
	int BuildingID;//[Offset: 0x0, Size: 0x4]
	int ConsumeItemID;//[Offset: 0x4, Size: 0x4]
	int ConsumeItemCount;//[Offset: 0x8, Size: 0x4]
	int ReturnItemCount;//[Offset: 0xc, Size: 0x4]
	bool bLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_BuildingActorTable_type
	int BTID_0_3793920014AA44EA3F8AC81C094E2BF4;//[Offset: 0x0, Size: 0x4]
	int resourcenumber_1_6E94858029572FE007491E400595BD82;//[Offset: 0x4, Size: 0x4]
	FString Icon_2_4A928B8000C0CF663ABCCB64094EAB7E;//[Offset: 0x8, Size: 0x10]
	int ID_3_13C46C806EB23C1217AC50B203294E84;//[Offset: 0x18, Size: 0x4]
	int restoreresourcenumber_4_695E468011AD406E67743BD300C0A132;//[Offset: 0x1c, Size: 0x4]
	int resourceID_5_703EA68056B5EB047B5EC0B70F854614;//[Offset: 0x20, Size: 0x4]
	FString BuildingName_6_226D9500201382A22B469D4F0284ADD5;//[Offset: 0x28, Size: 0x10]
	int SortID_7_719B368018040ECC2FDAF80F0FD5B194;//[Offset: 0x38, Size: 0x4]
	FString Tips_8_4BCBD14041A035173A8EC8CC09500353;//[Offset: 0x40, Size: 0x10]
	FString SupportedGameMode_9_52EDDA8005B096F03B4DDD31065D8B75;//[Offset: 0x50, Size: 0x10]
	int MaxBuildDist_10_6EE473C0608F72AF353F108E01435054;//[Offset: 0x60, Size: 0x4]
	int ColdDownTime_11_6BB0738075B1199C5ED781B10814AFC5;//[Offset: 0x64, Size: 0x4]
	int MaxCount_12_6ED335003D1A56A802F234F10BE12534;//[Offset: 0x68, Size: 0x4]
	int AutoRefreshCD_13_4E0365006E419CBA2E98B29700754024;//[Offset: 0x6c, Size: 0x4]
	int CheckItemID_14_7DCB47C038E5146B6D7D77080CE678D4;//[Offset: 0x70, Size: 0x4]
	bool bLobby_15_7406DFC036F63BBD1B0D93FD0C4271D9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	int GroupBuildingId_16_09EDA3405B8C38B35DBA4C9507003BB4;//[Offset: 0x78, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	<int,int> IndexOfMapID;//[Offset: 0x990, Size: 0x50]
	FString SkillTableName;//[Offset: 0xa30, Size: 0x10]
	FString SkillBuffTableName;//[Offset: 0xa40, Size: 0x10]
	FString PropSkillMapTableName;//[Offset: 0xa50, Size: 0x10]
	byte TriggerSkillEventFromRole;//[Offset: 0xa80, Size: 0x1]
	GSListenerBase* CurrentGSListener;//[Offset: 0xa84, Size: 0x8]
	UAESkillStringEventEffectMapForEditor*[] TriggerSkillListenerByString;//[Offset: 0xa90, Size: 0x10]
	UAESkillEventEffectMapForEditor*[] TriggerSkillListenerByUAEEume;//[Offset: 0xaa0, Size: 0x10]
	UTSkillEventEffectMapForEditor*[] TriggerSkillListenerByUTEume;//[Offset: 0xab0, Size: 0x10]
	UAEGSLisenterEffectMapForEditor*[] TriggerSkillListenerByGS;//[Offset: 0xac0, Size: 0x10]
	void TriggerStringEventLocal(int SkillID, FString EventTypeStr);// 0x62c1370
	void TriggerStringEvent(int SkillID, FString EventTypeStr);// 0x62c11ec
	void TriggerSkillEvent_RPC_UTSkillEventType(byte InEventEume, int SkillID, byte InFromRole, bool bTriggerDoAction);// 0x62c10ac
	void TriggerSkillEvent_RPC_String(FString InEventName, int SkillID, byte InFromRole, bool bTriggerDoAction);// 0x62c0f3c
	void TriggerSkillEvent_RPC_EUAESkillEvent(byte InEventEume, int SkillID, byte InFromRole, bool bTriggerDoAction);// 0x62c0dfc
	void TriggerEvent(int SkillID, byte EventType);// 0x62c0d3c
	void TriggerCurSkillEvent(byte UAEEvent, int skillindex);// 0x62c0c7c
	void SetSkillAnimListAttach(bool bAttach, bool bNotReplaceTurnAnimWithReplaceMoveAnim);// 0x62c0ba4
	void SetIsAutoAddSkill(bool InAutoAdd);// 0x62c0b20
	void ServerTriggerStringEvent(int SkillID, FString EventTypeStr);// 0x62c0a00
	void ServerTriggerCurSkillEvent(byte UAEEvent, int skillindex);// 0x62c0910
	void RPC_Server_SkillBlackBoardKey(int InSkillID, const UAEBlackboardKeySelector[] KeySelectors, const byte[] Content, FString EventName, bool bNetMulticast);// 0x62c06cc
	void RPC_NetMulticast_SkillBlackBoardKey(int InSkillID, const UAEBlackboardKeySelector[] KeySelectors, const byte[] Content, FString EventName);// 0x62c0514
	void RPC_Client_SkillBlackBoardKey(int InSkillID, const UAEBlackboardKeySelector[] KeySelectors, const byte[] Content, FString EventName);// 0x62c035c
	void ReplaceSkillJumpAnimList(out const SkillReplaceJumpAnimData[] AnimDataList);// 0x62c0250
	void ReplaceSkillAnimList(out const SkillReplaceCharAnimData[] AnimDataList);// 0x62c0144
	void OnSkillManagerInitFinish();// 0x62c0130
	void OnGsListenerTrigger(GSListenerBase* Listener);// 0x62c00b4
	void LocalTriggerStringEvent(int SkillID, FString EventTypeStr);// 0x62bff40
	bool IsSkillWithTssData(int InSkillID);// 0x62bfea8
	void HandleSkillStop(int SkillID, enum StopReason);// 0x62bfde8
	void HandleSkillStart(int SkillID);// 0x62bfd64
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x62bfcd0
	FString GetSkillIconBySkillID(int SkillID);// 0x62bfbdc
	byte GetRealOwnerRoleSafety();// 0x62bfba0
	int GetPropMappedSkillID(int PropID, int PropSkillLevel);// 0x62bfadc
	PropSkillMapTableRow GetPropMappedRow(int PropSkillID, int PropSkillLevel);// 0x62bf940
	int GetPropMappedAuxSkillID(int PropID, int PropSkillLevel);// 0x62bf87c
	void DynamicRemoveSkill(int InSkillID);// 0x62bf7f8
	void DynamicAddSkill(int InSkillID);// 0x62bf774
	bool CheckPropSkillFilterGun(int PropSkillID, int PropSkillLevel, int GunID);// 0x62bf670
	void CacheSkillWidget(int SkillID, UTSkillWidget* Widget);// 0x62bf5b0
<----------Generated by SSpawner v1.0.4---------->


Class: UAESkillStringEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	FString EventString;//[Offset: 0xc0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UAESkillEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	byte UAESkillEventType;//[Offset: 0xc0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: UAEGSLisenterEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	SkillGSLisenterWarpper GSLisenter;//[Offset: 0xc0, Size: 0x8]
	bool bIsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: SkillGSLisenterWarpper
	GSListenerBase* ListenerBase;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: SkillReplaceJumpAnimData
	byte JumpAnimType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset*[] JumpAnimList;//[Offset: 0x8, Size: 0x10]
	AnimationAsset*[] FPPJumpAnimList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PropSkillMapTableRow
	int SkillMapID;//[Offset: 0x0, Size: 0x4]
	int PropID;//[Offset: 0x4, Size: 0x4]
	int PropSkillLevel;//[Offset: 0x8, Size: 0x4]
	int PropSkillID;//[Offset: 0xc, Size: 0x4]
	int AuxPropSkillID;//[Offset: 0x10, Size: 0x4]
	int[] FilterGunIDs;//[Offset: 0x18, Size: 0x10]
	FString PropSkillIconPath;//[Offset: 0x28, Size: 0x10]
	FString PropSkillUseIconPath;//[Offset: 0x38, Size: 0x10]
	FString PropSkillDesc;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BuildingActorDensityCheck
	bool bDoCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	FString LuaModPath;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_SkillManagerComponent_C.UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	void TriggerEvent(int SkillID, byte EventType);// 0x627e0c8
	void TriggerCurSkillEvent(byte UAEEvent, int skillindex);// 0x627e008
	void SetSkillOwner(Actor* Pawn);// 0x627df84
<----------Generated by SSpawner v1.0.4---------->


Class: CustomCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	void InterpToTargetFov(float FOV, float InterpSpeed, bool DeltaValue);// 0x5e597e4
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterAnimList_Skill_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterAnimList_Parachute_C.UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x2e0, Size: 0x550]
	float Priority;//[Offset: 0x830, Size: 0x4]
	float BlendRadius;//[Offset: 0x834, Size: 0x4]
	float BlendWeight;//[Offset: 0x838, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83c, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83c, Size: 0x1]
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x8e0d1dc
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterAnimList_Base_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: PetComponent_BP_C.STExtraFightPetComponent.STExtraPetComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x120, Size: 0x8]
	void OnRep_PetInfo();// 0x70644c4
	void IsFPPMode(out bool Out, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void GetPetOwnerPlayerPawn(out BP_PlayerPawn_C* Out, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void GetPetPawn(out BasePetCharacter_BP_C* Out, BasePetCharacter_BP_C* K2Node_DynamicCast_AsBase_Pet_Character_BP, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void SetPetPawn(STExtraPetCharacter* InPetPawn, out STExtraPetCharacter* Out, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x70644c4
	void SetPetOwnerPlayerPawn(STExtraBaseCharacter* InPlayerPawn, out STExtraBaseCharacter* Out, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x70644c4
	void ResetAttachTrans(BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out2, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out3, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x70644c4
	void SpawnPetWithInfo(GameModePlayerPetInfo Info, bool Temp_bool_Variable, bool CallFunc_IsFppMode_Out, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetLevelTable_type CallFunc_GetPetLevelCfg_Out_Row, Actor* CallFunc_GetOwner_ReturnValue, FString K2Node_Select_Default, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue, class BasePetCharacter_BP_C K2Node_ClassDynamicCast_AsBase_Pet_Character_BP, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x70644c4
	void SpawnPet(class BasePetCharacter_BP_C PetClass);// 0x70644c4
	void RemovePet();// 0x70644c4
	void PlayerStateChange(enum State, byte ChangeType);// 0x70644c4
	void OnOwnerPlayerPossessed(GameModePlayerPetInfo PetInfo);// 0x70644c4
	void OnOwnerDetachedVehicle();// 0x70644c4
	void OnRep_PetPawn();// 0x70644c4
	void OnRep_PetOwnerPlayerPawn();// 0x70644c4
	void ExecuteUbergraph_PetComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, Actor*[] K2Node_MakeArray_Array, STExtraBaseCharacter* CallFunc_SetPetOwnerPlayerPawn_out, class BasePetCharacter_BP_C K2Node_CustomEvent_PetClass, Transform CallFunc_GetTransform_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, enum K2Node_Event_State, byte K2Node_Event_changeType, FString CallFunc_Concat_StrStr_ReturnValue, GameModePlayerPetInfo K2Node_CustomEvent_PetInfo, FString CallFunc_Concat_StrStr_ReturnValue2, STExtraPetCharacter* CallFunc_SetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out2, bool CallFunc_IsValid_ReturnValue, interface class K2Node_DynamicCast_AsPlayer_Event_for_Pet, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out3, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out5, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out6, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_IsValid_ReturnValue7, FString CallFunc_Conv_BoolToString_ReturnValue2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out7, FString CallFunc_Concat_StrStr_ReturnValue5, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out8, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out9, bool CallFunc_IsValid_ReturnValue8, bool CallFunc_IsValid_ReturnValue9, FString CallFunc_Conv_BoolToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue6, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out2, FString CallFunc_Concat_StrStr_ReturnValue7, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out3, bool CallFunc_IsValid_ReturnValue10, FString CallFunc_Conv_BoolToString_ReturnValue4, PetLevelInfo K2Node_MakeStruct_PetLevelInfo, FString CallFunc_Concat_StrStr_ReturnValue8, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BasePetCharacter_BP_C* CallFunc_FinishSpawningActor_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_Add_VectorVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, STExtraPetCharacter* CallFunc_SetPetPawn_Out2, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Concat_StrStr_ReturnValue13, Vector CallFunc_BreakTransform_Location2, Rotator CallFunc_BreakTransform_Rotation2, Vector CallFunc_BreakTransform_Scale2, Vector CallFunc_Add_VectorVector_ReturnValue2, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_BreakTransform_Location3, Rotator CallFunc_BreakTransform_Rotation3, Vector CallFunc_BreakTransform_Scale3, Transform CallFunc_MakeTransform_ReturnValue);// 0x70644c4
	void OnRepPetInfo__DelegateSignature();// 0x70644c4
	void OnRepPetPawnCalled__DelegateSignature();// 0x70644c4
	class BasePetCharacter_BP_C* SpawnPetClass;//[Offset: 0x128, Size: 0x8]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x130, Size: 0x20]
	Transform SpawnTrans;//[Offset: 0x150, Size: 0x30]
	Actor*[] NewVar;//[Offset: 0x180, Size: 0x10]
	delegate OnRepPetPawnCalled;//[Offset: 0x190, Size: 0x10]
	delegate OnRepPetInfo;//[Offset: 0x1a0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraFightPetComponent.STExtraPetComponent.ActorComponent.Object
	STExtraBaseCharacter* PetOwnerPlayerPawn;//[Offset: 0x110, Size: 0x8]
	STExtraPetCharacter* PetPawn;//[Offset: 0x118, Size: 0x8]
	void OnRep_PetPawn();// 0x70644c4
	void OnRep_PetOwnerPlayerPawn();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraPetComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool[] PetStateList;//[Offset: 0x1100, Size: 0x10]
	bool[] ClientDiffPetStateList;//[Offset: 0x1110, Size: 0x10]
	float MovementTickInterval;//[Offset: 0x1120, Size: 0x4]
	int PetStateNum;//[Offset: 0x1124, Size: 0x4]
	int RelevantCloseTime;//[Offset: 0x1128, Size: 0x4]
	PetVisibilityInfo PetVisibilityInfo;//[Offset: 0x112c, Size: 0x8]
	PetLevelInfo PetLevelInfo;//[Offset: 0x1134, Size: 0x8]
	bool OwnerPlayerIsOnMoveBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113c, Size: 0x1]
	float OwnerPlayerMoveBaseCheckTime;//[Offset: 0x1140, Size: 0x4]
	float OwnerPlayerCurMoveBaseCheckTime;//[Offset: 0x1144, Size: 0x4]
	bool PetDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1148, Size: 0x1]
	STExtraBaseCharacter* PetOwnerPlayerCharacter;//[Offset: 0x1150, Size: 0x8]
	byte PetRelevantType;//[Offset: 0x1158, Size: 0x1]
	byte CurPetState;//[Offset: 0x1159, Size: 0x1]
	delegate OnPetStateChangeDelegate;//[Offset: 0x1160, Size: 0x10]
	delegate OnPetCurExecuteEventDelegate;//[Offset: 0x1170, Size: 0x10]
	delegate OnPetEmoteReadyToPlayNext;//[Offset: 0x1180, Size: 0x10]
	delegate OnPetMontageDelegate;//[Offset: 0x1190, Size: 0x10]
	PetEventItem* CurExecuteEvent;//[Offset: 0x11a0, Size: 0x8]
	PetMontageData PetCurMontage;//[Offset: 0x11a8, Size: 0x8]
	bool bPetAvatarNotDownloaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b0, Size: 0x1]
	float PetUpLoadInfoTime;//[Offset: 0x11b4, Size: 0x4]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x70644c4
	void SetRenderInTwoPass(bool InValue);// 0x61ab384
	void SetPetVisibility(bool Visible);// 0x70644c4
	void SetPetMontage(out const PetMontageData Data);// 0x61ab2f4
	void SetCurExecuteEvent(PetEventItem* Event);// 0x61ab278
	bool PetOwnerIsAutonomous();// 0x61ab240
	void PetOwnerCharacterBecomeValid();// 0x70644c4
	void PetLeaveState(byte State);// 0x61ab1c4
	bool PetHasState(byte State);// 0x61ab134
	bool PetEnterState(byte ToState);// 0x61ab0a4
	void OwnerPlayerMoveBaseCheck();// 0x61ab090
	void OnUploadInfoTimeOut();// 0x61ab07c
	void OnRep_PetVisibilityInfo();// 0x61ab068
	void OnRep_PetStateList();// 0x61ab054
	void OnRep_PetStateChange();// 0x61ab040
	void OnRep_PetOwnerCharacter();// 0x61ab02c
	void OnRep_PetCurMontageChange();// 0x61ab018
	void OnRep_CurExecuteEvent();// 0x61ab004
	void OnRep_AttachmentReplication();// 0x61aafe8
	void OnOwnerAvatarEquipped(enum SlotType, bool IsEquipped, int InItemID);// 0x61aaedc
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x70644c4
	bool IsPetCanAppear();// 0x61aae9c
	bool IsAnimLimited(int AnimID);// 0x61aae04
	int[] GetPetUnlockAnimIds();// 0x70644c4
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x70644c4
	FString GetPetAnimLimitePlayerState(int AnimID);// 0x70644c4
	void ClientResetAllState();// 0x61aadf0
	bool ClientPredictEnterState(byte ToState);// 0x61aad60
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x61aacc8
	void BroadcastPetLeaveDisappear();// 0x61aacac
	void BindDelegateInCpp();// 0x61aac90
<----------Generated by SSpawner v1.0.4---------->


Class: PetVisibilityInfo
	bool Visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PetEventItem.Object
	byte EventType;//[Offset: 0x28, Size: 0x1]
	int EventPriority;//[Offset: 0x2c, Size: 0x4]
	float EventExecTime;//[Offset: 0x30, Size: 0x4]
	float EventMaxWaitTime;//[Offset: 0x34, Size: 0x4]
	bool NotEnterWaitList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	byte EnterPetState;//[Offset: 0x39, Size: 0x1]
	byte LeavePetState;//[Offset: 0x3a, Size: 0x1]
	BehaviorTree* BehaviorTree;//[Offset: 0x40, Size: 0x8]
	int AnimationAssetId;//[Offset: 0x48, Size: 0x4]
	PetMontageConfig[] MontageList;//[Offset: 0x50, Size: 0x10]
	PetMontageConfig[] UnlockMontageList;//[Offset: 0x60, Size: 0x10]
	PetMontageConfig[] RealPlayMontageList;//[Offset: 0x70, Size: 0x10]
	bool bIgnoreUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	delegate OnPetEventStartDelegate;//[Offset: 0x88, Size: 0x10]
	delegate OnPetEventEndDelegate;//[Offset: 0x98, Size: 0x10]
	STExtraPetCharacter* PetCharacter;//[Offset: 0xa8, Size: 0x8]
	void UpdateCanPlayMontageList();// 0x5fc2250
	void SelectRandomMontage();// 0x5fc2234
	void OnEventStart(STExtraPetCharacter* Pet);// 0x5fc21b0
	void OnEventEnd();// 0x5fc2194
	bool IsSameEvent(const PetWaitEventInfo* WaitEvent);// 0x5fc20fc
<----------Generated by SSpawner v1.0.4---------->


Class: PetMontageConfig
	int AnimationAssetId;//[Offset: 0x0, Size: 0x4]
	int Weight;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PetWaitEventInfo.Object
	byte EventType;//[Offset: 0x28, Size: 0x1]
	float EventMaxWaitTime;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PetMontageData
	int AnimationAssetId;//[Offset: 0x0, Size: 0x4]
	float MontageStartTime;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BasePetCharacter_BP_C.STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x11f0, Size: 0x8]
	void ResetPetVisibility(bool CallFunc_IsDedicatedServer_ReturnValue, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool CallFunc_GetUserSettings_Bool_ReturnValue, bool CallFunc_GetUserSettings_Bool_ReturnValue2, bool CallFunc_GetUserSettings_Bool_ReturnValue3);// 0x70644c4
	void IsTeammateWithPetOwner(STExtraPlayerCharacter* OtherPlayer, out bool NewParam, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* CallFunc_GetPetOwnerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x70644c4
	void HandleAirAttack(Vector Area, bool IsAirAttacking, bool CallFunc_IsServer_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue2, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x70644c4
	void SetPetHidden(bool bHidden, bool CallFunc_Not_PreBool_ReturnValue);// 0x70644c4
	void OnPetSwimmingStateChange(bool bEnter);// 0x70644c4
	void GetGameModeType(out enum GameModeType, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void HandleOnOwnerWin(int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue);// 0x70644c4
	void OnPetOwnerFallingModeChange(bool IsFalling, Vector PlayerLoc, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x70644c4
	void StopCurMontage(AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void ChangeToDefaultAttachInfo(PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity2, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult);// 0x70644c4
	void OnDelayLeaveDisappear();// 0x70644c4
	void OnPetLeaveState(byte LeaveState, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_GetPetDefaultFollowType_FollowType, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	void OnPetEnterState(byte EnterState, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x70644c4
	void OnPetAppearAnimEnd();// 0x70644c4
	void OnPetDisappearStateChange(bool IsEnter, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void GetPetParachuteEquipments(out int[] Out);// 0x70644c4
	void HandlePetStopParachute(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int[] CallFunc_GetPetParachuteEquipments_out, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x70644c4
	void HandlePetStartParachute(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int[] CallFunc_GetPetParachuteEquipments_out, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x70644c4
	void DetachFromOwnerPlayer();// 0x70644c4
	void InitPetAvatar(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HandleEquipItem_ReturnValue, bool CallFunc_CheckToEquipDefaultAvatar_ReturnValue);// 0x70644c4
	void SetPetFollowType(byte Type, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x70644c4
	void PetHasDisappearState(out bool Out, bool CallFunc_PetHasState_ReturnValue, bool CallFunc_PetHasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x70644c4
	void OnPetFlyAroundStateChange(bool IsEnter, bool CallFunc_IsServer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x70644c4
	void OnPetFollowStateChange(bool IsEnter, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x70644c4
	void UpdateAttachInfoByOwnerDefaultAvatar(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, AvatarSlotDesc[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, AvatarSlotDesc CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue);// 0x70644c4
	void ResetAttachInfo(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo2, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x70644c4
	void GetPetInfo(out GameModePlayerPetInfo PetInfo);// 0x70644c4
	void GetPetEntity(out PetEntityComponent_BP_C* PetEntity);// 0x70644c4
	void DisableUnuseComponent();// 0x70644c4
	void CalcInAirAttackArea(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x70644c4
	void SelfPetVisibleSettingChanged(bool In, bool CallFunc_PetHasDisappearState_out, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	void OtherPetVisibleSettingChanged(bool In, bool CallFunc_PetHasDisappearState_out, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	void PetOtherVisibleSetting(out bool Out, SettingConfig_C* SettingConfig, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void PetSelfVisibleSetting(out bool Out, SettingConfig_C* SettingConfig, bool Temp_bool_Variable, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, bool CallFunc_IsValid_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_Select_Default, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void GetPetDefaultFollowType(out byte FollowType);// 0x70644c4
	void DrawPetDebugInfo(bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue);// 0x70644c4
	void OnRep_AttachToOwner(Transform TempTrans, bool CallFunc_PetEnterState_ReturnValue, Transform CallFunc_GetFollowPos_out, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool CallFunc_K2_SetActorRotation_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x70644c4
	void AttachToOwnerPlayer(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, bool CallFunc_IsServer_ReturnValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter2, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo2, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo3, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x70644c4
	void PetOwnerStopEmote(int EmoteId, int StopReason, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetPetRspInfoWithPlayerEmoteId_Out_Row, bool CallFunc_GetPetRspInfoWithPlayerEmoteId_Found, bool CallFunc_Greater_IntInt_ReturnValue, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void PetOwnerPlayEmote(int EmoteId, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetEmotionEventInfo* CallFunc_SpawnObject_ReturnValue, bool CallFunc_PetEnterState_ReturnValue, DateTime CallFunc_Now_ReturnValue, int CallFunc_GetSecond_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, PetVisibilityInfo K2Node_MakeStruct_PetVisibilityInfo, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetPetRspInfoWithPlayerEmoteId_Out_Row, bool CallFunc_GetPetRspInfoWithPlayerEmoteId_Found, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AnimIdIsValid_IsValid);// 0x70644c4
	void AnimIdIsValid(int AnimID, out bool IsValid, int[] CallFunc_GetPetUnlockAnimIds_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsAnimLimited_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	void GetPetRspInfoWithPlayerEmoteId(int PlayerEmoteId, out BP_STRUCT_PetPlayerEmoteTable_type Out Row, out bool found, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x70644c4
	FString GetPetAnimLimitePlayerState(int AnimID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_PetActPlayerStateTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x70644c4
	int[] GetPetUnlockAnimIds(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, BP_STRUCT_PetLevelTable_type CallFunc_GetPetLevelCfg_Out_Row, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);// 0x70644c4
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x70644c4
	void GetPetAttachInfo(out PetAttachInfo AttachInfo, PetAttachInfo CallFunc_GetCurrentAttachInfo_ReturnValue);// 0x70644c4
	void GetPetEventManager(out PetEventManagerComponent* PetEventManager);// 0x70644c4
	void SetOwnerCharacterPC(STExtraPlayerController* CallFunc_GetController_ReturnValue);// 0x70644c4
	void GetOwnerCharacter(out BP_PlayerPawn_C* OwnerCharacter, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void SetOwnerCharacter(BP_PlayerPawn_C* Owner, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable2, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_HasState_ReturnValue3, bool CallFunc_HasState_ReturnValue4, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, bool CallFunc_BooleanOR_ReturnValue2, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue3, byte K2Node_Select_Default);// 0x70644c4
	void GetFollowPos(float MinRadius, float MaxRadius, out Transform Out, WaterSwimActor* NewLocalVar, Vector ActorLoc, Rotator ActorRot, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue2, Rotator CallFunc_MakeRotFromZY_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Vector K2Node_MathExpression_ReturnValue, Actor*[] Temp_object_Variable, Vector K2Node_MathExpression_ReturnValue2, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, WaterSwimActor* K2Node_DynamicCast_AsWater_Swim_Actor, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Subtract_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, Transform CallFunc_MakeTransform_ReturnValue3);// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void Timeline_0__FinishedFunc();// 0x70644c4
	void Timeline_0__UpdateFunc();// 0x70644c4
	void BindEvent();// 0x70644c4
	void BndEvt__PetEventManager_K2Node_ComponentBoundEvent_0_PetEventDelegate__DelegateSignature(PetWaitEventInfo* EventInfo);// 0x70644c4
	void PlayerStateChange(enum State, byte ChangeType);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void PetOwnerCharacterBecomeValid();// 0x70644c4
	void UpdateSplineInfo();// 0x70644c4
	void PetStopParchute();// 0x70644c4
	void PetStartParachute();// 0x70644c4
	void OnPetStateChangeEvent(byte State, bool IsEnter);// 0x70644c4
	void OnPetMontageEvent(PetMontageData MontageData);// 0x70644c4
	void OnAsyncLoadPetAnimRes(Object* LoadObject);// 0x70644c4
	void SetPetVisibility(bool Visible);// 0x70644c4
	void OnOwnerWinEvent();// 0x70644c4
	void OnOwnerKillSomeone();// 0x70644c4
	void OnOwnerAssistKill();// 0x70644c4
	void OnMoveVoiceAround(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x70644c4
	void OnShotVoiceAround(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x70644c4
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x70644c4
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x70644c4
	void DebugLineTimerEvent();// 0x70644c4
	void OnPetOwnerStateInterruptEvent(enum State, enum InterruptedBy);// 0x70644c4
	void OnOwnerAvatarEquipped(enum SlotType, bool IsEquipped, int InItemID);// 0x70644c4
	void PetEnterPlane();// 0x70644c4
	void OnPetOwnerFallingModeChangeEvent(bool IsFalling);// 0x70644c4
	void OnOwnerPerspectiveChanged(bool IsFPP);// 0x70644c4
	void OnOwnerHoldGrenadeStateChange();// 0x70644c4
	void OnPetOwnerShoot(enum State);// 0x70644c4
	void OnPetVisibility_EnterHide();// 0x70644c4
	void OnPetVisibility_EnterVisible();// 0x70644c4
	void OnPlayerEnterParachute();// 0x70644c4
	void OnPlayerExitParachute();// 0x70644c4
	void MyPetVisibleSettingTPP(bool BoolValue);// 0x70644c4
	void MyPetVisibleSettingFPP(bool BoolValue);// 0x70644c4
	void On(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x70644c4
	void OnPlayerScopIN(bool bIsBegin);// 0x70644c4
	void CustomEvent(bool bIsBegin);// 0x70644c4
	void OnAvatarAllMeshLoaded_Event();// 0x70644c4
	void CustomEvent(bool bIsBegin);// 0x70644c4
	void CustomEvent(bool bIsBegin);// 0x70644c4
	void ExecuteUbergraph_BasePetCharacter_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, delegate K2Node_CreateDelegate_OutputDelegate8, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate9, delegate K2Node_CreateDelegate_OutputDelegate10, delegate K2Node_CreateDelegate_OutputDelegate11, delegate K2Node_CreateDelegate_OutputDelegate12, delegate K2Node_CreateDelegate_OutputDelegate13, delegate K2Node_CreateDelegate_OutputDelegate14, delegate K2Node_CreateDelegate_OutputDelegate15, PetWaitEventInfo* K2Node_ComponentBoundEvent_EventInfo, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate16, enum K2Node_Event_State, byte K2Node_Event_changeType, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate17, delegate K2Node_CreateDelegate_OutputDelegate18, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, SplineComponent*[] CallFunc_GetComponentsByTag_ReturnValue, SplineComponent* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate19, byte K2Node_CustomEvent_State3, bool K2Node_CustomEvent_IsEnter, delegate K2Node_CreateDelegate_OutputDelegate20, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter2, delegate K2Node_CreateDelegate_OutputDelegate21, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, PetMontageData K2Node_CustomEvent_MontageData, Object* K2Node_CustomEvent_LoadObject, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetActionTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, bool K2Node_Event_Visible, bool CallFunc_IsServer_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue, bool CallFunc_PetSelfVisibleSetting_out, bool CallFunc_IsServer_ReturnValue2, bool CallFunc_PetOtherVisibleSetting_out, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate22, bool CallFunc_IsValid_ReturnValue2, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue2, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager3, bool CallFunc_IsValid_ReturnValue3, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager4, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate23, bool CallFunc_IsValid_ReturnValue4, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue4, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager5, STExtraBaseCharacter* K2Node_CustomEvent_nowCharacter, Vector K2Node_CustomEvent_posVector2, float K2Node_CustomEvent_showTime2, STExtraShootWeapon* K2Node_CustomEvent_nowWeapon, Vector K2Node_CustomEvent_posVector, float K2Node_CustomEvent_showTime, bool K2Node_CustomEvent_isslience, bool K2Node_CustomEvent_isExplosion, bool CallFunc_IsValid_ReturnValue5, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue5, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager6, PetWaitEventInfo* K2Node_Event_Event, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager7, bool K2Node_Event_Draw, bool CallFunc_IsServer_ReturnValue3, enum K2Node_CustomEvent_State2, enum K2Node_CustomEvent_InterruptedBy, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue6, Vector CallFunc_GetLocationAtTime_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager8, enum K2Node_Event_slotType, bool K2Node_Event_isEquipped, int K2Node_Event_InItemID, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate24, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter3, bool CallFunc_PetHasDisappearState_out, bool CallFunc_IsHiddenByOtherSlot_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue3, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter4, bool CallFunc_IsValid_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate25, bool CallFunc_HasState_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, byte CallFunc_GetPetDefaultFollowType_FollowType3, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, byte CallFunc_GetPetDefaultFollowType_FollowType4, FName CallFunc_Conv_StringToName_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, BP_STRUCT_PetPlayerOffsetTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_IsServer_ReturnValue4, FixPetAttachInfo K2Node_MakeStruct_FixPetAttachInfo, bool CallFunc_PetOwnerIsAutonomous_ReturnValue2, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity2, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager9, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, bool CallFunc_EqualEqual_ByteByte_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue9, bool CallFunc_BooleanAND_ReturnValue5, PetEventPlayerStateTypeSt K2Node_MakeStruct_PetEventPlayerStateTypeSt, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager10, bool CallFunc_EqualEqual_ByteByte_ReturnValue10, byte CallFunc_GetPredictPetOwnerState_Enter, byte CallFunc_GetPredictPetOwnerState_Leave, bool CallFunc_GetPredictPetOwnerState_ReturnValue, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity3, bool CallFunc_IsValid_ReturnValue8, bool CallFunc_ClientPredictEnterState_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanAND_ReturnValue6, bool K2Node_CustomEvent_IsFalling, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_PetEnterState_ReturnValue2, bool K2Node_CustomEvent_IsFPP, delegate K2Node_CreateDelegate_OutputDelegate26, bool CallFunc_EqualEqual_ByteByte_ReturnValue11, bool CallFunc_EqualEqual_ByteByte_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue7, bool CallFunc_PetSelfVisibleSetting_out2, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter5, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue8, enum K2Node_CustomEvent_state, bool CallFunc_EqualEqual_ByteByte_ReturnValue13, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue7, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager11, bool CallFunc_IsValid_ReturnValue9, bool CallFunc_PetEnterState_ReturnValue3, bool CallFunc_PetEnterState_ReturnValue4, byte CallFunc_GetPetDefaultFollowType_FollowType5, TimerHandle CallFunc_K2_SetTimer_ReturnValue, bool K2Node_CustomEvent_BoolValue2, bool K2Node_CustomEvent_BoolValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter6, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter7, STExtraBaseCharacter* K2Node_CustomEvent_DeadCharacter, Controller* K2Node_CustomEvent_Killer, Actor* K2Node_CustomEvent_DamageCauser, const HitResult K2Node_CustomEvent_KillingHitInfo, Vector K2Node_CustomEvent_KillingHitImpulseDir, class DamageType K2Node_CustomEvent_KillingHitDamageType, delegate K2Node_CreateDelegate_OutputDelegate27, bool CallFunc_PetSelfVisibleSetting_out3, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter8, bool CallFunc_HasState_ReturnValue3, bool K2Node_CustomEvent_bIsBegin4, bool CallFunc_PetSelfVisibleSetting_out4, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter9, bool CallFunc_HasState_ReturnValue4, bool K2Node_CustomEvent_bIsBegin3, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess2, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool K2Node_CustomEvent_bIsBegin2, bool CallFunc_IsValid_ReturnValue10, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character2, bool K2Node_DynamicCast_bSuccess3, bool K2Node_CustomEvent_bIsBegin, bool CallFunc_IsTeammateWithPetOwner_NewParam, bool CallFunc_IsTeammateWithPetOwner_NewParam2, bool CallFunc_HasState_ReturnValue5, bool CallFunc_PetOtherVisibleSetting_out2, bool CallFunc_PetOwnerIsAutonomous_ReturnValue3, bool CallFunc_PetOtherVisibleSetting_out3, bool CallFunc_HasAuthority_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue11, STExtraPetAnimInstance* K2Node_DynamicCast_AsSTExtra_Pet_Anim_Instance, bool K2Node_DynamicCast_bSuccess4);// 0x70644c4
	void PetOwnerStateChangeDispatcher__DelegateSignature(enum State, byte ChangeType);// 0x70644c4
	PetAvatarComponent_BP_C* PetAvatarComponent_BP;//[Offset: 0x11f8, Size: 0x8]
	STBuffSystemComponent* STBuffSystem;//[Offset: 0x1200, Size: 0x8]
	PetEntityComponent_BP_C* PetEntity;//[Offset: 0x1208, Size: 0x8]
	PetEventManagerComponent* PetEventManager;//[Offset: 0x1210, Size: 0x8]
	float Timeline_0_Track_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0x1218, Size: 0x4]
	byte Timeline_0__Direction_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0x121c, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x1220, Size: 0x8]
	STExtraPlayerController* OwnerCharacterController;//[Offset: 0x1228, Size: 0x8]
	delegate PetOwnerStateChangeDispatcher;//[Offset: 0x1230, Size: 0x10]
	int[] UnlockAnimIds;//[Offset: 0x1240, Size: 0x10]
	bool AttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1250, Size: 0x1]
	SplineComponent* PetParachuteSpline;//[Offset: 0x1258, Size: 0x8]
	SplineMeshComponent* ParachuteSpline;//[Offset: 0x1260, Size: 0x8]
	bool VisibilityToSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1268, Size: 0x1]
	TimerHandle CheckAirAttackTimer;//[Offset: 0x1270, Size: 0x8]
	Vector CurAttackArea;//[Offset: 0x1278, Size: 0xc]
	bool IsInAttackArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1284, Size: 0x1]
	TimerHandle DebugLineTimer;//[Offset: 0x1288, Size: 0x8]
	bool IsPlayingAppearAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1290, Size: 0x1]
	float PetAppearTime;//[Offset: 0x1294, Size: 0x4]
	float PetDelayLeaveDisappearTime;//[Offset: 0x1298, Size: 0x4]
	TimerHandle PetDelayLeaveDisappearTimer;//[Offset: 0x12a0, Size: 0x8]
	bool HasResetAttachByAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a8, Size: 0x1]
	enum TPlayerState;//[Offset: 0x12a9, Size: 0x1]
	byte TChangeType;//[Offset: 0x12aa, Size: 0x1]
	float TeleportMinAngle;//[Offset: 0x12ac, Size: 0x4]
	float TeleportMaxAngle;//[Offset: 0x12b0, Size: 0x4]
	bool ShouldHideOnFirstPersonView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b4, Size: 0x1]
	Vector SwimOffset;//[Offset: 0x12b8, Size: 0xc]
	int CountToPlayWinAnim;//[Offset: 0x12c4, Size: 0x4]
	int MaxCountToPlayWinAnim;//[Offset: 0x12c8, Size: 0x4]
	float IntervalToPlayWinAnim;//[Offset: 0x12cc, Size: 0x4]
	bool bPetHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bEnablePetReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c0, Size: 0x1]
	bool bEnableTraceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c1, Size: 0x1]
	float DefaultTraceDeltaTime;//[Offset: 0x11c4, Size: 0x4]
	float TraceLength;//[Offset: 0x11c8, Size: 0x4]
	float CurrentTraceDeltaTime;//[Offset: 0x11cc, Size: 0x4]
	byte[] TraceTypeConfig;//[Offset: 0x11d0, Size: 0x10]
	SimulateSyncSmoothComponent* PetSimulateSyncSmooth;//[Offset: 0x11e0, Size: 0x8]
	void TraceForward();// 0x6166fb0
	SimulateSyncSmoothComponent* GetSyncSmoothComponent();// 0x6166f7c
<----------Generated by SSpawner v1.0.4---------->


Class: BasePetController_BP_C.STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x508, Size: 0x8]
	void CalcInAirAttackArea();// 0x70644c4
	void OnPlayerStopEmote(int EmoteId, int Reason, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x70644c4
	void OnPlayerPlayEmote(int Emote, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void ExecuteUbergraph_BasePetController_BP(int EntryPoint, BehaviorTreeComponent* CallFunc_GetComponentByClass_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	BehaviorTree* CurBT;//[Offset: 0x510, Size: 0x8]
	FName PetOwnerEmoteId;//[Offset: 0x518, Size: 0x8]
	FName IsAirAttacking;//[Offset: 0x520, Size: 0x8]
	FName AirAttackArea;//[Offset: 0x528, Size: 0x8]
	TimerHandle CheckAirAttackTimer;//[Offset: 0x530, Size: 0x8]
	Vector CurAttackArea;//[Offset: 0x538, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	bool bEnableUpdateControlPetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 0x1]
	float PetBlockDetectionDistance;//[Offset: 0x4fc, Size: 0x4]
	float PetBlockDetectionInterval;//[Offset: 0x500, Size: 0x4]
	int PetBlockDetectionSampleCount;//[Offset: 0x504, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraPetController.AIController.Controller.Actor.Object
	BlackboardComponent* GetBlackboardComponent();// 0x61ac004
	void ChangeBehaviorTree(BehaviorTree* BTAsset);// 0x61abf80
<----------Generated by SSpawner v1.0.4---------->


Class: PetEventManagerComponent.ActorComponent.Object
	PetWaitEventInfo*[] WaitEventList;//[Offset: 0x110, Size: 0x10]
	PetEventItemIns[] EventConfigs;//[Offset: 0x120, Size: 0x10]
	BehaviorTree* DefaultBT;//[Offset: 0x130, Size: 0x8]
	BehaviorTree* CurrentBT;//[Offset: 0x138, Size: 0x8]
	STExtraPetController* PetController;//[Offset: 0x140, Size: 0x8]
	STExtraPetCharacter* PetCharacter;//[Offset: 0x148, Size: 0x8]
	PetEventItem* CurExecuteEvent;//[Offset: 0x150, Size: 0x8]
	int MaxWaitEventNum;//[Offset: 0x158, Size: 0x4]
	delegate OnPetEventDelegate;//[Offset: 0x160, Size: 0x10]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x5fc3e08
	void StartEventExecTimer(float ExecTime);// 0x5fc3d8c
	void ProcessWaitEvent(float Delta);// 0x5fc3d10
	void InitEventConfigs(bool bInLobby);// 0x5fc3c8c
	bool GetPredictPetOwnerState(PetEventPlayerStateTypeSt StateSt, out byte Enter, out byte Leave);// 0x5fc3b54
	PetEventItem* GetEventItem(PetWaitEventInfo* EventInfo);// 0x5fc3ac8
	void EnqueueWaitEvent(PetWaitEventInfo* Info);// 0x5fc3a4c
	void DequeueWaitEvent(bool bNeedExec);// 0x5fc39c8
	bool CheckCanInterruptCurEvent(PetEventItem* NextEventItem);// 0x5fc3938
	bool CanResponseEvent();// 0x5fc3900
	bool AddPetMontageConfig(PetMontageConfig MontageConfig, byte eEventType, bool bRemove);// 0x5fc37f4
<----------Generated by SSpawner v1.0.4---------->


Class: PetEventItemIns
	FString Tips;//[Offset: 0x0, Size: 0x10]
	PetEventItem* EventItem;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: PetEventPlayerStateTypeSt
	enum PawnState;//[Offset: 0x0, Size: 0x1]
	byte StateChangeType;//[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PetEntityComponent_BP_C.PetEntityComponent.ActorComponent.Object
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_PetPlayerOffsetTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, FString CallFunc_Array_Get_Item3, FString CallFunc_Array_Get_Item4, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, FString CallFunc_Array_Get_Item5, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue5, FString CallFunc_Array_Get_Item6, float CallFunc_Conv_StringToFloat_ReturnValue6, Rotator CallFunc_MakeRotator_ReturnValue, PetAttachInfo K2Node_MakeStruct_PetAttachInfo);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: PetEntityComponent.ActorComponent.Object
	STExtraPetCharacter* PetCharacter;//[Offset: 0x110, Size: 0x8]
	PetAttachInfo AttachInfo;//[Offset: 0x118, Size: 0x20]
	PetAttachInfo FollowAttachInfo;//[Offset: 0x138, Size: 0x20]
	PetAttachInfo FlyAroundAttachInfo;//[Offset: 0x158, Size: 0x20]
	PetAttachInfo CurAttachInfo;//[Offset: 0x178, Size: 0x20]
	FixPetAttachInfo[] FixAttachInfoList;//[Offset: 0x198, Size: 0x10]
	byte FollowType;//[Offset: 0x1a8, Size: 0x1]
	int[] ParachuteEquipItems;//[Offset: 0x1b0, Size: 0x10]
	enum[] PredictOwnerStates;//[Offset: 0x1c0, Size: 0x10]
	void UpdateAttachInfoList(bool bAdd, FixPetAttachInfo Info);// 0x5fc1bfc
	void OnPetStateChanged(byte State, bool IsEnter);// 0x5fc1b34
	STExtraPetCharacter* GetPetCharacter();// 0x5fc1b00
	PetAttachInfo GetCurrentAttachInfo();// 0x5fc1ab4
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: PetAttachInfo
	FName AttachSocketName;//[Offset: 0x0, Size: 0x8]
	Vector AttachOffset;//[Offset: 0x8, Size: 0xc]
	Rotator AttachRotation;//[Offset: 0x14, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: FixPetAttachInfo
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int PetId;//[Offset: 0x4, Size: 0x4]
	int Priority;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_PetPlayerOffsetTable_type
	int Priority_0_4534D740055E57BF79E04F1E0692B319;//[Offset: 0x0, Size: 0x4]
	FString ItemPetId_1_71823800373EB13632B5E93E0D64F5B4;//[Offset: 0x8, Size: 0x10]
	FString RelativeRotation_2_622D21C02715F60B1B6C03BB0A3B34BE;//[Offset: 0x18, Size: 0x10]
	FString RelativeLocation_3_7CA9FC003FA2AAD634B0A8A1090B10DE;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_PetPlayerEmoteTable_type
	int PetAnimID_0_0B8EF24060CA81E759CB86EB0B9DC804;//[Offset: 0x0, Size: 0x4]
	int PetResponse_1_315B018079F8B5826BBD3D2B05F09FE5;//[Offset: 0x4, Size: 0x4]
	FString PlayerEmotePetId_2_6616D2C02A115EB56446D9F30AF4E924;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PetEmotionEventInfo.PetWaitEventInfo.Object
	int EmotionId;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_PetActPlayerStateTable_type
	int PetID_0_7B9998C012D880D53C70B12C0D2280B4;//[Offset: 0x0, Size: 0x4]
	int PetActionID_1_26FA70406D0CF0E967A9660B078EE2C4;//[Offset: 0x4, Size: 0x4]
	FString PetLimiteState_3_107B0EC027578F8F39A3C9B002BE9A85;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_PetLevelTable_type
	int ActionID1_0_54564EC00C46D1792A24097D014062A1;//[Offset: 0x0, Size: 0x4]
	int KeyID_1_38C8754040A625D32E969D6F0A59B604;//[Offset: 0x4, Size: 0x4]
	int ActionID2_2_54574F000C46D17A2A24097C014062A2;//[Offset: 0x8, Size: 0x4]
	int PetLevel_3_0EFEB00033E6898053D6CAD40B4F695C;//[Offset: 0xc, Size: 0x4]
	int ActionCnt_4_6ED1A8806F6E05482A2429B001406784;//[Offset: 0x10, Size: 0x4]
	int PetID_5_0C7F3540138C63E52ED3D2E20A5EB304;//[Offset: 0x14, Size: 0x4]
	int ActionID5_6_545A4FC00C46D17D2A240979014062A5;//[Offset: 0x18, Size: 0x4]
	int ActionID4_7_54594F800C46D17C2A24097A014062A4;//[Offset: 0x1c, Size: 0x4]
	int ActionID3_8_54584F400C46D17B2A24097B014062A3;//[Offset: 0x20, Size: 0x4]
	int PetNeedExp_9_5C9DFC4020A68805594D9EAF091E67B0;//[Offset: 0x24, Size: 0x4]
	FString PetCharacter_10_0EB0D54006ABD083521623E20D6C9E82;//[Offset: 0x28, Size: 0x10]
	FString AllAction_11_64FEE580365AA5C6529430360BA1003E;//[Offset: 0x38, Size: 0x10]
	FString LobbyPetBP_12_6856D48026D8CEBA5718878204437A40;//[Offset: 0x48, Size: 0x10]
	FString PetFPPCharacter_13_2475CEC05F8CAFC156D174270BE8BD92;//[Offset: 0x58, Size: 0x10]
	FString PetLevelRewards_15_5109E60006928866497DD8620C3B1E13;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PetPawnStateEventInfo.PetWaitEventInfo.Object
	enum PawnState;//[Offset: 0x30, Size: 0x1]
	byte StateChangeType;//[Offset: 0x31, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_PetActionTable_type
	int PetID_7_6745CEC017101D417C9B58B90A755B44;//[Offset: 0x0, Size: 0x4]
	FString PetAnimRes_8_1054B74062846F873F7F61870FE97D73;//[Offset: 0x8, Size: 0x10]
	FString PetActionName_9_59EBE3401D89CA4B649608870B1AA8E5;//[Offset: 0x18, Size: 0x10]
	int PetActionID_10_44C4A640765EB8DD578572F800DB1934;//[Offset: 0x28, Size: 0x4]
	FString PetActionIcon_11_0E01054077EEE9A96496CC090B191A8E;//[Offset: 0x30, Size: 0x10]
	int PetActionScale_13_14B83D0078112AE64FD26A6101879B95;//[Offset: 0x40, Size: 0x4]
	FString PetActionOffset_14_563A3CC0122E069573D974410ABC02D4;//[Offset: 0x48, Size: 0x10]
	int SortKey_15_4284558068BCA7003662F2D30BFA2BB9;//[Offset: 0x58, Size: 0x4]
	int ShowInLobby_17_19FCF54003CF4A8B499026D50669DDB9;//[Offset: 0x5c, Size: 0x4]
	int PetLevelSequence_18_620F97C0416DE81971E437D407E050C5;//[Offset: 0x60, Size: 0x4]
	int MasterLevelSequence_19_7E9F6880389AC7D05D27B6F50E5E3325;//[Offset: 0x64, Size: 0x4]
	int MasterActionID_20_41F257005172E64A6B5508ED0B3D43A4;//[Offset: 0x68, Size: 0x4]
	FString PetActionDes_21_4DEDCA007AFFDB12510AFD0F0DB194C3;//[Offset: 0x70, Size: 0x10]
	int PetActionQuality_22_0B0B3D40109F72EB3D20AE6206BBA139;//[Offset: 0x80, Size: 0x4]
	FString LobbyPetAnimRes_23_14DFB5407421995D3FD421710D4C3683;//[Offset: 0x88, Size: 0x10]
	int NeedResetTransform_24_2D3D5000702BED64355585DF0DB7ED2D;//[Offset: 0x98, Size: 0x4]
	int IsShowInWorkshop_25_6C8D7D80144A232A340D11C70E5E4DE0;//[Offset: 0x9c, Size: 0x4]
	int ActionPattern_26_451A10400F2D985D0AA3122602B22CDE;//[Offset: 0xa0, Size: 0x4]
	FString SubActions_27_2602A0000DDFB1263FBCEEF30E0D7803;//[Offset: 0xa8, Size: 0x10]
	int RandomWeightInGame_28_66BB7FC06216921979CA00630DA660C5;//[Offset: 0xb8, Size: 0x4]
	int RandomWeightInLobby_29_6D551F405571C1C9277D41740A7BD749;//[Offset: 0xbc, Size: 0x4]
	int CanPlayInBattle_30_50D0700025F57A9A73FE1C2103805E35;//[Offset: 0xc0, Size: 0x4]
	int MasterSkillID_31_1F057F401C516F2B3752587D0A0726D4;//[Offset: 0xc4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraPetAnimInstance.AnimInstance.Object
	STExtraPetCharacter* C_PetCharacter;//[Offset: 0x3c0, Size: 0x8]
	STExtraBaseCharacter* C_PetOwnerCharacter;//[Offset: 0x3c8, Size: 0x8]
	int C_DeviceLevel;//[Offset: 0x3d0, Size: 0x4]
	bool C_IsPetAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1]
	bool C_PetOwnerHasSprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 0x1]
	bool C_PetOwnerIsAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d6, Size: 0x1]
	float C_PetMoveSpeed;//[Offset: 0x3d8, Size: 0x4]
	bool C_IsPetParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1]
	bool C_IsPetFastFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 0x1]
	bool C_IsPetDisappear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3de, Size: 0x1]
	bool C_IsPetFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3df, Size: 0x1]
	bool C_IsPetFlyAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool C_IsPetSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	float C_PetSwimmingAnimRate;//[Offset: 0x3e4, Size: 0x4]
	float C_PetSwimmingMaxAnimRate;//[Offset: 0x3e8, Size: 0x4]
	float C_PetSwimmingMinAnimRate;//[Offset: 0x3ec, Size: 0x4]
	float C_PetSwimmingAnimRateFactor;//[Offset: 0x3f0, Size: 0x4]
	float C_PetFastFallSpeed;//[Offset: 0x3f4, Size: 0x4]
	float C_PetFlyAroundDisappearTime;//[Offset: 0x3f8, Size: 0x4]
	float C_PetMoveThreshold;//[Offset: 0x3fc, Size: 0x4]
	AnimSequenceBase* C_AppearAnim;//[Offset: 0x400, Size: 0x8]
	AnimSequenceBase* C_DisppearAnim;//[Offset: 0x408, Size: 0x8]
	AnimSequenceBase* C_IdleAnim;//[Offset: 0x410, Size: 0x8]
	AnimSequenceBase* C_FreeFallAnim;//[Offset: 0x418, Size: 0x8]
	AnimSequenceBase* C_FastFreeFallAnim;//[Offset: 0x420, Size: 0x8]
	AnimSequenceBase* C_FollowAnim;//[Offset: 0x428, Size: 0x8]
	AnimSequenceBase* C_FlyAroundAnim;//[Offset: 0x430, Size: 0x8]
	AnimSequenceBase* C_SwimmingAnim;//[Offset: 0x438, Size: 0x8]
	BlendSpaceBase* C_SwimmingBS;//[Offset: 0x440, Size: 0x8]
	BlendSpaceBase* C_MovementBS;//[Offset: 0x448, Size: 0x8]
	STExtraBaseCharacter* SafeGetPetOwnerCharacter();// 0x61aa02c
	void OnPetStateChanged(byte State, bool IsEnter);// 0x61a9f64
	void OnPetMontageStarted(AnimMontage* InMontage);// 0x61a9ee0
	void OnPetMontageEnded(AnimMontage* InMontage, bool bInterrupted);// 0x61a9e18
	void OnPetMontage(PetMontageData Data);// 0x61a9d98
	void OnPetCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x61a9ce0
	void OnDisappearAnimEnd();// 0x61a9ccc
	byte GetPetActionPattern(int ActionID);// 0x61a9c40
	void DestroySubAnimations();// 0x61a9c2c
<----------Generated by SSpawner v1.0.4---------->


Class: PetAvatarComponent_BP_C.PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	void PetHasEquippedItem(int ID, out bool Out, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HasLogicEquipped_ReturnValue);// 0x70644c4
	void PetUnequipItemById(int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleUnequipItem_ReturnValue);// 0x70644c4
	void PetEquipItemById(int ID, AvatarCustom K2Node_MakeStruct_AvatarCustom, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x70644c4
	AvatarTableData MakeAvatarTableData(out ItemDefineID InItemID, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_PetDressBlueprintTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, AvatarTableData K2Node_MakeStruct_AvatarTableData);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	SkeletalMesh* MasterBoneDefualtSkeletalMesh;//[Offset: 0x8d8, Size: 0x8]
	PetAvatarHandle* PetDefaultAvatarHandle;//[Offset: 0x8e0, Size: 0x8]
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x5fbf854
	void InitMasterComponent();// 0x5fbf840
	void Initialize();// 0x5fbf824
	void InitialAvatarParam();// 0x5fbf810
	PetAvatarHandle* GetPetDefaultAvatarHandle();// 0x5fbf7d4
	bool CheckToEquipDefaultAvatar(int[] AvatarList);// 0x5fbf694
<----------Generated by SSpawner v1.0.4---------->


Class: PetAvatarHandle.AvatarHandleBase.ItemHandleBase.Object
	enum SlotType;//[Offset: 0xb0, Size: 0x1]
	PetMeshPackage MeshPackage;//[Offset: 0xb8, Size: 0x128]
	PetMeshPackage ReplaceMeshPackage;//[Offset: 0x1e0, Size: 0x128]
	enum[] SuitConflictWith;//[Offset: 0x308, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarHandleBase.ItemHandleBase.Object
	bool bEnableBPModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	int SlotID;//[Offset: 0xac, Size: 0x4]
	bool HandlePreApplyResource(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x5d99834
	bool HandlePostApplyResource(MeshComponent* InMeshComp, Object* Outer);// 0x5d99764
<----------Generated by SSpawner v1.0.4---------->


Class: PetMeshPackage.AssetPackage
	bool bGetMaterialFormMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	StaticMesh* stMesh;//[Offset: 0x10, Size: 0x28]
	SkeletalMesh* skMesh;//[Offset: 0x38, Size: 0x28]
	SkeletalMesh* SkMeshLow;//[Offset: 0x60, Size: 0x28]
	class AnimInstance* animBP;//[Offset: 0x88, Size: 0x8]
	class AnimInstance* LobbyAnimBP;//[Offset: 0x90, Size: 0x8]
	class AnimInstance* TransformAnimBP;//[Offset: 0x98, Size: 0x8]
	ParticleAsset[] ParticleData;//[Offset: 0xa0, Size: 0x10]
	MaterialInterface* Mat;//[Offset: 0xb0, Size: 0x28]
	MaterialInterface* MatBase;//[Offset: 0xd8, Size: 0x28]
	MaterialAsset[] additionalMats;//[Offset: 0x100, Size: 0x10]
	MaterialAsset[] SpecialMats;//[Offset: 0x110, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MaterialAsset
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* MatInst;//[Offset: 0x8, Size: 0x28]
	MaterialInterface* MatBase;//[Offset: 0x30, Size: 0x28]
	MaterialInterface* MatBaseObject;//[Offset: 0x58, Size: 0x8]
	bool bDynamicMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_PetDressBlueprintTable_type
	int Slot_0_31125FC006688BBB2E6646B20FAFCD34;//[Offset: 0x0, Size: 0x4]
	int ID_1_688F3A8033A7814C565560B30E5FAEF4;//[Offset: 0x4, Size: 0x4]
	FString Path_2_51589A804E9002622E9485530FAF46F8;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterAvatarComp2_BP_C.CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x10f0, Size: 0x8]
	void PrintDefaultConfig();// 0x70644c4
	void HandleCharacterHiddenChange(bool bHidden);// 0x70644c4
	void HandlePlayerScopeInOrOut(bool bScopeIn);// 0x70644c4
	void EnableAvatarAnimation(bool IsEnable, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue2, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, STClothAnimInstance* K2Node_DynamicCast_AsSTCloth_Anim_Instance, bool K2Node_DynamicCast_bSuccess2, SkirtAnimInstanceBase* K2Node_DynamicCast_AsSkirt_Anim_Instance_Base, bool K2Node_DynamicCast_bSuccess3, SkirtAnimInstanceBase* K2Node_DynamicCast_AsSkirt_Anim_Instance_Base2, bool K2Node_DynamicCast_bSuccess4, STClothAnimInstance* K2Node_DynamicCast_AsSTCloth_Anim_Instance2, bool K2Node_DynamicCast_bSuccess5);// 0x70644c4
	int GetRepalceIDOnVehicle(int OriginID);// 0x70644c4
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle, BattleItemHandle_AvatarBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Avatar_BP, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x70644c4
	bool IsEnableItemDownload(int ItemId);// 0x70644c4
	SoftObjectPath GetBatchDefaultBodyPath(int Temp_int_Variable, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue2, SoftObjectPath K2Node_Select_Default);// 0x70644c4
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh, SkeletalMaterial[] MatArray);// 0x70644c4
	bool PutOffEquimentByResID(int resID, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, ItemDefineID K2Node_MakeStruct_ItemDefineID, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_HandleUnequipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_HasLogicEquipped_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x70644c4
	bool PutOnEquipmentByResID(int resID, int CallFunc_GetBPIDByResID_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x70644c4
	void IsNeedConsiderHairCut(int InSlotID, out ItemDefineID ItemDefineID, BackpackAvatarHandle* Handle, out bool Result, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, enum CallFunc_IntToType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x70644c4
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID, int CallFunc_GetFakeAvatarHandleItem_ReturnValue);// 0x70644c4
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle, int Temp_int_Variable, int Temp_int_Variable2, int Temp_int_Variable3, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, ItemDefineID K2Node_MakeStruct_ItemDefineID3);// 0x70644c4
	bool BPClientPostProcessViewDataMiddle();// 0x70644c4
	void ProcessGodzillaSuit(int CallFunc_TypeToInt_ReturnValue, int CallFunc_TypeToInt_ReturnValue2, int CallFunc_TypeToInt_ReturnValue3, bool CallFunc_ModifySyncDataByReplace_ReturnValue, int CallFunc_TypeToInt_ReturnValue4, int CallFunc_TypeToInt_ReturnValue5, int CallFunc_TypeToInt_ReturnValue6, bool CallFunc_ModifySyncDataByReplace_ReturnValue2, int CallFunc_TypeToInt_ReturnValue7, int CallFunc_TypeToInt_ReturnValue8, bool CallFunc_ModifySyncDataByReplace_ReturnValue3, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc, bool CallFunc_GetSyncDataBySlot_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, int CallFunc_TypeToInt_ReturnValue9, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc2, bool CallFunc_GetSyncDataBySlot_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, int CallFunc_TypeToInt_ReturnValue10, int CallFunc_TypeToInt_ReturnValue11, int CallFunc_TypeToInt_ReturnValue12, bool CallFunc_ModifySyncDataByHide_ReturnValue, bool CallFunc_ModifySyncDataByReplace_ReturnValue4, int CallFunc_TypeToInt_ReturnValue13, int CallFunc_TypeToInt_ReturnValue14, int CallFunc_TypeToInt_ReturnValue15, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc3, bool CallFunc_GetSyncDataBySlot_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue3, bool CallFunc_IsLobbyAvatar_ReturnValue2, bool CallFunc_IsBattleItemHandleExist_ReturnValue2);// 0x70644c4
	bool IsItemHasMutilReplaceMesh(int InSlotID, out ItemDefineID InItemID, bool CallFunc_IsLobbyAvatar_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, BackpackAvatarHandle* CallFunc_GetLoadedHandle_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result);// 0x70644c4
	bool IsUseDefaultReplaceModel(int InSlotID, out ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle, int CallFunc_TypeToInt_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result, int CallFunc_TypeToInt_ReturnValue2, AvatarSlotDesc CallFunc_GetViewDataBySlot_OutSlotDesc, bool CallFunc_GetViewDataBySlot_ReturnValue, int CallFunc_TypeToInt_ReturnValue3, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2);// 0x70644c4
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID, enum CallFunc_IntToType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2);// 0x70644c4
	void CheckAvatarWhoHideWho(enum SlotType, ItemDefineID resID, out int[] HideSomeAvatar, out int[] HideBySomeAvatar, int[] OutHideSomeAvatar, int[] OutHideBySomeAvatar, int Temp_int_Array_Index_Variable, int CallFunc_TypeToInt_ReturnValue, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, int[] CallFunc_GetSyncDataStateFor_OutHideSlotID, int[] CallFunc_GetSyncDataStateFor_OutReplaceSlotID, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, enum CallFunc_IntToType_ReturnValue, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID, bool CallFunc_GetSyncDataItemID_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Conv_IntToBool_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable2, int Temp_int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item2, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID2, bool CallFunc_GetSyncDataItemID_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2);// 0x70644c4
	void PutOnCustomEquipmentByID(int resID, int ColorID, int PatternID, out bool Result, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x70644c4
	void SetEquipmentPattern(enum SlotType, Texture* MaskGrayTexture, SlotToMatPattern K2Node_MakeStruct_SlotToMatPattern, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x70644c4
	void SetEquipmentColor(enum SlotType, LinearColor MaskColor1, LinearColor MaskColor2, LinearColor MaskColor3, Texture* MaskGrayTextrue, LinearColor[] K2Node_MakeArray_Array, SlotToMatColor K2Node_MakeStruct_SlotToMatColor, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x70644c4
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x70644c4
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID, LinearColor[] TempColorArray, FString CallFunc_Conv_IntToString_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, BP_STRUCT_DiySuitColorConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, LinearColor CallFunc_ArrayInt2LinearColor_ReturnValue, int CallFunc_Array_Length_ReturnValue, LinearColor CallFunc_ArrayInt2LinearColor_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue2, LinearColor CallFunc_ArrayInt2LinearColor_ReturnValue3, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_GreaterEqual_IntInt_ReturnValue3, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Add_ReturnValue3, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x70644c4
	int GetEquipmentSkinItemID(int InItemID, BackpackBlueprintUtils* CallFunc_GetBPUtils_ReturnValue, BackpackBlueprintUtils_BP_C* K2Node_DynamicCast_AsBackpack_Blueprint_Utils_BP, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetEquipmentSkinIDByAvatar_SkinItemID);// 0x70644c4
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x70644c4
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID, bool CallFunc_IsDedicatedServer_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_DisuseItem_ReturnValue);// 0x70644c4
	bool PutOnDefaultEquipment(BackpackAvatarHandle* ItemHandle, ItemDefineID CallFunc_GetDefineID_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue, bool CallFunc_HandleEquipItem_ReturnValue);// 0x70644c4
	bool InitBodyMeshByHead(out ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle, int[] TempBodyResIDList, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_AvatarDefaultConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_Split_LeftS2, FString CallFunc_Split_RightS2, bool CallFunc_Split_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, int CallFunc_Conv_StringToInt_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue4, FString CallFunc_Split_LeftS3, FString CallFunc_Split_RightS3, bool CallFunc_Split_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue5, int CallFunc_Conv_StringToInt_ReturnValue6, ItemDefineID K2Node_MakeStruct_ItemDefineID3);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x70644c4
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x70644c4
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x70644c4
	void ClearEventFromOnAvatarEquippedEvent();// 0x70644c4
	void OnPlayerScopeIn(bool bIsBegin);// 0x70644c4
	void OnPlayerScopeOut(bool bIsBegin);// 0x70644c4
	void OnCharacterHiddenStateChange(bool bIsHidden);// 0x70644c4
	void ExecuteUbergraph_CharacterAvatarComp2_BP(int EntryPoint, bool K2Node_CustomEvent_bIsHidden, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, BattleItemUseTarget K2Node_Event_Target, BackpackAvatarHandle* K2Node_Event_InAvatarHandle, enum K2Node_Event_Reason, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess2, bool K2Node_CustomEvent_bIsBegin2, bool K2Node_CustomEvent_bIsBegin);// 0x70644c4
	BackpackAvatarItemColor* BasedAvatarColorHandle;//[Offset: 0x10f8, Size: 0x8]
	BackpackAvatarItemPattern* BasedAvatarPatternHandle;//[Offset: 0x1100, Size: 0x8]
	int[] HoodClothSubTypeMap;//[Offset: 0x1108, Size: 0x10]
	enum PreEquipClothReason;//[Offset: 0x1118, Size: 0x1]
	SkeletalMesh* MaleBatchBodySoftPath;//[Offset: 0x1120, Size: 0x28]
	SkeletalMesh* FemaleBatchBodySoftPath;//[Offset: 0x1148, Size: 0x28]
	bool bForbidBindAvatarEquippedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1170, Size: 0x1]
	int[] NeedModifyVehicleID;//[Offset: 0x1178, Size: 0x10]
	<enum,int> SlotToFakeHandleMap;//[Offset: 0x1188, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: STClothAnimInstance.AnimInstance.Object
	enum AnimInstanceType;//[Offset: 0x3bb, Size: 0x1]
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x3c0, Size: 0x8]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	bool C_IsSimulatCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 0x1]
	float C_BlendFactorInLobby;//[Offset: 0x3cc, Size: 0x4]
	float C_BlendFactorInBattle;//[Offset: 0x3d0, Size: 0x4]
	float C_MoveThreshold;//[Offset: 0x3d4, Size: 0x4]
	float C_BlendScaleThreshold;//[Offset: 0x3d8, Size: 0x4]
	float C_BlendScale;//[Offset: 0x3dc, Size: 0x4]
	SkeletalMeshComponent* ParentMesh;//[Offset: 0x3e8, Size: 0x8]
	Vector LastLocation;//[Offset: 0x3f0, Size: 0xc]
	SkeletalMeshComponent* TryGetParentMeshComponent();// 0x60e71d8
	bool isCothAnimEnable();// 0x60e71a0
	void EnableClothAnim();// 0x60e718c
	void DisableClothAnim();// 0x60e7178
<----------Generated by SSpawner v1.0.4---------->


Class: SkirtAnimInstanceBase.AvatarDynamicAnimInstance.AnimInstance.Object
	byte CurrentPoseType;//[Offset: 0x3d0, Size: 0x1]
	bool IsOnMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 0x1]
	bool IsInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d2, Size: 0x1]
	Vector PawnCurVelocity;//[Offset: 0x3d4, Size: 0xc]
	CharacterAvatarComponent2* AvatarComp;//[Offset: 0x3e0, Size: 0x8]
	int gender;//[Offset: 0x3e8, Size: 0x4]
	bool IsBackpackEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 0x1]
	bool IsLobbyPawnRotating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 0x1]
	bool IsWindEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 0x1]
	bool IsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ef, Size: 0x1]
	bool IsUsingSpecialIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	bool AllowSKMeshCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 0x1]
	bool bParachuteWindFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2, Size: 0x1]
	bool bUsingVehicleParachuteProp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f3, Size: 0x1]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x3f8, Size: 0x8]
	STExtraLobbyCharacter* OwnerLobbyCharacter;//[Offset: 0x400, Size: 0x8]
	SkeletalMeshComponent* OwnerReAttachMesh;//[Offset: 0x418, Size: 0x8]
	bool bTriggerIKWhenHoldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	enum[] TriggerIKStateList;//[Offset: 0x428, Size: 0x10]
	enum[] ForceIgnoreBoneRetargetStateList;//[Offset: 0x438, Size: 0x10]
	bool bAnimNotifyForceIKState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool AnyMontageIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1]
	bool bForceIgnoreBoneRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44a, Size: 0x1]
	bool bIsEquippedAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44b, Size: 0x1]
	bool bNeedCheckSpecialAricraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 0x1]
	bool bIsEquipSpecialAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 0x1]
	float InputX;//[Offset: 0x450, Size: 0x4]
	float InputY;//[Offset: 0x454, Size: 0x4]
	int[] SpecialEquipmentsID;//[Offset: 0x458, Size: 0x10]
	bool bIsInIKState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	void SetIsInIKState(const bool InIsInIKState);// 0x6076e60
	void SetForceIgnoreBoneRetarget(bool Ignore);// 0x6076ddc
	void RefreshIKVariableState();// 0x6076dc0
	void RefreshForceIgnoreBoneRetarget();// 0x6076da4
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x6076cf0
	void OnSimulateCharStateChanged(const uint64 InCurrentStates, const uint64 InPrevStates);// 0x6076c34
	void OnOwnerLobbyCharWeaponVisibilityChange();// 0x6076c20
	void OnOwnerLobbyCharChangeWeapon();// 0x6076c0c
	void OnOwnerCharChangeWeapon(byte TargetChangeSlot);// 0x6076b90
	void OnAvatarAllMeshLoaded();// 0x6076b7c
	bool IsEnableCustomIK();// 0x6076b3c
	bool isCothAnimEnable();// 0x6076b04
	bool IsAnyMontagePlayingOnOwner();// 0x6076acc
	void HandleStateChanged(enum EnteredState);// 0x6076a50
	void HandleCorectSkMeshAnim(bool bOpenCorrect);// 0x60769cc
	void EnableClothAnim();// 0x60769b8
	void DisableClothAnim();// 0x60769a4
	void AnimNotifyForceIKState(const bool InIsForce);// 0x6076918
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarDynamicAnimInstance.AnimInstance.Object
	enum InGameSimulationSpace;//[Offset: 0x3bb, Size: 0x1]
	enum LobbySimulationSpace;//[Offset: 0x3bc, Size: 0x1]
	float AnimDynAlpha;//[Offset: 0x3c0, Size: 0x4]
	enum CurrentSimulateSpace;//[Offset: 0x3c4, Size: 0x1]
	SkeletalMeshComponent* OwnerCharacterMesh;//[Offset: 0x3c8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraLobbyCharacter.Character.Pawn.Actor.Object
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 0x1]
	FString LobbyPlayerKey;//[Offset: 0x8a0, Size: 0x10]
	FString PlayerUID;//[Offset: 0x8b0, Size: 0x10]
	bool bWeaponAnimOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 0x1]
	delegate lobbyCharacterSceneTypeChangeEvent;//[Offset: 0x8c8, Size: 0x10]
	byte charSceneType;//[Offset: 0x8d8, Size: 0x1]
	byte lobbyPosIdx;//[Offset: 0x8d9, Size: 0x1]
	int LocalLobbyPos;//[Offset: 0x8dc, Size: 0x4]
	delegate lobbyCharGenderChangeDelegate;//[Offset: 0x8e0, Size: 0x10]
	delegate LobbyCharWeaponChangeDelegate;//[Offset: 0x8f0, Size: 0x10]
	delegate ChangeWeaponVisibilityDelegate;//[Offset: 0x900, Size: 0x10]
	byte lobbyGender;//[Offset: 0x910, Size: 0x1]
	class AnimInstance* LobbyMaleAnimClass;//[Offset: 0x918, Size: 0x28]
	class AnimInstance* LobbyFemaleAnimClass;//[Offset: 0x940, Size: 0x28]
	STExtraWeapon* curEquipWeapon;//[Offset: 0x968, Size: 0x8]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x970, Size: 0x8]
	int resultAvatarPoseIndex;//[Offset: 0x978, Size: 0x4]
	LobbyCharacterWeaponAnimData[] AddCharacterWeaponAnimList;//[Offset: 0x980, Size: 0x10]
	delegate lobbyCharPosChangeDelegate;//[Offset: 0x990, Size: 0x10]
	BackpackEmoteHandle* curHandle;//[Offset: 0x9a0, Size: 0x8]
	delegate EmoteMontageStartEvent;//[Offset: 0x9a8, Size: 0x10]
	delegate EmoteStartWithMainCharacterConfigEvent;//[Offset: 0x9b8, Size: 0x10]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x9c8, Size: 0x10]
	AkComponent* emoteSound_Comp;//[Offset: 0x9d8, Size: 0x8]
	LobbyGodEffectComponent* GodEffectComponent;//[Offset: 0x9e0, Size: 0x8]
	class LobbyGodEffectComponent* GodEffectComponentPath;//[Offset: 0x9e8, Size: 0x28]
	bool IsMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 0x1]
	delegate LobbyPoseWithFriend;//[Offset: 0xa20, Size: 0x10]
	delegate LobbyCancelPoseWithFriend;//[Offset: 0xa30, Size: 0x10]
	FString LuaFilePath;//[Offset: 0xa40, Size: 0x10]
	void UnequipWeapon(STExtraWeapon* Weapon);// 0x6191e38
	void StopGodEffect();// 0x6191e24
	void SetStatueInfo(out const CharacterStatueInfo Info);// 0x6191d4c
	void SetResultAvatarPosIndex(int PosIndex);// 0x6191cd0
	void SetMaleAnimClass();// 0x6191cb4
	void SetLobbyPosIndexInAvatarScene(int pos);// 0x6191c38
	void SetLobbyPosIndex(byte pos);// 0x6191bb4
	void SetLobbyCharacterProperty(byte sceneType, byte pos, byte gender);// 0x6191aa8
	void SetLobbyAnimGender(byte gender);// 0x6191a24
	void SetFemaleAnimClass();// 0x6191a08
	void SetCharSceneType(byte sceneType);// 0x6191984
	bool SetAddCharacterWeaponAnimList(out const LobbyCharacterWeaponAnimData[] addAnimData);// 0x61918c4
	void PlayGodEffect(int Level);// 0x6191848
	void PlayEmoteInterruptSound();// 0x6191834
	bool OnStopEmote();// 0x61917fc
	bool OnPlayEmote(int EmoteId, FString ExtraInfo);// 0x6191674
	void HandleOnCharAnimLoadingFinished(STExtraWeapon* Weapon);// 0x61915f8
	AELobbyCharAnimListComp* GetWeaponAnimComponent();// 0x61915c4
	AnimationAsset* GetWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x61914c0
	int GetPosIndex();// 0x619148c
	byte GetLobbyPosIndex();// 0x6191458
	byte GetLobbyAnimGender();// 0x6191424
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x70644c4
	STExtraWeapon* GetCurrentWeapon();// 0x61913f0
	byte GetCharSceneType();// 0x61913bc
	AnimationAsset* GetCharacterPlayWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int AnimIndex);// 0x61912b8
	AnimationAsset* GetCharacterAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x61911b4
	void ForceRefreshCharacterAnimation();// 0x61911a0
	void EquipWeapon(STExtraWeapon* Weapon);// 0x6191124
	bool CheckEmoteAction(EmoteActionBase* Action, int EmoteId);// 0x6191050
	void CallGlobalLuaFunction(FString FunctionName);// 0x6190fa8
	void BroadcastWeaponVisibilityChange();// 0x6190f94
<----------Generated by SSpawner v1.0.4---------->


Class: LobbyCharacterWeaponAnimData
	byte PosIndex;//[Offset: 0x0, Size: 0x1]
	FString CharPosName;//[Offset: 0x8, Size: 0x10]
	LobbyCharacterGenderWeaponAnimData[] GenderWeaponAnimList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LobbyCharacterGenderWeaponAnimData
	byte GenderType;//[Offset: 0x0, Size: 0x1]
	FString GenderTypeName;//[Offset: 0x8, Size: 0x10]
	AnimationAsset* WeaponAnimSoftPtr;//[Offset: 0x18, Size: 0x28]
	AnimationAsset* WeaponAddAnimSoftPtr;//[Offset: 0x40, Size: 0x28]
	AnimationAsset*[] WeaponPlayAnimSoftPtrArray;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LobbyGodEffectComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* ParticleEffect1;//[Offset: 0x2d0, Size: 0x28]
	ParticleSystem* ParticleEffect2;//[Offset: 0x2f8, Size: 0x28]
	ParticleSystem* ParticleEffect3;//[Offset: 0x320, Size: 0x28]
	ParticleSystem* ParticleEffect100;//[Offset: 0x348, Size: 0x28]
	ParticleSystem* ParticleEffect101;//[Offset: 0x370, Size: 0x28]
	ParticleSystem* ParticleEffect102;//[Offset: 0x398, Size: 0x28]
	ParticleSystem* ParticleEffect103;//[Offset: 0x3c0, Size: 0x28]
	ParticleSystem* ParticleEffect104;//[Offset: 0x3e8, Size: 0x28]
	class UserWidget* GodEffectWidget;//[Offset: 0x410, Size: 0x8]
	WidgetComponent* WidgetComponent;//[Offset: 0x418, Size: 0x8]
	ParticleSystemComponent*[] effects;//[Offset: 0x428, Size: 0x10]
	void StopEffect();// 0x5f4a354
	void SetNameText(int TextId);// 0x5f4a2d0
	void PlayGodEffect(int Level, Vector Location);// 0x5f4a218
	void OnAsyncLoadEffectFinish(int Level, Vector Location);// 0x5f4a160
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterStatueInfo
	int AGender;//[Offset: 0x0, Size: 0x4]
	int Head;//[Offset: 0x4, Size: 0x4]
	int Hair;//[Offset: 0x8, Size: 0x4]
	int WeaponId;//[Offset: 0xc, Size: 0x4]
	FString Name;//[Offset: 0x10, Size: 0x10]
	FString Nation;//[Offset: 0x20, Size: 0x10]
	int[] AvatarList;//[Offset: 0x30, Size: 0x10]
	GameModePlayerItem[] AvatarInfoList;//[Offset: 0x40, Size: 0x10]
	int Index;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	LobbyCharacterWeaponAnimData[] CharacterWeaponAnimEditList;//[Offset: 0x218, Size: 0x10]
	LobbyCharacterWeaponAnimData[] AvatarSceneCharacterWeaponAnimEditList;//[Offset: 0x228, Size: 0x10]
	LobbyCharacterWeaponAnimData[] LobbyWithCarCharacterWeaponAnimEditList;//[Offset: 0x238, Size: 0x10]
	LobbyCharacterWeaponAnimData[] LobbySystemCharacterWeaponAnimEditList;//[Offset: 0x248, Size: 0x10]
	int resultAvatarPoseIndex;//[Offset: 0x258, Size: 0x4]
	void OnAsyncLoadingFinished(LobbyAsyncLoadCharAnimParams LoadingParam);// 0x6928168
	void InitPendingList(out LobbyCharacterWeaponAnimData[] animEditList, out SoftObjectPath[] PendingList);// 0x6927fe4
	AnimationAsset* GetCharacterAnim(byte PosIdx, byte GenderType, int WeaponAnimType, byte sceneType);// 0x6927ea4
	void BuildAnimMap(out LobbyCharacterWeaponAnimData[] AnimList, byte sceneType);// 0x6927db4
<----------Generated by SSpawner v1.0.4---------->


Class: LobbyAsyncLoadCharAnimParams
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemHandle_AvatarBP_C.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	bool IsSwimConfig(bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x70644c4
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x70644c4
	void GetWrapperClass(out class PickUpWrapperActor WrapperClass, ItemDefineID CallFunc_GetDefineID_ReturnValue, class Object CallFunc_GetWrapperActorClass_ReturnValue, class PickUpWrapperActor K2Node_ClassDynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_ClassDynamicCast_bSuccess);// 0x70644c4
	BattleItemData ExtractItemData(<int,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, ItemDefineID CallFunc_GetDefineID_ReturnValue, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x70644c4
	void LocalHandleDisuse(int CallFunc_GetAssociationTypeIDFromAvatarSlotType_ReturnValue);// 0x70644c4
	World* GetWorldInternal(World* CallFunc_GetWorld_BP_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void SpawnWrapperOnGround(class PickUpWrapperActor WrapperClass, bool bUseRandomLoc, GameModeBase* CallFunc_GetGameMode_ReturnValue, BattleRoyaleGameModeBase* K2Node_DynamicCast_AsBattle_Royale_Game_Mode_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValidClass_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue2, BattleRoyaleGameModeBase* K2Node_DynamicCast_AsBattle_Royale_Game_Mode_Base2, bool K2Node_DynamicCast_bSuccess2, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, PickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Vector CallFunc_GetRandomPutDownLocation_ReturnValue, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue2);// 0x70644c4
	bool HandleDisuse(enum Reason, bool CallFunc_HandleDisuse_ReturnValue);// 0x70644c4
	bool HandleDrop(int InCount, enum Reason, class PickUpWrapperActor CallFunc_GetWrapperClass_wrapperClass, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleDrop_ReturnValue);// 0x70644c4
	bool HandlePickup(out interface class ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason, bool CallFunc_HandlePickup_ReturnValue, BattleItemHandleBase* CallFunc_GetCharacterVirtualItemHandleInBackpack_ReturnValue, BackpackComponent* K2Node_DynamicCast_AsBackpack_Component, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_DynamicCast_AsActor, bool K2Node_DynamicCast_bSuccess2, Transform CallFunc_GetTransform_ReturnValue, Object* CallFunc_GetOwningObject_ReturnValue, Controller* K2Node_DynamicCast_AsController, bool K2Node_DynamicCast_bSuccess3, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4);// 0x70644c4
	bool HandleUse(BattleItemUseTarget Target, enum Reason, bool CallFunc_HandleUse_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, int CallFunc_GetAssociationTypeIDFromAvatarSlotType_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, ItemDefineID CallFunc_GetDefineID_ReturnValue2, ItemAssociation K2Node_MakeStruct_ItemAssociation, ItemDefineID CallFunc_GetDefineID_ReturnValue3, bool CallFunc_IsValid_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue4, ItemAssociation K2Node_MakeStruct_ItemAssociation2);// 0x70644c4
	STExtraPlayerController* OwningPlayerController;//[Offset: 0xac8, Size: 0x8]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xad0, Size: 0x8]
	BackpackComponent* OwningBackpackComponent;//[Offset: 0xad8, Size: 0x8]
	Transform SourceWrapperTrans;//[Offset: 0xae0, Size: 0x30]
	Transform WrapperPutdownTrans;//[Offset: 0xb10, Size: 0x30]
	class PickUpWrapperActor* WrapperClass;//[Offset: 0xb40, Size: 0x8]
	BattleItemHandleBase* CharacterItemHandle;//[Offset: 0xb48, Size: 0x8]
	byte SlotNameConfig;//[Offset: 0xb50, Size: 0x1]
	byte ForceGender;//[Offset: 0xb51, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_DiySuitColorConfig_type
	int ItemID_1_15B6748029F10AF4167429B5070FACB4;//[Offset: 0x0, Size: 0x4]
	FString BPUrl_2_1E617EC03A4F456D2C223D0106670E5C;//[Offset: 0x8, Size: 0x10]
	int Cost_3_63AB73C07271FCFF75FDA1880D66A384;//[Offset: 0x18, Size: 0x4]
	int ID_4_0CD2D0C023DDAD912AEEEF92052D66D4;//[Offset: 0x1c, Size: 0x4]
	FString ColorName_9_56C1CD807D19C79E1E3D3EDE01B12E25;//[Offset: 0x20, Size: 0x10]
	int[] MaskColor1_a_11_14512C805333B5405D0FD0FD032BE651;//[Offset: 0x30, Size: 0x10]
	int[] MaskColor2_a_12_6E69ECC05EBDA3E75D0FD734032BE551;//[Offset: 0x40, Size: 0x10]
	int[] MaskColor3_a_13_4882AD006A47928E5D0F3AA4032BEC51;//[Offset: 0x50, Size: 0x10]
	float GrayScale_f_15_0D6CFD80123EC6A658D3D8300FFAF166;//[Offset: 0x60, Size: 0x4]
	int[] UIShowColor_a_16_100C6D00219953BA2ABB948401FA2891;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackBlueprintUtils.Object
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0x100, Size: 0x10]
	CreateBattleItemHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0x110, Size: 0x10]
	<int,CreateBattleItemHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0x120, Size: 0x50]
	<int,enum> TClipTypeMap;//[Offset: 0x170, Size: 0x50]
	<int,int> mapPickupBullet;//[Offset: 0x1c0, Size: 0x50]
	<int,enum> mapAttachPos;//[Offset: 0x210, Size: 0x50]
	<int,int> CustomPickupItemIDMap;//[Offset: 0x260, Size: 0x50]
	PickupSetting PickupSetting;//[Offset: 0x2b0, Size: 0x1c8]
	PickupSettingForTPlan PickupSettingForMod;//[Offset: 0x478, Size: 0x1e8]
	PickupProposeData proposeData;//[Offset: 0x660, Size: 0x178]
	int[] NeedToShowTypeList;//[Offset: 0x7d8, Size: 0x10]
	int[] ConsumeableMissionItemID;//[Offset: 0x7e8, Size: 0x10]
	int[] CanNotAutoSwitchGrenadeList;//[Offset: 0x7f8, Size: 0x10]
	<int,FName> ItemSubTypeNameMap;//[Offset: 0x808, Size: 0x50]
	enum CurrentGameModeType;//[Offset: 0x858, Size: 0x1]
	FString ItemTableName;//[Offset: 0x860, Size: 0x10]
	FString AttachTableName;//[Offset: 0x870, Size: 0x10]
	FString ItemAttrsTableName;//[Offset: 0x880, Size: 0x10]
	FString SuitEmoteTableName;//[Offset: 0x890, Size: 0x10]
	FString OccupationTableName;//[Offset: 0x8a0, Size: 0x10]
	enum[] AvatarDownloadGameModeTypes;//[Offset: 0x8b0, Size: 0x10]
	<enum,int> AvatarDownloadPriority;//[Offset: 0x8c0, Size: 0x50]
	bool bShowWeaponPendant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]
	<int,int> itemGuid2Useful;//[Offset: 0x918, Size: 0x50]
	<int,int> gunMainTypeUseful;//[Offset: 0x968, Size: 0x50]
	<int,int> attachMainTypeUseful;//[Offset: 0x9b8, Size: 0x50]
	<int,int> bulletMainTypeUseful;//[Offset: 0xa08, Size: 0x50]
	<int,int> medicineAndGrenadeMainTypeUseful;//[Offset: 0xa58, Size: 0x50]
	<int,int> constructTypeUseful;//[Offset: 0xaa8, Size: 0x50]
	<int,int> skillpropsTypeUseful;//[Offset: 0xaf8, Size: 0x50]
	<int,bool> itemPathExist;//[Offset: 0xb48, Size: 0x50]
	int[] ItemToDownload;//[Offset: 0xb98, Size: 0x10]
	int AvatarDownloadMaxLimitTimes;//[Offset: 0xba8, Size: 0x4]
	bool bAvatarDownloadClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbac, Size: 0x1]
	bool bEnableTableOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbad, Size: 0x1]
	bool bEnableDSAvatarOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbae, Size: 0x1]
	int[] TombBoxItemBlackList;//[Offset: 0xbb0, Size: 0x10]
	int CharacterVirtualItem_Type;//[Offset: 0xbc0, Size: 0x4]
	int CharacterVirtualItem_TypeSpecificID;//[Offset: 0xbc4, Size: 0x4]
	<int,class BattleItemHandleBase> VirtualItemClassMap;//[Offset: 0xbc8, Size: 0x50]
	<int> NoUseVirtualItemIDs;//[Offset: 0xc18, Size: 0x50]
	bool bAutoPickIngoreBackpackCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc68, Size: 0x1]
	int AutoPickMeleeID;//[Offset: 0xc6c, Size: 0x4]
	void ResetItemToDownload();// 0x5de20ac
	void ResetBattleItemHandleExist(out const ItemDefineID DefineID);// 0x5de201c
	void OnPostSwitchGameStatut(FString InGameStatus);// 0x5de1f74
	void OnGameModeTypeChanged();// 0x5de1f58
	bool IsVirtualItemData(out const BattleItemData ItemData);// 0x5de1e90
	bool IsRollItem(out const PickUpItemData SearchItemResult);// 0x5de1d54
	bool IsParachuteItemType(int ItemId);// 0x5de1cbc
	bool IsInPveMode();// 0x70644c4
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID);// 0x5de1bec
	bool IsGrenadeCanAutoSwitch(int ItemId);// 0x5de1b54
	bool IsGlideItemType(int ItemId);// 0x5de1abc
	bool IsGhillieSuitItemType(int ItemId);// 0x5de1a24
	bool IsForceLoadLobbyHandle(out const ItemDefineID InItemID);// 0x5de1978
	bool IsEquipmentItem(int ItemId);// 0x5de18e0
	bool IsConsumableMissionItemType(int ItemId);// 0x5de1848
	bool IsBattleItemHandlePathExist(FString HandlePath);// 0x5de178c
	bool IsBattleItemHandleExist(out const ItemDefineID DefineID, bool bUseCache, bool bLobby, bool bForceLobby);// 0x5de1610
	bool Is3BackpackID(int ID);// 0x70644c4
	void Initialize();// 0x5de15fc
	void InitialItemTable();// 0x5de15e0
	bool HasTagSub(int ItemId, out const FName TagName);// 0x5de1504
	bool HasTag(int ItemId, out const FName TagName);// 0x5de1428
	int GetWeaponSkinMappingID(int InWeaponSkinID);// 0x70644c4
	WeaponAttachItemUnit[] GetWeaponAttachByWeaponDefineID(out const ItemDefineID DefineID, BackpackComponent* BackpackComp);// 0x5de12d8
	FString GetRawBattleTextByType(enum Type, int InSubType);// 0x5de11a0
	FString GetRawBattleTextByRawTextID(int ID);// 0x5de10a4
	int GetPendantIDByWeaponID(int WeaponId);// 0x5de1010
	int GetItemSubTypeID(int SpecificID);// 0x70644c4
	ItemRecordData GetItemRecord(int ItemId);// 0x5de0f5c
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName);// 0x70644c4
	int GetItemAttrsFlag(const int ItemId);// 0x5de0ed0
	int GetGrenadePriorityByType(int InGrenadeType);// 0x5de0e3c
	int GetEquipmentLevel(int ItemId);// 0x5de0da8
	int GetEquipmentHelmetLevel(int ItemId);// 0x5de0d14
	int GetEquipmentBagLevel(int ItemId);// 0x5de0c80
	int GetEquipmentArmorLevel(int ItemId);// 0x5de0bec
	int GetCustomPickupItemCountByDefineID(BackpackComponent* BackpackComp, out const ItemDefineID DefineID, out const JudgePickupUsefulItem JudgePickUseful);// 0x5de0a14
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp);// 0x5de0958
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp);// 0x5de08c4
	FString GetBPTableNameByItemID(out const ItemDefineID DefineID);// 0x5de07b4
	int GetBPIDByResID(int resID);// 0x5de0720
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out const ItemDefineID DefineID);// 0x5de05c8
	FString GetBattleItemHandlePathInner(out const ItemDefineID DefineID, bool bLobby, bool bForceLobby);// 0x5de042c
	FString GetBattleItemHandlePath(out const ItemDefineID DefineID, bool bLobby, bool bForceLobby);// 0x5de0288
	class Object GetBattleItemHandleClass(out const ItemDefineID DefineID);// 0x5de01e0
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out const ItemDefineID DefineID);// 0x5de0120
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID);// 0x5ddfff8
	ItemRecordData FindItemRecord(int ItemId);// 0x5ddff44
	BattleItemHandleBase* CreateVirtualItemHandle(out const ItemDefineID DefineID, Object* Outer);// 0x5ddfe5c
	BattleItemHandleBase* CreateBattleItemHandleInner(out const ItemDefineID DefineID, Object* Outer, bool bLobby, bool bLowDevice);// 0x5ddfcec
	BattleItemHandleBase* CreateBattleItemHandle(out const ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x5ddfbc0
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);// 0x5ddfb04
	BattleItemData ConstructBattleItemDataByDefineID(out const ItemDefineID DefineID);// 0x5ddfa34
	void ClearItemRecord();// 0x5ddfa20
	bool CheckItem(int ItemTableID);// 0x5ddf988
	bool CheckHasItemRecord(int ItemId);// 0x5ddf8f8
	bool CanNotAutoSwitchToGrenade(int InGrenadeID);// 0x5ddf860
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x5ddf7a4
<----------Generated by SSpawner v1.0.4---------->


Class: CreateBattleItemHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	Object* Outer;//[Offset: 0x18, Size: 0x8]
	FString Path;//[Offset: 0x20, Size: 0x10]
	delegate Callback;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CreateBattleItemHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 0x10]
	FString[] PathList;//[Offset: 0x10, Size: 0x10]
	Object* Outer;//[Offset: 0x20, Size: 0x8]
	delegate Callback;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PickupSetting
	int LimitBandage;//[Offset: 0x0, Size: 0x4]
	int LimitMedical;//[Offset: 0x4, Size: 0x4]
	int LimitFirstAidKit;//[Offset: 0x8, Size: 0x4]
	int LimitAnodyne;//[Offset: 0xc, Size: 0x4]
	int LimitEnergyDrinks;//[Offset: 0x10, Size: 0x4]
	int LimitAdrenaline;//[Offset: 0x14, Size: 0x4]
	int LimitShouliudan;//[Offset: 0x18, Size: 0x4]
	int LimitYanwudan;//[Offset: 0x1c, Size: 0x4]
	int LimitZhenbaodan;//[Offset: 0x20, Size: 0x4]
	int LimitRanshaodan;//[Offset: 0x24, Size: 0x4]
	int LimitViscidityBomb;//[Offset: 0x28, Size: 0x4]
	int LimitGrenadeZombie;//[Offset: 0x2c, Size: 0x4]
	int LimitGrenadeYedan;//[Offset: 0x30, Size: 0x4]
	int LimitAntidote;//[Offset: 0x34, Size: 0x4]
	int LimitBatteryChip;//[Offset: 0x38, Size: 0x4]
	int LimitGameCoin;//[Offset: 0x3c, Size: 0x4]
	int LimitBullet9mm;//[Offset: 0x40, Size: 0x4]
	int LimitBullet7_62mm;//[Offset: 0x44, Size: 0x4]
	int Limit12koujing;//[Offset: 0x48, Size: 0x4]
	int Limit45koujing;//[Offset: 0x4c, Size: 0x4]
	int Limit300magenandanyao;//[Offset: 0x50, Size: 0x4]
	int Limitbolt;//[Offset: 0x54, Size: 0x4]
	int LimitBullet5;//[Offset: 0x58, Size: 0x4]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1]
	int LimitSniper2X;//[Offset: 0x60, Size: 0x4]
	int LimitSniper3X;//[Offset: 0x64, Size: 0x4]
	int LimitSniper4X;//[Offset: 0x68, Size: 0x4]
	int LimitSniper6X;//[Offset: 0x6c, Size: 0x4]
	int LimitSniper8X;//[Offset: 0x70, Size: 0x4]
	bool AutoPickupSkillProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	int LimitSkillProps;//[Offset: 0x78, Size: 0x4]
	int LimitSnowMan;//[Offset: 0x7c, Size: 0x4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int AutoPickClipType;//[Offset: 0x84, Size: 0x4]
	<int,int> LimitDrugMap;//[Offset: 0x88, Size: 0x50]
	<int,int> LimitThrowObjMap;//[Offset: 0xd8, Size: 0x50]
	<int,int> LimitMultipleMirrorMap;//[Offset: 0x128, Size: 0x50]
	<int,int> LimitFixConsumeItemMap;//[Offset: 0x178, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: PickupSettingForTPlan
	int LimitSkillProps;//[Offset: 0x0, Size: 0x4]
	<int,int> LimitBulletMap_XT;//[Offset: 0x8, Size: 0x50]
	<int,int> LimitDrugMap_XT;//[Offset: 0x58, Size: 0x50]
	<int,int> LimitThrowObjMap_XT;//[Offset: 0xa8, Size: 0x50]
	<int,int> LimitMultipleMirrorMap_XT;//[Offset: 0xf8, Size: 0x50]
	<int,int> LimitNormalInfillingMap_XT;//[Offset: 0x148, Size: 0x50]
	<int,int> LimitHalloweenInfillingMap_XT;//[Offset: 0x198, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: PickupProposeData
	PickupFirstCount[] pickFirst;//[Offset: 0x0, Size: 0x10]
	int closeSubType;//[Offset: 0x10, Size: 0x4]
	int crossbowSubType;//[Offset: 0x14, Size: 0x4]
	int panID;//[Offset: 0x18, Size: 0x4]
	int pistolSubType;//[Offset: 0x1c, Size: 0x4]
	int gunType;//[Offset: 0x20, Size: 0x4]
	int specialType;//[Offset: 0x24, Size: 0x4]
	int specialType2;//[Offset: 0x28, Size: 0x4]
	int lens2ID;//[Offset: 0x2c, Size: 0x4]
	int lens3ID;//[Offset: 0x30, Size: 0x4]
	int lens4ID;//[Offset: 0x34, Size: 0x4]
	int lens6ID;//[Offset: 0x38, Size: 0x4]
	int lens8ID;//[Offset: 0x3c, Size: 0x4]
	int ID2Type;//[Offset: 0x40, Size: 0x4]
	int pistolClipSubType;//[Offset: 0x44, Size: 0x4]
	int SubMachineGunClipSubType;//[Offset: 0x48, Size: 0x4]
	int SniperClipSubType;//[Offset: 0x4c, Size: 0x4]
	int RifleClipSubType;//[Offset: 0x50, Size: 0x4]
	int gasSubID;//[Offset: 0x54, Size: 0x4]
	int backSubType;//[Offset: 0x58, Size: 0x4]
	int MedicalSubType;//[Offset: 0x5c, Size: 0x4]
	int back3ID;//[Offset: 0x60, Size: 0x4]
	int BandageID;//[Offset: 0x64, Size: 0x4]
	int QuickBandageID;//[Offset: 0x68, Size: 0x4]
	int EnergyDrinksID;//[Offset: 0x6c, Size: 0x4]
	int AdrenalineID;//[Offset: 0x70, Size: 0x4]
	int AnodyneID;//[Offset: 0x74, Size: 0x4]
	int Medical1ID;//[Offset: 0x78, Size: 0x4]
	int QuickMedical1ID;//[Offset: 0x7c, Size: 0x4]
	int Medical2ID;//[Offset: 0x80, Size: 0x4]
	int AntidoteID;//[Offset: 0x84, Size: 0x4]
	int BatteryChipID;//[Offset: 0x88, Size: 0x4]
	int GameCoinID;//[Offset: 0x8c, Size: 0x4]
	int ZhenBaoDan;//[Offset: 0x90, Size: 0x4]
	int YanWuDan;//[Offset: 0x94, Size: 0x4]
	int RanShaoPing;//[Offset: 0x98, Size: 0x4]
	int ShouLei;//[Offset: 0x9c, Size: 0x4]
	int FlarePistolID;//[Offset: 0xa0, Size: 0x4]
	int[] SideMirrorList;//[Offset: 0xa8, Size: 0x10]
	int[] MirrorList;//[Offset: 0xb8, Size: 0x10]
	int ViscidityBomb;//[Offset: 0xc8, Size: 0x4]
	int GrenadeZombie;//[Offset: 0xcc, Size: 0x4]
	int GrenadeYedan;//[Offset: 0xd0, Size: 0x4]
	int DefaultMedicineNum;//[Offset: 0xd4, Size: 0x4]
	int helmetSubType;//[Offset: 0xd8, Size: 0x4]
	int armorSubType;//[Offset: 0xdc, Size: 0x4]
	int ScoreItemSubType;//[Offset: 0xe0, Size: 0x4]
	int SpecialNoDropItemSubType;//[Offset: 0xe4, Size: 0x4]
	int IceDrinkItemSubType;//[Offset: 0xe8, Size: 0x4]
	int IsAutoPickUpTaskSubType;//[Offset: 0xec, Size: 0x4]
	int CapacityThreshold;//[Offset: 0xf0, Size: 0x4]
	int GlideSubType;//[Offset: 0xf4, Size: 0x4]
	int ParachuteItemSubType;//[Offset: 0xf8, Size: 0x4]
	int revivalCardID;//[Offset: 0xfc, Size: 0x4]
	int SnowManID;//[Offset: 0x100, Size: 0x4]
	float revivalCardValidTime;//[Offset: 0x104, Size: 0x4]
	int[] firewoodPriority;//[Offset: 0x108, Size: 0x10]
	int[] meatPriority;//[Offset: 0x118, Size: 0x10]
	int[] UAVList;//[Offset: 0x128, Size: 0x10]
	int[] ElectricityList;//[Offset: 0x138, Size: 0x10]
	int[] ToUseInBackpackSubList;//[Offset: 0x148, Size: 0x10]
	int[] ToUseInBackpackIDList;//[Offset: 0x158, Size: 0x10]
	int[] notExtractItemIDList;//[Offset: 0x168, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PickupFirstCount
	int pickID;//[Offset: 0x0, Size: 0x4]
	int Count;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	enum socket;//[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemRecordData
	int ItemId;//[Offset: 0x4, Size: 0x4]
	int itemType;//[Offset: 0x8, Size: 0x4]
	int ItemSubType;//[Offset: 0xc, Size: 0x4]
	int BPID;//[Offset: 0x10, Size: 0x4]
	int WeightforOrder;//[Offset: 0x14, Size: 0x4]
	int Worth;//[Offset: 0x18, Size: 0x4]
	int ItemCapacity;//[Offset: 0x1c, Size: 0x4]
	int Durability;//[Offset: 0x20, Size: 0x4]
	int ItemSoundID;//[Offset: 0x24, Size: 0x4]
	int ItemQuality;//[Offset: 0x28, Size: 0x4]
	int ItemPickupRule;//[Offset: 0x2c, Size: 0x4]
	int AIFullVaule;//[Offset: 0x30, Size: 0x4]
	float Weight;//[Offset: 0x34, Size: 0x4]
	int MaxCount;//[Offset: 0x38, Size: 0x4]
	bool AutoEquipandDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool Consumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool Equipable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	FString ItemName;//[Offset: 0x40, Size: 0x10]
	FString ItemBigIcon;//[Offset: 0x50, Size: 0x10]
	FString ItemDesc;//[Offset: 0x60, Size: 0x10]
	FString ItemSmallIcon;//[Offset: 0x70, Size: 0x10]
	FString KillWhiteIcon;//[Offset: 0x80, Size: 0x10]
	FString ItemWhiteIcon;//[Offset: 0x90, Size: 0x10]
	FString RedEmotionSoundPath;//[Offset: 0xa0, Size: 0x10]
	FString PickupDesc;//[Offset: 0xb0, Size: 0x10]
	FString BackpackSimple;//[Offset: 0xc0, Size: 0x10]
	FString SpecialIcon;//[Offset: 0xd0, Size: 0x10]
	FString ItemBigIcon2;//[Offset: 0xe0, Size: 0x10]
	FString ItemSmallIcon2;//[Offset: 0xf0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: JudgePickupUsefulItem
	PickUpItemData MainItemData;//[Offset: 0x0, Size: 0x38]
	int NetGUIDOffsetValue;//[Offset: 0x38, Size: 0x4]
	bool DropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleWeaponItemDisplayData
	FString ItemName;//[Offset: 0x0, Size: 0x10]
	FString WhiteIconPath;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackBlueprintUtils_BP_C.BackpackBlueprintUtils.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc70, Size: 0x8]
	int GetEquipmentArmorLevel(int ItemId, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x70644c4
	int GetEquipmentHelmetLevel(int ItemId, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x70644c4
	bool IsForceLoadLobbyHandle(out ItemDefineID InItemID, int CallFunc_GetClothAvatarTemplateID_ReturnValue, AvatarTableData CallFunc_GetAvatarDataFromTable_OutAvatarTableData, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x70644c4
	void IsSinkMode(out bool Out, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x70644c4
	int GetCustomPickupItemCountByDefineID(BackpackComponent* BackpackComp, out ItemDefineID DefineID, out JudgePickupUsefulItem JudgePickUseful, int CallFunc_GetItemCountByDefineID_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Max_ReturnValue);// 0x70644c4
	class Object GetBattleItemHandleClass(out ItemDefineID DefineID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class BattleItemHandleBase CallFunc_GetVirtualItemHandleClass_OutClass, bool CallFunc_GetVirtualItemHandleClass_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x70644c4
	bool CanNotAutoSwitchToGrenade(int InGrenadeID, bool CallFunc_Array_Contains_ReturnValue);// 0x70644c4
	void PreModifyPickupSettingData(SettingConfig_C* SettingConfig, int Temp_int_Variable, int Temp_int_Variable2, int Temp_int_Variable3, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int Temp_int_Variable4, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x70644c4
	bool IsConsumableMissionItemType(int ItemId, bool CallFunc_Array_Contains_ReturnValue);// 0x70644c4
	int GetGrenadePriorityByType(int InGrenadeType, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x70644c4
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_DrinkCompoundConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	bool IsEquipmentItem(int ItemId, bool CallFunc_Map_Contains_ReturnValue);// 0x70644c4
	BattleItemHandleBase* CreateVirtualItemHandle(out ItemDefineID DefineID, Object* Outer, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, class BattleItemHandleBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	int GetPendantIDByWeaponID(int WeaponId, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponAttrBPTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x70644c4
	int GetWeaponSkinMappingID(int InWeaponSkinID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x70644c4
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_ItemSoundTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x70644c4
	bool IsGlideItemType(int ItemId, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	bool IsGhillieSuitItemType(int ItemId, bool CallFunc_Array_Contains_ReturnValue);// 0x70644c4
	int GetEquipmentBagLevel(int ItemId, int ResultBagLevel, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x70644c4
	int GetEquipmentLevel(int ItemId, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x70644c4
	bool Is3BackpackID(int ID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	bool IsInPveMode(bool CallFunc_IsPveMode_out);// 0x70644c4
	void IsPVEMode(out bool Out, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x70644c4
	void GetEquipmentSkinIDByAvatar(int InItemID, GameModePlayerEquipmentAvatar EquipmentAvatar, out int SkinItemID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, bool CallFunc_Conv_IntToBool_ReturnValue3, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, int CallFunc_GetEquipmentLevel_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable2, int Temp_int_Variable3, int Temp_int_Variable4, int Temp_int_Variable5, int Temp_int_Variable6, int K2Node_Select_Default, int K2Node_Select2_Default, int K2Node_Select3_Default, FString CallFunc_Concat_StrStr_ReturnValue3, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x70644c4
	void ModifySetting();// 0x70644c4
	void ModifyPickupSetting(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, PickupSettingForTPlan K2Node_MakeStruct_PickupSettingForTPlan, PickupSetting K2Node_MakeStruct_PickupSetting);// 0x70644c4
	void ModifyBulletAndMedician(int Temp_int_Array_Index_Variable, bool CallFunc_IsSinkMode_out, int Temp_int_Loop_Counter_Variable, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Add_IntInt_ReturnValue, FName CallFunc_Array_Get_Item, FString CallFunc_Conv_NameToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_ArmoryConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Get_Item2, int CallFunc_Add_IntInt_ReturnValue2);// 0x70644c4
	int GetBPIDByResID(int resID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue);// 0x70644c4
	void AddToWeaponAttachPos(int attachID, enum socket, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x70644c4
	void InitItemTable(delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	FString GetBattleItemHandlePath(out ItemDefineID DefineID, bool bLobby, bool bForceLobby, FString CallFunc_GetBattleItemHandlePathInner_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, FString CallFunc_GetPath_ReturnValue);// 0x70644c4
	FString GetRawBattleTextByRawTextID(int ID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x70644c4
	FString GetRawBattleTextByType(enum Type, int InSubType, FName RowName, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x70644c4
	int GetItemSubTypeID(int SpecificID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue);// 0x70644c4
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out ItemDefineID DefineID, FString CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, FString CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, BattleWeaponItemDisplayData K2Node_MakeStruct_BattleWeaponItemDisplayData);// 0x70644c4
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2);// 0x70644c4
	bool IsVirtualItemData(out BattleItemData ItemData, bool CallFunc_Greater_IntInt_ReturnValue);// 0x70644c4
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, interface class CallFunc_GetItemHandleListByDefineID_self_CastInput, ItemHandleBase*[] CallFunc_GetItemHandleListByDefineID_ReturnValue, int CallFunc_Array_Length_ReturnValue, ItemHandleBase* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, BattleItemHandleBase* K2Node_DynamicCast_AsBattle_Item_Handle_Base, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void CreateBattleItemHandle_Character(Object* Outer, out BattleItemHandleBase* BattleItemHandle, BattleItemHandle_VirtualCharacter_C* CallFunc_SpawnObject_ReturnValue);// 0x70644c4
	void CreateBattleItemHandle_Default(int Type, int ID, Object* Outer, bool bLobby, out BattleItemHandleBase* BattleItemHandle, bool CallFunc_NeedUseLowDeviceHandle_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2);// 0x70644c4
	void GetBattleItemFeatureData(ItemDefineID DefineID, out BattleItemFeatureData FeatureData, int CountLimit, BattleItemFeatureData BattleItemFeatureData, int CallFunc_GetItemAttrsFlag_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData7 CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, BattleItemFeatureData K2Node_MakeStruct_BattleItemFeatureData);// 0x70644c4
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData);// 0x70644c4
	BattleItemHandleBase* CreateBattleItemHandle(out ItemDefineID DefineID, Object* Outer, bool bLobby, bool UseLobby, BattleItemHandleBase* Handle, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Character_BattleItemHandle, bool CallFunc_NeedUseLowDeviceHandle_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandleInner_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Default_BattleItemHandle, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemData[] CallFunc_GetItemListByDefineID_ReturnValue, BattleItemData CallFunc_Array_Get_Item);// 0x70644c4
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData5 CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x70644c4
	BattleItemData ConstructBattleItemDataByDefineID(out ItemDefineID DefineID, int TypeSpecificID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, FString CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, FString CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, FString CallFunc_GetTableDataField_Out3, bool CallFunc_GetTableDataField_ReturnValue3, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x70644c4
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x70644c4
	void InitialItemTable();// 0x70644c4
	void ExecuteUbergraph_BackpackBlueprintUtils_BP(int EntryPoint, UAEDataTable* CallFunc_GetDataTable_ReturnValue, BackpackComponent* K2Node_Event_BackpackComp, STExtraBaseCharacter* K2Node_Event_Character, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, BattleItemPickupInfo K2Node_MakeStruct_BattleItemPickupInfo, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, ItemDefineID CallFunc_GenerateItemDefineIDWithRandomInstanceID_ReturnValue, bool CallFunc_PickupItem_ReturnValue);// 0x70644c4
	BattleItemAdditionalData[] EmptyAdditionalData;//[Offset: 0xc78, Size: 0x10]
	<FName,ItemAssociation> EmptyAssociationMap;//[Offset: 0xc88, Size: 0x50]
	ItemAssociation[] EmptyAssociationArray;//[Offset: 0xcd8, Size: 0x10]
	<int,enum> EquipmentID2SlotID_Map;//[Offset: 0xce8, Size: 0x50]
	<int,int> EquipmentBagID2Level_Map;//[Offset: 0xd38, Size: 0x50]
	<int,int> EquipmentHelmetID2Level_Map;//[Offset: 0xd88, Size: 0x50]
	<int,int> EquipmentArmorID2Level_Map;//[Offset: 0xdd8, Size: 0x50]
	int[] GhillieSuitItem;//[Offset: 0xe28, Size: 0x10]
	<int,int> GrenadeTypeToPriority;//[Offset: 0xe38, Size: 0x50]
	<int,int> CacheItemId2BagLevelMap;//[Offset: 0xe88, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_DrinkCompoundConfig_type
	int awardID_0_2BBEB1403F5A9B0B0EB1D00709609964;//[Offset: 0x0, Size: 0x4]
	int awardNum_1_37D1DA0026A0923C7757AA8B0609AE2D;//[Offset: 0x4, Size: 0x4]
	int descID_2_1FD235403A90703F024A7AEA0BB716C4;//[Offset: 0x8, Size: 0x4]
	int ID_3_2F902D8037E77FA46237D6880B8119C4;//[Offset: 0xc, Size: 0x4]
	int isMayCarry_4_2AB2AB40581603397B72EE3809C59429;//[Offset: 0x10, Size: 0x4]
	int JpKrAwardID_5_49A847000D2541FE5295535A097982A4;//[Offset: 0x14, Size: 0x4]
	int JpKrAwardNum_6_2ECC8FC045A856D735DAF8570798322D;//[Offset: 0x18, Size: 0x4]
	FString Name_7_3AE82A806F13962C42B917EB011A5DB5;//[Offset: 0x20, Size: 0x10]
	FString solt_8_7F0FFAC007CB390F4285A58D011A9FB4;//[Offset: 0x30, Size: 0x10]
	int EmoteID_9_4C84EC007C583218352536360B9EB844;//[Offset: 0x40, Size: 0x4]
	FString PhizExplain_10_2575C54064E510CF536AC4300D724F0E;//[Offset: 0x48, Size: 0x10]
	FString EmoteVoiceName_11_60ECC6803A15389C4AA097EC0673F2D5;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_WeaponAttrBPTable_type
	FString AttachmentSkinIDList_1_68C117003440A0EE1A2DDA300D678804;//[Offset: 0x0, Size: 0x10]
	int BPID_2_5A4F6D006A4E746E1527F1660046AA94;//[Offset: 0x10, Size: 0x4]
	int[] AttachmentIDList_a_5_6E7001C028E30A41653FBE36025F1751;//[Offset: 0x18, Size: 0x10]
	int[] ParentIDList_a_6_3486FA0030D9987A663B62F90FFCB731;//[Offset: 0x28, Size: 0x10]
	FString DeadInventoryBoxPath_7_1883E1C0339C8C7958767FF2080EC2C8;//[Offset: 0x38, Size: 0x10]
	int PendantID_8_32B77B0039C6C1D620F9E77400A423B4;//[Offset: 0x48, Size: 0x4]
	FString DeadInventoryBoxIDs_10_7CB7FE8050FC74B432EE0A820680F713;//[Offset: 0x50, Size: 0x10]
	float CheckWeaponSkillDuration_f_11_6111F9C073ADAB21228400A10010AD36;//[Offset: 0x60, Size: 0x4]
	int WeaponSkillID_12_225B82C01AF0B81B520FC56F0A446294;//[Offset: 0x64, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_WeaponSkinMapping_type
	FString OutputDesc_0_4C755C4055DE81011AC086EE07D9D3D3;//[Offset: 0x0, Size: 0x10]
	int SkinID_1_6AF5A0C03E8D665F2B8E33D5019212C4;//[Offset: 0x10, Size: 0x4]
	int WeaponID_2_1D11360041F2AB4A2B54AC9608775314;//[Offset: 0x14, Size: 0x4]
	FString URL_3_276895001829BC3265405AC70F011B5C;//[Offset: 0x18, Size: 0x10]
	FString iconURL_4_1C201F405280621B7F9C0B550EBB3B4C;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_ItemSoundTable_type
	FString EquipSound_0_068B68C066212493052EBF3305D63E14;//[Offset: 0x0, Size: 0x10]
	FString DropSound_1_4DD7CD003E11476C25039DA50902AA34;//[Offset: 0x10, Size: 0x10]
	int ID_2_42F748C040D81BA3690F7C020EF58C44;//[Offset: 0x20, Size: 0x4]
	FString PickUpSound_3_0B99FAC07345086D4963B6D504877D14;//[Offset: 0x28, Size: 0x10]
	FString DropBank_4_1D8769C022E35E311709B3FF07910C6B;//[Offset: 0x38, Size: 0x10]
	FString EquipBank_5_30BCE58001E2251E07D41C7C055C432B;//[Offset: 0x48, Size: 0x10]
	FString UnEquipBank_6_4FF4964008C1F90F14F8C45904D7459B;//[Offset: 0x58, Size: 0x10]
	FString UnEquipSound_7_0376B980772F43423C77A2D80D665704;//[Offset: 0x68, Size: 0x10]
	FString PickUpBank_8_3C7477801367726A5EFE3B0D0549773B;//[Offset: 0x78, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_BackpackMapping_type
	int ItemIDLv1_0_21A3A0400039E85B0FB4B5AE02FC6161;//[Offset: 0x0, Size: 0x4]
	int ItemIDLv3_4_21A5A0C00039E85D0FB4B5A802FC6163;//[Offset: 0x4, Size: 0x4]
	int SkinID_5_0CC9E5002CE60FA0348CD8800DC46CC4;//[Offset: 0x8, Size: 0x4]
	int ItemIDLv2_6_21A4A0800039E85C0FB4B5AF02FC6162;//[Offset: 0xc, Size: 0x4]
	int SkinItemIDLv1_8_54E5658067900F920ABA96CA085B62E1;//[Offset: 0x10, Size: 0x4]
	int SkinItemIDLv3_9_54E7660067900F940ABA96CC085B62E3;//[Offset: 0x14, Size: 0x4]
	int LobbyShowItemID_10_2F22E9C00E7C61770577495A0A75F1B4;//[Offset: 0x18, Size: 0x4]
	int SkinItemIDLv2_11_54E665C067900F930ABA96CD085B62E2;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_ArmoryConfig_type
	FString Power_0_66023CC06166E049160058F001EA47E2;//[Offset: 0x0, Size: 0x10]
	FString ShotRange_1_59BA1C40037657B76427F9810CB9A205;//[Offset: 0x10, Size: 0x10]
	int WeaponID_2_04A777401625BC6D3B1E56BA09255CF4;//[Offset: 0x20, Size: 0x4]
	int BulletID_3_7D8136C0262C958112A0BCFE0A90D7B4;//[Offset: 0x24, Size: 0x4]
	int IsShow_4_4C2F70C02E814ECD68323BF600FA3D47;//[Offset: 0x28, Size: 0x4]
	FString VerticalRecoil_5_34839F80315AFB6669A7FB050FB382AC;//[Offset: 0x30, Size: 0x10]
	FString Shake_6_7E9B148046BA7452166E7E6601E6CE35;//[Offset: 0x40, Size: 0x10]
	int WeaponType_7_482A1C8059A944560A6FD461055DA945;//[Offset: 0x50, Size: 0x4]
	FString ShootInterval_8_49712E00653738B65705EBAE034CD55C;//[Offset: 0x58, Size: 0x10]
	FString HorizontalRecoil_9_1EB63B80354249506510039F02A0FBAC;//[Offset: 0x68, Size: 0x10]
	FString ReloadSpeed_10_13836B803042987230C406AD067DC2C4;//[Offset: 0x78, Size: 0x10]
	FString ClipCapacity_11_3EA5A7000BBA4130106249B307164639;//[Offset: 0x88, Size: 0x10]
	FString WeaponName_12_715DB4407742DAAB0A7C764D055D6F15;//[Offset: 0x98, Size: 0x10]
	FString ExtCapcity_13_128419002CEBB022532CC2890B99BD99;//[Offset: 0xa8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_LocalizeRes_type
	FString TextValue_0_4D37165A410D67320AF278A1C1028E4F;//[Offset: 0x0, Size: 0x10]
	int TextId_1_20B947934F165858A322E599888F816E;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemHandle_VirtualCharacter_C.BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object
	BattleItemData ExtractItemData(<int,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ItemRecordData7
	int ItemType_2_CC000069486107946E5ECAAF21EFAF0B;//[Offset: 0x0, Size: 0x4]
	int WeightforOrder_4_E72E5D4C4B2B91B238136B89316C7DEF;//[Offset: 0x4, Size: 0x4]
	float UnitWeight_f_7_1AEC4D7B4F3AC4894A33FBAAC0165559;//[Offset: 0x8, Size: 0x4]
	int MaxCount_10_ADC2EE5A44ABBCF4C00515AB724AD5AA;//[Offset: 0xc, Size: 0x4]
	bool AutoEquipandDrop_13_CC1AD656453F2BAB5FCB9586C6793874;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool Consumable_15_B2094A1644FCC44D1EBC08B3D9578342;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool Equippable_17_D54B5E3C4807D350ED7429BF09AAB7D1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemRecordData5
	int ItemID_2_2F9636FC420298B4EF34E588F58E38B0;//[Offset: 0x0, Size: 0x4]
	int ItemType_4_B2ED20EE489C1F500EBA389884CAC16D;//[Offset: 0x4, Size: 0x4]
	FString ItemName_7_DEB27023488D6036B9B24AB5DB114F34;//[Offset: 0x8, Size: 0x10]
	FString ItemBigIcon_9_A4409DA14B47CD0F4D6A7EBB7CBF2F2F;//[Offset: 0x18, Size: 0x10]
	FString ItemDesc_11_8AB433674EC5E4AF7F82069136B23CF5;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_AvatarDefaultConfig_type
	int id_0_582DD74020EEE8C12D00E1A40C84B664;//[Offset: 0x0, Size: 0x4]
	FString pant_1_00F930C0654EFFCD6B08CAF404B7FCD4;//[Offset: 0x8, Size: 0x10]
	FString shirt_2_53D54E8062374FD817805CCA0B7038D4;//[Offset: 0x18, Size: 0x10]
	FString shoe_3_12522FC065073BE56B0E507104B703D5;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ObserverCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x8b4, Size: 0x4]
	float FreeCameraOffsetRadius;//[Offset: 0x8d4, Size: 0x4]
	<byte,float> FreeCameraOffsetRadiusMap;//[Offset: 0x8d8, Size: 0x50]
	bool DrawDebugGraphics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 0x1]
	Vector DrawDebugGraphicsOffset;//[Offset: 0x92c, Size: 0xc]
	float ProbeRadius;//[Offset: 0x938, Size: 0x4]
	float SpecialStatePitchLimitMin;//[Offset: 0x93c, Size: 0x4]
	float SpecialStatePitchLimitMax;//[Offset: 0x940, Size: 0x4]
	float DefaultFieldOfView;//[Offset: 0x944, Size: 0x4]
	float WeaponOffsetDistance;//[Offset: 0x948, Size: 0x4]
	bool EnableUsePawnRotationCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94c, Size: 0x1]
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x5fb0e08
<----------Generated by SSpawner v1.0.4---------->


Class: FPPSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool bFixHeadInWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 0x1]
	Vector FixHeadInWallOffset;//[Offset: 0x4a8, Size: 0xc]
	float FixHeadSpeed;//[Offset: 0x4b4, Size: 0x4]
	float FixHeadPitch;//[Offset: 0x4b8, Size: 0x4]
	bool bHeadInCapsuleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 0x1]
	float HeadInCapsuleSafeOffset;//[Offset: 0x4c0, Size: 0x4]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x4c4, Size: 0x2c]
	Transform InVehicleCameraTrans;//[Offset: 0x4f0, Size: 0x30]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x520, Size: 0x2c]
	void SetFPPCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x5ee4f6c
<----------Generated by SSpawner v1.0.4---------->


Class: FPPComponent_C.BaseFPPComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8]
	void ScopingAttachToHead(bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void ScopingAttachToGun(FName CallFunc_GetScopeAimCameraSocketName_ReturnValue, STExtraWeapon* CallFunc_GetCurScopeWeapon_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue3, Vector CallFunc_GetSocketLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x70644c4
	MaterialInstance* GetScopeMaterialOverride(STExtraShootWeapon* Weapon, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, byte CallFunc_GetCurSightType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Array_Find_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Find_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, MaterialInstance* CallFunc_Array_Get_Item, MaterialInstance* CallFunc_Array_Get_Item2, MaterialInstance* CallFunc_Array_Get_Item3, MaterialInstance* CallFunc_Array_Get_Item4, MaterialInstance* CallFunc_Array_Get_Item5, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue3);// 0x70644c4
	void ResetScreenPercentage(byte CallFunc_GetSightType_ReturnValue, byte CallFunc_GetRole_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x70644c4
	void DownScreenPercentage(byte CallFunc_GetSightType_ReturnValue, byte CallFunc_GetRole_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x70644c4
	void ChangeScopeTPPGlassMat(MeshComponent* ScopeMeshComp, int ScopeID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_WeaponScopeGlassMat_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue);// 0x70644c4
	void GetScopeMatTableKey(STExtraPlayerController* PlayerController, STExtraShootWeapon* Weapon, enum ScopeType, out FString Key, int MatTableKey, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsScopeSpecialMatExist_exist, int CallFunc_IsScopeSpecialMatExist_MatTableKey, int CallFunc_GetScopeID_ReturnValue, SightMaterialConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x70644c4
	void IsScopeSpecialMatExist(STExtraWeapon* Weapon, enum ScopeType, out bool exist, out int MatTableKey, int Temp_int_Loop_Counter_Variable, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, AvatarDIYEntity* CallFunc_GetAvatarEntity_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, BattleItemHandleBase* CallFunc_GetLoadedHandle_ReturnValue, BackpackWeaponAttachHandle* K2Node_DynamicCast_AsBackpack_Weapon_Attach_Handle, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable2, WeaponAttachmentConfig CallFunc_GetAttachmentConfig_ReturnValue, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, int CallFunc_GetWeaponReuseConfigTarget_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2);// 0x70644c4
	float SwitchAngledSightConfigMaterial(bool forceSwitch, MeshComponent* ScopeMeshComp, int AngledSightID, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_Variable, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, FString CallFunc_GetScopeMatTableKey_Key, bool CallFunc_IsValid_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, LinearColor CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, LinearColor CallFunc_Conv_StringToColor_OutConvertedColor, bool CallFunc_Conv_StringToColor_OutIsValid, FName CallFunc_Conv_StringToName_ReturnValue2, LinearColor K2Node_Select_Default, int CallFunc_GetMaterialIndex_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x70644c4
	float ShowAngledSightTPPMaterial(bool forceADSState, float CallFunc_SwitchAngledSightConfigMaterial_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue2, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue3, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	float SwitchSightConfigMaterial(int SpecialMatFlag, STExtraShootWeapon* CurShootWeapon, MeshComponent* ScopeMeshComp, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsServer_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, FString CallFunc_GetScopeMatTableKey_Key, bool CallFunc_IsValid_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue, LinearColor CallFunc_Conv_StringToColor_OutConvertedColor, bool CallFunc_Conv_StringToColor_OutIsValid, FName CallFunc_Conv_StringToName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_GetMaterialIndex_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x70644c4
	float ShowReflectorSightTPPMaterial(bool forceADSState, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, float CallFunc_SwitchSightConfigMaterial_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue3, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue4, int CallFunc_GetScopeID_ReturnValue, byte CallFunc_GetCurSightType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x70644c4
	float GetScopeFov(STExtraWeapon* Weapon, bool bIsAngled, bool CallFunc_IsUseZoomScope_ReturnValue, int CallFunc_GetScopeID_ReturnValue, float CallFunc_GetSpecialScopeFov_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_GetWeaponReuseConfigTarget_ReturnValue, FName CallFunc_GetFNameFromTwoID_ReturnValue, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_GetCurrentScopeZoomFov_MinFov, float CallFunc_GetCurrentScopeZoomFov_CurFov);// 0x70644c4
	void SetTagCullingBP(bool IsUse, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	void requestResourceGuarantee(int InOrOut, byte loadMode, byte applyStatus, int CallFunc_GetPlatformInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue2, byte CallFunc_GetSightType_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue3, int K2Node_MathExpression_ReturnValue);// 0x70644c4
	void ReceiveTick(float DeltaSeconds);// 0x70644c4
	void ReloadEvent();// 0x70644c4
	void SetTagCulling(bool IsUse);// 0x70644c4
	void PlayScopeInTimeline();// 0x70644c4
	void ScopeInEnd();// 0x70644c4
	void ScopeOutEnd();// 0x70644c4
	void StopScopeIn();// 0x70644c4
	void AttachToSight();// 0x70644c4
	void AttachTo(SceneComponent* NewParam);// 0x70644c4
	void Detach(SceneComponent* NewParam);// 0x70644c4
	void AutoReloadEvent(STExtraShootWeapon* ShootWeapon);// 0x70644c4
	void AttachToSightKeepTransform();// 0x70644c4
	void ExecuteUbergraph_FPPComponent(int EntryPoint, float K2Node_Event_DeltaSeconds, bool CallFunc_IsDedicatedServer_ReturnValue, bool K2Node_Event_IsUse, delegate K2Node_CreateDelegate_OutputDelegate, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, SceneComponent* K2Node_CustomEvent_NewParam2, SceneComponent* K2Node_CustomEvent_NewParam, bool CallFunc_Greater_FloatFloat_ReturnValue, STExtraShootWeapon* K2Node_CustomEvent_ShootWeapon, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_K2_AttachToComponent_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_K2_AttachToComponent_ReturnValue2, bool CallFunc_IsUseZoomScope_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, STExtraWeapon* CallFunc_GetCurScopeWeapon_ReturnValue, STExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue5, ShootWeaponEntity* CallFunc_GetShootWeaponEntityComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue6);// 0x70644c4
	BP_PlayerPawn_C* PawnBP;//[Offset: 0x328, Size: 0x8]
	float DeltaTime;//[Offset: 0x330, Size: 0x4]
	SkeletalMeshComponent* NewVar;//[Offset: 0x338, Size: 0x8]
	StaticMesh* SightLens;//[Offset: 0x340, Size: 0x8]
	MaterialInstance*[] ScopeMaterialOverride;//[Offset: 0x348, Size: 0x10]
	int[] Scope4XType1;//[Offset: 0x358, Size: 0x10]
	int[] Scope4XType2;//[Offset: 0x368, Size: 0x10]
	<FString,LinearColor> ScopeColorMap;//[Offset: 0x378, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_WeaponScopeGlassMat_type
	FString MaterialPath_0_5C2E3480396102E244C9A5850B9B5408;//[Offset: 0x0, Size: 0x10]
	FString ScopeID_1_0872E740109AD1491DFC990E05CF6BF4;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_WeaponScopeMaterial_type
	FString ScopeGroupID_0_289E4F406E35B6A1337959050F04DD14;//[Offset: 0x0, Size: 0x10]
	FString ScopeMaterial_1_4BEFD48030177D8A6925FD700F8D124C;//[Offset: 0x10, Size: 0x10]
	FString ScopeMaterialSocket_2_63700EC07064DCC960E067A00E289394;//[Offset: 0x20, Size: 0x10]
	FString ScopeMaterialColor_3_1DC014403E6A0BAB129284A605F29442;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: Vault_Controller_C.PlayerMantleComponent.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5b0, Size: 0x8]
	void JumpVault();// 0x70644c4
	void VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x70644c4
	void vaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossmaxFalling, float crossmaxDis, Vector HitPoint, Rotator movedir);// 0x70644c4
	void StopVault();// 0x70644c4
	void DsCheckStopVault();// 0x70644c4
	void ExecuteUbergraph_Vault_Controller(int EntryPoint, float K2Node_CustomEvent_dis2, float K2Node_CustomEvent_height2, float K2Node_CustomEvent_length2, FString K2Node_CustomEvent_vaultKey2, Vector K2Node_CustomEvent_StartPos2, Actor* K2Node_CustomEvent_CheckActor2, float K2Node_CustomEvent_crossblockMaxFall, float K2Node_CustomEvent_crossblockMaxDis, Vector K2Node_CustomEvent_hitpoint2, Actor* K2Node_CustomEvent_WindowActor, Rotator K2Node_CustomEvent_movedir2, float K2Node_CustomEvent_Dis, float K2Node_CustomEvent_Height, float K2Node_CustomEvent_length, FString K2Node_CustomEvent_VaultKey, Vector K2Node_CustomEvent_StartPos, Actor* K2Node_CustomEvent_CheckActor, float K2Node_CustomEvent_crossmaxFalling, float K2Node_CustomEvent_crossmaxDis, Vector K2Node_CustomEvent_hitpoint, Rotator K2Node_CustomEvent_movedir);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: BP_SwimController_C.PlayerSwimComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x208, Size: 0x8]
	void EnterWater_BluePrint();// 0x70644c4
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x70644c4
	void ExecuteUbergraph_BP_SwimController(int EntryPoint, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool Temp_bool_Variable, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AkAudioEvent* Temp_object_Variable, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, AkAudioEvent* Temp_object_Variable2, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetWaterObject_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, WaterSwimObject_C* K2Node_DynamicCast_AsWater_Swim_Object, bool K2Node_DynamicCast_bSuccess2, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, CameraAnimInst* CallFunc_PlayCameraAnim_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Rotator CallFunc_K2_GetComponentRotation_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, int CallFunc_PostEventAtLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool K2Node_Event_bEnterWater, AkAudioEvent* K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: BP_AutoAimingComponent_C.WeaponAutoAimingComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x618, Size: 0x8]
	bool CheckInAngle(STExtraBaseCharacter* EnemyPawn, float MaxAngle, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, float CallFunc_DegAcos_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x70644c4
	bool CheckSmoke(out Vector StartPoint, out Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName, Rotator CallFunc_FindLookAtRotation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_VSize_ReturnValue, Actor*[] Temp_object_Variable, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x70644c4
	bool CanEnemeyRaycastReach(out Vector StartPoint, out Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName, Vector CallFunc_Subtract_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Actor*[] Temp_object_Variable, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_IsValid_ReturnValue, STExtraVehicleWarVehicle* K2Node_DynamicCast_AsSTExtra_Vehicle_War_Vehicle, bool K2Node_DynamicCast_bSuccess, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess2, STExtraFloatingVehicle* K2Node_DynamicCast_AsSTExtra_Floating_Vehicle, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess4);// 0x70644c4
	void BPDrawDebugInfo(out const float[] AutoAimParams);// 0x70644c4
	void ExecuteUbergraph_BP_AutoAimingComponent(int EntryPoint, bool CallFunc_IsValid_ReturnValue, float[] K2Node_Event_AutoAimParams, PlayerController* CallFunc_GetPlayerController_ReturnValue, UserWidget* CallFunc_CreateWidgetByClass_ReturnValue, AutoAimDebug_C* K2Node_DynamicCast_AsAuto_Aim_Debug, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	byte DrawDebugType;//[Offset: 0x620, Size: 0x1]
	UserWidget* DebugUI;//[Offset: 0x628, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	bool bServerInitStopPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a2, Size: 0x1]
	float BoostModifier;//[Offset: 0x14a4, Size: 0x4]
	Vector CurrentRotationInputDir;//[Offset: 0x14a8, Size: 0xc]
	float RotationInputDirInterpSpeed;//[Offset: 0x14b4, Size: 0x4]
	STExtraFloatingVehicleMovementComponent* FloatingVehicleMovement;//[Offset: 0x14b8, Size: 0x8]
	void HandleOnMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x616a7c4
	Vector GetRotationInputDir();// 0x616a784
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraFloatingVehicleMovementComponent.STExtraFloatingVehicleMovementComponentBase.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxAcceleration;//[Offset: 0x1dc, Size: 0x4]
	float StartAccelerationRate;//[Offset: 0x1e0, Size: 0x4]
	float StopAccelerationRate;//[Offset: 0x1e4, Size: 0x4]
	float MaxRotationYawAngle;//[Offset: 0x1e8, Size: 0x4]
	float RotationYawRate;//[Offset: 0x1ec, Size: 0x4]
	float BackwardForceScale;//[Offset: 0x1f0, Size: 0x4]
	float Acceleration;//[Offset: 0x1f4, Size: 0x4]
	float RotationYawAngle;//[Offset: 0x1f8, Size: 0x4]
	FName ApplyForceSocketName;//[Offset: 0x200, Size: 0x8]
	CurveFloat* SlideCompensationCurve;//[Offset: 0x208, Size: 0x8]
	bool bClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	bool DisableWhenTurnOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 0x1]
	float MinTurnOverDegree;//[Offset: 0x214, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraFloatingVehicleMovementComponentBase.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	STVehicleInputRate ThrottleInputRate;//[Offset: 0x1a0, Size: 0x8]
	STVehicleInputRate SteeringInputRate;//[Offset: 0x1a8, Size: 0x8]
	FloatingVehicleMovementInput MovementInput;//[Offset: 0x1b0, Size: 0xc]
	void ServerUpdateMovementInput(const FloatingVehicleMovementInput InMovementInput);// 0x616af88
	float GetThrottleInput();// 0x616af54
	float GetSteeringInput();// 0x616af20
	float GetHandBrakeInput();// 0x616aeec
	float GetForwardSpeed();// 0x616aed0
<----------Generated by SSpawner v1.0.4---------->


Class: STVehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 0x4]
	float FallRate;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: FloatingVehicleMovementInput
	float ThrottleInput;//[Offset: 0x0, Size: 0x4]
	float SteeringInput;//[Offset: 0x4, Size: 0x4]
	float HandbrakeInput;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AutoAimDebug_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	FText Get_TextBlock_7_Text(FText CallFunc_Conv_IntToText_ReturnValue);// 0x70644c4
	FText Get_TextBlock_3_Text(FText CallFunc_Conv_FloatToText_ReturnValue);// 0x70644c4
	void HandleDamage(bool NewParam, bool NewParam1);// 0x70644c4
	FText Get_TextBlock_14_Text(FText CallFunc_Conv_IntToText_ReturnValue);// 0x70644c4
	FText Get_TextBlock_12_Text(FText CallFunc_Conv_IntToText_ReturnValue);// 0x70644c4
	void OnPaint(out PaintContext Context, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x70644c4
	void DrawDebug(out float[] DebugInfo, float[] InDebugInfo, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item2, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Array_Add_ReturnValue, float CallFunc_Array_Get_Item3, TextBlock* CallFunc_Array_Get_Item4, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_Array_Get_Item5, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x70644c4
	void Construct();// 0x70644c4
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x70644c4
	void OnEquip(STExtraWeapon* Weapon, byte Slot);// 0x70644c4
	void CustomEvent();// 0x70644c4
	void CustomEvent();// 0x70644c4
	void CustomEvent(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0x70644c4
	void CustomEvent(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, out const HitResult HitRet);// 0x70644c4
	void CustomEvent(float Damage, out const DamageEvent DamageEvent, Actor* Casuer, Actor* Victim);// 0x70644c4
	void ExecuteUbergraph_AutoAimDebug(int EntryPoint, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Add_ReturnValue5, int CallFunc_Array_Add_ReturnValue6, int CallFunc_Array_Add_ReturnValue7, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraWeapon* K2Node_CustomEvent_weapon, byte K2Node_CustomEvent_slot, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, STExtraShootWeapon* K2Node_CustomEvent_ShootWeapon2, STExtraShootWeaponBulletBase* K2Node_CustomEvent_Bullet2, STExtraShootWeapon* K2Node_CustomEvent_ShootWeapon, STExtraShootWeaponBulletBase* K2Node_CustomEvent_Bullet, const HitResult K2Node_CustomEvent_HitRet, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Pawn* CallFunc_GetOwnerPawn_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_StrStr_ReturnValue, enum CallFunc_GetHitBodyTypeByHitPos_ReturnValue, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess4, int CallFunc_Add_IntInt_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate6, PlayerController* CallFunc_GetPlayerController_ReturnValue2, Pawn* CallFunc_K2_GetPawn_ReturnValue2, int CallFunc_RegistEvent_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character3, bool K2Node_DynamicCast_bSuccess5, float K2Node_CustomEvent_Damage, const DamageEvent K2Node_CustomEvent_DamageEvent, Actor* K2Node_CustomEvent_Casuer, Actor* K2Node_CustomEvent_Victim, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, STExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon2, bool K2Node_DynamicCast_bSuccess6, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue3, int CallFunc_Subtract_IntInt_ReturnValue);// 0x70644c4
	TextBlock* t1;//[Offset: 0x268, Size: 0x8]
	TextBlock* t2;//[Offset: 0x270, Size: 0x8]
	TextBlock* t3;//[Offset: 0x278, Size: 0x8]
	TextBlock* t4;//[Offset: 0x280, Size: 0x8]
	TextBlock* t5;//[Offset: 0x288, Size: 0x8]
	TextBlock* t6;//[Offset: 0x290, Size: 0x8]
	TextBlock* t7;//[Offset: 0x298, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2a0, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2a8, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2b0, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2b8, Size: 0x8]
	TextBlock*[] TextWidgetArray;//[Offset: 0x2c0, Size: 0x10]
	float LastAimTime;//[Offset: 0x2d0, Size: 0x4]
	float[] AimDelta;//[Offset: 0x2d8, Size: 0x10]
	int Debug_Hit_Num;//[Offset: 0x2e8, Size: 0x4]
	int Debug_Miss_Num;//[Offset: 0x2ec, Size: 0x4]
	float Damage;//[Offset: 0x2f0, Size: 0x4]
	int headShot;//[Offset: 0x2f4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CameraSettingComponent_C.ActorComponent.Object
	void SaveCurCameraSetting(SpringArmComponent* SprintArm);// 0x70644c4
	void LerpCameraSettings(float LerpAlpha, STR_CameraSetting CameraSettings, SpringArmComponent* SpringArm, SpringArmComponent* TargetSpringArm, Vector TargetSocketOffset, float TargetLagSpeed, float TargetSpringArmLength, float Alpha, Vector CallFunc_VLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2);// 0x70644c4
	float Current Target Arm Length;//[Offset: 0x110, Size: 0x4]
	float CurrentCameraLagSpeed;//[Offset: 0x114, Size: 0x4]
	Vector CurrentSocketOffset;//[Offset: 0x118, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_WateringArea_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3f8, Size: 0x8]
	void OnAreaOverlapEnd(Object* Object, bool CallFunc_HasAuthority_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2);// 0x70644c4
	void OnAreaOverlapBegin(Object* Object, bool CallFunc_HasAuthority_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AllowWater_bCanEnter, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_Array_Contains_ReturnValue);// 0x70644c4
	void StartDrop(Vector CallFunc_K2_GetActorLocation_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, WaitDropData K2Node_MakeStruct_WaitDropData, bool CallFunc_IsValid_ReturnValue, ItemDropMgrComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x70644c4
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x70644c4
	void ShowAnimationButton(BP_PlayerPawn_C* PlayerPawn, bool IsShow);// 0x70644c4
	void ServerDoWaterLogic(out const PlayerController* PlayerController);// 0x70644c4
	void OnWateringUIChanged(bool Show);// 0x70644c4
	void DelayResetParticleCD();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void SpawnTreeParticle();// 0x70644c4
	void CustomEvent();// 0x70644c4
	void ExecuteUbergraph_BP_WateringArea(int EntryPoint, BP_WateringArea_C* Temp_object_Variable, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString Temp_string_Variable, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, BP_PlayerPawn_C* K2Node_CustomEvent_PlayerPawn, bool K2Node_CustomEvent_IsShow, const PlayerController* K2Node_CustomEvent_PlayerController, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool K2Node_CustomEvent_Show, FString Temp_string_Variable2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue4, FString K2Node_Select_Default, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool Temp_bool_Variable2, BP_WateringArea_C* K2Node_Select2_Default, int CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue2, int CallFunc_PostAkEvent_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2);// 0x70644c4
	StaticMeshComponent* ReplaceMesh;//[Offset: 0x400, Size: 0x8]
	StaticMeshComponent* FormerMesh;//[Offset: 0x408, Size: 0x8]
	SceneComponent* LoopParticlePoint;//[Offset: 0x410, Size: 0x8]
	AkComponent* Ak;//[Offset: 0x418, Size: 0x8]
	SceneComponent* ParticleSpawnPoint;//[Offset: 0x420, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x428, Size: 0x8]
	SphereComponent* Sphere;//[Offset: 0x430, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x438, Size: 0x8]
	ParticleSystemComponent* ParticleSystemRef;//[Offset: 0x440, Size: 0x8]
	PlayerController*[] WaterDoneList;//[Offset: 0x448, Size: 0x10]
	TimerHandle TimerHandle;//[Offset: 0x458, Size: 0x8]
	int[] DropPlanIDList;//[Offset: 0x460, Size: 0x10]
	bool bShowLoopParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	FString ShowButtonTextID;//[Offset: 0x478, Size: 0x10]
	PaperSprite* ShowButtonPic;//[Offset: 0x488, Size: 0x8]
	ParticleSystem* ParticleTrigger;//[Offset: 0x490, Size: 0x8]
	Vector ParticleTriggerPos;//[Offset: 0x498, Size: 0xc]
	ParticleSystem* ParticleLoop;//[Offset: 0x4a8, Size: 0x8]
	Vector ParticleLoopPos;//[Offset: 0x4b0, Size: 0xc]
	float ParticleLoopWait;//[Offset: 0x4bc, Size: 0x4]
	AkAudioEvent* AudioTrigger;//[Offset: 0x4c0, Size: 0x8]
	AkAudioEvent* AudioParticleLoop;//[Offset: 0x4c8, Size: 0x8]
	AkAudioEvent* AudioLoop;//[Offset: 0x4d0, Size: 0x8]
	bool IsCandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	int ActivityButtonId;//[Offset: 0x4dc, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: WaitDropData
	STExtraBaseCharacter* KillerPawn;//[Offset: 0x0, Size: 0x8]
	FString DeadPawnDesc;//[Offset: 0x8, Size: 0x10]
	Vector DropGroundPoint;//[Offset: 0x18, Size: 0xc]
	class PlayerTombBox* DropTomb;//[Offset: 0x28, Size: 0x8]
	int[] DropPlanIDList;//[Offset: 0x30, Size: 0x10]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	int AvatarItemID;//[Offset: 0x44, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ItemDropMgrComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x170, Size: 0x10]
	bool GM_CloseItemDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	int GM_SpawnItemFrame;//[Offset: 0x184, Size: 0x4]
	bool bEnableAIBulletDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	class PlayerTombBox* DefaultTomb;//[Offset: 0x190, Size: 0x8]
	class PlayerRemainTombBox* LastGameRemainTomb;//[Offset: 0x198, Size: 0x8]
	FString DropItemCfgTableName;//[Offset: 0x1a0, Size: 0x10]
	FString DropItemRuleTableName;//[Offset: 0x1b0, Size: 0x10]
	int GridStep;//[Offset: 0x1c0, Size: 0x4]
	WaitDropData[] WaitDropList;//[Offset: 0x1c8, Size: 0x10]
	int MaxRandomWeight;//[Offset: 0x1d8, Size: 0x4]
	bool bEnableDropItemAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 0x1]
	float RadiusStep;//[Offset: 0x1e0, Size: 0x4]
	float ZBias;//[Offset: 0x1e4, Size: 0x4]
	float LookUpDistance;//[Offset: 0x1e8, Size: 0x4]
	UAEDataTable* DropRuleTable;//[Offset: 0x1f0, Size: 0x8]
	Property*[] DropRuleTablePropertys;//[Offset: 0x1f8, Size: 0x10]
	UAEDataTable* DropConfigTable;//[Offset: 0x208, Size: 0x8]
	int CurSpawnItemFrame;//[Offset: 0x210, Size: 0x4]
	<int,DropIDData> DropIDMap;//[Offset: 0x218, Size: 0x50]
	FString RemainItemRuleTableName;//[Offset: 0x268, Size: 0x10]
	RemainItemRuleDataRow[] RemainItemRuleList;//[Offset: 0x278, Size: 0x10]
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBaseFromTable;//[Offset: 0x338, Size: 0x10]
	Vector TraceGroundPoint(Vector StartPos, Actor* IgnoreActor);// 0x5f383d0
	bool ReplaceGameModeSpawnEquipDataBase();// 0x5f38398
	int PickItemByUnionRandom(float WeightCount, out RandomDropData[] WeightMap);// 0x5f382a4
	int PickItemByIndependentRandom(float Weight);// 0x5f38218
	void OnGenerateItemListByDropIdDelegate__DelegateSignature(int DropID, PickUpItemData[] ItemList);// 0x70644c4
	void NavMeshDrop(out const DropToGroundData[] PropDatas, Transform PawnTrans, bool bDropedByPlayer);// 0x5f380bc
	void InitRemainItemRuleTable();// 0x5f380a8
	void InitDropIDMap();// 0x5f38094
	void HandleActorDie(Actor* Actor, Actor* Killer);// 0x5f37fe0
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x5f37ed4
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x5f37e30
	void GetWeaponBulletNum(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int BulletID, out int BulletClipNum, out int BulletPackageNum, out int BulletClipMaxNum);// 0x5f37c30
	FString GetReplacedItemPath(byte Type, FString BeforeItemPath);// 0x5f37ad0
	int GetReplacedItemID(byte Type, int BeforeItemID);// 0x5f37a00
	LastGameRemainItemData GetRemainItemData(out PickUpItemData[] ItemDataList, STExtraPlayerController* PC);// 0x5f3786c
	void GetMonsterBulletDropIdList(out int[] DropIdList, out int[] DropParams, MonsterSingleBulletDropIds[] BulletDropIds);// 0x5f37654
	<FString,FString> GetItemPathReplaceMap(byte Type);// 0x5f37528
	<int,int> GetItemIDReplaceMap(byte Type);// 0x5f37390
	FString GetDropItemCfgList(out DropItemConfig[] DropList, int DropConfigID);// 0x5f37224
	void GetDropIdList(out int[] DropIdList, MonsterSingleDropIds[] DropIDS);// 0x5f36fd4
	int GetCountStrNum(FString CountStr);// 0x5f36e98
	void GetBulletDropListByPlanIDs(Actor* Killer, out int[] BulletDropPlanIDList, out int[] BulletDropParams, out int[] DropIdList);// 0x5f36ca8
	PickUpItemData[] GeneratePickupListByDropID(int DropConfigID);// 0x5f36bf4
	void GenerateItemOnGround(STExtraBaseCharacter* Character, int ItemId, int ItemCount);// 0x5f36b04
	void GenerateItemAtTrans(int ItemId, int ItemCount, Transform Trans);// 0x5f369ec
	DropPropData[] GenerateItemAttachments(int ItemId, int MinNum, int MaxNum);// 0x5f3687c
	void DropToTombBox(out const PickUpItemData[] PropData, out WaitDropData DropData);// 0x5f36720
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* BackPack);// 0x5f3661c
	void DropToGround(out const DropToGroundData PropData, Transform WrapperTrans, bool bDropedByPlayer, Actor* InAttachActor);// 0x5f36400
	bool DropOutItemsByList(out DropPropData[] DropItems, Actor* DeadActor, Actor* Killer);// 0x5f362b8
	void DropOutItems(out WaitDropData DropData, out DropPropData[] DropItems);// 0x5f3614c
	void DropLastGameRemainTombBox(LastGameRemainItemData LastGameRemainItemData);// 0x5f3603c
	void CheckNeedDropItem();// 0x5f36028
	void CheckMonsterAddBulletDrop(Actor* Actor, Actor* Killer, out int[] DropIdList);// 0x5f35ef8
	void CheckCharacterAddBulletDrop(Actor* Actor, Actor* Killer, out int[] DropIdList);// 0x5f35dc8
	bool CheckCanRemain(int ItemId);// 0x5f35d38
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x5f35c34
	DropItemConfig CalcDropItemListByDropCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] ItemList);// 0x5f35b0c
	void BulletDropStrategy(out int[] BulletIdList, out int[] BulletIdNum, out int[] BulletDropPlanIDList, out int[] BulletDropParams, out int[] DropIdList, out int[] BulletClipMaxNum);// 0x5f357e0
	void BulletDropById(int BulletID, out int[] BulletDropPlanIDList, out int[] DropIdList);// 0x5f35668
	void AddToWaitDropList(out const WaitDropData AddWaitDropData);// 0x5f3557c
	bool AddToItemReplaceMap(byte Type, int BeforeItemID, int AfterItemID, FString BeforePath, FString AfterPath);// 0x5f353a0
	void AddToAISpawnEquipDataBase(int RightTime, int MustPickup, AIEquipSpawnItem[] Items);// 0x5f351e4
<----------Generated by SSpawner v1.0.4---------->


Class: DropIDData
	FName[] DropRowList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RemainItemRuleDataRow
	int KeyID;//[Offset: 0x0, Size: 0x4]
	int ItemId;//[Offset: 0x4, Size: 0x4]
	int itemType;//[Offset: 0x8, Size: 0x4]
	int ItemSubType;//[Offset: 0xc, Size: 0x4]
	int RemainPerc;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: RandomDropData
	int[] ItemIdList;//[Offset: 0x0, Size: 0x10]
	int RuleID;//[Offset: 0x10, Size: 0x4]
	int[] ItemCountList;//[Offset: 0x18, Size: 0x10]
	float Weight;//[Offset: 0x28, Size: 0x4]
	int DropMode;//[Offset: 0x2c, Size: 0x4]
	int MinAttachment;//[Offset: 0x30, Size: 0x4]
	int MaxAttachment;//[Offset: 0x34, Size: 0x4]
	int ItemIDStyle;//[Offset: 0x38, Size: 0x4]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: DropToGroundData
	PickUpItemData PickUpItemData;//[Offset: 0x0, Size: 0x38]
	int ItemId;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterSingleBulletDropIds
	int[] BulletDropIds;//[Offset: 0x0, Size: 0x10]
	int[] BulletDropParams;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MonsterSingleDropIds
<----------Generated by SSpawner v1.0.4---------->


Class: PaperSprite.Object
	Vector2D SourceUV;//[Offset: 0x38, Size: 0x8]
	Vector2D SourceDimension;//[Offset: 0x40, Size: 0x8]
	Texture2D* SourceTexture;//[Offset: 0x48, Size: 0x8]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x50, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x60, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x68, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x70, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x78, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x80, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x88, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x98, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x9c, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xa0, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0xa8, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0xb0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BlockOceanAndRiverVoice_C.Actor.Object
	void UserConstructionScript();// 0x70644c4
	BoxComponent* Box;//[Offset: 0x3f8, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x400, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: RiverZone_C.Actor.Object
	void UserConstructionScript();// 0x70644c4
	BoxComponent* Box;//[Offset: 0x3f8, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x400, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: RiverDetectZone_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3f8, Size: 0x8]
	void CalcRTPCValue(out float OutValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_FindLocationClosestToWorldLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x70644c4
	void StopRiverVoice();// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void ReceiveTick(float DeltaSeconds);// 0x70644c4
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x70644c4
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x70644c4
	void ExecuteUbergraph_RiverDetectZone(int EntryPoint, float CallFunc_CalcRTPCValue_OutValue, float K2Node_Event_DeltaSeconds, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_IsLocallyControlled_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsLocallyControlled_ReturnValue2, bool CallFunc_IsActorTickEnabled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_PostAkEvent_ReturnValue, float CallFunc_CalcRTPCValue_OutValue2);// 0x70644c4
	AkComponent* Ak;//[Offset: 0x400, Size: 0x8]
	SplineComponent* Spline;//[Offset: 0x408, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x410, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x418, Size: 0x8]
	float MaxHearableDistance;//[Offset: 0x420, Size: 0x4]
	float CurRTPCValue;//[Offset: 0x424, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_MiniMapStandardPoint_C.MiniMapStandardPoint.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x440, Size: 0x8]
	void UserConstructionScript();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void ExecuteUbergraph_BP_MiniMapStandardPoint(int EntryPoint, const TemBPDataAddr[] K2Node_MakeArray_Array, bool CallFunc_Array_IsValidIndex_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, TemBPDataAddr[] K2Node_MakeArray_Array2, bool CallFunc_IsDedicatedServer_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue3, float CallFunc_MakeLiteralFloat_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue4, TemBPDataAddr[] K2Node_MakeArray_Array3);// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x448, Size: 0x8]
	FString[] TagStrArray;//[Offset: 0x450, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MiniMapStandardPoint.Actor.Object
	float LevelBoundExtent;//[Offset: 0x3f4, Size: 0x4]
	float EachTileExtent;//[Offset: 0x3f8, Size: 0x4]
	FString LevelName;//[Offset: 0x400, Size: 0x10]
	float FakeEdgeExtent;//[Offset: 0x410, Size: 0x4]
	enum GameModeType;//[Offset: 0x414, Size: 0x1]
	Vector2D AirDropBoundOffset;//[Offset: 0x418, Size: 0x8]
	VisualFieldLayerConfig VisualLayerConfig;//[Offset: 0x420, Size: 0x10]
	FString MapPath;//[Offset: 0x430, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VisualFieldLayerConfig
	VisualFieldLayer[] VisualLayerList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VisualFieldLayer
	float LayerFloorHeight;//[Offset: 0x0, Size: 0x4]
	float LayerRoofHeight;//[Offset: 0x4, Size: 0x4]
	int LayerID;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: Baltic_ObjectPoolMgr_C.AObjectPoolManager.Actor.Object
	FString GetLuaFilePath();// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x538, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AObjectPoolManager.Actor.Object
	PoolPreloadObjectItem[] Preloads;//[Offset: 0x3f8, Size: 0x10]
	PoolPreloadClassItem[] PreloadClasses;//[Offset: 0x408, Size: 0x10]
	PoolPreloadObjectItem[] PreloadTblRes;//[Offset: 0x418, Size: 0x10]
	PoolPreloadTableConfigItem[] PreLoadConfigTable;//[Offset: 0x428, Size: 0x10]
	Object*[] PreLoadQuotes;//[Offset: 0x438, Size: 0x10]
	UAEDataTable*[] LoadedTableArray;//[Offset: 0x528, Size: 0x10]
	void PreSpawnToPool(out const PoolPreloadObjectItem Item, out SoftObjectPath SoftObjectPath);// 0x5d69c08
	void PreLocalSpawnToPool(out const PoolPreloadClassItem Item, out SoftObjectPath SoftObjectPath);// 0x5d69aa0
	void PreLoadObjectsFinish(PoolPreloadAysncLoadParams loadParams);// 0x5d69a24
	void PreLoadClassesFinish();// 0x5d69a10
	void OnOpenObjectPool();// 0x5d699fc
<----------Generated by SSpawner v1.0.4---------->


Class: PoolPreloadObjectItem
	Object* Object;//[Offset: 0x0, Size: 0x28]
	bool IsSpawnToPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int PreloadNum;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: PoolPreloadClassItem
	class Object* Object;//[Offset: 0x0, Size: 0x28]
	bool IsSpawnToPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int PreloadNum;//[Offset: 0x2c, Size: 0x4]
	byte Role;//[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: PoolPreloadTableConfigItem
	int LoadPriority;//[Offset: 0x0, Size: 0x4]
	FString CSVFilePath;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PoolPreloadAysncLoadParams
<----------Generated by SSpawner v1.0.4---------->


Class: BattleItemHandlePreLoad.Actor.Object
	FString[] BattleItemHandlePreLoadGameMode;//[Offset: 0x408, Size: 0x10]
	FString[] PreLoadBattleHandlePatch;//[Offset: 0x418, Size: 0x10]
	Object*[] LoadedBattleHandle;//[Offset: 0x428, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: DSPrecomputedVisibilityVolume.Volume.Brush.Actor.Object
	int Group;//[Offset: 0x430, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: Water_C.OceanManager.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4c8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Baltic_Main_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3f8, Size: 0x8]
	void ReceiveBeginPlay();// 0x70644c4
	void ReceiveEndPlay(byte EndPlayReason);// 0x70644c4
	void ExecuteUbergraph_Baltic_Main(int EntryPoint, byte K2Node_Event_EndPlayReason, bool CallFunc_CreateMyLandscape_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x70644c4
	FString MatPath;//[Offset: 0x400, Size: 0x10]
	FString GeoPath;//[Offset: 0x410, Size: 0x10]
	float fFactor;//[Offset: 0x420, Size: 0x4]
	Landscape* Landscape_0_ExecuteUbergraph_Baltic_Main_RefProperty;//[Offset: 0x428, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_GlobalConfig_C.GlobalConfigActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	BP_WaveConfig_C* BP_WaveConfig;//[Offset: 0x408, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x410, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_WaveConfig_C.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1d8, Size: 0x8]
	void IsOpenWave(out bool bOpen, int CallFunc_GetConsoleVariableIntValue_ReturnValue, int CallFunc_GetConsoleVariableIntValue_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void OnRenderQualitySettingsChanged_Event(RenderQualitySettings RenderQualitySettings);// 0x70644c4
	void ExecuteUbergraph_BP_WaveConfig(int EntryPoint, bool CallFunc_IsOpenWave_bOpen, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_IsOpenWave_bOpen2, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, RenderQualitySettings K2Node_CustomEvent_RenderQualitySettings);// 0x70644c4
	FName WaveLevelName;//[Offset: 0x1e0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_PlayerCameraManager_C.STPlayerCameraManager.PlayerCameraManager.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: STPlayerCameraManager.PlayerCameraManager.Actor.Object
	bool InVehicleFPPViewPitchLimitMinPositiveDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c74, Size: 0x1]
	bool InVehicleFPPViewPitchLimitMaxDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c75, Size: 0x1]
	float InVehicleFPPViewPitchLimitMin;//[Offset: 0x1c78, Size: 0x4]
	float InVehicleFPPViewPitchLimitMax;//[Offset: 0x1c7c, Size: 0x4]
	float InVehicleFPPViewYawLimit;//[Offset: 0x1c80, Size: 0x4]
	float InVehicleNarrowSeatGrenadesYawLimit;//[Offset: 0x1c84, Size: 0x4]
	float FPPYawLimitInZipline;//[Offset: 0x1c88, Size: 0x4]
	bool bApplyCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c90, Size: 0x1]
	class Actor* ScreenAppearanceClass;//[Offset: 0x1c98, Size: 0x28]
	Actor* ScreenAppearanceActor;//[Offset: 0x1cc0, Size: 0x8]
	Actor* K2_GetViewTarget();// 0x6253e7c
<----------Generated by SSpawner v1.0.4---------->


Class: BP_BattleRoyaleHUD_C.SurviveHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x7b0, Size: 0x8]
	bool IsValidDamageNumber(Actor* DamageCauser, int DamageTypeId, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_IntInt_ReturnValue, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue2, byte CallFunc_GetWeaponTypeNew_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Array_Find_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue2);// 0x70644c4
	LinearColor GetPlayerNameColorByTeamID(int TeamID, Color CallFunc_GetPlayerNameColorByTeamID_PlayerNameColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x70644c4
	LinearColor GetColorByTeamID(int TeamID, Color CallFunc_GetPlayerColorByTeamID_PlayerColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void HitFeedBackChanged(bool BoolValue);// 0x70644c4
	void OBSHitFeedbackChanged(bool BoolValue);// 0x70644c4
	void ExecuteUbergraph_BP_BattleRoyaleHUD(int EntryPoint, bool K2Node_CustomEvent_BoolValue, delegate K2Node_CreateDelegate_OutputDelegate, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_CustomEvent_BoolValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x7b8, Size: 0x8]
	int[] DamageNumberDamageTypes;//[Offset: 0x7c0, Size: 0x10]
	byte[] InvalidDamageNumberWeaponTypes;//[Offset: 0x7d0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_PaintDecalDetectLine1_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3f8, Size: 0x8]
	void UpdateDetectLine(Actor* CallFunc_GetParentActor_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, MaterialInterface* CallFunc_GetMaterial_ReturnValue, enum CallFunc_IsValidPaintDecalTarget_OutvalidationType, Vector CallFunc_IsValidPaintDecalTarget_OutStart, Vector CallFunc_IsValidPaintDecalTarget_OutEnd, bool CallFunc_IsValidPaintDecalTarget_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue2);// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void ReceiveTick(float DeltaSeconds);// 0x70644c4
	void StopDetecting();// 0x70644c4
	void StartDetecting();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void ExecuteUbergraph_BP_PaintDecalDetectLine1(int EntryPoint, float K2Node_Event_DeltaSeconds, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x70644c4
	StaticMeshComponent* StaticMesh;//[Offset: 0x400, Size: 0x8]
	Vector CachePos;//[Offset: 0x408, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_PlayerState_C.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	void #[FeatureRPC(StoreFeature.RPC_Client_BuyGoodsFinished)](bool #[FeatureRPC(StoreFeature.RPC_Client_BuyGoodsFinished)]_param1);// 0x9f84450
	void ReportClientPing(int ReportClientPing_param1, int ReportClientPing_param2);// 0x9f84450
	void #[FeatureRPC(StoreFeature.RPC_Server_ShowNearestStore)]();// 0x9f84450
	void #[FeatureRPC(StoreFeature.RPC_Server_OpenStore)](Actor* #[FeatureRPC(StoreFeature.RPC_Server_OpenStore)]_param1);// 0x9f84450
	void #[FeatureRPC(StoreFeature.RPC_Server_CloseStore)](Actor* #[FeatureRPC(StoreFeature.RPC_Server_CloseStore)]_param1, int #[FeatureRPC(StoreFeature.RPC_Server_CloseStore)]_param2);// 0x9f84450
	void #[FeatureRPC(StoreFeature.RPC_Server_BuyGoods)](Actor* #[FeatureRPC(StoreFeature.RPC_Server_BuyGoods)]_param1, int[] #[FeatureRPC(StoreFeature.RPC_Server_BuyGoods)]_param2, int[] #[FeatureRPC(StoreFeature.RPC_Server_BuyGoods)]_param3, int[] #[FeatureRPC(StoreFeature.RPC_Server_BuyGoods)]_param4);// 0x9f84450
	void #[FeatureRPC(PhotoGrapherFeature.RPC_Server_PlayPetFeature)]();// 0x9f84450
	void #[FeatureRPC(PhotoGrapherFeature.RPC_Server_PhotographerOp)](int #[FeatureRPC(PhotoGrapherFeature.RPC_Server_PhotographerOp)]_param1);// 0x9f84450
	void #[FeatureRPC(PhotoGrapherFeature.RPC_Server_ChangePhotoGrapherOpenState)](bool #[FeatureRPC(PhotoGrapherFeature.RPC_Server_ChangePhotoGrapherOpenState)]_param1, int #[FeatureRPC(PhotoGrapherFeature.RPC_Server_ChangePhotoGrapherOpenState)]_param2);// 0x9f84450
	void #[FeatureRPC(PhotoGrapherFeature.RPC_Server_ChangeEmotePlayRate)](int #[FeatureRPC(PhotoGrapherFeature.RPC_Server_ChangeEmotePlayRate)]_param1);// 0x9f84450
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x1a20, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BaziState.Actor.Object
	Bazi[] Bazi;//[Offset: 0x3f8, Size: 0x10]
	Chori[] Chori;//[Offset: 0x458, Size: 0x10]
	void RemoveChori(const int Element);// 0x6b1252c
	void RemoveBazi(const int Adam);// 0x6b124b0
	void OnRep_Chori();// 0x6b1249c
	void OnRep_Bazi();// 0x6b12488
	void AddChori(out const Chori Element);// 0x6b12364
	void AddBazi(out const Bazi Element);// 0x6b122a0
<----------Generated by SSpawner v1.0.4---------->


Class: Bazi
	int Adam;//[Offset: 0x0, Size: 0x4]
	float[] Array;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: Chori
	int Ctrl;//[Offset: 0x0, Size: 0x4]
	int Well;//[Offset: 0x4, Size: 0x4]
	Caco[] Array;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: Caco
	int Ctrl;//[Offset: 0x0, Size: 0x4]
	int Alt;//[Offset: 0x4, Size: 0x4]
	float[] Space;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SurviveGameState_C.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	void #[FeatureRPC(ReviveState.MulticastRevivalTimeEnd)]();// 0x9f84450
	void GetHasAR(out bool bHasAR);// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	AirAttackComponent* AirAttack;//[Offset: 0x1408, Size: 0x8]
	ReviveBattleUIComponent* ReviveBattleUI;//[Offset: 0x1410, Size: 0x8]
	GameLevelManagerComponent* GameLevelManager;//[Offset: 0x1418, Size: 0x8]
	AirAttackCS* AirAttackCS;//[Offset: 0x1420, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x1428, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AirAttackComponent.TimerRegistComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x1d0, Size: 0x10]
	Vector MapOriginal;//[Offset: 0x1e0, Size: 0xc]
	float MapRadius;//[Offset: 0x1ec, Size: 0x4]
	float FlightHeight;//[Offset: 0x1f0, Size: 0x4]
	float SeaLevelHeight;//[Offset: 0x1f4, Size: 0x4]
	float DelayTime;//[Offset: 0x1f8, Size: 0x4]
	int WaveCount;//[Offset: 0x1fc, Size: 0x4]
	enum DefaultAirAttackGenerateType;//[Offset: 0x200, Size: 0x1]
	enum[] AirAttackGenerateTypeList;//[Offset: 0x208, Size: 0x10]
	bool bAirAttackUseModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	CurveFloat* AttackAreaSizeModifierCurve;//[Offset: 0x220, Size: 0x8]
	CurveFloat* BombCountModifierCurve;//[Offset: 0x228, Size: 0x8]
	int WaveInternal;//[Offset: 0x230, Size: 0x4]
	AirAttackCfg AirAttackConfig;//[Offset: 0x234, Size: 0x18]
	float BombBaseDamage;//[Offset: 0x24c, Size: 0x4]
	float BombMinDamage;//[Offset: 0x250, Size: 0x4]
	float BroadcastClientDistance;//[Offset: 0x254, Size: 0x4]
	AirAttackOrder AirAttackOrder;//[Offset: 0x258, Size: 0x50]
	Vector AirAttackArea;//[Offset: 0x2a8, Size: 0xc]
	byte AirAttackStatus;//[Offset: 0x2b4, Size: 0x1]
	float AirAttackDummyTime;//[Offset: 0x2b8, Size: 0x4]
	AirAttackCS* AirAttackCS;//[Offset: 0x2c0, Size: 0x8]
	void RPC_NetMulticast_BroadcastAirAttackOrder(const AirAttackOrderRPCInfo AirAttackOderRPCInfo);// 0x5d41664
	bool ReviseAirAttackLocation(out const Vector AirAttackLocation);// 0x5d415c0
	void MakeAirAttackAreaWarning(out Vector MapCenter, float MapRadiusDummy, float AttackRadius, int CurIndex);// 0x9f84450
	float GetAirAttackSizeModifier(int CurIndex);// 0x5d413e8
	enum GetAirAttackGenerateType(int CurIndex);// 0x5d4135c
	Vector GetAirAttackArea();// 0x5d41324
	void DisableAirAttack();// 0x5d41310
	void DelayDisableAirAttack(float TimerSeconds);// 0x5d41294
	void BroadcastAirAttackOver();// 0x5d41280
<----------Generated by SSpawner v1.0.4---------->


Class: AirAttackCfg
	float EscapeTime;//[Offset: 0x0, Size: 0x4]
	float AttackLastingTime;//[Offset: 0x4, Size: 0x4]
	float AttackAreaRadius;//[Offset: 0x8, Size: 0x4]
	float OuterRadius;//[Offset: 0xc, Size: 0x4]
	int TotalBombs;//[Offset: 0x10, Size: 0x4]
	int BombsRadius;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AirAttackCS.TimerRegistComponent.ActorComponent.Object
	class STExtraExplosionEffect* ExplosionEffectTemplate;//[Offset: 0x168, Size: 0x8]
	float VisibleDistance;//[Offset: 0x170, Size: 0x4]
	float DelayDamageAndBomb;//[Offset: 0x174, Size: 0x4]
	bool bHaveFlyingAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]
	float AheadOfTime;//[Offset: 0x180, Size: 0x4]
	class Actor* FlyingMissileClass;//[Offset: 0x188, Size: 0x8]
	int ActorPoolInitialSize;//[Offset: 0x190, Size: 0x4]
	Actor*[] MissileActorList;//[Offset: 0x198, Size: 0x10]
	AirAttackOrder AirAttackOrder;//[Offset: 0x1a8, Size: 0x50]
	Vector AirAttackArea;//[Offset: 0x1f8, Size: 0xc]
	void OnAirAttack(byte airattacktype, int waveIndex, out const AirAttackOrder InAirAttackOrder, out const Vector InAirAttackArea);// 0x5d41ff4
	void LaunchMissile(int Index);// 0x5d41f78
	void DoBombHarmAtLocation(out Vector bombLocation, const float BombBaseDamage, const float BombMinDamage);// 0x5d41e70
	void ClientFlyingMissile(int Index);// 0x5d41df4
	void AirAttackThrowBomb(int Index);// 0x5d41d78
<----------Generated by SSpawner v1.0.4---------->


Class: AirAttackOrderRPCInfo
	AirAttackOrder AirAttackOrder;//[Offset: 0x0, Size: 0x50]
	Vector AirAttackArea;//[Offset: 0x50, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: ReviveBattleUIComponent.LuaActorComponent.ActorComponent.Object
	Vector[] ReviveTowerLocation;//[Offset: 0x1e0, Size: 0x10]
	bool bHasReviveTower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	void OnRep_ReviveTowerLocation();// 0x9f84450
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleDataMgr.Actor.Object
	STExtraVehicleBase*[] VehiclesDataMap;//[Offset: 0x3f8, Size: 0x10]
	STExtraVehicleBase*[] uavDataMap;//[Offset: 0x408, Size: 0x10]
	void UnRegisterVehicle(STExtraVehicleBase* Vehicle);// 0x630a070
	void UnRegisterUAV(STExtraVehicleBase* uav);// 0x6309ff4
	void RemoveNoFreezeOn(SceneComponent* Actor);// 0x6309f78
	void RegisterVehicle(STExtraVehicleBase* Vehicle);// 0x6309efc
	void RegisterUAV(STExtraVehicleBase* uav);// 0x6309e80
	static VehicleDataMgr* GetInstance(World* World);// 0x6309e04
	void AddNoFreezeOn(SceneComponent* Actor);// 0x6309d88
<----------Generated by SSpawner v1.0.4---------->


Class: BP_DecalBakingActor_C.DecalBakingActorMgr.DecalBakingActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x480, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: MyLandscape.Actor.Object
	RuntimeMeshComponent* Mesh;//[Offset: 0x3f8, Size: 0x8]
	MyLandscapeGeometry* LandscapeGeometry;//[Offset: 0x400, Size: 0x8]
	Material* LandscapeMat;//[Offset: 0x408, Size: 0x8]
	StaticMeshComponent* HighQualityMesh;//[Offset: 0x490, Size: 0x8]
	LandscapeGeometry_ExtendData* LandscapeGeometry_ExtendData;//[Offset: 0x4b0, Size: 0x8]
	bool AutoLoadLandscapeMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	FString AutoLoadGeometryPath;//[Offset: 0x4c0, Size: 0x10]
	FString AutoLoadMaterialPath;//[Offset: 0x4d0, Size: 0x10]
	StaticMeshComponent* HighLODMesh;//[Offset: 0x4e0, Size: 0x8]
	bool EditorLoadLandscapeMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 0x1]
	float HideHighLODOfZ;//[Offset: 0x4ec, Size: 0x4]
	float ChangeLongerDistanceOfZ;//[Offset: 0x4f0, Size: 0x4]
	float ChangeLongerDistanceScale;//[Offset: 0x4f4, Size: 0x4]
	<FString> ChangeLongerDistanceLevels;//[Offset: 0x4f8, Size: 0x50]
	<StaticMeshActor*> HighMeshActorsOnFly;//[Offset: 0x548, Size: 0x50]
	Actor* ViewTarget;//[Offset: 0x5a0, Size: 0x8]
	FString[] NewHoleMapArray;//[Offset: 0x5a8, Size: 0x10]
	RuntimeMeshComponent* GetMeshComp();// 0x5f8d9f8
	void GameEventReconnect();// 0x5f8d9e4
	void GameEventJump();// 0x5f8d9d0
	void GameEventFlying();// 0x5f8d9bc
	void GameEventFighting();// 0x5f8d9a8
	void GameEventAvatarDisplay();// 0x5f8d994
	void AddHighMeshActorsOnFly(StaticMeshActor* Actor);// 0x5f8d918
	void AboutToSwitchViewTargetPlayer();// 0x5f8d904
<----------Generated by SSpawner v1.0.4---------->


Class: MyLandscapeGeometry.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x30, Size: 0x10]
	Vector[] Normals;//[Offset: 0x40, Size: 0x10]
	Vector2D[] UV;//[Offset: 0x50, Size: 0x10]
	int[] Indices;//[Offset: 0x60, Size: 0x10]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x70, Size: 0x50]
	int ComponentIndexCount;//[Offset: 0xc0, Size: 0x4]
	int ComponentVertexCount;//[Offset: 0xc4, Size: 0x4]
	<FString,SubLevelComponentMapValue> SubLevelComponentMap;//[Offset: 0xc8, Size: 0x50]
	StaticMesh* HighQualityMesh;//[Offset: 0x118, Size: 0x28]
	float HighQualityMeshDestroyHight;//[Offset: 0x140, Size: 0x4]
	<IntPoint,ComponentBorderInfo> ComponentBorderInfoMap;//[Offset: 0x148, Size: 0x50]
	RunTimeMeshFrustumCullNode[] FrustumCullInfo;//[Offset: 0x198, Size: 0x10]
	uint16[] GlobalFrustumCullIndexBuffer;//[Offset: 0x1a8, Size: 0x10]
	uint16[] GlobalFrustumCullIndexBufferInfo;//[Offset: 0x1b8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SubLevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 0x10]
	int[] IndexOffsetArray;//[Offset: 0x10, Size: 0x10]
	int[] VertexOffsetIndex;//[Offset: 0x20, Size: 0x10]
	int[] BorderIndex1;//[Offset: 0x30, Size: 0x10]
	int[] BorderIndex2;//[Offset: 0x40, Size: 0x10]
	int[] BorderIndex3;//[Offset: 0x50, Size: 0x10]
	int[] BorderIndex4;//[Offset: 0x60, Size: 0x10]
	int[] UnderBorderIndex1;//[Offset: 0x70, Size: 0x10]
	int[] UnderBorderIndex2;//[Offset: 0x80, Size: 0x10]
	int[] UnderBorderIndex3;//[Offset: 0x90, Size: 0x10]
	int[] UnderBorderIndex4;//[Offset: 0xa0, Size: 0x10]
	int[] BorderIndicesBuffer1;//[Offset: 0xb0, Size: 0x10]
	int[] BorderIndicesBuffer2;//[Offset: 0xc0, Size: 0x10]
	int[] BorderIndicesBuffer3;//[Offset: 0xd0, Size: 0x10]
	int[] BorderIndicesBuffer4;//[Offset: 0xe0, Size: 0x10]
	uint16 Border16BitIndicesBuffer1_InfoIndex;//[Offset: 0xf0, Size: 0x2]
	uint16 Border16BitIndicesBuffer2_InfoIndex;//[Offset: 0xf2, Size: 0x2]
	uint16 Border16BitIndicesBuffer3_InfoIndex;//[Offset: 0xf4, Size: 0x2]
	uint16 Border16BitIndicesBuffer4_InfoIndex;//[Offset: 0xf6, Size: 0x2]
	FString Sibling1Name;//[Offset: 0xf8, Size: 0x10]
	FString Sibling2Name;//[Offset: 0x108, Size: 0x10]
	FString Sibling3Name;//[Offset: 0x118, Size: 0x10]
	FString Sibling4Name;//[Offset: 0x128, Size: 0x10]
	int Sibling1Idx;//[Offset: 0x138, Size: 0x4]
	int Sibling2Idx;//[Offset: 0x13c, Size: 0x4]
	int Sibling3Idx;//[Offset: 0x140, Size: 0x4]
	int Sibling4Idx;//[Offset: 0x144, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ComponentBorderInfo
	IntPoint ComponentIndex;//[Offset: 0x0, Size: 0x8]
	int IndexOffset;//[Offset: 0x8, Size: 0x4]
	int VertexOffset;//[Offset: 0xc, Size: 0x4]
	int[] ComponentBorderIB01;//[Offset: 0x10, Size: 0x10]
	int[] ComponentBorderIB02;//[Offset: 0x20, Size: 0x10]
	int[] ComponentBorderIB03;//[Offset: 0x30, Size: 0x10]
	int[] ComponentBorderIB04;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: RunTimeMeshFrustumCullNode
	Box Bounds;//[Offset: 0x0, Size: 0x1c]
	uint16 InfoIndex;//[Offset: 0x1c, Size: 0x2]
	FString LandScapeName;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: LandscapeGeometry_ExtendData.DataAsset.Object
	<IntPoint,int> ComponentVertexIndexOffset;//[Offset: 0x30, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: TssHookEx.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BP_ScreenAppearanceActor_C.ScreenAppearanceActor.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BP_WEP_Dagger_C.STExtraWeapon_Throw.STExtraWeapon.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	MeleeThrowPredictLineComponent_BP_C* PredictLineComponent;//[Offset: 0xb70, Size: 0x8]
	BP_ThrowComponent_Melee_C* BP_ThrowComponent_Melee;//[Offset: 0xb78, Size: 0x8]
	MeleeWeaponAvatarComp_BP_C* MeleeWeaponAvatarComp_BP;//[Offset: 0xb80, Size: 0x8]
	CrossHairComponent* Crosshair;//[Offset: 0xb88, Size: 0x8]
	WeaponStateDefault* WeaponStateDefault;//[Offset: 0xb90, Size: 0x8]
	WeaponStateManager* WeaponStateManager;//[Offset: 0xb98, Size: 0x8]
	WeaponSpecificHandler* WeaponSpecificHandler;//[Offset: 0xba0, Size: 0x8]
	WeaponAnimList_Melee_C* WeaponAnimList_Melee;//[Offset: 0xba8, Size: 0x8]
	WeaponEntity* WeaponEntity;//[Offset: 0xbb0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: STExtraWeapon_Throw.STExtraWeapon.LuaActor.Actor.Object
	bool bAutoSwitchSameSlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb60, Size: 0x1]
	float AutoSwitchSameSlotWeaponTime;//[Offset: 0xb64, Size: 0x4]
	bool IsAllowThrow();// 0x624d800
	void HandleWeaponEvent(enum NewEvent);// 0x624d77c
	void HandleThrowStateChanged(enum NewState, enum PrevState);// 0x624d6bc
	void HandleCharacterThrowModeChanged(byte NewMode, byte PrevMode);// 0x624d5fc
<----------Generated by SSpawner v1.0.4---------->


Class: MeleeThrowPredictLineComponent_BP_C.ActorPredictLineComp_BP_C.PredictLineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ActorPredictLineComp_BP_C.PredictLineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void ActivePredictLine(bool bActive, bool bReset, bool CallFunc_IsActive_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_GetCurPawn_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x70644c4
	void InitPredictEndPointFX(out int ColorBlindnessType, ParticleSystem* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x70644c4
	<int,ParticleSystem*> PSPredictEndPointMap;//[Offset: 0xb60, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_ThrowComponent_Melee_C.BP_ThrowComponent_C.CharacterThrowComponent.ThrowComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BP_ThrowComponent_C.CharacterThrowComponent.ThrowComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x408, Size: 0x8]
	void SetPawnStateDisabled(STExtraBaseCharacter* Pawn, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, enum CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x70644c4
	void InitializeNewProjectile(EliteProjectile* NewProjectile, bool bDrop, float ExplosionDelay, PlayerController* CallFunc_GetPlayerController_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, bool CallFunc_IsTimerExplosionProjectile_ReturnValue, TemBPDataAddr[] K2Node_MakeArray_Array, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x70644c4
	void ReceiveThrowStateChanged(enum NewState, enum PrevState);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void ThrowCanceledDelegate_Event(ThrowComponent* ThrowComponent);// 0x70644c4
	void ExecuteUbergraph_BP_ThrowComponent(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_Event_NewState, enum K2Node_Event_PrevState, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsDedicatedServer_ReturnValue, Controller* CallFunc_GetOwnerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, ThrowComponent* K2Node_CustomEvent_ThrowComponent, bool CallFunc_IsDedicatedServer_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller2, bool K2Node_DynamicCast_bSuccess2, Pawn* CallFunc_GetOwnerPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_HasAuthority_ReturnValue);// 0x70644c4
	enum[] ThrowDisableStates;//[Offset: 0x410, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterThrowComponent.ThrowComponent.ActorComponent.Object
	CharacterThrowData HighThrowTPP;//[Offset: 0x200, Size: 0x70]
	CharacterThrowData HighThrowFPP;//[Offset: 0x270, Size: 0x70]
	CharacterThrowData LowThrowTPP;//[Offset: 0x2e0, Size: 0x70]
	CharacterThrowData LowThrowFPP;//[Offset: 0x350, Size: 0x70]
	float PeekAngle;//[Offset: 0x3c0, Size: 0x4]
	float PeekOffset;//[Offset: 0x3c4, Size: 0x4]
	ThrowReplaceCharAnimData[] ReplaceAnimDataList_HighThrow;//[Offset: 0x3c8, Size: 0x10]
	ThrowReplaceCharAnimData[] ReplaceAnimDataList_LowThrow;//[Offset: 0x3d8, Size: 0x10]
	float ReplaceAnimationDelay;//[Offset: 0x3e8, Size: 0x4]
	float HideWeaponDelay;//[Offset: 0x3ec, Size: 0x4]
	AkAudioEvent* ProjectilePrepareSound;//[Offset: 0x3f0, Size: 0x8]
	Actor* RingAttachment;//[Offset: 0x3f8, Size: 0x8]
	void HandleCharacterPawnStateLeft(enum PawnState);// 0x5e3cd3c
	void HandleCharacterPawnStateInterrupted(enum State, enum InterruptedBy);// 0x5e3cc7c
	void HandleCharacterPawnStateEntered(enum NewState);// 0x5e3cbf8
<----------Generated by SSpawner v1.0.4---------->


Class: ThrowComponent.ActorComponent.Object
	ThrowableConfig ThrowableConfig;//[Offset: 0x110, Size: 0x78]
	enum AllowThrowMode;//[Offset: 0x188, Size: 0x1]
	delegate ThrowStateChangedDelegate;//[Offset: 0x190, Size: 0x10]
	enum ThrowState;//[Offset: 0x1a0, Size: 0x1]
	delegate GetThrowLocationDelegate;//[Offset: 0x1a8, Size: 0x10]
	delegate ThrowCanceledDelegate;//[Offset: 0x1b8, Size: 0x10]
	EliteProjectile* NewProjectile_Private;//[Offset: 0x1c8, Size: 0x8]
	void ThrowStateChangedDelegate__DelegateSignature(enum CurrentState, enum PrevState);// 0x70644c4
	void ThrowCanceledDelegate__DelegateSignature(ThrowComponent* ThrowComponent);// 0x70644c4
	bool ShouldDrawTrajectory();// 0x62718b8
	void ServerStartThrow();// 0x6271858
	void ServerStartPrepare();// 0x62717f8
	void ServerCancelThrowAlways();// 0x6271798
	void ServerCancelThrow();// 0x6271738
	void RPC_NetMulticast_CreateProjectile(class EliteProjectile ProjectileClass, const Transform SpawnTM, bool bDrop, float ExplosionDelay, Vector FinalVelocity);// 0x627158c
	void ReceiveThrowStateChanged(enum NewState, enum PrevState);// 0x70644c4
	void OnRep_ThrowState(enum PrevState);// 0x6271508
	void OnRep_NewProjectile();// 0x62714ec
	void OnCancelThrow();// 0x62714d0
	void InitializeNewProjectile(EliteProjectile* NewProjectile, bool bDrop, float ExplosionDelay);// 0x62713c4
	enum GetThrowState();// 0x62713a8
	byte GetThrowMode();// 0x627136c
	Vector GetThrowLocationDelegate__DelegateSignature();// 0x70644c4
	Vector GetThrowLocation();// 0x627132c
	Pawn* GetOwnerPawn();// 0x62712f8
	Controller* GetOwnerController();// 0x62712c4
	bool GetIsThrowing();// 0x627128c
	enum GetAllowThrowMode();// 0x6271270
	Vector GetAimDirection();// 0x6271230
	void FireProjecitle(bool bDrop, float ExplosionDelay);// 0x6271168
	void FinishThrow();// 0x627114c
	void CreateProjectile(out const Vector Location, out const Vector Direction, bool bDrop, float ExplosionDelay);// 0x6270fdc
	void ConsumeItem(int ItemId);// 0x6270f58
	void ClientCancelThrow();// 0x6270f3c
	bool CanThrow();// 0x6270efc
	bool CanChangeThrowMode();// 0x6270ed0
	void CancelThrow(bool bForce);// 0x6270e4c
	bool CanCancel();// 0x6270e14
	bool CanAim();// 0x6270dd4
	Vector CalculateFinalThrowVelocity(out const Vector AimDirection);// 0x6270d30
	void BeginThrow();// 0x6270d14
<----------Generated by SSpawner v1.0.4---------->


Class: EliteProjectile.Actor.Object
	CapsuleComponent* RootCollision;//[Offset: 0x3f8, Size: 0x8]
	EliteProjectileMovementComponent* ProjectileMovement;//[Offset: 0x400, Size: 0x8]
	StaticMeshComponent* ProjectileMesh;//[Offset: 0x408, Size: 0x8]
	RotatingMovementComponent* RotatingMovement;//[Offset: 0x410, Size: 0x8]
	ParticleSystemComponent* MovementTrailFX;//[Offset: 0x418, Size: 0x8]
	ProjectileHealthSetting HealthSetting;//[Offset: 0x420, Size: 0x8]
	delegate ProjectileExplodedDelegate;//[Offset: 0x428, Size: 0x10]
	delegate ProjectileAttachedDelegate;//[Offset: 0x438, Size: 0x10]
	int AvatarID;//[Offset: 0x448, Size: 0x4]
	UAEDataTable* AvatarDataTable;//[Offset: 0x450, Size: 0x8]
	ProjectileEvent ReplicatedProjectileEvent;//[Offset: 0x458, Size: 0x30]
	ProjectileRepMovement ProjectileReplicatedMovement;//[Offset: 0x488, Size: 0x28]
	EliteProjectileBounceDataAsset* ImpactEffects;//[Offset: 0x4b0, Size: 0x28]
	class STExtraExplosionEffect* ExplosionTemplate;//[Offset: 0x4d8, Size: 0x28]
	class STExtraExplosionEffect* ExplosionTemplateInAir;//[Offset: 0x500, Size: 0x28]
	class STExtraExplosionEffect* ExplosionTemplateInWater;//[Offset: 0x528, Size: 0x28]
	int ItemId;//[Offset: 0x550, Size: 0x4]
	enum ExplosionStartType;//[Offset: 0x554, Size: 0x1]
	float ExplosionDelay;//[Offset: 0x558, Size: 0x4]
	float ImpactExplosionDelay;//[Offset: 0x55c, Size: 0x4]
	float LifeSpanAfterExploded;//[Offset: 0x560, Size: 0x4]
	float ImpactEffectsInterval;//[Offset: 0x564, Size: 0x4]
	bool bOpenStickyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	class Object[] DenyStickyTargetsClass;//[Offset: 0x570, Size: 0x10]
	ConditionAndRestriction ExplodeAfterStopped;//[Offset: 0x580, Size: 0x1]
	ConditionAndRestriction ExplodeOnBroken;//[Offset: 0x581, Size: 0x1]
	ConditionAndRestriction ExplodeOnImpact;//[Offset: 0x582, Size: 0x1]
	ConditionAndRestriction ExplodeOnTimer;//[Offset: 0x583, Size: 0x1]
	bool bUseRandomStartAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x584, Size: 0x1]
	bool bNormalAlignment;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x584, Size: 0x1]
	bool bExplodeOnBroken;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x584, Size: 0x1]
	bool bExploded;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x584, Size: 0x1]
	bool bBroken;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x584, Size: 0x1]
	bool bValid;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x584, Size: 0x1]
	float SpawnTime;//[Offset: 0x588, Size: 0x4]
	float ExplosionTime;//[Offset: 0x58c, Size: 0x4]
	Object*[] CachedExplosionEffectAssets;//[Offset: 0x640, Size: 0x10]
	void UnStickyFromComp(PrimitiveComponent* StickyComponent);// 0x5e968a8
	void UnStickyFromActor(Actor* StickyActor);// 0x5e9682c
	void SpawnExplosionEffect(out const Vector Location);// 0x5e9679c
	void SetExplodeTimer(float Timer);// 0x5e96720
	void SetAvatarVisible(bool bNewVisible);// 0x5e9669c
	void SetAvatarID(int NewAvatarID);// 0x5e96620
	void SetActive(bool bNewActive);// 0x5e9659c
	void ReceiveProjectileStoppedEvent(out const HitResult HitResult);// 0x70644c4
	void ReceiveProjectileHit(out const HitResult Hit);// 0x70644c4
	void ReceiveProjectileExplodedEvent();// 0x70644c4
	void ReceiveProjectileEventReplicated();// 0x70644c4
	void ReceiveProjectileBrokenEvent(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x70644c4
	void ReceiveProjectileBouncedEvent(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x70644c4
	void ReceiveProjectileActivatedEvent();// 0x70644c4
	float ReceiveModifyDamage(float DamageAmount, Controller* EventInstigator, Actor* DamageCauser);// 0x5e96494
	void ReceiveInitializeProjectileAvatar();// 0x70644c4
	void OnRep_ReplicatedProjectileEvent(out const ProjectileEvent PrevEvent);// 0x5e963c4
	void OnRep_ProjectileReplicatedMovement();// 0x5e963b0
	void OnImpact(out const HitResult HitResult);// 0x5e962d8
	void NormalizeAlignment(out const Vector ImpactNormal);// 0x5e96248
	void MulticastExploded(const HitResult Impact);// 0x5e96180
	void ManuallyImpact(out const HitResult HitResult);// 0x5e960b0
	bool IsTimerExplosionProjectile();// 0x5e96078
	bool IsTargetDynamic(const Actor* TestActor, const SceneComponent* TestComponent);// 0x5e95fa8
	bool IsInWater();// 0x5e95f70
	bool IsFoor();// 0x5e95f38
	bool IsBroken();// 0x5e95f18
	void HandleProjectileStop(out const HitResult HitResult);// 0x5e95e40
	void HandleProjectilePassedThroughSomething(out const HitResult Hit, out const Vector MoveDelta);// 0x5e95d14
	void HandleProjectileHit(out const HitResult Hit);// 0x5e95c3c
	void HandleProjectileExploded(out const HitResult Impact);// 0x5e95b64
	void HandleProjectileBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x5e95a38
	void HandleProjectileActivated();// 0x5e95a1c
	float GetRemainingTimeBeforeExplosion();// 0x5e959e0
	StaticMeshComponent* GetProjectileMesh();// 0x5e959c4
	int GetItemId();// 0x5e959a8
	float GetExplodeTimer();// 0x5e95944
	void Disable();// 0x5e95930
	void CacheExplosionEffectsAssets();// 0x5e95914
	bool BlueprintLifeSpanExpired();// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: EliteProjectileMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	class Actor[] PassThroughActorClasses;//[Offset: 0x1b8, Size: 0x10]
	class PrimitiveComponent[] PassThroughComponentClasses;//[Offset: 0x1c8, Size: 0x10]
	delegate OnProjectilePassedThroughSomething;//[Offset: 0x1d8, Size: 0x10]
	int MaxBounces;//[Offset: 0x1e8, Size: 0x4]
	void ProjectilePassThroughActor__DelegateSignature(out const HitResult Hit, out const Vector MoveDelta);// 0x70644c4
	enum CanTargetReallyBlockProjectile(out const HitResult HitResult);// 0x5e997ec
<----------Generated by SSpawner v1.0.4---------->


Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationRate;//[Offset: 0x150, Size: 0xc]
	Vector PivotTranslation;//[Offset: 0x15c, Size: 0xc]
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ProjectileHealthSetting
	float Health;//[Offset: 0x0, Size: 0x4]
	float DamageScale;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ProjectileEvent
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	byte EventFlag;//[Offset: 0x18, Size: 0x1]
	enum EventType;//[Offset: 0x19, Size: 0x1]
	enum[] ReplicatedEvents;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ProjectileRepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector Location;//[Offset: 0xc, Size: 0xc]
	Rotator Rotation;//[Offset: 0x18, Size: 0xc]
	bool bReplicateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x25, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x26, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x27, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: EliteProjectileBounceDataAsset.DataAsset.Object
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	ParticleSystem* DefaultFX;//[Offset: 0x38, Size: 0x8]
	ParticleSystem* ConcreteFX;//[Offset: 0x40, Size: 0x8]
	ParticleSystem* DirtFX;//[Offset: 0x48, Size: 0x8]
	ParticleSystem* WaterFX;//[Offset: 0x50, Size: 0x8]
	ParticleSystem* MetalFX;//[Offset: 0x58, Size: 0x8]
	ParticleSystem* WoodFX;//[Offset: 0x60, Size: 0x8]
	ParticleSystem* GrassFX;//[Offset: 0x68, Size: 0x8]
	ParticleSystem* GlassFX;//[Offset: 0x70, Size: 0x8]
	ParticleSystem* FleshFX;//[Offset: 0x78, Size: 0x8]
	ParticleSystem* SteelFX;//[Offset: 0x80, Size: 0x8]
	ParticleSystem* SandbagFX;//[Offset: 0x88, Size: 0x8]
	ParticleSystem* SandFX;//[Offset: 0x90, Size: 0x8]
	ParticleSystem* ClothFX;//[Offset: 0x98, Size: 0x8]
	ParticleSystem* PlasticFX;//[Offset: 0xa0, Size: 0x8]
	ParticleSystem* LeatherFX;//[Offset: 0xa8, Size: 0x8]
	ParticleSystem* CeramicsFX;//[Offset: 0xb0, Size: 0x8]
	ParticleSystem* PaperFX;//[Offset: 0xb8, Size: 0x8]
	ParticleSystem* StoneFX;//[Offset: 0xc0, Size: 0x8]
	ParticleSystem* SnowFX;//[Offset: 0xc8, Size: 0x8]
	ParticleSystem* PopCanFX;//[Offset: 0xd0, Size: 0x8]
	ParticleSystem* LeafFX;//[Offset: 0xd8, Size: 0x8]
	ParticleSystem* CarFX;//[Offset: 0xe0, Size: 0x8]
	ParticleSystem* AsphaltFX;//[Offset: 0xe8, Size: 0x8]
	ParticleSystem* ConcreteTDMFX;//[Offset: 0xf0, Size: 0x8]
	ParticleSystem* IceFX;//[Offset: 0xf8, Size: 0x8]
	ParticleSystem* FoodFX;//[Offset: 0x100, Size: 0x8]
	bool bForceDefaultSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	AkAudioEvent* DefaultSound;//[Offset: 0x110, Size: 0x8]
	AkAudioEvent* ConcreteSound;//[Offset: 0x118, Size: 0x8]
	AkAudioEvent* DirtSound;//[Offset: 0x120, Size: 0x8]
	AkAudioEvent* WaterSound;//[Offset: 0x128, Size: 0x8]
	AkAudioEvent* MetalSound;//[Offset: 0x130, Size: 0x8]
	AkAudioEvent* WoodSound;//[Offset: 0x138, Size: 0x8]
	AkAudioEvent* GrassSound;//[Offset: 0x140, Size: 0x8]
	AkAudioEvent* GlassSound;//[Offset: 0x148, Size: 0x8]
	AkAudioEvent* FleshSound;//[Offset: 0x150, Size: 0x8]
	AkAudioEvent* SteelSound;//[Offset: 0x158, Size: 0x8]
	AkAudioEvent* SandbagSound;//[Offset: 0x160, Size: 0x8]
	AkAudioEvent* SandSound;//[Offset: 0x168, Size: 0x8]
	AkAudioEvent* ClothSound;//[Offset: 0x170, Size: 0x8]
	AkAudioEvent* PlasticSound;//[Offset: 0x178, Size: 0x8]
	AkAudioEvent* LeatherSound;//[Offset: 0x180, Size: 0x8]
	AkAudioEvent* CeramicsSound;//[Offset: 0x188, Size: 0x8]
	AkAudioEvent* PaperSound;//[Offset: 0x190, Size: 0x8]
	AkAudioEvent* StoneSound;//[Offset: 0x198, Size: 0x8]
	AkAudioEvent* SnowSound;//[Offset: 0x1a0, Size: 0x8]
	AkAudioEvent* PopCanSound;//[Offset: 0x1a8, Size: 0x8]
	AkAudioEvent* LeafSound;//[Offset: 0x1b0, Size: 0x8]
	AkAudioEvent* CarSound;//[Offset: 0x1b8, Size: 0x8]
	AkAudioEvent* AsphaltSound;//[Offset: 0x1c0, Size: 0x8]
	AkAudioEvent* ConcreteTDMSound;//[Offset: 0x1c8, Size: 0x8]
	AkAudioEvent* IceSound;//[Offset: 0x1d0, Size: 0x8]
	AkAudioEvent* FoodSound;//[Offset: 0x1d8, Size: 0x8]
	void PlayImpactEffects(out const HitResult Hit);// 0x5e991f0
<----------Generated by SSpawner v1.0.4---------->


Class: ConditionAndRestriction
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSatisfied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bRestriction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: ThrowableConfig
	int ItemId;//[Offset: 0x0, Size: 0x4]
	class EliteProjectile* ProjectileClass;//[Offset: 0x8, Size: 0x8]
	bool bShowTrajectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	class Actor* Ring;//[Offset: 0x18, Size: 0x28]
	FName RingAttachSocket;//[Offset: 0x40, Size: 0x8]
	float ExplosionDelayOverride;//[Offset: 0x48, Size: 0x4]
	CurveFloat* SpeedCurve;//[Offset: 0x50, Size: 0x8]
	CurveFloat* PitchCurve;//[Offset: 0x58, Size: 0x8]
	float FireDelay;//[Offset: 0x60, Size: 0x4]
	float ProjectileSpawnDelay;//[Offset: 0x64, Size: 0x4]
	float ThrowCooldownDuration;//[Offset: 0x68, Size: 0x4]
	Vector PawnMotionContributionMultiplier;//[Offset: 0x6c, Size: 0xc]
<----------Generated by SSpawner v1.0.4---------->


Class: CharacterThrowData
	Vector RelativeLocation_Stand;//[Offset: 0x0, Size: 0xc]
	Vector RelativeLocation_Crouch;//[Offset: 0xc, Size: 0xc]
	Vector RelativeLocation_Prone;//[Offset: 0x18, Size: 0xc]
	Vector RelativeLocation_Vehicle;//[Offset: 0x24, Size: 0xc]
	ThrowableAnim StandAnim;//[Offset: 0x30, Size: 0x10]
	ThrowableAnim CrouchAnim;//[Offset: 0x40, Size: 0x10]
	ThrowableAnim ProneAnim;//[Offset: 0x50, Size: 0x10]
	ThrowableAnim VehicleAnim;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ThrowableAnim
	AnimMontage* Prepare;//[Offset: 0x0, Size: 0x8]
	AnimMontage* Release;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: ThrowReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x8, Size: 0x10]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: MeleeWeaponAvatarComp_BP_C.WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponStateDefault.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAnimList_Melee_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BP_ObjectPoolManager_AllMode_C.AObjectPoolManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x538, Size: 0x8]
	FString GetLuaFilePath();// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void ExecuteUbergraph_BP_ObjectPoolManager_AllMode(int EntryPoint);// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x540, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_Punch_Fist_bp_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_Melee_Cowbar_BP_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_Melee_Machete_BP_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_Melee_Pan_BP_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_Melee_Sickle_BP_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_Melee_Dagger_BP_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_Template_Grenade_Classic_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_Template_Grenade_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_ProjSpikeTrap_BP_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_Template_Grenade_Classic1_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_ParachuteLand_BP_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_Template_Grenade_SingleMode_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_Zipline_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_PlayerRifleBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	void UserConstructionScript();// 0x70644c4
	StaticMeshComponent* BulletMesh;//[Offset: 0x720, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_PlayerShotgunBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	void UserConstructionScript();// 0x70644c4
	StaticMeshComponent* BulletMesh;//[Offset: 0x720, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_PlayerSniperBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x720, Size: 0x8]
	void ActiveBulletParticle();// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void ResetParticle();// 0x70644c4
	void DelayAction();// 0x70644c4
	void ExecuteUbergraph_BP_PlayerSniperBullet(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x70644c4
	ParticleSystemComponent* P_Sniper_bullet_01;//[Offset: 0x728, Size: 0x8]
	StaticMeshComponent* BulletMesh;//[Offset: 0x730, Size: 0x8]
	float EffectFxDelayShowTime;//[Offset: 0x738, Size: 0x4]
	TimerHandle DelayParticleTimer;//[Offset: 0x740, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: VH_UAZ03_C.VH_UAZ01_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: VH_UAZ01_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1828, Size: 0x8]
	void HandleAdvanceAvatarEquiped(bool IsEquiped, int AvatarID);// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void OnBoostingChanged();// 0x70644c4
	void BndEvt__VehicleAdvanceAvatarComp_BP_K2Node_ComponentBoundEvent_3_OnAvatarMeshEquipped__DelegateSigna(int SlotID, bool bEquipped, int ItemId);// 0x70644c4
	void BndEvt__VehicleAdvanceAvatarComp_BP_K2Node_ComponentBoundEvent_0_OnServerAvatarEquipedDelegate__Dele();// 0x70644c4
	void BndEvt__UAEChaVehAnimList_PassengersL_K2Node_ComponentBoundEvent_0_ActorComponentActivatedSignature_(ActorComponent* Component, bool bReset);// 0x70644c4
	void ExecuteUbergraph_VH_UAZ01(int EntryPoint, ActorComponent* K2Node_ComponentBoundEvent_Component, bool K2Node_ComponentBoundEvent_bReset, int K2Node_ComponentBoundEvent_SlotID, bool K2Node_ComponentBoundEvent_bEquipped, int K2Node_ComponentBoundEvent_ItemID);// 0x70644c4
	BP_Battle_VehicleLicensePlateComponent_C* BP_Battle_VehicleLicensePlateComponent;//[Offset: 0x1830, Size: 0x8]
	VehicleAdvanceAvatarComp_BP_C* VehicleAdvanceAvatarComp_BP;//[Offset: 0x1838, Size: 0x8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersR;//[Offset: 0x1840, Size: 0x8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_PassengersL;//[Offset: 0x1848, Size: 0x8]
	UAEChaVehAnimListComponent* UAEChaVehAnimList_Driver;//[Offset: 0x1850, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_Battle_VehicleLicensePlateComponent_C.VehicleLicenseNumberComponent.LuaActorComponent.ActorComponent.Object
	void MulticastRPC_ShowVoice(int MulticastRPC_ShowVoice_param1, uint32 MulticastRPC_ShowVoice_param2, uint32 MulticastRPC_ShowVoice_param3);// 0x9f84450
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleLicenseNumberComponent.LuaActorComponent.ActorComponent.Object
	LicenseStruct LicensePlate;//[Offset: 0x1d8, Size: 0x18]
	void OnResourceLoadFinish();// 0x6311674
	void OnRep_LicensePlate();// 0x70644c4
	void ChangeLicenseNum(int Index, int Num);// 0x63115c0
	void ChangeLicenseItem(int ItemId);// 0x6311544
	SoftObjectPath[] BPGetNeedLoadSoftPath();// 0x6311408
	void AsyncLoadResource();// 0x63113f4
<----------Generated by SSpawner v1.0.4---------->


Class: LicenseStruct
	int[] LicenseNumArray;//[Offset: 0x0, Size: 0x10]
	int ItemId;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: VehicleAdvanceAvatarComp_BP_C.VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa50, Size: 0x8]
	FName GetReflectionCubeName_Lobby();// 0x70644c4
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x70644c4
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID, bool CallFunc_InitVehicleAvatarBySkinID_Old_ReturnValue, bool CallFunc_GenerateDefaultAvatarConfig_ReturnValue, VehicleAvatarData K2Node_MakeStruct_VehicleAvatarData, bool CallFunc_InitVehicleAvatar_ReturnValue);// 0x70644c4
	void PutOffItemIDInLobby(int InItemID, out bool Result, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleUnequipItem_ReturnValue);// 0x70644c4
	void PutOnItemIDInLobby(int InItemID, int ColorID, int PatternID, int Particle ID, out bool Result, FString CallFunc_Conv_IntToString_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x70644c4
	void PutOffSlotInLobby(byte InSlotType, out bool Result, int CallFunc_Conv_ByteToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_HandleUnequipSlot_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x70644c4
	void BP_ProcessStyleUnequipped(int OldStyleID, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int CallFunc_IsStyleHasModelConfig_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HandleEquipStyle_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue2, int CallFunc_IsStyleHasModelConfig_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2);// 0x70644c4
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x70644c4
	void BP_ProcessStyleEquipped(int NewStyleID, int OldStyleID);// 0x70644c4
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x70644c4
	void BPCreateAvatarCustomHandle(int SlotID, int ItemId, out AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle, class VAH_Pattern_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Pattern_BP_Base, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, VAH_Pattern_BP_Base_C* CallFunc_SpawnObject_ReturnValue, BP_STRUCT_VehicleRefitPatternTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, BP_STRUCT_VehicleRefitColorTable_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, class Object CallFunc_GetBattleItemHandleIfPakExist_ReturnValue, class VAH_Particle_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Particle_BP_Base, bool K2Node_ClassDynamicCast_bSuccess2, VAH_Particle_BP_Base_C* CallFunc_SpawnObject_ReturnValue2, class VAH_Color_BP_Base_C K2Node_ClassDynamicCast_AsVAH_Color_BP_Base, bool K2Node_ClassDynamicCast_bSuccess3, bool CallFunc_IsValid_ReturnValue2, VAH_Color_BP_Base_C* CallFunc_SpawnObject_ReturnValue3, bool CallFunc_IsValid_ReturnValue3, AvatarCustomBase*[] K2Node_MakeArray_Array);// 0x70644c4
	VehicleStyleData MakeVehicleStyleData(int InStyleID, VehicleStyle[] Temp, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VehicleRefitStyle_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue2, VehicleStyle K2Node_MakeStruct_VehicleStyle, int CallFunc_Array_Add_ReturnValue, VehicleStyle K2Node_MakeStruct_VehicleStyle2, byte CallFunc_Conv_IntToByte_ReturnValue3, int CallFunc_Array_Add_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue3, VehicleStyleData K2Node_MakeStruct_VehicleStyleData);// 0x70644c4
	bool GenerateDefaultAvatarConfig(int InBaseSkinID, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, AvatarBPUtils* CallFunc_GetBPUtils_ReturnValue, int[] CallFunc_GetVehicleDefaultStyleID_OutStyleIDList, bool CallFunc_GetVehicleDefaultStyleID_ReturnValue, int CallFunc_Array_Get_Item, VehicleStyleData CallFunc_MakeVehicleStyleData_ReturnValue, int CallFunc_IsStyleHasModelConfig_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID);// 0x70644c4
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID, bool CallFunc_InitVehicleAvatarBySkinID_ReturnValue);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x70644c4
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x70644c4
	void BP_EventStyleEquipped(int NewStyleID, int OldStyleID);// 0x70644c4
	void BP_EventStyleUnequipped(int OldStyleID);// 0x70644c4
	void ExecuteUbergraph_VehicleAdvanceAvatarComp_BP(int EntryPoint, int K2Node_CustomEvent_OldStyleID, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, int K2Node_CustomEvent_NewStyleID, int K2Node_CustomEvent_OldStyleID2);// 0x70644c4
	int[] DefaultStyleIDList;//[Offset: 0xa58, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_VehicleRefitBPTable_type
	FString Path_0_367735C04445450711936E2507D65338;//[Offset: 0x0, Size: 0x10]
	int SkinID_1_178D3B00586DF4A03398AF2E06BA7504;//[Offset: 0x10, Size: 0x4]
	int TemplateID_2_188844C035CA84B912116AE102FE3804;//[Offset: 0x14, Size: 0x4]
	int ID_3_7E5115C05AFA7931402A62180B97D7E4;//[Offset: 0x18, Size: 0x4]
	FString LobbyPath_6_1DD513C07D99921F4DE3874A01E3EA48;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VAH_Pattern_BP_Base_C.AvatarCustomPattern_BP_C.AvatarCustomPattern.AvatarCustomBase.CustomBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarCustomPattern_BP_C.AvatarCustomPattern.AvatarCustomBase.CustomBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarCustomPattern.AvatarCustomBase.CustomBase.Object
	void InitPatternInfo(float Scale1, float Scale2, FString Path1, FString Path2, FString Offset);// 0x5e58368
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_VehicleRefitPatternTable_type
	int IconScale2_0_46572E4071F9B3293BE305FF087656B2;//[Offset: 0x0, Size: 0x4]
	FString IconPath2_1_024EF7804CE8216627C3CAFF038879F2;//[Offset: 0x8, Size: 0x10]
	int IconScale1_2_46562E0071F9B3283BE305F8087656B1;//[Offset: 0x18, Size: 0x4]
	FString IconPath1_3_024DF7404CE8216527C3CAFC038879F1;//[Offset: 0x20, Size: 0x10]
	int ID_4_3B4768C07AEB475737EB9B560A7BEF14;//[Offset: 0x30, Size: 0x4]
	FString IconOffset_5_59F5A18037D665B02424026A0AB3EDF4;//[Offset: 0x38, Size: 0x10]
	FString PatternBPPath_6_4B5944C06FBA413D7EB727A808597AD8;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_VehicleRefitColorTable_type
	int ID_0_7607F1003C307130785E051708091744;//[Offset: 0x0, Size: 0x4]
	int Gray_1_23C2528073E753A86CAE45C709177089;//[Offset: 0x4, Size: 0x4]
	FString Color3_2_133F1A40217781872E65F412071E3F43;//[Offset: 0x8, Size: 0x10]
	FString Color2_3_133E1A00217781862E65F413071E3F42;//[Offset: 0x18, Size: 0x10]
	FString Color1_4_133D19C0217781852E65F410071E3F41;//[Offset: 0x28, Size: 0x10]
	FString ColorBPPath_5_507BD54027F0DEF913818BAA07048B58;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: VAH_Particle_BP_Base_C.AvatarCustomParticle_BP_C.AvatarCustomParticle.AvatarCustomBase.CustomBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarCustomParticle_BP_C.AvatarCustomParticle.AvatarCustomBase.CustomBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarCustomParticle.AvatarCustomBase.CustomBase.Object
	ParticleAsset[] ParticleDataList;//[Offset: 0x50, Size: 0x10]
	ParticleGroup ParticleGroup;//[Offset: 0x60, Size: 0x30]
	bool ClearCustomInfo();// 0x5e58028
	void AsyncLoadCustomParticleDone();// 0x5e58014
	bool ApplyCustomInfo();// 0x5e57fd4
<----------Generated by SSpawner v1.0.4---------->


Class: VAH_Color_BP_Base_C.AvatarCustomColor_BP_C.AvatarCustomColor.AvatarCustomBase.CustomBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarCustomColor_BP_C.AvatarCustomColor.AvatarCustomBase.CustomBase.Object
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarCustomColor.AvatarCustomBase.CustomBase.Object
	void InitColorInfo(float Gray, FString Color1, FString Color2, FString Color3);// 0x5e57960
<----------Generated by SSpawner v1.0.4---------->


Class: BP_STRUCT_VehicleRefitStyle_type
	int cost_id1_21_40D3BDC00FA1EC252A325218091B0AE1;//[Offset: 0x0, Size: 0x4]
	int cost_id2_2_40D4BE000FA1EC262A325219091B0AE2;//[Offset: 0x4, Size: 0x4]
	int auto_unlock_3_70A1E14054C1515F34AD00AA03FE271B;//[Offset: 0x8, Size: 0x4]
	int part_id_19_2960F1004F796BBC287325E80772B0B4;//[Offset: 0xc, Size: 0x4]
	int part_group_id_20_580314001313FC7E5037A1C0001EF544;//[Offset: 0x10, Size: 0x4]
	int style_id_6_3334EF8009D542BA023C1EFF04520144;//[Offset: 0x14, Size: 0x4]
	int vehicle_group_id_7_2FA91E401396E1572443357005BAE444;//[Offset: 0x18, Size: 0x4]
	int cost_num2_8_567B5EC042ECFAD5581D19B001B10392;//[Offset: 0x1c, Size: 0x4]
	int cost_num1_9_567A5E8042ECFAD4581D19B101B10391;//[Offset: 0x20, Size: 0x4]
	FString style_icon_10_2B88068062961F24124419A202014E0E;//[Offset: 0x28, Size: 0x10]
	FString part_name_11_242D66002BB47CD41AA53D3702B10145;//[Offset: 0x38, Size: 0x10]
	FString part_group_icon_12_75E1AB0010031F6A4A4800D10EF54A4E;//[Offset: 0x48, Size: 0x10]
	FString style_name_13_7772E4800830FFC6124AFDB20202F465;//[Offset: 0x58, Size: 0x10]
	int value1_14_12B54BC05132BBB9260C3FBC04D988D1;//[Offset: 0x68, Size: 0x4]
	int value2_15_12B64C005132BBBA260C3FBF04D988D2;//[Offset: 0x6c, Size: 0x4]
	int real_part_16_420F46C07AAD2FE77C0DB8570D3321D4;//[Offset: 0x70, Size: 0x4]
	int type2_17_243BF54066D327F75079C483054BFDB2;//[Offset: 0x74, Size: 0x4]
	int type1_18_243AF50066D327F65079C482054BFDB1;//[Offset: 0x78, Size: 0x4]
	int can_fit_22_68F7CD4000E30BD17923736E08996A54;//[Offset: 0x7c, Size: 0x4]
	FString part_group_tab_icon_23_089B9080591DEC3273FD6659077B104E;//[Offset: 0x80, Size: 0x10]
	int real_part2_24_0189F34001B6E9815CB7C17003321DA2;//[Offset: 0x90, Size: 0x4]
	int type21_25_7B46618009DF2DB0732EC53204BFDB01;//[Offset: 0x94, Size: 0x4]
	int value21_26_048158402E894EF74D0737BF0D988D11;//[Offset: 0x98, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AvatarBPUtils.Object
	CreateAvatarHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0x150, Size: 0x10]
	<int,CreateAvatarHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0x160, Size: 0x50]
	<int,WeaponAttachmentsDataRow> WeaponAttachmentsTableRowMap;//[Offset: 0x250, Size: 0x50]
	FString InitedUpWeaponTableName;//[Offset: 0x2a0, Size: 0x10]
	<int,UpWeaponDataRow> UpWeaponTableRowMap;//[Offset: 0x2b0, Size: 0x50]
	<int,int> UpWeaponBPIDMap;//[Offset: 0x300, Size: 0x50]
	FString InitedUpWeaponAttachmentTableName;//[Offset: 0x350, Size: 0x10]
	<int,UpWeaponAttachmentDataRow> UpWeaponAttachmentTableRowMap;//[Offset: 0x360, Size: 0x50]
	<int,WeaponReuseCfgDataRow> WeaponReuseCfgTableRowMap;//[Offset: 0x3b0, Size: 0x50]
	FString InitedUpBulletTableName;//[Offset: 0x400, Size: 0x10]
	<int,UpBulletTableDataRow> UpBulletTableRowMap;//[Offset: 0x410, Size: 0x50]
	<int,SupportUpBullets> AvailableBulletsMap;//[Offset: 0x460, Size: 0x50]
	FString InitedChipSupportTableName;//[Offset: 0x4b0, Size: 0x10]
	<int,ChipSupportDataRow> ChipSupportDataRowMap;//[Offset: 0x4c0, Size: 0x50]
	<int,ChipSupportItem> ChipSupportItemMap;//[Offset: 0x510, Size: 0x50]
	FString InitedChipTableName;//[Offset: 0x560, Size: 0x10]
	<int,ChipDataRow> ChipDataRowMap;//[Offset: 0x570, Size: 0x50]
	bool bEditorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	<int,int> OverrideTemplateMap_EditorMode;//[Offset: 0x5c8, Size: 0x50]
	void StringToArrayString(FString str, out FString[] OutArray, FString Sign);// 0x5da49b4
	void StringToArrayName(FString str, out FName[] OutArray, FString Sign);// 0x5da47a4
	void StringToArray(FString str, out int[] OutArray, FString Sign);// 0x5da4594
	void SetEditorMode(bool bOpen);// 0x5da4514
	void RefreshWeaponAttachmentsTableRowMap(int WeaponId, out const WeaponAttachmentsDataRow RowData);// 0x5da4418
	void OnPostSwitchGameStatut(FString InGameStatus);// 0x5da4370
	void OnModNameChanged(FString InModName);// 0x5da42c8
	void InitWeaponReuseCfgTable();// 0x5da42b4
	void InitWeaponAttrBPTable();// 0x5da42a0
	void InitWeaponAttachmentsTable();// 0x5da428c
	void InitUpWeaponTable(FString tableName);// 0x5da41e4
	void InitUpWeaponAttachmentsTable(FString tableName);// 0x5da413c
	void InitUpBulletTable(FString tableName);// 0x5da4094
	void Initialize();// 0x5da4080
	void InitChipTable(FString tableName);// 0x5da3fd8
	void InitChipSupportTable(FString tableName);// 0x5da3f30
	int GetVehicleShapeBySkinID(int InVehicleSkinID);// 0x5da3e9c
	bool GetVehicleDefaultStyleID(int InVehicleSkinID, out int[] OutStyleIDList);// 0x5da3d88
	FString GetVehicleBPPathBySkinID(int InVehicleSkinID);// 0x5da3c8c
	int GetVehicleAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x5da3be4
	void GetVehicleAvatarModifyEnterSocket(int InVehicleSkinID, out FName[] OutSocketList);// 0x5da3ae4
	int GetClothAvatarTemplateID(out const ItemDefineID ItemDefineID);// 0x5da3a3c
	void GetClothAvatarSuits(int gender, out const ItemDefineID ItemDefineID, out int[] OutClothSuits);// 0x5da38e0
	int GetBPIDByResID(int resID);// 0x5da384c
	FString GetAvatarHandlePath(ItemDefineID DefineID, bool bLobby);// 0x5da36f0
	void GetAvatarDataFromTable(int itemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x5da35c8
	int GetAdjustWeaponBPID_Lobby(int WeaponId);// 0x5da3534
	ItemHandleBase* CreateAvatarHandle(ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x5da340c
	void ConstructAvatarDataFromTable(int itemType, int TemplateID, out AvatarTableData OutAvatarTableData);// 0x5da32dc
	void AddOverrideTemplateID(int TypeSpecificID, int TemplateID);// 0x5da3228
<----------Generated by SSpawner v1.0.4---------->


Class: CreateAvatarHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 0x18]
	Object* Outer;//[Offset: 0x18, Size: 0x8]
	FString Path;//[Offset: 0x20, Size: 0x10]
	delegate Callback;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: CreateAvatarHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 0x10]
	FString[] PathList;//[Offset: 0x10, Size: 0x10]
	Object* Outer;//[Offset: 0x20, Size: 0x8]
	delegate Callback;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAttachmentsDataRow
	int WeaponId;//[Offset: 0x0, Size: 0x4]
	int BulletID;//[Offset: 0x4, Size: 0x4]
	int ProposeBulletNum;//[Offset: 0x8, Size: 0x4]
	int AIMinAttackDist;//[Offset: 0xc, Size: 0x4]
	int AIMaxAttackDist;//[Offset: 0x10, Size: 0x4]
	int[] MuzzleIDList;//[Offset: 0x18, Size: 0x10]
	int[] UpperIDList;//[Offset: 0x28, Size: 0x10]
	int[] StockIDList;//[Offset: 0x38, Size: 0x10]
	int[] MagazineIDList;//[Offset: 0x48, Size: 0x10]
	int[] LowerIDList;//[Offset: 0x58, Size: 0x10]
	int[] UpperSideIDList;//[Offset: 0x68, Size: 0x10]
	int[] CoreIDList;//[Offset: 0x78, Size: 0x10]
	int[] BezelIDList;//[Offset: 0x88, Size: 0x10]
	int[] GunLockIDList;//[Offset: 0x98, Size: 0x10]
	int[] TacticalAttachIDList;//[Offset: 0xa8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: UpWeaponDataRow
<----------Generated by SSpawner v1.0.4---------->


Class: UpWeaponAttachmentDataRow
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponReuseCfgDataRow
<----------Generated by SSpawner v1.0.4---------->


Class: UpBulletTableDataRow
	int MiltiBulletID;//[Offset: 0x0, Size: 0x4]
	int ParentBulletID;//[Offset: 0x4, Size: 0x4]
	float BulletImpactDamagePerc;//[Offset: 0x8, Size: 0x4]
	int BulletImpactDamageAddVal;//[Offset: 0xc, Size: 0x4]
	float BulletMomentumPerc;//[Offset: 0x10, Size: 0x4]
	int BulletMomentumAddVal;//[Offset: 0x14, Size: 0x4]
	int DefaultPriority;//[Offset: 0x18, Size: 0x4]
	int[] BulletHitBuffIdList;//[Offset: 0x20, Size: 0x10]
	FString IgnoreBulletHitBuffAttrName;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: SupportUpBullets
	SupportUpBullet[] SupportUpBulletList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: ChipSupportDataRow
	int ItemId;//[Offset: 0x0, Size: 0x4]
	int[] SupportChipSupTypeList;//[Offset: 0x8, Size: 0x10]
	int SupportChipNum;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: ChipSupportItem
	int ChipSubType;//[Offset: 0x0, Size: 0x4]
	<int,bool> SupportItemDic;//[Offset: 0x8, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: ChipDataRow
	int ItemId;//[Offset: 0x0, Size: 0x4]
	AttrModifyData[] AttrModifyList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: AttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]
	enum Op;//[Offset: 0x10, Size: 0x1]
	float ModifyValue;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	bool DefaultLoadAllAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x220, Size: 0x10]
	void SetVehCharAnimDataList(VehCharAnimData[] InVehCharAnimDataList);// 0x6919418
	void OnIdleAnimListAsyncLoadingFinished();// 0x6919404
	void OnAnimListAsyncLoadingFinished(AsyncLoadCharVehAnimParams LoadingParam);// 0x69191e0
	void ChangeAnimData(out const VehCharAnimData[] InAnimData);// 0x691913c
<----------Generated by SSpawner v1.0.4---------->


Class: AsyncLoadCharVehAnimParams
<----------Generated by SSpawner v1.0.4---------->


Class: BP_PlayerRifleBulletImpact_C.STEShootWeaponBulletImpactEffect.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0xb70, Size: 0x8]
	Texture2D*[] CrossHairRefTexture;//[Offset: 0xb78, Size: 0x10]
<----------Generated by SSpawner v1.0.4---------->


Class: PlayerDeadBox_C.PlayerTombBox.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x600, Size: 0x8]
	void WarmodeEnterSpectating();// 0x70644c4
	void LuaCheckCanPlayAudio(out bool bCanPlayAudio);// 0x70644c4
	Vector GetGroundLocation(byte[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, Actor*[] K2Node_MakeArray_Array2, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd);// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void CameraMove__FinishedFunc();// 0x70644c4
	void CameraMove__UpdateFunc();// 0x70644c4
	void MatParamTimeline__FinishedFunc();// 0x70644c4
	void MatParamTimeline__UpdateFunc();// 0x70644c4
	void PitchTimeline__FinishedFunc();// 0x70644c4
	void PitchTimeline__UpdateFunc();// 0x70644c4
	void ShowShine();// 0x70644c4
	void ShowNormal();// 0x70644c4
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x70644c4
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void SwitchToDeadTombBox();// 0x70644c4
	void HideDeadTombApparence();// 0x70644c4
	void OnRep_AvatarId();// 0x70644c4
	void OnAvatarLoadedDone();// 0x70644c4
	void ExecuteUbergraph_PlayerDeadBox(int EntryPoint, Rotator CallFunc_MakeRotator_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess2, SearchedPickUpItemResult[] CallFunc_SearchPickUpWrapperActors_ReturnValue, Controller* CallFunc_GetController_ReturnValue, int CallFunc_Array_Length_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_Greater_IntInt_ReturnValue, Controller* CallFunc_GetController_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess4, float CallFunc_GetSplineLength_ReturnValue, MaterialInstanceDynamic* CallFunc_PlayCustomScreenAppearance_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_IntInt_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_IsScreenAppearancePlaying_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess5, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsSameTeam_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, float CallFunc_GetServerWorldTimeSeconds_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue2, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess6, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue2, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess7, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, int CallFunc_PostEvent_ReturnValue, bool CallFunc_LuaCheckCanPlayAudio_bCanPlayAudio, int CallFunc_GetAvatarId_ReturnValue, bool CallFunc_HasBoxOpenAnim_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, bool CallFunc_HasBoxOpenAnim_ReturnValue2);// 0x70644c4
	ParticleSystemComponent* TeammateParticleSystem;//[Offset: 0x608, Size: 0x8]
	ParticleSystemComponent* DeadParticleSystem;//[Offset: 0x610, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x618, Size: 0x8]
	DeadBoxAvatarComponent_BP_C* DeadBoxAvatarComponent_BP;//[Offset: 0x620, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x628, Size: 0x8]
	STScreenAppearanceComponent* STScreenAppearance;//[Offset: 0x630, Size: 0x8]
	StaticMeshComponent* SM_plane_01;//[Offset: 0x638, Size: 0x8]
	SplineComponent* Spline;//[Offset: 0x640, Size: 0x8]
	CameraComponent* Camera;//[Offset: 0x648, Size: 0x8]
	StaticMeshComponent* Survive_FMC_Chest1;//[Offset: 0x650, Size: 0x8]
	float PitchTimeline_NewTrack_2_968FF7FD4B819605A16739A661556F94;//[Offset: 0x658, Size: 0x4]
	byte PitchTimeline__Direction_968FF7FD4B819605A16739A661556F94;//[Offset: 0x65c, Size: 0x1]
	TimelineComponent* PitchTimeline;//[Offset: 0x660, Size: 0x8]
	float MatParamTimeline_NewTrack_1_BC760681429EE06B831346878CD5F7A7;//[Offset: 0x668, Size: 0x4]
	byte MatParamTimeline__Direction_BC760681429EE06B831346878CD5F7A7;//[Offset: 0x66c, Size: 0x1]
	TimelineComponent* MatParamTimeline;//[Offset: 0x670, Size: 0x8]
	float CameraMove_NewTrack_0_D08AF709411B99835C3653A068B1A989;//[Offset: 0x678, Size: 0x4]
	byte CameraMove__Direction_D08AF709411B99835C3653A068B1A989;//[Offset: 0x67c, Size: 0x1]
	TimelineComponent* CameraMove;//[Offset: 0x680, Size: 0x8]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x688, Size: 0x8]
	bool bIsPlayingAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	bool bHasOpenAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: DeadBoxAvatarComponent_BP_C.DeadBoxAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	void GetVehicleDiedPath(int ItemId, out FString Path);// 0x70644c4
	void IsVehicleAvatarID(int ItemId, out bool IsVehicleAvatarID);// 0x70644c4
	FString GetItemAvatarHandlePath(int ItemId, FString CallFunc_GetWeaponAvatarDeadBoxAvatarHandlePath_ReturnValue, FString CallFunc_GetVehicleDiedPath_Path, bool CallFunc_IsVehicleAvatarID_IsVehicleAvatarID);// 0x70644c4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId, FString CallFunc_GetVehicleDiedPath_Path, bool CallFunc_IsVehicleAvatarID_IsVehicleAvatarID, class Object CallFunc_GetClassByPath_ReturnValue, class DeadBoxAvatarHandle K2Node_ClassDynamicCast_AsDead_Box_Avatar_Handle, bool K2Node_ClassDynamicCast_bSuccess, class Object CallFunc_GetWeaponAvatarDeadBoxAvatarHandleClass_ReturnValue, class DeadBoxAvatarHandle K2Node_ClassDynamicCast_AsDead_Box_Avatar_Handle2, bool K2Node_ClassDynamicCast_bSuccess2, DeadBoxAvatarHandle* CallFunc_SpawnObject_ReturnValue, DeadBoxAvatarHandle* CallFunc_SpawnObject_ReturnValue2);// 0x70644c4
<----------Generated by SSpawner v1.0.4---------->


Class: DeadBoxAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
	Object*[] CachedParticles;//[Offset: 0x4e8, Size: 0x10]
	MeshComponent* MainStaticMesh;//[Offset: 0x4f8, Size: 0x8]
	SkeletalMeshComponent* MainSkeletalMesh;//[Offset: 0x500, Size: 0x8]
	ParticleSystemComponent* TeammateParticleSysComp;//[Offset: 0x508, Size: 0x8]
	ParticleSystemComponent* DeadParticleSysComp;//[Offset: 0x510, Size: 0x8]
	AkComponent* MainAkComp;//[Offset: 0x518, Size: 0x8]
	AkAudioEvent* DeathBoxAkEvent;//[Offset: 0x520, Size: 0x8]
	delegate OnDeadBoxAvatarLoadedDone;//[Offset: 0x528, Size: 0x10]
	void SyncChangeItemAvatar(int InItemID);// 0x5e73ce8
	void StopAudio();// 0x5e73cd4
	void ResetItemAvatar();// 0x5e73cc0
	void PreChangeItemAvatar(int InItemID);// 0x5e73c3c
	void PlayAudio();// 0x5e73c28
	void OnDeadBoxAvatarLoaded__DelegateSignature();// 0x70644c4
	void OnApplyStaticMeshParticle();// 0x70644c4
	bool HasBoxOpenAnim();// 0x5e73bf0
	FString GetItemAvatarHandlePath(int ItemId);// 0x70644c4
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x70644c4
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x5e73ad0
	bool ChangeItemParticle();// 0x5e73a98
	void AsyncChangeItemAvatar(int InItemID);// 0x5e73a14
	bool ApplyParticle(ParticleSystemComponent* ParticleComp, ParticleSystem* ParticleSystem);// 0x5e7394c
	bool ApplyMesh(MeshComponent* MeshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x5e73840
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x5e73740
	void AddExtraParticles();// 0x5e7372c
<----------Generated by SSpawner v1.0.4---------->


Class: DeadBoxAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ParticleSystem* TeammateSmokeParticle;//[Offset: 0x1c8, Size: 0x28]
	ParticleSystem* SelfDeadSmokeParticle;//[Offset: 0x1f0, Size: 0x28]
	DeadBoxParticleSystemAsset[] ParticleSystemArray;//[Offset: 0x218, Size: 0x10]
	bool ShouldDelayParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	Vector MeshScale;//[Offset: 0x22c, Size: 0xc]
	StaticMesh* MasterStaticMesh;//[Offset: 0x238, Size: 0x28]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x260, Size: 0x28]
	AnimationAsset* SkeletalMeshAnimation;//[Offset: 0x288, Size: 0x28]
	class AnimInstance* SkeletalMeshAnimBP;//[Offset: 0x2b0, Size: 0x28]
	bool HasOpenAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	class Actor* DeadPlayActor;//[Offset: 0x2e0, Size: 0x28]
	bool bPlaySkeltalAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bPlaySkeltalAnimLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	AkAudioEvent* AudioEvent;//[Offset: 0x310, Size: 0x28]
	float AttenuationScalingFactor;//[Offset: 0x338, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x33c, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: DeadBoxParticleSystemAsset
	ParticleSystem* Particle;//[Offset: 0x0, Size: 0x28]
	Transform ParticleTransform;//[Offset: 0x30, Size: 0x30]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	FName SocketName;//[Offset: 0x68, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_MachineGun_TommyGun_C.BP_ShootWeaponBase_C.STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	WeaponAimList_MachineGun_TommyGun_C* WeaponAimList_MachineGun_TommyGun;//[Offset: 0x14d0, Size: 0x8]
	bool bUseIdleAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_ShootWeaponBase_C.STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x13a0, Size: 0x8]
	void UpdateSupportAttachments(int CallFunc_GetWeaponID_ReturnValue, enum[] CallFunc_GetWeaponSupportSocket_ReturnValue);// 0x70644c4
	void GetCurWeaponShootLightEffect(out ParticleSystem* }T-NѓIQyrHe, int CallFunc_Conv_ByteToInt_ReturnValue, BattleItemHandleBase* CallFunc_GetEquippedHandle_ReturnValue, BackpackWeaponHandle* K2Node_DynamicCast_AsBackpack_Weapon_Handle, bool K2Node_DynamicCast_bSuccess, class BackpackWeaponHandle CallFunc_GetObjectClass_ReturnValue);// 0x70644c4
	void SetShineIntensity(float deltaSecond, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_FInterpTo_Constant_ReturnValue, float CallFunc_FMax_ReturnValue);// 0x70644c4
	void SetCurWeaponShine(float AutoLight, float LightIntensity, float LightFreq, out bool Success, MeshComponent* CallFunc_GetCurWeaponMesh_MeshComponent, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, StaticMeshComponent* K2Node_DynamicCast_AsStatic_Mesh_Component, bool K2Node_DynamicCast_bSuccess2, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue2, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess3, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic2, bool K2Node_DynamicCast_bSuccess4);// 0x70644c4
	void GetCurWeaponLightEffect(out ParticleSystem* ѓIQyrHe, <int> CanShineWeaponList, <int> K2Node_MakeVariable_MakeVariableOutput, int CallFunc_Conv_ByteToInt_ReturnValue, BattleItemHandleBase* CallFunc_GetEquippedHandle_ReturnValue, BackpackWeaponHandle* K2Node_DynamicCast_AsBackpack_Weapon_Handle, bool K2Node_DynamicCast_bSuccess, class BackpackWeaponHandle CallFunc_GetObjectClass_ReturnValue);// 0x70644c4
	void GetCurWeaponMesh(out MeshComponent* MeshComponent, int CallFunc_Conv_ByteToInt_ReturnValue, MeshComponent* CallFunc_GetMeshCompBySlotID_ReturnValue);// 0x70644c4
	LinearColor GetColorByTeamID(int TeamID, Color CallFunc_GetPlayerColorByTeamID_PlayerColor, float CallFunc_Conv_ByteToFloat_ReturnValue, float CallFunc_Conv_ByteToFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Conv_ByteToFloat_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue);// 0x70644c4
	void OnMagDropDown(bool CallFunc_EqualEqual_IntInt_ReturnValue, StaticMeshComponent* K2Node_DynamicCast_AsStatic_Mesh_Component, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_GetOwnerPawn_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_CheckBaseIsMoveable_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, DropDownWeaponMag_C* CallFunc_FinishSpawningActor_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanAND_ReturnValue3, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsUsingGrenadeLaunch_ReturnValue, HitResult CallFunc_K2_SetActorTransform_SweepHitResult, bool CallFunc_K2_SetActorTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x70644c4
	void OnHideDropDownMag(Pawn* CallFunc_GetOwnerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void OnWeaponMagIn(bool CallFunc_IsValidSoftObjectReference_ReturnValue, bool CallFunc_GetNeedMagAnimationWhenReload_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsUsingGrenadeLaunch_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, MeshComponent* CallFunc_GetDefaultAttachmentComponentByType_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, FName CallFunc_GetAttachSocketName_ReturnValue, bool CallFunc_IsValid_ReturnValue, MeshComponent* CallFunc_GetDefaultAttachmentComponentByType_ReturnValue2);// 0x70644c4
	void OnWeaponMagOut(bool CallFunc_GetNeedMagAnimationWhenReload_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_GetAttachSocketName_ReturnValue, bool CallFunc_IsUsingGrenadeLaunch_ReturnValue, byte CallFunc_GetCurrentFreshWeaponStateType_ReturnValue, MeshComponent* CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, MeshComponent* CallFunc_GetDefaultAttachmentComponentByType_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, MeshComponent* CallFunc_BP_PawnAttachMesh_PlayerMesh, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x70644c4
	void BeginRegReloadEvent(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2);// 0x70644c4
	void BP_PawnAttachMesh(out MeshComponent* PlayerMesh, Pawn* CallFunc_GetOwnerPawn_ReturnValue, CharacterAvatarComp2_BP_C* CallFunc_GetComponentByClass_ReturnValue);// 0x70644c4
	void BP_OnWeaponReloadStart(bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, float CallFunc_GetReloadTimeMagInFromEntity_ReturnValue, float CallFunc_GetReloadTimeMagOutFromEntity_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_FMax_ReturnValue, float CallFunc_GetReloadTimeFromEntity_ReturnValue, bool CallFunc_IsUsingGrenadeLaunch_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue2, float CallFunc_GetReloadTimeFromEntity_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue3);// 0x70644c4
	void BP_OnWeaponReloadEnd(bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x70644c4
	void ResetCamera();// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void PlayLocalShellDropFX();// 0x70644c4
	void EventOnMagDropDown();// 0x70644c4
	void ReceiveEndPlay(byte EndPlayReason);// 0x70644c4
	void OnClientShootPlayer();// 0x70644c4
	void StartFire();// 0x70644c4
	void BndEvt__FireWeaponState_K2Node_ComponentBoundEvent_0_EndStateDelegate__DelegateSignature();// 0x70644c4
	void OnFireHitServer(STExtraWeapon* Weapon, Vector HitPoint);// 0x70644c4
	void UpdateWeaponAvatar(float DeltaTime);// 0x70644c4
	void BndEvt__WeaponAvatarComp_BP_K2Node_ComponentBoundEvent_0_OnWeaponAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x70644c4
	void StopFire(byte ToState);// 0x70644c4
	void ExecuteUbergraph_BP_ShootWeaponBase(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, byte K2Node_Event_EndPlayReason, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, Actor* CallFunc_GetOwner_ReturnValue, STExtraWeapon* K2Node_CustomEvent_weapon, Vector K2Node_CustomEvent_hitpoint, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, float K2Node_Event_DeltaTime, int K2Node_ComponentBoundEvent_SlotID, ItemDefineID K2Node_ComponentBoundEvent_NewItemID, byte K2Node_Event_ToState, bool CallFunc_IsDedicatedServer_ReturnValue2);// 0x70644c4
	MultiBulletComponent* MultiBullet;//[Offset: 0x13a8, Size: 0x8]
	WeaponAvatarComp_BP_C* WeaponAvatarComp_BP;//[Offset: 0x13b0, Size: 0x8]
	CustomCndComponent* CustomCnd;//[Offset: 0x13b8, Size: 0x8]
	WeaponSpecificHandler* WeaponSpecificHandler;//[Offset: 0x13c0, Size: 0x8]
	BulletHitInfoUploadComponent* BulletHitInfoUpload;//[Offset: 0x13c8, Size: 0x8]
	CrossHairComponent* Crosshair;//[Offset: 0x13d0, Size: 0x8]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x13d8, Size: 0x8]
	WeaponStateDefault* WeaponStateDefault;//[Offset: 0x13e0, Size: 0x8]
	NoBulletWeaponState* NoBulletWeaponState;//[Offset: 0x13e8, Size: 0x8]
	FireWeaponState* FireWeaponState;//[Offset: 0x13f0, Size: 0x8]
	ReloadWeaponState* ReloadWeaponState;//[Offset: 0x13f8, Size: 0x8]
	IdleWeaponState* IdleWeaponState;//[Offset: 0x1400, Size: 0x8]
	InactiveWeaponState* InactiveWeaponState;//[Offset: 0x1408, Size: 0x8]
	ShootWeaponStateManager* ShootWeaponStateManager;//[Offset: 0x1410, Size: 0x8]
	ShootWeaponEffectComponent* ShootWeaponEffect;//[Offset: 0x1418, Size: 0x8]
	BulletTrackComponent* BulletTrack;//[Offset: 0x1420, Size: 0x8]
	STEShootWeaponProjectComponent* STEShootWeaponProject;//[Offset: 0x1428, Size: 0x8]
	bool bUseIdleAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1430, Size: 0x1]
	float FOV;//[Offset: 0x1434, Size: 0x4]
	float normalShotVoiceDis;//[Offset: 0x1438, Size: 0x4]
	float SlienceShotVoiceDis;//[Offset: 0x143c, Size: 0x4]
	MeshComponent* MagComp;//[Offset: 0x1440, Size: 0x8]
	FName MagCompAttachSocket;//[Offset: 0x1448, Size: 0x8]
	DropDownWeaponMag_C* DropDownMag;//[Offset: 0x1450, Size: 0x8]
	TimerHandle DropDownMagTimerHandle;//[Offset: 0x1458, Size: 0x8]
	float MagDropDownDelay;//[Offset: 0x1460, Size: 0x4]
	Vector MagDropDownOffset;//[Offset: 0x1464, Size: 0xc]
	bool MagDropDownEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1470, Size: 0x1]
	float MagDropDownHideDelay;//[Offset: 0x1474, Size: 0x4]
	float MagInShownDelay;//[Offset: 0x1478, Size: 0x4]
	float ShineIntensity;//[Offset: 0x147c, Size: 0x4]
	bool ShootState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1480, Size: 0x1]
	float totalDeltaSeconds;//[Offset: 0x1484, Size: 0x4]
	ParticleSystemComponent* BlinkLightEffect;//[Offset: 0x1488, Size: 0x8]
	Rotator ShellDropRot;//[Offset: 0x1490, Size: 0xc]
	bool IsAttachMagToMoveablePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149c, Size: 0x1]
	MeshComponent* MagOfAttachingPawn;//[Offset: 0x14a0, Size: 0x28]
	TimerHandle MagOutTimerHandle;//[Offset: 0x14c8, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BackpackWeaponHandle.BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComp;//[Offset: 0x158, Size: 0x8]
	WeaponMeshCfg MeshPackage;//[Offset: 0x160, Size: 0x150]
	WeaponMeshCfg[] ExtMeshPackageList;//[Offset: 0x2b0, Size: 0x10]
	class AnimInstance* animBP;//[Offset: 0x2c0, Size: 0x8]
	class AnimInstance* animBPClass;//[Offset: 0x2c8, Size: 0x28]
	CharSpecialLevelSequenceData[] WeaponSpecialLevelSequenceList;//[Offset: 0x2f0, Size: 0x10]
	<ItemDefineID,ItemDefineID> AttachmentAvatarList;//[Offset: 0x300, Size: 0x50]
	ItemDefineID[] DefaultAvatarList;//[Offset: 0x350, Size: 0x10]
	ItemDefineID ParentID;//[Offset: 0x360, Size: 0x18]
	ItemDefineID[] ParentIDList;//[Offset: 0x378, Size: 0x10]
	enum OverrideSocket;//[Offset: 0x388, Size: 0x1]
	BattleItemAdditionalData[] WeaponAttachmentAdditionalDataList;//[Offset: 0x390, Size: 0x10]
	STExtraWeapon* CachedTargetWeapon;//[Offset: 0x3a0, Size: 0x8]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x3a8, Size: 0x58]
	WeaponAttachItemUnit[] CachedWeaponAttachmentListBeforeDrop;//[Offset: 0x400, Size: 0x10]
	WeaponKillEffectCfg KillEffect;//[Offset: 0x410, Size: 0x8]
	ParticleSystem* LightEffect;//[Offset: 0x418, Size: 0x28]
	ParticleSystem* ShootLightEffect;//[Offset: 0x440, Size: 0x28]
	<byte,AkAudioEvent*> HitSoundMap;//[Offset: 0x468, Size: 0x50]
	AkAudioEvent* SlashSound;//[Offset: 0x4b8, Size: 0x28]
	bool IsInitUIWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]
	<int,Transform> PendantSocketRelativeTransform;//[Offset: 0x4e8, Size: 0x50]
	<FName,ParticleAsset> ParticleAssetMap;//[Offset: 0x538, Size: 0x50]
	MatParamModifyCfg[] MatParamModifyCfgs;//[Offset: 0x588, Size: 0x10]
	bool LowDeviceForceLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	<FName,LobbyWeaponSkinExclusiveActionCfg> SkinExclusiveActions;//[Offset: 0x5a0, Size: 0x50]
	WeaponEffectCfgBase*[] AvatarEffects;//[Offset: 0x5f0, Size: 0x10]
	int CachedWeaponDurability;//[Offset: 0x600, Size: 0x4]
	int CachedUpgradeInfoID;//[Offset: 0x604, Size: 0x4]
	int CacheBulletNumSaveToWrapper;//[Offset: 0x608, Size: 0x4]
	void UpdateWeaponDataFromWeapon();// 0x5de8e50
	void UpdateWeaponDataFromPickUp();// 0x5de8e34
	void SetMesh(FString skMesh, FString SkMeshLoad, FString stMesh, FString StMeshLoad, FString Material);// 0x5de8bf8
	void SetAnimationBp(FString AnimBpPath);// 0x5de8b50
	void ReturnAllBullets();// 0x70644c4
	void PreLocalHandleDisuse();// 0x5de8b3c
	BattleItemAdditionalData MakeWeaponDurabilityData(int Durability);// 0x5de8a30
	BattleItemAdditionalData MakeUpgradeInfoAdditionalData(int UpgradeInfoID);// 0x5de8924
	BattleItemAdditionalData MakeBulletNumAdditionalData(int BulletNum);// 0x5de8818
	PickUpWrapperActor* LocalSpawnWrapperOnGround(class Object InWrapperClass, STExtraBaseCharacter* InOwningCharacter, ItemDefineID InDefineID);// 0x5de86fc
	bool LocalHandleUse(out const BattleItemUseTarget InTarget, enum InReason, WeaponManagerComponent* InWeaponMgr, FName InTargetLogicSocket, bool bInTargetAutoUse, FName InMainLogicSlot1Name, FName InMainLogicSlot2Name, FName InSubLogicSlotName, bool bInIsPistol, STExtraPlayerController* InOwningPlayerController, BattleItemHandleBase* InCharacterItemHandle, BackpackComponent* InOwningBackpackComponnent, STExtraBaseCharacter* InOwningCharacter, class STExtraWeapon InWeaponClass, bool bInResetInitBulletInBullet, out STExtraWeapon* OutTargetWeaponActor, out FName bOutSocket);// 0x5de8230
	FName LocalGetAvailableInstantLogicSocketName(WeaponManagerComponent* InWeaponMgr, FName InTargetLogicSocket, bool bInTargetAutoUse, FName InMainLogicSlot1Name, FName InMainLogicSlot2Name, FName InSubLogicSlotName, bool bInIsPistol, STExtraPlayerController* InOwningPlayerController, out bool bOutNeedPutDownOldWeapon, out bool bOutAutoUse, enum InReason);// 0x5de7f08
	void LocalAutoEquipAttachments();// 0x70644c4
	bool IsVirtualAvatarHandle();// 0x5de7ec8
	bool IsAvatarWeapon();// 0x5de7e90
	void InitWeaponUpgradeInfo();// 0x5de7e7c
	void InitWeaponDurability(int WeaponDurability);// 0x5de7e00
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x5de7d40
	int GetWeaponUpgradeInfoID();// 0x5de7d0c
	int GetWeaponDurability();// 0x5de7cd8
	int GetSubSlotID();// 0x5de7c9c
	int GetSlotID();// 0x5de7c60
	void GetParentDefineIDList(out ItemDefineID[] ParentList);// 0x5de7b3c
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x5de7ad0
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x5de7960
	void GetDefaultAvatarList(out ItemDefineID[] DefaultAvatarList);// 0x5de78a0
	void GetDefaultAttachment(out int[] AttachmentArray, bool IsLobby);// 0x5de778c
	int GetCacheBulletNumSaveToWrapper(STExtraWeapon* Weapon, bool Initial);// 0x5de76b4
	class Object GetAnimationBP();// 0x5de7678
	bool CanDisuseOldWeapon(bool bDisuseResult, enum InReason);// 0x5de759c
	bool BPModifyAutoUse(bool bInAutoUse, STExtraBaseCharacter* OwnerPawn);// 0x5de74c0
<----------Generated by SSpawner v1.0.4---------->


Class: CharSpecialLevelSequenceData
	byte LevelSequenceType;//[Offset: 0x0, Size: 0x1]
	LevelSequenceConfig LevelSequenceConfig;//[Offset: 0x8, Size: 0xe8]
<----------Generated by SSpawner v1.0.4---------->


Class: LevelSequenceConfig
	SoftClassPath SequenceActorTemplate;//[Offset: 0x0, Size: 0x18]
	LevelSequence* LevelSequence;//[Offset: 0x18, Size: 0x28]
	float LevelSequenceDuration;//[Offset: 0x40, Size: 0x4]
	<FString,FString> TrackBindingInfos;//[Offset: 0x48, Size: 0x50]
	<FString,SoftObjectPath> TrackBindingObjects;//[Offset: 0x98, Size: 0x50]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponKillEffectCfg
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: LobbyWeaponSkinExclusiveActionCfg
	int ActionID;//[Offset: 0x0, Size: 0x4]
	SoftObjectPath ActionHandlePath;//[Offset: 0x8, Size: 0x18]
<----------Generated by SSpawner v1.0.4---------->


Class: DropDownWeaponMag_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3f8, Size: 0x8]
	void SetPendingDestroyState(bool isPendingDestroy);// 0x70644c4
	void SetCollisionEnable(bool Enable);// 0x70644c4
	void SetVisible(bool Visible, Pawn* Owner, bool CallFunc_Not_PreBool_ReturnValue);// 0x70644c4
	void SetSimulatePhysics(bool Enable, bool CallFunc_IsValid_ReturnValue);// 0x70644c4
	void SetMagMesh(StaticMesh* Mesh, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue);// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void WaitforDestroy(float leftTime);// 0x70644c4
	void ExecuteUbergraph_DropDownWeaponMag(int EntryPoint, float K2Node_CustomEvent_LeftTime);// 0x70644c4
	CapsuleComponent* Up;//[Offset: 0x400, Size: 0x8]
	CapsuleComponent* Down;//[Offset: 0x408, Size: 0x8]
	StaticMeshComponent* Mag;//[Offset: 0x410, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x418, Size: 0x8]
	bool PendingDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool CheckRollDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAvatarComp_BP_C.WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.LuaActorComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: CustomCndComponent.ActorComponent.Object
	CustomCndWrappperIns[] CndWrappers;//[Offset: 0x158, Size: 0x10]
	void RemoveCndWrapper(int ID);// 0x5e59e50
	void OnReceiveEvent(enum InEventType);// 0x5e59dd4
	void AddCndWrapper(FString Path, int ID);// 0x5e59cec
<----------Generated by SSpawner v1.0.4---------->


Class: CustomCndWrappperIns
	CustomCndWrapper* Wrapper;//[Offset: 0x0, Size: 0x8]
	int CndWrapperId;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: CustomCndWrapper.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 0x10]
	CustomCndIns[] Conditions;//[Offset: 0x98, Size: 0x10]
	enum[] EventTypeList;//[Offset: 0xa8, Size: 0x10]
	Object* WrapperOwner;//[Offset: 0xb8, Size: 0x8]
	void SetWrapperOwner(Object* Owner);// 0x5e5a44c
	void OnTriggerEvent(enum InEventType);// 0x5e5a3c8
	void OnReceiveEvent(enum InEventType);// 0x5e5a34c
	bool IsValidEvent(enum InEventType);// 0x5e5a2bc
<----------Generated by SSpawner v1.0.4---------->


Class: CustomCndIns
	CustomCondition* Cnd;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: CustomCondition.Object
	Object* CndOwner;//[Offset: 0x28, Size: 0x8]
	void SetCndOwner(Object* Owner);// 0x5e5f07c
	static STExtraCharacter* SafeGetPawn(Object* Owner);// 0x5e5f000
	bool IsOK();// 0x5e5efc0
<----------Generated by SSpawner v1.0.4---------->


Class: NoBulletWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ReloadWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1b0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: IdleWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1b0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: InactiveWeaponState.WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: ShootWeaponStateManager.WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAimList_MachineGun_TommyGun_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BP_PlayerPawn_AI_C.BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BP_Rifle_M16A4_C.BP_ShootWeaponBase_C.STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	WeaponAnimList_Rifle_M16A4_C* WeaponAnimList_Rifle_M16A4;//[Offset: 0x14d0, Size: 0x8]
	bool bUseIdleAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAnimList_Rifle_M16A4_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: BP_MachineGun_UMP9_C.BP_ShootWeaponBase_C.STExtraShootWeapon.STExtraWeapon.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	WeaponAnimList_MachineGun_UMP9_C* WeaponAnimList_MachineGun_UMP9;//[Offset: 0x14d0, Size: 0x8]
	bool bUseIdleAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d8, Size: 0x1]
<----------Generated by SSpawner v1.0.4---------->


Class: WeaponAnimList_MachineGun_UMP9_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
<----------Generated by SSpawner v1.0.4---------->


Class: Skill_Template_UseConsumables_C.UAESkill.UAEBaseSkill.UTSkill.LuaActor.Actor.Object
	void UserConstructionScript();// 0x70644c4
	SceneComponent* DefaultSceneRoot;//[Offset: 0x748, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: BP_AirDropPlane_C.AirDropPlane.FlightVehicle.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x590, Size: 0x8]
	void ShowBlackPinkAvatar(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetCurrentLevelName_ReturnValue, bool K2Node_SwitchString_CmpSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, MaterialInstance* CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, MaterialAsset K2Node_MakeStruct_MaterialAsset, DSSwitchInfo CallFunc_Array_Get_Item, MaterialInterface* CallFunc_ApplySingleMaterial_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x70644c4
	void StartSymulateFly();// 0x70644c4
	void UserConstructionScript();// 0x70644c4
	void ReceiveBeginPlay();// 0x70644c4
	void ExecuteUbergraph_BP_AirDropPlane(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, int CallFunc_PostAkEvent_ReturnValue);// 0x70644c4
	ParticleSystemComponent* ParticleSystem5;//[Offset: 0x598, Size: 0x8]
	ParticleSystemComponent* ParticleSystem1;//[Offset: 0x5a0, Size: 0x8]
	ParticleSystemComponent* ParticleSystem4;//[Offset: 0x5a8, Size: 0x8]
	ParticleSystemComponent* ParticleSystem3;//[Offset: 0x5b0, Size: 0x8]
	ParticleSystemComponent* ParticleSystem2;//[Offset: 0x5b8, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x5c0, Size: 0x8]
	AkComponent* Ak;//[Offset: 0x5c8, Size: 0x8]
	StaticMeshComponent* Aircraft;//[Offset: 0x5d0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5d8, Size: 0x8]
	MaterialInstance* BlackPink_slot0_MatInstance;//[Offset: 0x5e0, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: AirDropPlane.FlightVehicle.Actor.Object
	FlyingParam FlyingParam;//[Offset: 0x458, Size: 0x14]
	Vector DroppingStuffLocation;//[Offset: 0x46c, Size: 0xc]
	float DroppingSpeed;//[Offset: 0x478, Size: 0x4]
	float LifeSpanAfterDrop;//[Offset: 0x47c, Size: 0x4]
	float LifeSpanDrawAirDropPath;//[Offset: 0x480, Size: 0x4]
	int AirDropIconID;//[Offset: 0x484, Size: 0x4]
	int AirDropMarkDistance;//[Offset: 0x488, Size: 0x4]
	AirDropOrder AirDropOrder;//[Offset: 0x4a0, Size: 0xa0]
	DropStuffStrategy*[] DropStrategyArray;//[Offset: 0x540, Size: 0x10]
	DropStuffStrategy* DropStrategy;//[Offset: 0x550, Size: 0x8]
	ProjectileMovementComponent* PMComp;//[Offset: 0x558, Size: 0x8]
	bool bHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	Vector HoldLocation;//[Offset: 0x564, Size: 0xc]
	FString LuaFilePath;//[Offset: 0x570, Size: 0x10]
	int[] AirDropMarkIds;//[Offset: 0x580, Size: 0x10]
	void SetOrder(AirDropOrder Order);// 0x5d53a04
	void SetFlyingParam(out FlyingParam InFlyingParam);// 0x5d5396c
	void SetDropStrategy(DropStuffStrategy* Strategy);// 0x5d538f0
	void PostSpawnAirDropBox(AirDropBoxActor* AirDropBox);// 0x5d5386c
	void OnRep_FlyingParams();// 0x5d53850
	void OnRep_AirDropOrder();// 0x5d5383c
	AirDropOrder GetOrder();// 0x5d53690
	DropStuffStrategy*[] GetDropStrategyArray();// 0x5d53590
	DropStuffStrategy* GetDropStrategy();// 0x5d5355c
	int GetDroppingIndex(float DeltaTime);// 0x5d534d0
<----------Generated by SSpawner v1.0.4---------->


Class: FlightVehicle.Actor.Object
<----------Generated by SSpawner v1.0.4---------->


Class: FlyingParam
	float FlyingSpeed;//[Offset: 0x0, Size: 0x4]
	Vector FlyingDirection;//[Offset: 0x4, Size: 0xc]
	float AirPlaneSpawnServerTime;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AirDropOrder
	Vector AirDropPlaneSpawnPosition;//[Offset: 0x0, Size: 0xc]
	Vector AirDropPlaneFlyingDirection;//[Offset: 0xc, Size: 0xc]
	float AirDropPlaneFlyingSpeed;//[Offset: 0x18, Size: 0x4]
	Vector AirDropStuffFallingPosition;//[Offset: 0x1c, Size: 0xc]
	Vector[] BoxFallingPositionArray;//[Offset: 0x28, Size: 0x10]
	int AirDropIndex;//[Offset: 0x38, Size: 0x4]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	Vector AirDropPlaneEndPosition;//[Offset: 0x40, Size: 0xc]
	AirDropBoxParams[] AirDropBoxParamsArray;//[Offset: 0x50, Size: 0x10]
	class Object* AirdropBoxClass;//[Offset: 0x60, Size: 0x8]
	float AirDropStuffFallingSpeed;//[Offset: 0x68, Size: 0x4]
	bool bIsSpecialAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	int DropType;//[Offset: 0x70, Size: 0x4]
	FString DropCategory;//[Offset: 0x78, Size: 0x10]
	uint32 AirDropSummoner;//[Offset: 0x88, Size: 0x4]
	int ZombieID;//[Offset: 0x8c, Size: 0x4]
	int FlowId;//[Offset: 0x90, Size: 0x4]
	bool bIsEmptyAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	int DropID;//[Offset: 0x98, Size: 0x4]
<----------Generated by SSpawner v1.0.4---------->


Class: AirDropBoxParams
	Vector AirdropBoxFallingPosition;//[Offset: 0x0, Size: 0xc]
	class Object* AirdropBoxClass;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.4---------->


Class: DropStuffStrategy.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 0x10]
	bool Apply(AirDropPlane* Plane);// 0x5d4d190
<----------Generated by SSpawner v1.0.4---------->


Class: AirDropBoxActor.LuaActor.Actor.Object
	float DroppingSpeed;//[Offset: 0x4bc, Size: 0x4]
	bool bIsHitTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	float HitGroundHeight;//[Offset: 0x4c4, Size: 0x4]
	float SmokeStartScaleDistance;//[Offset: 0x4c8, Size: 0x4]
	float SmokeEndScaleDistance;//[Offset: 0x4cc, Size: 0x4]
	float SmokeStartScaleValue;//[Offset: 0x4d0, Size: 0x4]
	float SmokeEndScaleValue;//[Offset: 0x4d4, Size: 0x4]
	float PrevSmokeCurrentDistanceScaler;//[Offset: 0x4d8, Size: 0x4]
	bool bIsShowingSmoke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 0x1]
	float ForceUpdateLocInterval;//[Offset: 0x4e0, Size: 0x4]
	float ForceUpdateLocDissqThreshold;//[Offset: 0x4e4, Size: 0x4]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x4e8, Size: 0x8]
	FName WrapperBoxName;//[Offset: 0x4f0, Size: 0x8]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x4f8, Size: 0x8]
	int AirDropBoxId;//[Offset: 0x500, Size: 0x4]
	int DropID;//[Offset: 0x504, Size: 0x4]
	float OBUIShowDistance;//[Offset: 0x508, Size: 0x4]
	bool bIsSuperAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 0x1]
	FString FestivalAirDropBoxMesh;//[Offset: 0x510, Size: 0x10]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	AirDropResource NormalAirdropBoxResource;//[Offset: 0x528, Size: 0xa0]
	AirDropResource SuperAirdropBoxResource;//[Offset: 0x5c8, Size: 0xa0]
	enum DropType;//[Offset: 0x669, Size: 0x1]
	uint32 SummonerKey;//[Offset: 0x66c, Size: 0x4]
	bool bIsAirOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1]
	bool bIsEmptyAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 0x1]
	bool bIsBoxHitTheGroundCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x672, Size: 0x1]
	float ServerDroppingSpeedCpp;//[Offset: 0x674, Size: 0x4]
	bool bRecoverSpeedCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1]
	bool bAirDropWrapperDynamicRegionNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 0x1]
	PlayerTombBox* DeadTombBox;//[Offset: 0x680, Size: 0x8]
	float RotationRate;//[Offset: 0x688, Size: 0x4]
	delegate OnVelocityChanged;//[Offset: 0x690, Size: 0x10]
	RepMovementKeyLoc RepMovementKeyLoc;//[Offset: 0x6a0, Size: 0x28]
	Actor*[] SwimObjectArray;//[Offset: 0x6d0, Size: 0x10]
	float CheckWaterOverlapInterval;//[Offset: 0x6e0, Size: 0x4]
	float CheckWaterOverlapElapsedCpp;//[Offset: 0x6e4, Size: 0x4]
	bool IsNeedCheckFallGroundCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 0x1]
	ProjectileMovementComponent* MoveComp;//[Offset: 0x7c8, Size: 0x8]
	RotatingMovementComponent* RotMoveComp;//[Offset: 0x7d0, Size: 0x8]
	StaticMeshComponent* RootBoxComp;//[Offset: 0x7d8, Size: 0x8]
	Vector AttachedRelLoc;//[Offset: 0x7e8, Size: 0xc]
	Actor* AttachedActor;//[Offset: 0x7f8, Size: 0x8]
	bool bNeedForceUpdateLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 0x1]
	void SetVelocity(out const Vector NewVelocity);// 0x5d4c0dc
	void SetBuoyancyUpdatedComponent(SceneComponent* UpdatedComponent);// 0x5d4c060
	void ServerSetAttachedActor(Actor* InAttachTarget);// 0x5d4bfe4
	void PostSpawnTombBox(PlayerTombBox* TombBox);// 0x5d4bf60
	void OnVelocityChangeDelegate__DelegateSignature(out const Vector Velocity, float Speed);// 0x70644c4
	void OnRep_ServerDroppingSpeedCpp();// 0x5d4bf4c
	void OnRep_IsShowingSmoke();// 0x5d4bf30
	void OnRep_IsBoxHitTheGroundCpp();// 0x5d4bf1c
	void OnRep_bUseFestivalAirDropBox();// 0x5d4bf08
	void OnRep_BoxId();// 0x5d4bef4
	void OnRep_AttachedRelLoc();// 0x5d4bee0
	void OnRep_AttachedActor();// 0x5d4becc
	void OnRep_AirdropTypeChange();// 0x5d4beb8
	void GenerateWrappersBoxByDropID(int InDropID);// 0x5d4be3c
	void GenerateWrappersBox(out const AirDropBoxGenerateWrapperItemData[] DataList, Vector BoxLoc);// 0x5d4bd38
	bool ForceUpdateAirdropLoc();// 0x5d4bd00
	void DistanceScalerChangedEvent(float Scale);// 0x70644c4
	void ChangeNetCullDistance(float Distance);// 0x5d4bc84
	void ChangeFestivalAirDropBoxMesh();// 0x70644c4
	void ChangeAirdropAppearance();// 0x70644c4
	void BPOnSetAttachedActor(Actor* InAttachTarget);// 0x5d4bc00
	void BP_OnRep_IsBoxHitTheGroundCpp();// 0x70644c4
	void BoxReachGround();// 0x70644c4
	void AsyncLoadBoxResourceFinish();// 0x70644c4
	void AsyncLoadBoxResource(out const AirDropResource BoxResource);// 0x5d4baf8
	void AddToAIList();// 0x5d4bae4
<----------Generated by SSpawner v1.0.4---------->


Class: AirDropResource
	StaticMesh* SoftAirdropBoxMesh;//[Offset: 0x0, Size: 0x28]
	StaticMesh* SoftAirdropParachuteMesh;//[Offset: 0x28, Size: 0x28]
	ParticleSystem* SoftAirdropSmoke;//[Offset: 0x50, Size: 0x28]
	ParticleSystem* SoftAirdropFlash;//[Offset: 0x78, Size: 0x28]
<----------Generated by SSpawner v1.0.4---------->


